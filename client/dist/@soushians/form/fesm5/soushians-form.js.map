{
  "version": 3,
  "file": "soushians-form.js",
  "sources": [
    "ng://@soushians/form/projects/soushians/form/src/lib/form.module.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/main-container/main-container.component/main-container.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/list/form-list/form-list.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/list/form-list-container/form-list.container.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/edit/edit-form/edit-form.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/add/index.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/add/add-form.effects.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/add/add-form/add-form.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/edit/edit-form-container/edit-form-container.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/add/add-form-container/add-form-container.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/add/add-form.actions.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/edit/edit-form.actions.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/view/form-view/form-view.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/view/form-controls/text/text.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/view/form-controls/number/number.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/view/form-controls/table/table.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/view/form-controls/color/color.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/view/form-controls/email/email.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/view/form-controls/checkbox/checkbox.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/add/form-control/form-control.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/add/form-array/form-array.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/add/form-group/form-group.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/view/form-controls/select/select.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/main-container/main-container.reducers.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/list/list.reducers.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/list/list.actions.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/services/form-utility.service.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/services/form.service.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/models/form-schema.model.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/models/field-config.model.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/models/form-field-validator.model.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/models/form-list.api-model.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/models/edit-form.api-model.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/models/add-form.api-model.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/services/form-configuration.service.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/form.config.ts"
  ],
  "sourcesContent": [
    "import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\r\nimport {\r\n\tMatExpansionModule,\r\n\tMatSnackBarModule,\r\n\tMatIconModule,\r\n\tMatButtonModule,\r\n\tMatCardModule,\r\n\tMatSelectModule,\r\n\tMatInputModule,\r\n\tMatFormFieldModule,\r\n\tMatTabsModule,\r\n\tMatRadioModule,\r\n\tMatSlideToggleModule,\r\n\tMatDividerModule,\r\n\tMatCheckbox,\r\n\tMatCheckboxModule,\r\n\tMatTableModule\r\n} from \"@angular/material\";\r\nimport { StoreModule } from \"@ngrx/store\";\r\nimport { StoreDevtoolsModule } from \"@ngrx/store-devtools\";\r\nimport { EffectsModule, mergeEffects } from \"@ngrx/effects\";\r\n\r\nimport { FormModuleConfig, MODULE_CONFIG_TOKEN, MODULE_DEFAULT_CONFIG } from \"./form.config\";\r\nimport { FormReducers } from \"./main-container/main-container.reducers\";\r\nimport { SelectComponent } from \"./view/form-controls/select/select.component\";\r\nimport { FormGroupComponent } from \"./add/form-group/form-group.component\";\r\nimport { FormArrayComponent } from \"./add/form-array/form-array.component\";\r\nimport { FormControlComponent } from \"./add/form-control/form-control.component\";\r\nimport { FormViewComponent, DynamicFieldDirective } from \"./view/form-view/form-view.component\";\r\nimport { TextComponent } from \"./view/form-controls/text/text.component\";\r\nimport { CheckboxComponent } from \"./view/form-controls/checkbox/checkbox.component\";\r\nimport { EmailComponent } from \"./view/form-controls/email/email.component\";\r\nimport { ColorComponent } from \"./view/form-controls/color/color.component\";\r\nimport { NumberComponent } from \"./view/form-controls/number/number.component\";\r\nimport { TableComponent } from \"./view/form-controls/table/table.component\";\r\nimport { EditFormContainerComponent } from \"./edit/edit-form-container/edit-form-container.component\";\r\nimport { EditFormComponent } from \"./edit/edit-form/edit-form.component\";\r\nimport { FormListContainerComponent } from \"./list/form-list-container/form-list.container.component\";\r\nimport { FormListComponent } from \"./list/form-list/form-list.component\";\r\nimport { AddFormContainerComponent } from \"./add/add-form-container/add-form-container.component\";\r\nimport { MainContainerComponent } from \"./main-container/main-container.component/main-container.component\";\r\nimport { AddFormComponent } from \"./add/add-form/add-form.component\";\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tHttpClientModule,\r\n\t\tFormsModule,\r\n\t\tRouterModule,\r\n\t\tCommonModule,\r\n\t\tMatExpansionModule,\r\n\t\tMatSnackBarModule,\r\n\t\tMatIconModule,\r\n\t\tMatButtonModule,\r\n\t\tMatCardModule,\r\n\t\tMatCheckboxModule,\r\n\t\tMatTableModule,\r\n\t\tMatSelectModule,\r\n\t\tMatInputModule,\r\n\t\tMatFormFieldModule,\r\n\t\tMatTabsModule,\r\n\t\tMatDividerModule,\r\n\t\tFlexLayoutModule,\r\n\t\tMatRadioModule,\r\n\t\tMatSlideToggleModule,\r\n\t\tReactiveFormsModule\r\n\t],\r\n\tdeclarations: [\r\n\t\tEditFormContainerComponent,\r\n\t\tEditFormComponent,\r\n\t\tFormListContainerComponent,\r\n\t\tFormListComponent,\r\n\t\tAddFormContainerComponent,\r\n\t\tMainContainerComponent,\r\n\t\tAddFormComponent,\r\n\t\tFormGroupComponent,\r\n\t\tFormArrayComponent,\r\n\t\tFormControlComponent,\r\n\t\tFormViewComponent,\r\n\t\tDynamicFieldDirective,\r\n\t\tSelectComponent,\r\n\t\tCheckboxComponent,\r\n\t\tEmailComponent,\r\n\t\tColorComponent,\r\n\t\tTextComponent,\r\n\t\tNumberComponent,\r\n\t\tTableComponent\r\n\t\t// NgsFormSelectorComponent\r\n\t],\r\n\tentryComponents: [\r\n\t\tSelectComponent,\r\n\t\tCheckboxComponent,\r\n\t\tEmailComponent,\r\n\t\tColorComponent,\r\n\t\tTextComponent,\r\n\t\tNumberComponent,\r\n\t\tTableComponent\r\n\t],\r\n\texports: [ FormViewComponent ]\r\n\t// exports: [ FormViewComponent, NgsFormSelectorComponent ]\r\n})\r\nexport class NgsFormModule {\r\n\tstatic forRoot(config?: FormModuleConfig): ModuleWithProviders {\r\n\t\treturn {\r\n\t\t\tngModule: RootNgsFormModule,\r\n\t\t\tproviders: [ { provide: MODULE_CONFIG_TOKEN, useValue: config } ]\r\n\t\t};\r\n\t}\r\n}\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tNgsFormModule,\r\n\t\tStoreModule.forFeature(\"form\", FormReducers)\r\n\t\t// EffectsModule.forFeature([ AddFormEffects, EditFormEffects, FormsListEffects ]),\r\n\t\t// RoutingModule\r\n\t],\r\n\texports: [ NgsFormModule ]\r\n})\r\nexport class RootNgsFormModule {}\r\n",
    "import { Component, OnInit } from \"@angular/core\";\r\n\r\nimport * as MainContainerReducer from \"../../main-container/main-container.reducers\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { FormSchemaModel } from \"../../models\";\r\n\r\n@Component({\r\n\ttemplate: \"<router-outlet></router-outlet>\"\r\n})\r\nexport class MainContainerComponent {\r\n\tconstructor(private route: ActivatedRoute, private store: Store<MainContainerReducer.MainContainerState>) {}\r\n}\r\n",
    "import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\nimport { FormGroup, FormControl } from \"@angular/forms\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { FormSchemaModel, EditFormApiModel } from \"../../models\";\r\n\r\nimport { MainContainerState, FormReducers } from \"../../main-container\";\r\n\r\n@Component({\r\n\tselector: \"form-list\",\r\n\ttemplate: `<div fxLayout=\"row\" fxLayoutWrap fxLayoutAlign=\"center center\" >\r\n    <mat-card class=\"cards-item\" *ngFor=\"let item of (data$ | async)\" fxFlex=\"51\">\r\n      <h3>\r\n        <a [routerLink]=\"['edit' ,  item._id]\">\r\n          <mat-icon aria-label=\"edit form\">edit</mat-icon>\r\n        </a>\r\n        {{item.name}}\r\n      </h3>\r\n  </mat-card>\r\n</div>`\r\n})\r\nexport class FormListComponent {\r\n\t@Input(\"data\") data$: Observable<FormSchemaModel[]>;\r\n}\r\n",
    "import { Component, OnInit } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { MainContainerState, FormReducers } from \"../../main-container\";\r\nimport { FormService } from \"../../services\";\r\nimport { FormSchemaModel } from \"../../models\";\r\nimport { FormsListAction } from \"../../list/list.actions\";\r\n\r\n@Component({\r\n\ttemplate: `<form-list\r\n\t\t\t\t\t[data]=\"data$\">\r\n\t\t\t\t</form-list>`\r\n})\r\nexport class FormListContainerComponent implements OnInit {\r\n\tdata$: Observable<FormSchemaModel[]>;\r\n\tconstructor(public store: Store<MainContainerState>) {\r\n\t\tthis.data$ = this.store.select(state => state.form.list.data);\r\n\t}\r\n\tngOnInit() {\r\n\t\tthis.store.dispatch(new FormsListAction());\r\n\t}\r\n}\r\n",
    "import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\n\r\nimport { FormSchemaModel, EditFormApiModel } from \"../../models\";\r\nimport { FormService } from \"../../services\";\r\nimport { AddFormComponent } from \"../../add\";\r\n\r\n@Component({\r\n\tselector: \"edit-form\",\r\n\ttemplate: `<div fxLayout=\"row\" *ngIf=\"schema\">\r\n  <div [fxFlex]=\"50\" *ngIf=\"formGroup\">\r\n    <form [formGroup]=\"formGroup\">\r\n      <mat-card>\r\n        <mat-card-title>ایجاد فرم جدید</mat-card-title>\r\n        <mat-card-content>\r\n          <mat-form-field>\r\n            <input type=\"text\" matInput (change)=\"changed()\" placeholder=\"نام فرم\" formControlName=\"name\">\r\n          </mat-form-field>\r\n          <!-- <div class=\"button-row\">\r\n                <button mat-button color=\"primary\" (click)=\"addFormGroup(schema.form)\">Add form group</button>\r\n                <button mat-button color=\"primary\" (click)=\"addFormArray(schema.form)\">Add form array</button>\r\n                <button mat-button color=\"primary\" (click)=\"addFormControl(schema.form)\">Add form control</button>\r\n              </div> -->\r\n        </mat-card-content>\r\n      </mat-card>\r\n      <mat-card>\r\n        <mat-card-content>\r\n          <div [ngSwitch]=\"schema.form?.type\">\r\n            <app-form-group *ngSwitchCase=\"'group'\" [schema]=\"schema.form\" noHeader=\"true\" (changes)=\"changed()\"></app-form-group>\r\n            <app-form-array *ngSwitchCase=\"'array'\" [schema]=\"schema.form\" (changes)=\"changed()\"></app-form-array>\r\n          </div>\r\n        </mat-card-content>\r\n        <mat-card-actions>\r\n          <!-- <button mat-raised-button color=\"primary\" (click)=\"$any(form).generate(schema)\">ایجاد فرم</button> -->\r\n          <button mat-raised-button color=\"primary\" (click)=\"emit()\" type=\"submit\">ثبت</button>\r\n        </mat-card-actions>\r\n\r\n        <div [formGroup]=\"$any(formGroup.controls.events).controls.accept\">\r\n          <mat-slide-toggle (change)=\"changed()\" formControlName=\"show\">نمایش تایید</mat-slide-toggle>\r\n          <mat-form-field>\r\n            <input type=\"text\" (change)=\"changed()\" matInput placeholder=\"متن تایید\" formControlName=\"text\">\r\n          </mat-form-field>\r\n        </div>\r\n        <div [formGroup]=\"$any(formGroup.controls.events).controls.cancel\">\r\n          <mat-slide-toggle (change)=\"changed()\" formControlName=\"show\">نمایش انصراف</mat-slide-toggle>\r\n          <mat-form-field>\r\n            <input type=\"text\" (change)=\"changed()\" matInput placeholder=\"متن انصراف\" formControlName=\"text\">\r\n          </mat-form-field>\r\n        </div>\r\n\r\n      </mat-card>\r\n    </form>\r\n  </div>\r\n  <div [fxFlex]=\"50\">\r\n    <ngs-form-view [local]='true' [id]=\"schema._id\"></ngs-form-view>\r\n  </div>\r\n</div>`\r\n})\r\nexport class EditFormComponent extends AddFormComponent {\r\n\temit() {\r\n\t\tif (!this.formGroup.valid) return;\r\n\t\treturn this.submited.emit(this.formGroup.value);\r\n\t}\r\n}\r\n",
    "export * from \"./add-form\";\r\nexport * from \"./add-form-container\";\r\nexport * from \"./form-array\";\r\nexport * from \"./form-control\";\r\nexport * from \"./form-group\";\r\nexport * from \"./add-form.actions\";\r\nexport * from \"./add-form.effects\";\r\n// export * from \"./add-form.reducer\";\r\n",
    "import \"rxjs/add/operator/map\";\r\nimport \"rxjs/add/operator/mergeMap\";\r\nimport \"rxjs/add/operator/switchMap\";\r\n\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { of } from \"rxjs/observable/of\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { FormService } from \"../services\";\r\nimport { AddFormApiModel } from \"../models\";\r\nimport { AddFormActionTypes, AddFormStartAction, AddFormSucceedAction, AddFormFailedAction } from \"./add-form.actions\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\n\r\n@Injectable()\r\nexport class AddFormEffects {\r\n\tconstructor(private actions$: Actions<any>, private router: Router, private service: FormService) { }\r\n\r\n\t@Effect()\r\n\tAddForm$ = this.actions$\r\n\t\t.ofType(AddFormActionTypes.ADD_FORM)\r\n\t\t.pipe(\r\n\t\t\tmap(action => action.payload),\r\n\t\t\tmap((data) => new AddFormStartAction(data))\r\n\t\t);\r\n\r\n\t@Effect()\r\n\tAddFormStart$ = this.actions$\r\n\t\t.ofType(AddFormActionTypes.ADD_FORM_START)\r\n\t\t.pipe(\r\n\t\t\tmap(action => action.payload),\r\n\t\t\tswitchMap((data: AddFormApiModel.Request) => this.service.add(data)),\r\n\t\t\tmap((res) => new AddFormSucceedAction()),\r\n\t\t\tcatchError(() => Observable.of(new AddFormFailedAction()))\r\n\t\t);\r\n}\r\n",
    "import { Component, OnInit, EventEmitter, Output, Input } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\n\r\nimport { FormSchemaModel, AddFormApiModel, FieldConfig } from \"../../models\";\r\n\r\n@Component({\r\n\tselector: \"ngs-form-add\",\r\n\ttemplate: `<div fxLayout=\"row\" *ngIf=\"schema\">\r\n  <div [fxFlex]=\"50\" *ngIf=\"formGroup\">\r\n    <form [formGroup]=\"formGroup\">\r\n      <mat-card>\r\n        <mat-card-title>ایجاد فرم جدید</mat-card-title>\r\n        <mat-card-content>\r\n          <mat-form-field>\r\n            <input type=\"text\" matInput (change)=\"changed()\" placeholder=\"نام فرم\" formControlName=\"name\">\r\n          </mat-form-field>\r\n          <!-- <div class=\"button-row\">\r\n                <button mat-button color=\"primary\" (click)=\"addFormGroup(schema.form)\">Add form group</button>\r\n                <button mat-button color=\"primary\" (click)=\"addFormArray(schema.form)\">Add form array</button>\r\n                <button mat-button color=\"primary\" (click)=\"addFormControl(schema.form)\">Add form control</button>\r\n              </div> -->\r\n        </mat-card-content>\r\n      </mat-card>\r\n      <mat-card>\r\n        <mat-card-content>\r\n          <div [ngSwitch]=\"schema.form?.type\">\r\n            <app-form-group *ngSwitchCase=\"'group'\" [schema]=\"schema.form\" noHeader=\"true\" (changes)=\"changed()\"></app-form-group>\r\n            <app-form-array *ngSwitchCase=\"'array'\" [schema]=\"schema.form\" (changes)=\"changed()\"></app-form-array>\r\n          </div>\r\n        </mat-card-content>\r\n        <mat-card-actions>\r\n          <!-- <button mat-raised-button color=\"primary\" (click)=\"form.generate(schema)\">ایجاد فرم</button> -->\r\n          <button mat-raised-button color=\"primary\" (click)=\"emit()\" type=\"submit\">ثبت</button>\r\n        </mat-card-actions>\r\n\r\n        <div [formGroup]=\"$any(formGroup.controls.events).controls.accept\">\r\n          <mat-slide-toggle (change)=\"changed()\" formControlName=\"show\">نمایش تایید</mat-slide-toggle>\r\n          <mat-form-field>\r\n            <input type=\"text\" (change)=\"changed()\" matInput placeholder=\"متن تایید\" formControlName=\"text\">\r\n          </mat-form-field>\r\n        </div>\r\n        <div [formGroup]=\"$any(formGroup.controls.events).controls.cancel\">\r\n          <mat-slide-toggle (change)=\"changed()\" formControlName=\"show\">نمایش انصراف</mat-slide-toggle>\r\n          <mat-form-field>\r\n            <input type=\"text\" (change)=\"changed()\" matInput placeholder=\"متن انصراف\" formControlName=\"text\">\r\n          </mat-form-field>\r\n        </div>\r\n\r\n      </mat-card>\r\n    </form>\r\n  </div>\r\n  <div [fxFlex]=\"50\">\r\n    <ngs-form-view [local]='true' [id]=\"schema._id\"></ngs-form-view>\r\n  </div>\r\n</div>`\r\n})\r\nexport class AddFormComponent {\r\n\t@Input() schema: FormSchemaModel;\r\n\t@Input() formGroup = AddFormApiModel.Request.formGroup;\r\n\t@Output() submited = new EventEmitter();\r\n\t@Output() changes = new EventEmitter();\r\n\r\n\temit() {\r\n\t\tthis.formGroup.patchValue({ form: this.schema.form });\r\n\t\tthis.submited.emit(this.formGroup.value);\r\n\t}\r\n\tchanged() {\r\n\t\tthis.formGroup.patchValue({ form: this.schema.form });\r\n\t\tthis.changes.emit(this.formGroup.value);\r\n\t}\r\n\tchangeOrder($event) {\r\n\t\tdebugger;\r\n\t}\r\n\r\n\taddFormGroup(root: FieldConfig) {\r\n\t\tconst group = new FieldConfig(\"group\");\r\n\t\tgroup.fields = [];\r\n\t\troot.fields.push(group);\r\n\t\treturn group;\r\n\t}\r\n\taddFormArray(root: FieldConfig) {\r\n\t\tconst array = new FieldConfig(\"array\");\r\n\t\tarray.fields = [];\r\n\t\troot.fields.push(array);\r\n\t\treturn array;\r\n\t}\r\n\taddFormControl(root: FieldConfig) {\r\n\t\tconst control = new FieldConfig(\"control\");\r\n\t\troot.fields.push(control);\r\n\t\treturn control;\r\n\t}\r\n}\r\n",
    "import { Component, OnInit } from \"@angular/core\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { MainContainerState } from \"../../main-container/main-container.reducers\";\r\nimport { EditFormApiModel } from \"../../models\";\r\nimport { FormService } from \"../../services/form.service\";\r\nimport { EditFormAction } from \"../../edit/edit-form.actions\";\r\nimport { AddFormContainerComponent } from \"../../add/add-form-container\";\r\nimport { GetFormSchemaAction } from \"../../list/list.actions\";\r\n\r\n@Component({\r\n\ttemplate: `<edit-form\r\n\t\t\t\t\t[formGroup]=\"formGroup\"\r\n\t\t\t\t\t[schema]=\"schema\"\r\n\t\t\t\t\t(changes)=\"update_schema($event)\"\r\n\t\t\t\t\t(submited)=\"update($event)\">\r\n\t\t\t\t</edit-form>`\r\n})\r\nexport class EditFormContainerComponent extends AddFormContainerComponent {\r\n\tformGroup = EditFormApiModel.Request.formGroup;\r\n\tconstructor(public service: FormService, private route: ActivatedRoute, public store: Store<MainContainerState>) {\r\n\t\tsuper(store, service);\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\tthis.route.params\r\n\t\t\t.map(params => params[\"_id\"])\r\n\t\t\t.subscribe(id => this.store.dispatch(new GetFormSchemaAction(id)));\r\n\r\n\t\tthis.route.params\r\n\t\t\t.map(params => params[\"_id\"])\r\n\t\t\t.switchMap(id => this.service.selectFormById(id))\r\n\t\t\t.filter(data => data != null)\r\n\t\t\t.take(1)\r\n\t\t\t.subscribe(formSchema => {\r\n\t\t\t\tdebugger;\r\n\t\t\t\tthis.schema = formSchema;\r\n\t\t\t\tthis.formGroup.patchValue(formSchema);\r\n\t\t\t});\r\n\t}\r\n\r\n\tupdate(data) {\r\n\t\tthis.store.dispatch(new EditFormAction(data));\r\n\t}\r\n}\r\n",
    "import { Component, OnInit } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { MainContainerState } from \"../../main-container/main-container.reducers\";\r\nimport { FormSchemaModel } from \"../../models\";\r\nimport { AddFormAction } from \"../add-form.actions\";\r\nimport { AddFormSchemaAction, UpdateFormSchemaAction } from \"../../list/list.actions\";\r\nimport { FormService } from \"../../services/form.service\";\r\n\r\n@Component({\r\n\ttemplate: `<ngs-form-add \r\n\t\t\t\t\t[schema]=\"schema\" \r\n\t\t\t\t\t(changes)=\"update_schema($event)\" \r\n\t\t\t\t\t(submited)=add($event)\r\n\t\t\t\t></ngs-form-add>`\r\n})\r\nexport class AddFormContainerComponent implements OnInit {\r\n\tschema: FormSchemaModel;\r\n\tconstructor(public store: Store<MainContainerState>, public service: FormService) {}\r\n\tngOnInit() {\r\n\t\tdebugger;\r\n\t\tthis.schema = new FormSchemaModel();\r\n\t\tthis.schema.init();\r\n\t\tthis.store.dispatch(new AddFormSchemaAction(this.schema));\r\n\t}\r\n\tadd(form: FormSchemaModel) {\r\n\t\tthis.store.dispatch(new AddFormAction(form));\r\n\t}\r\n\tupdate_schema(form: FormSchemaModel) {\r\n\t\tthis.store.dispatch(new UpdateFormSchemaAction(form));\r\n\t}\r\n}\r\n",
    "import { Action } from \"@ngrx/store\";\r\n\r\nimport { FormSchemaModel } from \"../models\";\r\n\r\nexport enum AddFormActionTypes {\r\n\tADD_FORM = \"[FORM][ADD] ADD_FORM_PROFILE\",\r\n\tADD_FORM_START = \"[FORM][ADD] ADD_FORM_START\",\r\n\tADD_FORM_SUCCEED = \"[FORM][ADD] ADD_FORM_SUCCEED\",\r\n\tADD_FORM_FAILED = \"[FORM][ADD] ADD_FORM_FAILED\"\r\n}\r\n\r\nexport class AddFormAction implements Action {\r\n\treadonly type = AddFormActionTypes.ADD_FORM;\r\n\tconstructor(public payload: FormSchemaModel) {}\r\n}\r\nexport class AddFormStartAction implements Action {\r\n\treadonly type = AddFormActionTypes.ADD_FORM_START;\r\n\tconstructor(public payload: FormSchemaModel) {}\r\n}\r\nexport class AddFormSucceedAction implements Action {\r\n\treadonly type = AddFormActionTypes.ADD_FORM_SUCCEED;\r\n}\r\nexport class AddFormFailedAction implements Action {\r\n\treadonly type = AddFormActionTypes.ADD_FORM_FAILED;\r\n}\r\n\r\nexport type AddFormActions = AddFormAction | AddFormStartAction | AddFormSucceedAction | AddFormFailedAction;\r\n",
    "import { Action } from \"@ngrx/store\";\r\n\r\nimport { FormSchemaModel } from \"../models\";\r\n\r\nexport enum EditFormActionTypes {\r\n\tEDIT_FORM = \"[FORM][EDIT] EDIT_FORM\",\r\n\tEDIT_FORM_START = \"[FORM][EDIT] EDIT_FORM_START\",\r\n\tEDIT_FORM_SUCCEED = \"[FORM][EDIT] EDIT_FORM_SUCCEED\",\r\n\tEDIT_FORM_FAILED = \"[FORM][EDIT] EDIT_FORM_FAILED\"\r\n}\r\n\r\nexport class EditFormAction implements Action {\r\n\treadonly type = EditFormActionTypes.EDIT_FORM;\r\n\tconstructor(public payload: FormSchemaModel) {}\r\n}\r\nexport class EditFormStartAction implements Action {\r\n\treadonly type = EditFormActionTypes.EDIT_FORM_START;\r\n\tconstructor(public payload: FormSchemaModel) {}\r\n}\r\nexport class EditFormSucceedAction implements Action {\r\n\treadonly type = EditFormActionTypes.EDIT_FORM_SUCCEED;\r\n\tconstructor(public payload: FormSchemaModel) {}\r\n}\r\nexport class EditFormFailedAction implements Action {\r\n\treadonly type = EditFormActionTypes.EDIT_FORM_FAILED;\r\n}\r\n\r\nexport type EditFormActions = EditFormAction | EditFormStartAction | EditFormSucceedAction | EditFormFailedAction;\r\n",
    "import {\r\n\tComponent,\r\n\tOnInit,\r\n\tViewChild,\r\n\tViewContainerRef,\r\n\tComponentFactoryResolver,\r\n\tCompiler,\r\n\tReflectiveInjector,\r\n\tNgModule,\r\n\tInput,\r\n\tOutput,\r\n\tEventEmitter,\r\n\tOnChanges,\r\n\tDirective,\r\n\tType,\r\n\tOnDestroy\r\n} from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { FormControl, FormGroup, FormArray, AbstractControl, Validators } from \"@angular/forms\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\nimport { Subject } from \"rxjs\";\r\nimport { takeUntil } from \"rxjs/operators\";\r\nimport { ComponentRef } from \"@angular/core/src/linker/component_factory\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport {\r\n\tSelectComponent,\r\n\tEmailComponent,\r\n\tColorComponent,\r\n\tCheckboxComponent,\r\n\tTextComponent,\r\n\tTableComponent\r\n} from \"../form-controls\";\r\nimport { FormService } from \"../../services/form.service\";\r\nimport { MainContainerState } from \"../../main-container/main-container.reducers\";\r\nimport { GetFormSchemaAction } from \"../../list/list.actions\";\r\nimport { Field, FieldConfig, FormSchemaModel } from \"../../models\";\r\n\r\n@Component({\r\n\tselector: \"ngs-form-view\",\r\n\ttemplate: `<form *ngIf=\"formGroupCreated\" class=\"dynamic-form\" [formGroup]=\"formGroup\" (ngSubmit)=\"accepted()\">\r\n  <mat-card>\r\n    <mat-card-content fxLayout=\"row wrap\" fxLayoutGap=\"25px\">\r\n      <div  *ngFor=\"let field of (schema$ | async)?.form.fields;\" [fxFlex]=\"field.width * 10\">\r\n        <ng-container dynamicField  [config]=\"field\" [group]=\"formGroup\"></ng-container>\r\n      </div>\r\n    </mat-card-content>\r\n    <mat-card-actions>\r\n      <button fxFlex type=\"submit\" *ngIf=\"(schema$ | async)?.events.accept.show\" mat-raised-button color=\"primary\">{{(schema$ | async)?.events.accept.text}}</button>\r\n      <button fxFlex type=\"button\" *ngIf=\"(schema$ | async)?.events.cancel.show\" (click)=\"cancel.emit()\" mat-raised-button color=\"primary\">{{(schema$ | async)?.events.cancel.text}</button>\r\n    </mat-card-actions>\r\n  </mat-card>\r\n</form>`\r\n})\r\nexport class FormViewComponent implements OnDestroy {\r\n\tunsubscribe = new Subject<void>();\r\n\t@Output() accept = new EventEmitter<FormGroup>();\r\n\t@Output() cancel = new EventEmitter<FormGroup>();\r\n\t@Input() local;\r\n\t@Input()\r\n\tset id(id: string) {\r\n\t\tif (!this.local) this.store.dispatch(new GetFormSchemaAction(id));\r\n\t\tthis.service\r\n\t\t\t.selectFormById(id)\r\n\t\t\t.pipe(takeUntil(this.unsubscribe))\r\n\t\t\t.subscribe(schema => this.schema$.next(schema));\r\n\t}\r\n\t@Input()\r\n\tset schema(schema: FormSchemaModel) {\r\n\t\tthis.schema$.next(schema);\r\n\t}\r\n\t_id: string;\r\n\tformGroup: FormGroup;\r\n\tformGroupCreated = false;\r\n\tschema$: BehaviorSubject<FormSchemaModel>;\r\n\r\n\tconstructor(\r\n\t\tprivate service: FormService,\r\n\t\tprivate compiler: Compiler,\r\n\t\tprivate resolver: ComponentFactoryResolver,\r\n\t\tprivate store: Store<MainContainerState>\r\n\t) {\r\n\t\tthis.schema$ = new BehaviorSubject(undefined);\r\n\t\tthis.schema$.pipe(takeUntil(this.unsubscribe)).subscribe(schema => {\r\n\t\t\tif (!schema) return;\r\n\t\t\tthis.formGroup = this.createFrom(schema.form) as FormGroup;\r\n\t\t\tif (!schema.form.name) return;\r\n\t\t\tthis.formGroupCreated = true;\r\n\t\t});\r\n\t}\r\n\tngOnDestroy() {\r\n\t\tthis.unsubscribe.next();\r\n\t\tthis.unsubscribe.complete();\r\n\t}\r\n\tgenerate(schema: FormSchemaModel) {\r\n\t\tthis.schema$.next(schema);\r\n\t}\r\n\r\n\tcreateFrom(data: FieldConfig, parentPath = \"\"): AbstractControl {\r\n\t\tif (data.type == \"control\") {\r\n\t\t\tif (data.parentType == \"array\") {\r\n\t\t\t\t// parentPath = `${parentPath}.controls[${(data as FieldConfig).name}]`;\r\n\t\t\t} else if (data.parentType == \"group\") {\r\n\t\t\t\tvar formGroupPath = parentPath;\r\n\t\t\t\tparentPath = `${parentPath}.controls.${(data as FieldConfig).name}`;\r\n\t\t\t}\r\n\t\t\tvar validators = [];\r\n\t\t\tif (data.validator.required.active) {\r\n\t\t\t\tvalidators.push(Validators.required);\r\n\t\t\t}\r\n\t\t\tif (data.validator.minlength.active) {\r\n\t\t\t\tvalidators.push(Validators.minLength(data.validator.minlength.value));\r\n\t\t\t}\r\n\t\t\tif (data.validator.email.active) {\r\n\t\t\t\tvalidators.push(Validators.email);\r\n\t\t\t}\r\n\t\t\tvar ctr = new FormControl(data.value, validators);\r\n\t\t\t(ctr as any).schema = data;\r\n\t\t\t(ctr as any).schema.path = parentPath;\r\n\t\t\t(ctr as any).schema.formGroupPath = formGroupPath;\r\n\t\t\treturn ctr;\r\n\t\t} else if (data.type == \"group\") {\r\n\t\t\tvar formGroup = new FormGroup({});\r\n\t\t\tif (data.parentType == undefined) {\r\n\t\t\t\tparentPath = (data as FieldConfig).name;\r\n\t\t\t} else if (data.parentType == \"array\") {\r\n\t\t\t\tparentPath = `${parentPath}.controls[${(data as FieldConfig).name}]`;\r\n\t\t\t} else if (data.parentType == \"group\") {\r\n\t\t\t\tparentPath = `${parentPath}.controls.${(data as FieldConfig).name}`;\r\n\t\t\t}\r\n\r\n\t\t\t(formGroup as any).schema = data;\r\n\t\t\t(formGroup as any).schema.path = parentPath;\r\n\t\t\tdata.fields.forEach(item => {\r\n\t\t\t\titem.parentType = \"group\";\r\n\t\t\t\tformGroup.addControl(item.name, this.createFrom(item, parentPath));\r\n\t\t\t});\r\n\t\t\treturn formGroup;\r\n\t\t} else {\r\n\t\t\tvar formArray: FormArray = new FormArray([]);\r\n\t\t\tparentPath =\r\n\t\t\t\tparentPath == \"\" ? (data as FieldConfig).name : `${parentPath}.controls.${(data as FieldConfig).name}`;\r\n\t\t\t(formArray as any).schema = data;\r\n\t\t\t(formArray as any).schema.path = parentPath;\r\n\t\t\tdata.fields.forEach((item, idx) => {\r\n\t\t\t\titem.parentType = \"array\";\r\n\t\t\t\titem.name = idx.toString();\r\n\t\t\t\tformArray.controls.push(this.createFrom(item, parentPath));\r\n\t\t\t});\r\n\t\t\treturn formArray;\r\n\t\t}\r\n\t}\r\n\r\n\taccepted() {\r\n\t\tthis.accept.emit(this.formGroup);\r\n\t}\r\n\tcanceled() {\r\n\t\tthis.cancel.emit(this.formGroup);\r\n\t}\r\n}\r\n\r\nconst components: { [type: string]: Type<Field> } = {\r\n\tcheckbox: CheckboxComponent,\r\n\ttext: TextComponent,\r\n\ttable: TableComponent,\r\n\tcolor: ColorComponent,\r\n\temail: EmailComponent,\r\n\tselect: SelectComponent\r\n};\r\n\r\n@Directive({\r\n\tselector: \"[dynamicField]\"\r\n})\r\nexport class DynamicFieldDirective implements Field, OnChanges, OnInit {\r\n\t@Input() config: FieldConfig;\r\n\r\n\t@Input() group: FormGroup;\r\n\r\n\tcomponent: ComponentRef<Field>;\r\n\r\n\tconstructor(private resolver: ComponentFactoryResolver, private container: ViewContainerRef) {}\r\n\r\n\tngOnChanges() {\r\n\t\tif (this.component) {\r\n\t\t\tthis.component.instance.config = this.config;\r\n\t\t\tthis.component.instance.group = this.group;\r\n\t\t}\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\tif (!components[this.config.subtype]) {\r\n\t\t\tconst supportedTypes = Object.keys(components).join(\", \");\r\n\t\t\tthrow new Error(\r\n\t\t\t\t`Trying to use an unsupported type (${this.config.subtype}).\r\n\t\t  Supported types: ${supportedTypes}`\r\n\t\t\t);\r\n\t\t}\r\n\t\tconst component = this.resolver.resolveComponentFactory<Field>(components[this.config.subtype]);\r\n\t\tthis.component = this.container.createComponent(component);\r\n\t\tthis.component.instance.config = this.config;\r\n\t\tthis.component.instance.group = this.group;\r\n\t}\r\n}\r\n",
    "import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\n\r\nimport { FieldConfig, Field } from \"../../../models\";\r\n\r\n@Component({\r\n\tselector: \"ngs-form-control-text\",\r\n\ttemplate: `<mat-form-field fxFlexFill [formGroup]=\"group\">\r\n\r\n  <input matInput [id]=\"config.name\" [type]=\"config.inputType\" [placeholder]=\"config.title\" [formControlName]=\"config.name\">\r\n\r\n  <mat-error *ngIf=\"group.get(config.name).errors?.required\">\r\n    {{config.validator.required.message}}\r\n  </mat-error>\r\n  <mat-error *ngIf=\"group.get(config.name).errors?.minlength\">\r\n    {{config.validator.minlength.message}}\r\n  </mat-error>\r\n  <!-- <mat-error *ngIf=\"group.get(config.name).email?.minlength\">\r\n    {{config.validator.email.message}}\r\n  </mat-error> -->\r\n\r\n  <!-- <div *ngIf=\"form.get(config.name).invalid && (form.get(config.name).dirty || form.get(config.name).touched)\" class=\"alert alert-danger\">\r\n  </div> -->\r\n\r\n</mat-form-field>`,\r\n\tstyles: [`:host{display:block}.mat-form-field{width:100%}`]\r\n})\r\nexport class TextComponent implements Field {\r\n\tconfig: FieldConfig;\r\n\tgroup: FormGroup;\r\n\r\n\tconstructor() {}\r\n}\r\n",
    "import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\n\r\nimport { FieldConfig } from \"../../../models\";\r\n\r\n@Component({\r\n\tselector: \"ngs-form-control-number\",\r\n\ttemplate: `<div  [formGroup]=\"form\">\r\n    <mat-form-field fxFlexFill>\r\n        <input matInput [type]=\"schema.inputType\" [placeholder]=\"schema.title\" [formControlName]=\"schema.name\">\r\n    </mat-form-field>\r\n</div>`,\r\n\tstyles: [`:host{display:block}.mat-form-field{width:100%}`]\r\n})\r\nexport class NumberComponent implements OnInit {\r\n\t@Input() form: FormGroup;\r\n\t@Input() schema: FieldConfig;\r\n\tconstructor() {}\r\n\r\n\tngOnInit() {}\r\n}\r\n",
    "import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\n\r\nimport { FieldConfig, Field } from \"../../../models\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { MatTableDataSource } from \"@angular/material\";\r\nimport { SelectionModel } from \"@angular/cdk/collections\";\r\n\r\n@Component({\r\n\tselector: \"ngs-form-control-table\",\r\n\ttemplate: `<div class=\"example-container mat-elevation-z8\" *ngIf=\"ready\">\r\n    <mat-table #table [dataSource]=\"dataSource\">\r\n  \r\n      <ng-container matColumnDef=\"select\">\r\n        <mat-header-cell *matHeaderCellDef>\r\n          <mat-checkbox (change)=\"$event ? masterToggle() : null\"\r\n            [checked]=\"selection.hasValue() && isAllSelected()\"\r\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\">\r\n          </mat-checkbox>\r\n        </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let row\">\r\n          <mat-checkbox (click)=\"$event.stopPropagation()\"\r\n            (change)=\"$event ? selection.toggle(row) : null\"\r\n            [checked]=\"selection.isSelected(row)\">\r\n          </mat-checkbox>\r\n        </mat-cell>\r\n      </ng-container>\r\n\r\n      <div *ngFor=\"let col of filedDisplayedColumns\">\r\n        <ng-container  [matColumnDef]=\"col\">\r\n          <mat-header-cell *matHeaderCellDef> {{col}} </mat-header-cell>\r\n          <mat-cell *matCellDef=\"let element\"> {{element[col]}} </mat-cell>\r\n        </ng-container>\r\n      </div>\r\n        \r\n      <ng-container matColumnDef=\"actions\">\r\n        <mat-header-cell *matHeaderCellDef></mat-header-cell>\r\n        <mat-cell class='left-align' *matCellDef=\"let row\">\r\n          <button mat-icon-button>\r\n            <mat-icon aria-label=\"انتخاب\">arrow_back</mat-icon>\r\n          </button>\r\n        </mat-cell>\r\n      </ng-container>\r\n    \r\n      <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n      <mat-row *matRowDef=\"let row; columns: displayedColumns;\" (click)=\"selection.toggle(row)\"></mat-row>\r\n\r\n    </mat-table>\r\n  </div>\r\n\r\n\r\n<!-- <mat-form-field fxFlexFill [formGroup]=\"form\">\r\n  \r\n  <input matInput [id]=\"schema.name\" [type]=\"schema.inputType\" [placeholder]=\"schema.title\" [formControlName]=\"schema.name\">\r\n  \r\n  <mat-error *ngIf=\"form.get(schema.name).errors?.required\">\r\n    {{schema.validator.required.message}}\r\n  </mat-error>\r\n  <mat-error *ngIf=\"form.get(schema.name).errors?.minlength\">\r\n    {{schema.validator.minlength.message}}\r\n  </mat-error>\r\n  <mat-error *ngIf=\"form.get(schema.name).email?.minlength\">\r\n    {{schema.validator.email.message}}\r\n  </mat-error>\r\n</mat-form-field> -->\r\n  \r\n  <!-- <div *ngIf=\"form.get(schema.name).invalid && (form.get(schema.name).dirty || form.get(schema.name).touched)\" class=\"alert alert-danger\">\r\n  </div> -->`,\r\n\tstyles: [`:host{display:block}.mat-form-field{width:100%}`]\r\n})\r\nexport class TableComponent implements OnInit, Field {\r\n\tconfig: FieldConfig;\r\n\tgroup: FormGroup;\r\n\t@Input() form: FormGroup;\r\n\t@Input() schema: FieldConfig;\r\n\tready: boolean;\r\n\tdisplayedColumns: string[];\r\n\tfiledDisplayedColumns: string[];\r\n\tdataSource: MatTableDataSource<any>;\r\n\r\n\tselection = new SelectionModel<any>(true, []);\r\n\tconstructor(private http: HttpClient) {\r\n\t\tthis.ready = false;\r\n\t}\r\n\tngOnInit() {\r\n\t\tthis.http.get(this.schema.dataEndpoint).subscribe((data: any) => {\r\n\t\t\tdebugger;\r\n\t\t\tthis.ready = true;\r\n\t\t\tthis.displayedColumns = data.displayedColumns;\r\n\t\t\tthis.filedDisplayedColumns = data.filedDisplayedColumns;\r\n\t\t\tthis.dataSource = new MatTableDataSource<any>(data.dataSource);\r\n\t\t});\r\n\t}\r\n\r\n\t/** Whether the number of selected elements matches the total number of rows. */\r\n\tisAllSelected() {\r\n\t\tconst numSelected = this.selection.selected.length;\r\n\t\tthis.form.patchValue({\r\n\t\t\t[this.schema.name]: this.selection.selected\r\n\t\t});\r\n\t\tconst numRows = this.dataSource.data.length;\r\n\t\treturn numSelected === numRows;\r\n\t}\r\n\r\n\t/** Selects all rows if they are not all selected; otherwise clear selection. */\r\n\tmasterToggle() {\r\n\t\tthis.isAllSelected() ? this.selection.clear() : this.dataSource.data.forEach(row => this.selection.select(row));\r\n\t}\r\n}\r\n",
    "import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\n\r\nimport { FieldConfig, Field } from \"../../../models\";\r\n\r\n@Component({\r\n\tselector: \"ngs-form-control-color\",\r\n\ttemplate: `<div  [formGroup]=\"form\">\r\n<mat-form-field fxFlexFill>\r\n    <input matInput [type]=\"schema.inputType\" [placeholder]=\"schema.title\" [formControlName]=\"schema.name\">\r\n</mat-form-field>\r\n</div>`,\r\n\tstyles: [`:host{display:block}.mat-form-field{width:100%}`]\r\n})\r\nexport class ColorComponent implements Field {\r\n\tconfig: FieldConfig;\r\n\tgroup: FormGroup;\r\n\r\n\t@Input() form: FormGroup;\r\n\t@Input() schema: FieldConfig;\r\n\tconstructor() {}\r\n\r\n\tngOnInit() {}\r\n}\r\n",
    "import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\n\r\nimport { FieldConfig, Field } from \"../../../models\";\r\n\r\n@Component({\r\n\tselector: \"ngs-form-control-email\",\r\n\ttemplate: `<div  [formGroup]=\"group\">\r\n<mat-form-field fxFlexFill>\r\n    <input matInput [type]=\"config.inputType\" [placeholder]=\"config.title\" [formControlName]=\"config.name\">\r\n</mat-form-field>\r\n</div>`,\r\n\tstyles: [`:host{display:block}.mat-form-field{width:100%}`]\r\n})\r\nexport class EmailComponent implements Field {\r\n\tconfig: FieldConfig;\r\n\tgroup: FormGroup;\r\n\r\n\tconstructor() {}\r\n\r\n\tngOnInit() {}\r\n}\r\n",
    "import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\n\r\nimport { Field, FieldConfig } from \"../../../models\";\r\n\r\n@Component({\r\n\tselector: \"ngs-form-control-checkbox\",\r\n\ttemplate: `<div [formGroup]=\"group\">\r\n    <mat-checkbox [formControlName]=\"config.name\">\r\n        {{config.title}}\r\n    </mat-checkbox>\r\n</div>`,\r\n\tstyles: [`:host{display:block}.mat-form-field{width:100%}`]\r\n})\r\nexport class CheckboxComponent implements Field {\r\n\tconfig: FieldConfig;\r\n\tgroup: FormGroup;\r\n\r\n\tconstructor() {}\r\n}\r\n",
    "import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\r\nimport { FormGroup, FormControl, FormArray } from \"@angular/forms\";\r\nimport { FieldConfig } from \"../../models\";\r\n\r\n@Component({\r\n\tselector: \"app-form-control\",\r\n\ttemplate: `  <mat-expansion-panel>\r\n    <mat-expansion-panel-header>\r\n      <mat-panel-title>\r\n        <button mat-icon-button (click)=\"delete.emit()\">\r\n            <mat-icon aria-label=\" icon-button\">delete_forever</mat-icon>\r\n          </button>\r\n        {{schema.name}}\r\n      </mat-panel-title>\r\n    </mat-expansion-panel-header>\r\n      <mat-form-field>\r\n        <input matInput [(ngModel)]=\"schema.name\" (change)=\"changed()\" placeholder=\"Name\">\r\n      </mat-form-field>\r\n      \r\n      <mat-form-field>\r\n        <input matInput [(ngModel)]=\"schema.title\" (change)=\"changed()\" placeholder=\"Placeholder\"/>\r\n      </mat-form-field>\r\n      \r\n      <mat-form-field>\r\n        <mat-select [(ngModel)]=\"schema.inputType\" (change)=\"changed()\" placeholder=\"Input Type\">\r\n          <mat-option value=\"table\">table</mat-option>\r\n          <mat-option value=\"select\">select</mat-option>\r\n          <mat-option value=\"text\">text</mat-option>\r\n          <mat-option value=\"number\">number</mat-option>\r\n          <mat-option value=\"email\">email</mat-option>\r\n          <mat-option value=\"color\">color</mat-option>\r\n          <mat-option value=\"radio\">radio</mat-option>\r\n          <mat-option value=\"checkbox\">checkbox</mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field>\r\n          <input matInput [(ngModel)]=\"schema.value\" (change)=\"changed()\" placeholder=\"Value\"/>\r\n      </mat-form-field>\r\n      \r\n        <mat-form-field>\r\n          <mat-select [(ngModel)]=\"schema.width\" (change)=\"changed()\" placeholder=\"width\">\r\n            <mat-option *ngFor=\"let item of width\" [value]=\"item\">{{item}}</mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n\r\n      <div *ngIf=\"schema.inputType=='table'\" [formGroup]=\"tableOptions\">\r\n        <mat-form-field>\r\n          <input matInput (change)=\"changed()\" formControlName=\"dataEndpoint\" placeholder=\"dataEndpoint\"/>\r\n        </mat-form-field>\r\n      </div>\r\n\r\n      <div *ngIf=\"schema.inputType=='select'\">\r\n        [options]\r\n        <button (click)=\"addOption()\">+</button>\r\n        <button (click)=\"insertOptions()\">insert</button>\r\n        <div *ngFor=\"let option of options.controls;index as i\">\r\n          {{i}}\r\n          <div [formGroup]=\"options.controls[i]\">\r\n            <mat-form-field>\r\n              <input matInput (change)=\"changed()\" formControlName=\"key\" placeholder=\"key\"/>\r\n            </mat-form-field>\r\n            <mat-form-field>\r\n              <input matInput (change)=\"changed()\" formControlName=\"value\" placeholder=\"value\"/>\r\n            </mat-form-field>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <br/>\r\n      <div>\r\n        <mat-slide-toggle (change)=\"changed()\"  [(ngModel)]=\"schema.validator.required.active\">اجباری</mat-slide-toggle>\r\n        <mat-form-field>\r\n          <input matInput (change)=\"changed()\" [(ngModel)]=\"schema.validator.required.message\"  placeholder=\"پیغام\"/>\r\n        </mat-form-field>\r\n        </div>\r\n      <div>\r\n        <mat-slide-toggle (change)=\"changed()\"  [(ngModel)]=\"schema.validator.email.active\">ایمیل</mat-slide-toggle>\r\n        <mat-form-field>\r\n          <input matInput (change)=\"changed()\" [(ngModel)]=\"schema.validator.email.message\"  placeholder=\"پیغام\"/>\r\n        </mat-form-field>\r\n      </div>\r\n      <div>\r\n        <mat-slide-toggle (change)=\"changed()\"  [(ngModel)]=\"schema.validator.minlength.active\">حداقل تعداد کاراکتر</mat-slide-toggle>\r\n        <mat-form-field>\r\n          <input matInput (change)=\"changed()\" [(ngModel)]=\"schema.validator.minlength.message\"  placeholder=\"پیغام\"/>\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n          <input matInput (change)=\"changed()\" [(ngModel)]=\"schema.validator.minlength.value\"  placeholder=\"تعداد حداقل کاراکتر\"/>\r\n        </mat-form-field>\r\n    </div>\r\n      \r\n  </mat-expansion-panel>`\r\n})\r\nexport class FormControlComponent {\r\n\t@Input() schema: FieldConfig;\r\n\t@Output() changes = new EventEmitter();\r\n\t@Output() delete = new EventEmitter();\r\n\r\n\twidth = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ];\r\n\toptions = new FormArray([\r\n\t\tnew FormGroup({\r\n\t\t\tkey: new FormControl(),\r\n\t\t\tvalue: new FormControl()\r\n\t\t})\r\n\t]);\r\n\ttableOptions = new FormGroup({\r\n\t\tdataEndpoint: new FormControl(\"http://localhost:3000/api/fake/packgeCompareSimpleList\")\r\n\t});\r\n\tconstructor() {\r\n\t\tdebugger;\r\n\t}\r\n\r\n\tchanged() {\r\n\t\tif ([ this.schema.name, this.schema.title, this.schema.inputType ].some(item => !item)) return true;\r\n\t\tif (this.schema.inputType == \"table\") {\r\n\t\t\tthis.schema.options = this.tableOptions.value;\r\n\t\t} else if (this.schema.inputType == \"select\") {\r\n\t\t\tthis.schema.options = this.options.value;\r\n\t\t}\r\n\t\tthis.changes.emit();\r\n\t}\r\n\r\n\taddOption() {\r\n\t\tthis.options.push(\r\n\t\t\tnew FormGroup({\r\n\t\t\t\tkey: new FormControl(),\r\n\t\t\t\tvalue: new FormControl()\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\tremoveOption(i) {\r\n\t\tthis.options.controls.splice(i, 1);\r\n\t}\r\n\tinsertOptions() {\r\n\t\tthis.schema.options = this.options.value;\r\n\t}\r\n}\r\n",
    "import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\r\nimport { FieldConfig } from \"../../models\";\r\n\r\n@Component({\r\n\tselector: \"app-form-array\",\r\n\ttemplate: `<mat-card>\r\n  <mat-card-content>\r\n    <mat-form-field>\r\n        <input matInput [(ngModel)]=\"schema.name\" placeholder=\"Name\">\r\n    </mat-form-field>\r\n      \r\n    <div class=\"button-row\">\r\n      <button mat-button color=\"primary\" (click)=\"addFormGroup(schema)\">addFormGroup</button>\r\n      <button mat-button color=\"primary\" (click)=\"addFormArray(schema)\">addFormArray</button>\r\n      <!-- <button mat-button color=\"primary\" (click)=\"addFormControl(schema)\">addFormControl</button> -->\r\n    </div>\r\n    \r\n    <div *ngFor=\"let field of schema.fields\">\r\n      <div [ngSwitch]=\"field.type\">\r\n        <app-form-group *ngSwitchCase=\"'group'\" [schema]=\"field\" (changes)=\"changed()\"></app-form-group>\r\n        <app-form-array *ngSwitchCase=\"'array'\" [schema]=\"field\" (changes)=\"changed()\"></app-form-array>\r\n        <!-- <app-form-control *ngSwitchCase=\"'control'\" [schema]=\"field\" (change)=\"changed($event)\"></app-form-control> -->\r\n      </div>\r\n    </div>\r\n    \r\n  </mat-card-content>\r\n</mat-card>`\r\n})\r\nexport class FormArrayComponent {\r\n\t@Input() schema: FieldConfig;\r\n\t@Output() changes = new EventEmitter();\r\n\tconstructor() {}\r\n\r\n\tchanged() {\r\n\t\tthis.changes.emit();\r\n\t}\r\n\r\n\taddFormGroup(root: FieldConfig) {\r\n\t\tconst group = new FieldConfig(\"group\");\r\n\t\tgroup.fields = [];\r\n\t\troot.fields.push(group);\r\n\t\treturn group;\r\n\t}\r\n\taddFormArray(root: FieldConfig) {\r\n\t\tconst array = new FieldConfig(\"array\");\r\n\t\tarray.fields = [];\r\n\t\troot.fields.push(array);\r\n\t\treturn array;\r\n\t}\r\n\taddFormControl(root: FieldConfig) {\r\n\t\tconst control = new FieldConfig(\"control\");\r\n\t\troot.fields.push(control);\r\n\t\treturn control;\r\n\t}\r\n}\r\n",
    "import { Component, Input, Output, EventEmitter } from \"@angular/core\";\r\nimport { FieldConfig } from \"../../models\";\r\nimport { Form } from \"@angular/forms\";\r\n\r\n@Component({\r\n\tselector: \"app-form-group\",\r\n\ttemplate: `<mat-card>\r\n  <mat-card-content>\r\n\r\n    <mat-form-field *ngIf=\"!noHeader\">\r\n      <input matInput [(ngModel)]=\"schema.name\" placeholder=\"Name\">\r\n    </mat-form-field>\r\n\r\n    <mat-form-field *ngIf=\"!noHeader\">\r\n      <input matInput [(ngModel)]=\"schema.title\" placeholder=\"عنوان\">\r\n    </mat-form-field>\r\n\r\n    <div class=\"button-row\">\r\n      <button mat-button color=\"primary\" (click)=\"addFormGroup(schema)\"> addFormGroup </button>\r\n      <button mat-button color=\"primary\" (click)=\"addFormArray(schema)\"> addFormArray </button>\r\n      <button mat-button color=\"primary\" (click)=\"addFormControl(schema)\">addFormControl</button>\r\n    </div>\r\n\r\n    <div *ngFor=\"let field of schema.fields;let i = index\">\r\n      <div [ngSwitch]=\"field.type\">\r\n        <app-form-group *ngSwitchCase=\"'group'\" [schema]=\"field\" (change)=\"changed()\"></app-form-group>\r\n        <app-form-array *ngSwitchCase=\"'array'\" [schema]=\"field\" (change)=\"changed()\"></app-form-array>\r\n        <app-form-control *ngSwitchCase=\"'control'\" [schema]=\"field\" (changes)=\"changed()\" (delete)=\"deleteFormGroup(i)\"></app-form-control>\r\n      </div>\r\n    </div>\r\n\r\n  </mat-card-content>\r\n</mat-card>`\r\n})\r\nexport class FormGroupComponent {\r\n\t@Input() schema: FieldConfig;\r\n\t@Input() noHeader: boolean = false;\r\n\t@Output() changes = new EventEmitter();\r\n\t@Output() delete = new EventEmitter();\r\n\tconstructor() {\r\n\t\tdebugger;\r\n\t}\r\n\r\n\tchanged() {\r\n\t\tthis.changes.emit();\r\n\t}\r\n\r\n\taddFormGroup(root: FieldConfig) {\r\n\t\tconst group = new FieldConfig(\"group\");\r\n\t\tgroup.fields = [];\r\n\t\troot.fields.push(group);\r\n\t\tthis.schema.id = this.schema.id + 1;\r\n\t\treturn group;\r\n\t}\r\n\taddFormArray(root: FieldConfig) {\r\n\t\tconst array = new FieldConfig(\"array\");\r\n\t\tarray.fields = [];\r\n\t\troot.fields.push(array);\r\n\t\treturn array;\r\n\t}\r\n\taddFormControl(root: FieldConfig) {\r\n\t\tconst control = new FieldConfig(\"control\");\r\n\t\troot.fields.push(control);\r\n\t\treturn control;\r\n\t}\r\n\tdeleteFormGroup(idx: number) {\r\n\t\tthis.schema.fields.splice(idx, 1);\r\n\t}\r\n}\r\n",
    "import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { FieldConfig, Field } from \"../../../models\";\r\nimport { FormGroup } from \"@angular/forms\";\r\n\r\n@Component({\r\n\tselector: \"ngs-form-control-select\",\r\n\ttemplate: `<div  [formGroup]=\"group\">\r\n<mat-form-field>\r\n    <mat-select [formControlName]=\"config.name\" [placeholder]=\"config.title\">\r\n      <mat-option *ngFor=\"let option of config.options\" [value]=\"option.value\">{{option.key}}</mat-option>\r\n    </mat-select>\r\n</mat-form-field>\r\n</div>`,\r\n\tstyles: [`:host{display:block}.mat-form-field{width:100%}`]\r\n})\r\nexport class SelectComponent implements Field {\r\n\tconfig: FieldConfig;\r\n\tgroup: FormGroup;\r\n\tconstructor() {}\r\n}\r\n",
    "import * as list from \"../list/list.reducers\";\r\n\r\nexport interface FormState {\r\n\tlist: list.State;\r\n}\r\n\r\nexport const FormReducers = {\r\n\tlist: list.reducer\r\n};\r\n\r\nexport interface MainContainerState {\r\n\t\"form\": FormState;\r\n}\r\n",
    "import { responseStatusTypes } from \"@soushians/shared\";\r\nimport { FormSchemaModel } from \"../models\";\r\nimport { FormsListActionTypes, FormsListActions } from \"./list.actions\";\r\n\r\nexport interface State {\r\n\tstatus: responseStatusTypes;\r\n\tdata: FormSchemaModel[];\r\n}\r\nexport const initialState: State = {\r\n\tstatus: \"pristine\",\r\n\tdata: []\r\n};\r\nexport function reducer(state = initialState, action: FormsListActions): State {\r\n\tswitch (action.type) {\r\n\t\tcase FormsListActionTypes.FORMS_LIST: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tstatus: \"dirty\"\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase FormsListActionTypes.FORMS_LIST_START: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tstatus: \"pending\"\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase FormsListActionTypes.FORMS_LIST_SUCCEED: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: action.payload,\r\n\t\t\t\tstatus: \"succeed\"\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase FormsListActionTypes.FORMS_LIST_FAILED: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tstatus: \"failed\"\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase FormsListActionTypes.FORM_SCHEMA_UPDATE: {\r\n\t\t\tconst data = state.data.concat();\r\n\t\t\tvar entityIdx = state.data.findIndex(form => form._id == action.payload._id);\r\n\t\t\tif (entityIdx > -1) {\r\n\t\t\t\tdata[entityIdx] = Object.assign({}, data[entityIdx], action.payload);\r\n\t\t\t} else {\r\n\t\t\t\tdata.push(action.payload);\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: data\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase FormsListActionTypes.ADD_FORM_SCHEMA: {\r\n\t\t\tconst data = state.data.concat();\r\n\t\t\tvar entityIdx = state.data.findIndex(form => form._id == action.payload._id);\r\n\t\t\tif (entityIdx > -1) {\r\n\t\t\t\tdata[entityIdx] = Object.assign({}, data[entityIdx], action.payload);\r\n\t\t\t} else {\r\n\t\t\t\tdata.push(action.payload);\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: data\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase FormsListActionTypes.FORM_SCHEMA_FETCHED: {\r\n\t\t\tconst data = state.data.concat();\r\n\t\t\tvar entityIdx = state.data.findIndex(form => form._id == action.payload._id);\r\n\t\t\tif (entityIdx > -1) {\r\n\t\t\t\tdata[entityIdx] = Object.assign({}, data[entityIdx], action.payload);\r\n\t\t\t} else {\r\n\t\t\t\tdata.push(action.payload);\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: data\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tdefault: {\r\n\t\t\treturn state;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport var getStatus = (state: State) => state.status;\r\n",
    "import { Action } from \"@ngrx/store\";\r\n\r\nimport { FormSchemaModel } from \"../models\";\r\n\r\nexport enum FormsListActionTypes {\r\n\tFORMS_LIST = \"[FORM][LIST] FORMS_LIST\",\r\n\tFORMS_LIST_START = \"[FORM][LIST] FORMS_LIST_START\",\r\n\tFORMS_LIST_SUCCEED = \"[FORM][LIST] FORMS_LIST_SUCCEED\",\r\n\tFORMS_LIST_FAILED = \"[FORM][LIST] FORMS_LIST_FAILED\",\r\n\tADD_FORM_SCHEMA = \"[FORM][LIST] ADD_FORM_SCHEMA\",\r\n\tFORM_SCHEMA_UPDATE = \"[FORM][LIST] FORM_SCHEMA_UPDATE\",\r\n\tGET_FORM_SCHEMA = \"[FORM][LIST] GET_FORM_SCHEMA\",\r\n\tFORM_SCHEMA_FETCHED = \"[FORM][LIST] FORM_SCHEMA_FETCHED\"\r\n}\r\n\r\nexport class FormsListAction implements Action {\r\n\treadonly type = FormsListActionTypes.FORMS_LIST;\r\n}\r\nexport class FormsListStartAction implements Action {\r\n\treadonly type = FormsListActionTypes.FORMS_LIST_START;\r\n}\r\nexport class FormsListSucceedAction implements Action {\r\n\treadonly type = FormsListActionTypes.FORMS_LIST_SUCCEED;\r\n\tconstructor(public payload: FormSchemaModel[]) {}\r\n}\r\nexport class FormsListFailedAction implements Action {\r\n\treadonly type = FormsListActionTypes.FORMS_LIST_FAILED;\r\n}\r\nexport class UpdateFormSchemaAction implements Action {\r\n\treadonly type = FormsListActionTypes.FORM_SCHEMA_UPDATE;\r\n\tconstructor(public payload: FormSchemaModel) {}\r\n}\r\nexport class AddFormSchemaAction implements Action {\r\n\treadonly type = FormsListActionTypes.ADD_FORM_SCHEMA;\r\n\tconstructor(public payload: FormSchemaModel) {}\r\n}\r\nexport class GetFormSchemaAction implements Action {\r\n\treadonly type = FormsListActionTypes.GET_FORM_SCHEMA;\r\n\tconstructor(public payload: string) {}\r\n}\r\nexport class FormSchemaFechedAction implements Action {\r\n\treadonly type = FormsListActionTypes.FORM_SCHEMA_FETCHED;\r\n\tconstructor(public payload: FormSchemaModel) {}\r\n}\r\n\r\nexport type FormsListActions =\r\n\t| FormsListAction\r\n\t| FormsListStartAction\r\n\t| FormsListSucceedAction\r\n\t| FormsListFailedAction\r\n\t| UpdateFormSchemaAction\r\n\t| AddFormSchemaAction\r\n\t| GetFormSchemaAction\r\n\t| FormSchemaFechedAction;\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs/Rx\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\n\r\nimport { FormSchemaModel, AddFormApiModel, EditFormApiModel, FormListApiModel } from \"../models\";\r\nimport { FormConfigurationService } from \"./form-configuration.service\";\r\n\r\nimport { MainContainerState } from \"../main-container/main-container.reducers\";\r\n\r\n@Injectable()\r\nexport class FormUtilityService {\r\n\tresponseCache: AddFormApiModel.Response;\r\n\r\n\tconstructor(\r\n\t\tprivate http: HttpClient,\r\n\t\tprivate store: Store<MainContainerState>,\r\n\t\tprivate configurationService: FormConfigurationService\r\n\t) {}\r\n\r\n\t// createFrom(data: FieldConfig, parentPath = \"\"): AbstractControl {\r\n\t// if (data.type == \"control\") {\r\n\t// \tif (data.parentType == \"array\") {\r\n\t// \t\t// parentPath = `${parentPath}.controls[${(data as FieldConfig).name}]`;\r\n\t// \t} else if (data.parentType == \"group\") {\r\n\t// \t\tvar formGroupPath = parentPath;\r\n\t// \t\tparentPath = `${parentPath}.controls.${(data as FieldConfig).name}`;\r\n\t// \t}\r\n\t// \tvar validators = [];\r\n\t// \tif (data.validator.required.active) {\r\n\t// \t\tvalidators.push(Validators.required);\r\n\t// \t}\r\n\t// \tif (data.validator.minlength.active) {\r\n\t// \t\tvalidators.push(Validators.minLength(data.validator.minlength.value));\r\n\t// \t}\r\n\t// \tif (data.validator.email.active) {\r\n\t// \t\tvalidators.push(Validators.email);\r\n\t// \t}\r\n\t// \tvar ctr = new FormControl(data.value, validators);\r\n\t// \t(ctr as any).schema = data;\r\n\t// \t(ctr as any).schema.path = parentPath;\r\n\t// \t(ctr as any).schema.formGroupPath = formGroupPath;\r\n\t// \treturn ctr;\r\n\t// } else if (data.type == \"group\") {\r\n\t// \tvar formGroup = new FormGroup({});\r\n\t// \tif (data.parentType == undefined) {\r\n\t// \t\tparentPath = (data as FieldConfig).name;\r\n\t// \t} else if (data.parentType == \"array\") {\r\n\t// \t\tparentPath = `${parentPath}.controls[${(data as FieldConfig).name}]`;\r\n\t// \t} else if (data.parentType == \"group\") {\r\n\t// \t\tparentPath = `${parentPath}.controls.${(data as FieldConfig).name}`;\r\n\t// \t}\r\n\r\n\t// \t(formGroup as any).schema = data;\r\n\t// \t(formGroup as any).schema.path = parentPath;\r\n\t// \tdata.fields.forEach(item => {\r\n\t// \t\titem.parentType = \"group\";\r\n\t// \t\tformGroup.addControl(item.name, this.createFrom(item, parentPath));\r\n\t// \t});\r\n\t// \treturn formGroup;\r\n\t// } else {\r\n\t// \tvar formArray: FormArray = new FormArray([]);\r\n\t// \tparentPath =\r\n\t// \t\tparentPath == \"\"\r\n\t// \t\t\t? (data as FieldConfig).name\r\n\t// \t\t\t: `${parentPath}.controls.${(data as FieldConfig).name}`;\r\n\t// \t(formArray as any).schema = data;\r\n\t// \t(formArray as any).schema.path = parentPath;\r\n\t// \tdata.fields.forEach((item, idx) => {\r\n\t// \t\titem.parentType = \"array\";\r\n\t// \t\titem.name = idx.toString();\r\n\t// \t\tformArray.controls.push(this.createFrom(item, parentPath));\r\n\t// \t});\r\n\t// \treturn formArray;\r\n\t// }\r\n\t// }\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs/Rx\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { stringTemplate } from \"@soushians/shared\";\r\nimport { FormSchemaModel, AddFormApiModel, EditFormApiModel, FormListApiModel } from \"../models\";\r\nimport { FormConfigurationService } from \"./form-configuration.service\";\r\n\r\nimport { MainContainerState } from \"../main-container/main-container.reducers\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\nimport { filter, map, withLatestFrom } from \"rxjs/operators\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class FormService {\r\n\tresponseCache: AddFormApiModel.Response;\r\n\r\n\tconstructor(\r\n\t\tprivate http: HttpClient,\r\n\t\tprivate store: Store<MainContainerState>,\r\n\t\tprivate configurationService: FormConfigurationService\r\n\t) {}\r\n\r\n\tadd(data: AddFormApiModel.Request): Observable<FormSchemaModel> {\r\n\t\tconst model = new AddFormApiModel.Request(data);\r\n\t\treturn this.configurationService.config$\r\n\t\t\t.filter(config => config.endpoints.addForm != \"\")\r\n\t\t\t.take(1)\r\n\t\t\t.switchMap(config => this.http.post(config.endpoints.addForm, model.getRequestBody()))\r\n\t\t\t.map((response: AddFormApiModel.Response) => response.Result);\r\n\t}\r\n\tget(_id: string): Observable<FormSchemaModel> {\r\n\t\treturn this.configurationService.config$\r\n\t\t\t.filter(config => config.endpoints.getForm != \"\")\r\n\t\t\t.take(1)\r\n\t\t\t.switchMap(config => this.http.get(stringTemplate(config.endpoints.getForm, { _id })))\r\n\t\t\t.map((response: EditFormApiModel.Response) => response.Result);\r\n\t}\r\n\tgetList(): Observable<FormSchemaModel[]> {\r\n\t\treturn this.configurationService.config$\r\n\t\t\t.filter(config => config.endpoints.getList != \"\")\r\n\t\t\t.switchMap(config => this.http.get(config.endpoints.getList))\r\n\t\t\t.map((response: FormListApiModel.Response) => response.Result);\r\n\t}\r\n\tupdate(data: EditFormApiModel.Request): Observable<FormSchemaModel> {\r\n\t\tconst model = new EditFormApiModel.Request(data);\r\n\t\treturn this.configurationService.config$\r\n\t\t\t.filter(config => config.endpoints.editForm != \"\")\r\n\t\t\t.take(1)\r\n\t\t\t.switchMap(config => this.http.put(config.endpoints.editForm, model.getRequestBody()))\r\n\t\t\t.map((response: EditFormApiModel.Response) => response.Result);\r\n\t}\r\n\tdelete(_id: string) {\r\n\t\treturn this.configurationService.config$\r\n\t\t\t.filter(config => config.endpoints.deleteForm != \"\")\r\n\t\t\t.switchMap(config => this.http.get(config.endpoints.deleteForm));\r\n\t}\r\n\tselectFormById(_id: string): Observable<FormSchemaModel> {\r\n\t\tconst subject = new BehaviorSubject<FormSchemaModel>(undefined);\r\n\t\tthis.store\r\n\t\t\t.select(state => state.form.list.data)\r\n\t\t\t.pipe(filter(forms => forms != null), map(forms => forms.find(form => form._id == _id)))\r\n\t\t\t.subscribe(FormSchemaModel => subject.next(FormSchemaModel));\r\n\t\treturn subject.asObservable();\r\n\t}\r\n}\r\n",
    "import { FieldConfig } from \"./field-config.model\";\r\n\r\nexport class FormSchemaModel {\r\n\t_id: string;\r\n\tname: string;\r\n\tdescription: string;\r\n\tform: FieldConfig;\r\n\tevents = {\r\n\t\taccept: {\r\n\t\t\tshow: false,\r\n\t\t\ttext: \"ثبت\"\r\n\t\t},\r\n\t\tcancel: {\r\n\t\t\tshow: false,\r\n\t\t\ttext: \"انصراف\"\r\n\t\t}\r\n\t};\r\n\r\n\tconstructor() {\r\n\t\tthis.form = new FieldConfig(\"group\");\r\n\t}\r\n\tinit() {\r\n\t\tthis._id = (Math.random() * 10).toString();\r\n\t}\r\n}\r\n",
    "import { Validator } from \"./form-field-validator.model\";\r\n\r\nexport class FieldConfig {\r\n\tid: number;\r\n\ttype: \"group\" | \"array\" | \"control\";\r\n\tname: string;\r\n\tsubtype: string;\r\n\tdisabled?: boolean;\r\n\ttitle: string;\r\n\tparentType?: \"array\" | \"group\";\r\n\tformGroupPath?: string;\r\n\tpath?: string;\r\n\tinputType: \"select\" | \"text\" | \"number\" | \"email\" | \"color\" | \"checkbox\" | \"table\";\r\n\tvalue?: any;\r\n\torder?: number;\r\n\twidth?: number;\r\n\toptions: {\r\n\t\t[key: string]: string | number | boolean;\r\n\t}[];\r\n\tdataEndpoint?: string;\r\n\toptionsEndpoint: string;\r\n\tfields?: FieldConfig[];\r\n\tvalidator: Validator;\r\n\tconstructor(type: \"group\" | \"array\" | \"control\") {\r\n\t\tthis.type = type;\r\n\t\tif (type != \"control\") this.fields = [];\r\n\t\tthis.width = 3;\r\n\t\tthis.validator = new Validator();\r\n\t}\r\n}\r\n",
    "export interface validation {\r\n\tactive: boolean;\r\n\tmessage: string;\r\n\tvalue?: any;\r\n}\r\nexport class Validator {\r\n\trequired: validation;\r\n\tminlength: validation;\r\n\temail: validation;\r\n\r\n\tconstructor() {\r\n\t\tthis.required = {\r\n\t\t\tactive: false,\r\n\t\t\tmessage: \"این فیلد الزامی است\"\r\n\t\t};\r\n\t\tthis.minlength = {\r\n\t\t\tactive: false,\r\n\t\t\tmessage: \"حداقل تعداد کارکترها\",\r\n\t\t\tvalue: 5\r\n\t\t};\r\n\t\tthis.email = {\r\n\t\t\tactive: false,\r\n\t\t\tmessage: \"لطفا ایمیل صحیح وارد نمایید\"\r\n\t\t};\r\n\t}\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { FormSchemaModel } from \"../models\";\r\n\r\nexport namespace FormListApiModel {\r\n\texport class Request implements HttpRequestBaseModel<Request> {\r\n\t\tName: string;\r\n\t\tControls: object[];\r\n\t\tconstructor(initValue = {} as FormListApiModel.Request) {\r\n\t\t\tObject.keys(initValue).forEach((key) => (this[key] = initValue[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {\r\n\t\t\t\tName: this.Name,\r\n\t\t\t\tControls: this.Controls\r\n\t\t\t};\r\n\t\t}\r\n\t\tstatic get formGroup() {\r\n\t\t\treturn new FormGroup({\r\n\t\t\t\tName: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tControls: new FormGroup({})\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: FormSchemaModel[];\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { FormSchemaModel } from \"../models\";\r\n\r\nexport namespace EditFormApiModel {\r\n\texport class Request implements HttpRequestBaseModel<Request> {\r\n\t\t_id: string;\r\n\t\tname: string;\r\n\t\tform: any[];\r\n\t\tevents: any[];\r\n\t\tconstructor(initValue = {} as EditFormApiModel.Request) {\r\n\t\t\tObject.keys(initValue).forEach(key => (this[key] = initValue[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {\r\n\t\t\t\t_id: this._id,\r\n\t\t\t\tname: this.name,\r\n\t\t\t\tform: this.form,\r\n\t\t\t\tevents: this.events\r\n\t\t\t};\r\n\t\t}\r\n\t\tstatic get formGroup() {\r\n\t\t\treturn new FormGroup({\r\n\t\t\t\t_id: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tname: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tform: new FormControl({}),\r\n\t\t\t\tevents: new FormGroup({\r\n\t\t\t\t\taccept: new FormGroup({\r\n\t\t\t\t\t\tshow: new FormControl(false),\r\n\t\t\t\t\t\ttext: new FormControl(\"ثبت\")\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tcancel: new FormGroup({\r\n\t\t\t\t\t\tshow: new FormControl(false),\r\n\t\t\t\t\t\ttext: new FormControl(\"انصراف\")\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: FormSchemaModel;\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { FormSchemaModel } from \"../models\";\r\n\r\nexport namespace AddFormApiModel {\r\n\texport class Request implements HttpRequestBaseModel<Request> {\r\n\t\t_id: string;\r\n\t\tname: string;\r\n\t\tform: any[];\r\n\t\tevents: any[];\r\n\t\tconstructor(initValue = {} as AddFormApiModel.Request) {\r\n\t\t\tObject.keys(initValue).forEach(key => (this[key] = initValue[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {\r\n\t\t\t\tname: this.name,\r\n\t\t\t\tform: this.form,\r\n\t\t\t\tevents: this.events\r\n\t\t\t};\r\n\t\t}\r\n\t\tstatic get formGroup() {\r\n\t\t\treturn new FormGroup({\r\n\t\t\t\t_id: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tname: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\ttitle: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tform: new FormControl({}),\r\n\t\t\t\tevents: new FormGroup({\r\n\t\t\t\t\taccept: new FormGroup({\r\n\t\t\t\t\t\tshow: new FormControl(false),\r\n\t\t\t\t\t\ttext: new FormControl(\"ثبت\")\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tcancel: new FormGroup({\r\n\t\t\t\t\t\tshow: new FormControl(false),\r\n\t\t\t\t\t\ttext: new FormControl(\"انصراف\")\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: FormSchemaModel;\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n",
    "import { BehaviorSubject } from \"rxjs\";\r\nimport { Inject, Injectable } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { getFormModuleConfig } from \"@soushians/config\";\r\n\r\nimport { FormModuleConfig } from \"../form.config\";\r\nimport { MODULE_CONFIG_TOKEN, MODULE_DEFAULT_CONFIG } from \"../form.config\";\r\nimport { MainContainerState } from \"../main-container\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class FormConfigurationService {\r\n\tprivate _config: FormModuleConfig;\r\n\tget config() {\r\n\t\treturn this._config;\r\n\t}\r\n\tconfig$ = new BehaviorSubject(MODULE_DEFAULT_CONFIG);\r\n\r\n\tconstructor(@Inject(MODULE_CONFIG_TOKEN) configFile, private store: Store<MainContainerState>) {\r\n\t\tthis._config = Object.assign({}, MODULE_DEFAULT_CONFIG, configFile);\r\n\t\tthis.config$.next(this._config);\r\n\t\tthis.store.select(getFormModuleConfig).subscribe(userConfig => {\r\n\t\t\tif (!userConfig) return;\r\n\t\t\tthis._config = Object.assign({}, this._config, userConfig.Config);\r\n\t\t\tthis.config$.next(this._config);\r\n\t\t});\r\n\t}\r\n}\r\n",
    "import { InjectionToken } from \"@angular/core\";\r\n\r\nexport interface FormModuleConfig {\r\n\tendpoints: {\r\n\t\taddForm: string;\r\n\t\teditForm: string;\r\n\t\tgetForm: string;\r\n\t\tgetList: string;\r\n\t\tdeleteForm: string;\r\n\t};\r\n}\r\nexport const MODULE_DEFAULT_CONFIG: FormModuleConfig = {\r\n\tendpoints: {\r\n\t\taddForm: \"\",\r\n\t\teditForm: \"\",\r\n\t\tgetForm: \"\",\r\n\t\tgetList: \"\",\r\n\t\tdeleteForm: \"\"\r\n\t}\r\n};\r\nexport const MODULE_CONFIG_TOKEN = new InjectionToken<FormModuleConfig>(\"FormModuleConfig\");\r\n"
  ],
  "names": [
    "tslib_1.__metadata",
    "BehaviorSubject",
    "list.reducer",
    "FormSchemaModel"
  ],
  "mappings": "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"
}
