{"version":3,"sources":["ng://@soushians/form/lib/models/add-form.api-model.ts","ng://@soushians/form/lib/models/edit-form.api-model.ts","ng://@soushians/form/lib/models/form-list.api-model.ts","ng://@soushians/form/lib/models/form-field-validator.model.ts","ng://@soushians/form/lib/models/field-config.model.ts","ng://@soushians/form/lib/models/form-schema.model.ts","ng://@soushians/form/lib/form.config.ts","ng://@soushians/form/lib/services/form-configuration.service.ts","ng://@soushians/form/lib/services/form.service.ts","ng://@soushians/form/lib/view/form-controls/select/select.component.ts","ng://@soushians/form/lib/view/form-controls/checkbox/checkbox.component.ts","ng://@soushians/form/lib/view/form-controls/email/email.component.ts","ng://@soushians/form/lib/view/form-controls/color/color.component.ts","ng://@soushians/form/lib/view/form-controls/table/table.component.ts","ng://@soushians/form/lib/view/form-controls/number/number.component.ts","ng://@soushians/form/lib/view/form-controls/text/text.component.ts","ng://@soushians/form/lib/list/list.actions.ts","ng://@soushians/form/lib/view/form-view/form-view.component.ts","null","ng://@soushians/form/lib/list/list.reducers.ts","ng://@soushians/form/lib/main-container/main-container.reducers.ts","ng://@soushians/form/lib/add/form-group/form-group.component.ts","ng://@soushians/form/lib/add/form-array/form-array.component.ts","ng://@soushians/form/lib/add/form-control/form-control.component.ts","ng://@soushians/form/lib/edit/edit-form.actions.ts","ng://@soushians/form/lib/add/add-form.actions.ts","ng://@soushians/form/lib/add/add-form-container/add-form-container.component.ts","ng://@soushians/form/lib/edit/edit-form-container/edit-form-container.component.ts","ng://@soushians/form/lib/add/add-form/add-form.component.ts","ng://@soushians/form/lib/edit/edit-form/edit-form.component.ts","ng://@soushians/form/lib/list/form-list-container/form-list.container.component.ts","ng://@soushians/form/lib/list/form-list/form-list.component.ts","ng://@soushians/form/lib/main-container/main-container.component/main-container.component.ts","ng://@soushians/form/lib/add/add-form.effects.ts","ng://@soushians/form/lib/list/list.effects.ts","ng://@soushians/form/lib/edit/edit-form.effects.ts","ng://@soushians/form/lib/form-routing.module.ts","ng://@soushians/form/lib/form.module.ts"],"names":["AddFormApiModel","Request","initValue","_this","this","Object","keys","forEach","key","prototype","getRequestBody","name","form","events","defineProperty","FormGroup","_id","FormControl","Validators","required","title","accept","show","text","cancel","Response","EditFormApiModel","FormListApiModel","Name","Controls","Validator","active","message","minlength","value","email","FieldConfig","type","fields","width","validator","FormSchemaModel","init","Math","random","toString","MODULE_DEFAULT_CONFIG","endpoints","addForm","editForm","getForm","getList","deleteForm","MODULE_CONFIG_TOKEN","InjectionToken","FormConfigurationService","configFile","store","BehaviorSubject","_config","assign","config$","next","select","getFormModuleConfig","subscribe","userConfig","Config","Injectable","args","providedIn","Inject","Store","FormService","http","configurationService","add","data","model","filter","config","take","switchMap","post","map","response","Result","get","stringTemplate","update","put","delete","selectFormById","subject","undefined","state","list","pipe","forms","find","asObservable","HttpClient","SelectComponent","Component","selector","template","styles","CheckboxComponent","EmailComponent","ngOnInit","ColorComponent","Input","TableComponent","SelectionModel","ready","schema","dataEndpoint","displayedColumns","filedDisplayedColumns","dataSource","MatTableDataSource","isAllSelected","numSelected","selection","selected","length","patchValue","_a","masterToggle","clear","row","NumberComponent","TextComponent","FormsListAction","FormsListActionTypes","FormsListStartAction","FormsListSucceedAction","payload","FormsListFailedAction","UpdateFormSchemaAction","AddFormSchemaAction","GetFormSchemaAction","FormSchemaFechedAction","FormViewComponent","service","compiler","resolver","Subject","EventEmitter","schema$","takeUntil","unsubscribe","formGroup","createFrom","formGroupCreated","id","local","dispatch","ngOnDestroy","complete","generate","parentPath","parentType","formGroupPath","validators","push","minLength","ctr","path","item","addControl","formArray","FormArray","idx","controls","accepted","emit","canceled","Compiler","ComponentFactoryResolver","Output","components","checkbox","table","color","DynamicFieldDirective","container","ngOnChanges","component","instance","group","inputType","supportedTypes","join","Error","resolveComponentFactory","createComponent","Directive","ViewContainerRef","extendStatics","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__extends","__","constructor","create","__assign","t","s","i","n","arguments","call","__decorate","decorators","target","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","__metadata","metadataKey","metadataValue","metadata","initialState","status","reducer","action","concat","entityIdx","findIndex","FormReducers","list.reducer","FormGroupComponent","changed","changes","addFormGroup","root","addFormArray","array","addFormControl","control","deleteFormGroup","splice","FormArrayComponent","FormControlComponent","some","options","tableOptions","addOption","removeOption","insertOptions","EditFormAction","EditFormActionTypes","EditFormStartAction","EditFormSucceedAction","EditFormFailedAction","AddFormAction","AddFormActionTypes","AddFormStartAction","AddFormSucceedAction","AddFormFailedAction","AddFormContainerComponent","update_schema","EditFormContainerComponent","route","_super","tslib_1.__extends","params","formSchema","ActivatedRoute","AddFormComponent","submited","changeOrder","$event","EditFormComponent","valid","FormListContainerComponent","data$","FormListComponent","MainContainerComponent","AddFormEffects","actions$","router","ofType","res","catchError","Observable","of","Actions","Router","Effect","FormsListEffects","EditFormEffects","routes","children","RoutingModule","RouterModule","forChild","NgsFormModule","forRoot","ngModule","RootNgsFormModule","providers","provide","useValue","NgModule","imports","HttpClientModule","FormsModule","CommonModule","MatExpansionModule","MatSnackBarModule","MatIconModule","MatButtonModule","MatCardModule","MatCheckboxModule","MatTableModule","MatSelectModule","MatInputModule","MatFormFieldModule","MatTabsModule","MatDividerModule","FlexLayoutModule","MatRadioModule","MatSlideToggleModule","ReactiveFormsModule","declarations","entryComponents","exports","StoreModule","forFeature","EffectsModule"],"mappings":"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","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { FormSchemaModel } from \"../models\";\r\n\r\nexport namespace AddFormApiModel {\r\n\texport class Request implements HttpRequestBaseModel<Request> {\r\n\t\t_id: string;\r\n\t\tname: string;\r\n\t\tform: any[];\r\n\t\tevents: any[];\r\n\t\tconstructor(initValue = {} as AddFormApiModel.Request) {\r\n\t\t\tObject.keys(initValue).forEach(key => (this[key] = initValue[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {\r\n\t\t\t\tname: this.name,\r\n\t\t\t\tform: this.form,\r\n\t\t\t\tevents: this.events\r\n\t\t\t};\r\n\t\t}\r\n\t\tstatic get formGroup() {\r\n\t\t\treturn new FormGroup({\r\n\t\t\t\t_id: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tname: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\ttitle: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tform: new FormControl({}),\r\n\t\t\t\tevents: new FormGroup({\r\n\t\t\t\t\taccept: new FormGroup({\r\n\t\t\t\t\t\tshow: new FormControl(false),\r\n\t\t\t\t\t\ttext: new FormControl(\"Ø«Ø¨Øª\")\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tcancel: new FormGroup({\r\n\t\t\t\t\t\tshow: new FormControl(false),\r\n\t\t\t\t\t\ttext: new FormControl(\"Ø§ÙØµØ±Ø§Ù\")\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: FormSchemaModel;\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { FormSchemaModel } from \"../models\";\r\n\r\nexport namespace EditFormApiModel {\r\n\texport class Request implements HttpRequestBaseModel<Request> {\r\n\t\t_id: string;\r\n\t\tname: string;\r\n\t\tform: any[];\r\n\t\tevents: any[];\r\n\t\tconstructor(initValue = {} as EditFormApiModel.Request) {\r\n\t\t\tObject.keys(initValue).forEach(key => (this[key] = initValue[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {\r\n\t\t\t\t_id: this._id,\r\n\t\t\t\tname: this.name,\r\n\t\t\t\tform: this.form,\r\n\t\t\t\tevents: this.events\r\n\t\t\t};\r\n\t\t}\r\n\t\tstatic get formGroup() {\r\n\t\t\treturn new FormGroup({\r\n\t\t\t\t_id: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tname: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tform: new FormControl({}),\r\n\t\t\t\tevents: new FormGroup({\r\n\t\t\t\t\taccept: new FormGroup({\r\n\t\t\t\t\t\tshow: new FormControl(false),\r\n\t\t\t\t\t\ttext: new FormControl(\"Ø«Ø¨Øª\")\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tcancel: new FormGroup({\r\n\t\t\t\t\t\tshow: new FormControl(false),\r\n\t\t\t\t\t\ttext: new FormControl(\"Ø§ÙØµØ±Ø§Ù\")\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: FormSchemaModel;\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { FormSchemaModel } from \"../models\";\r\n\r\nexport namespace FormListApiModel {\r\n\texport class Request implements HttpRequestBaseModel<Request> {\r\n\t\tName: string;\r\n\t\tControls: object[];\r\n\t\tconstructor(initValue = {} as FormListApiModel.Request) {\r\n\t\t\tObject.keys(initValue).forEach((key) => (this[key] = initValue[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {\r\n\t\t\t\tName: this.Name,\r\n\t\t\t\tControls: this.Controls\r\n\t\t\t};\r\n\t\t}\r\n\t\tstatic get formGroup() {\r\n\t\t\treturn new FormGroup({\r\n\t\t\t\tName: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tControls: new FormGroup({})\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: FormSchemaModel[];\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","export interface validation {\r\n\tactive: boolean;\r\n\tmessage: string;\r\n\tvalue?: any;\r\n}\r\nexport class Validator {\r\n\trequired: validation;\r\n\tminlength: validation;\r\n\temail: validation;\r\n\r\n\tconstructor() {\r\n\t\tthis.required = {\r\n\t\t\tactive: false,\r\n\t\t\tmessage: \"Ø§ÛÙ ÙÛÙØ¯ Ø§ÙØ²Ø§ÙÛ Ø§Ø³Øª\"\r\n\t\t};\r\n\t\tthis.minlength = {\r\n\t\t\tactive: false,\r\n\t\t\tmessage: \"Ø­Ø¯Ø§ÙÙ ØªØ¹Ø¯Ø§Ø¯ Ú©Ø§Ø±Ú©ØªØ±ÙØ§\",\r\n\t\t\tvalue: 5\r\n\t\t};\r\n\t\tthis.email = {\r\n\t\t\tactive: false,\r\n\t\t\tmessage: \"ÙØ·ÙØ§ Ø§ÛÙÛÙ ØµØ­ÛØ­ ÙØ§Ø±Ø¯ ÙÙØ§ÛÛØ¯\"\r\n\t\t};\r\n\t}\r\n}\r\n","import { Validator } from \"./form-field-validator.model\";\r\n\r\nexport class FieldConfig {\r\n\tid: number;\r\n\ttype: \"group\" | \"array\" | \"control\";\r\n\tname: string;\r\n\tsubtype: string;\r\n\tdisabled?: boolean;\r\n\ttitle: string;\r\n\tparentType?: \"array\" | \"group\";\r\n\tformGroupPath?: string;\r\n\tpath?: string;\r\n\tinputType: \"select\" | \"text\" | \"number\" | \"email\" | \"color\" | \"checkbox\" | \"table\";\r\n\tvalue?: any;\r\n\torder?: number;\r\n\twidth?: number;\r\n\toptions: {\r\n\t\t[key: string]: string | number | boolean;\r\n\t}[];\r\n\tdataEndpoint?: string;\r\n\toptionsEndpoint: string;\r\n\tfields?: FieldConfig[];\r\n\tvalidator: Validator;\r\n\tconstructor(type: \"group\" | \"array\" | \"control\") {\r\n\t\tthis.type = type;\r\n\t\tif (type != \"control\") this.fields = [];\r\n\t\tthis.width = 3;\r\n\t\tthis.validator = new Validator();\r\n\t}\r\n}\r\n","import { FieldConfig } from \"./field-config.model\";\r\n\r\nexport class FormSchemaModel {\r\n\t_id: string;\r\n\tname: string;\r\n\tdescription: string;\r\n\tform: FieldConfig;\r\n\tevents = {\r\n\t\taccept: {\r\n\t\t\tshow: false,\r\n\t\t\ttext: \"Ø«Ø¨Øª\"\r\n\t\t},\r\n\t\tcancel: {\r\n\t\t\tshow: false,\r\n\t\t\ttext: \"Ø§ÙØµØ±Ø§Ù\"\r\n\t\t}\r\n\t};\r\n\r\n\tconstructor() {\r\n\t\tthis.form = new FieldConfig(\"group\");\r\n\t}\r\n\tinit() {\r\n\t\tthis._id = (Math.random() * 10).toString();\r\n\t}\r\n}\r\n","import { InjectionToken } from \"@angular/core\";\r\n\r\nexport interface FormModuleConfig {\r\n\tendpoints: {\r\n\t\taddForm: string;\r\n\t\teditForm: string;\r\n\t\tgetForm: string;\r\n\t\tgetList: string;\r\n\t\tdeleteForm: string;\r\n\t};\r\n}\r\nexport const MODULE_DEFAULT_CONFIG: FormModuleConfig = {\r\n\tendpoints: {\r\n\t\taddForm: \"\",\r\n\t\teditForm: \"\",\r\n\t\tgetForm: \"\",\r\n\t\tgetList: \"\",\r\n\t\tdeleteForm: \"\"\r\n\t}\r\n};\r\nexport const MODULE_CONFIG_TOKEN = new InjectionToken<FormModuleConfig>(\"FormModuleConfig\");\r\n","import { BehaviorSubject } from \"rxjs\";\r\nimport { Inject, Injectable } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { getFormModuleConfig } from \"@soushians/config\";\r\n\r\nimport { FormModuleConfig } from \"../form.config\";\r\nimport { MODULE_CONFIG_TOKEN, MODULE_DEFAULT_CONFIG } from \"../form.config\";\r\nimport { MainContainerState } from \"../main-container\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class FormConfigurationService {\r\n\tprivate _config: FormModuleConfig;\r\n\tget config() {\r\n\t\treturn this._config;\r\n\t}\r\n\tconfig$ = new BehaviorSubject(MODULE_DEFAULT_CONFIG);\r\n\r\n\tconstructor(@Inject(MODULE_CONFIG_TOKEN) configFile, private store: Store<MainContainerState>) {\r\n\t\tthis._config = Object.assign({}, MODULE_DEFAULT_CONFIG, configFile);\r\n\t\tthis.config$.next(this._config);\r\n\t\tthis.store.select(getFormModuleConfig).subscribe(userConfig => {\r\n\t\t\tif (!userConfig) return;\r\n\t\t\tthis._config = Object.assign({}, this._config, userConfig.Config);\r\n\t\t\tthis.config$.next(this._config);\r\n\t\t});\r\n\t}\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs/Rx\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\nimport { filter, map, withLatestFrom } from \"rxjs/operators\";\r\n\r\nimport { stringTemplate } from \"@soushians/shared\";\r\n\r\nimport { FormSchemaModel, AddFormApiModel, EditFormApiModel, FormListApiModel } from \"../models\";\r\nimport { FormConfigurationService } from \"./form-configuration.service\";\r\n\r\nimport { MainContainerState } from \"../main-container/main-container.reducers\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class FormService {\r\n\tconstructor(\r\n\t\tprivate http: HttpClient,\r\n\t\tprivate store: Store<MainContainerState>,\r\n\t\tprivate configurationService: FormConfigurationService\r\n\t) {}\r\n\r\n\tadd(data: AddFormApiModel.Request): Observable<FormSchemaModel> {\r\n\t\tconst model = new AddFormApiModel.Request(data);\r\n\t\treturn this.configurationService.config$\r\n\t\t\t.filter((config) => config.endpoints.addForm != \"\")\r\n\t\t\t.take(1)\r\n\t\t\t.switchMap((config) => this.http.post(config.endpoints.addForm, model.getRequestBody()))\r\n\t\t\t.map((response: AddFormApiModel.Response) => response.Result);\r\n\t}\r\n\tget(_id: string): Observable<FormSchemaModel> {\r\n\t\treturn this.configurationService.config$\r\n\t\t\t.filter((config) => config.endpoints.getForm != \"\")\r\n\t\t\t.take(1)\r\n\t\t\t.switchMap((config) => this.http.get(stringTemplate(config.endpoints.getForm, { _id })))\r\n\t\t\t.map((response: EditFormApiModel.Response) => response.Result);\r\n\t}\r\n\tgetList(): Observable<FormSchemaModel[]> {\r\n\t\treturn this.configurationService.config$\r\n\t\t\t.filter((config) => config.endpoints.getList != \"\")\r\n\t\t\t.switchMap((config) => this.http.get(config.endpoints.getList))\r\n\t\t\t.map((response: FormListApiModel.Response) => response.Result);\r\n\t}\r\n\tupdate(data: EditFormApiModel.Request): Observable<FormSchemaModel> {\r\n\t\tconst model = new EditFormApiModel.Request(data);\r\n\t\treturn this.configurationService.config$\r\n\t\t\t.filter((config) => config.endpoints.editForm != \"\")\r\n\t\t\t.take(1)\r\n\t\t\t.switchMap((config) => this.http.put(config.endpoints.editForm, model.getRequestBody()))\r\n\t\t\t.map((response: EditFormApiModel.Response) => response.Result);\r\n\t}\r\n\tdelete(_id: string) {\r\n\t\treturn this.configurationService.config$\r\n\t\t\t.filter((config) => config.endpoints.deleteForm != \"\")\r\n\t\t\t.switchMap((config) => this.http.get(config.endpoints.deleteForm));\r\n\t}\r\n\tselectFormById(_id: string): Observable<FormSchemaModel> {\r\n\t\tconst subject = new BehaviorSubject<FormSchemaModel>(undefined);\r\n\t\tthis.store\r\n\t\t\t.select((state) => state.form.list.data)\r\n\t\t\t.pipe(filter((forms) => forms != null), map((forms) => forms.find((form) => form._id == _id)))\r\n\t\t\t.subscribe((FormSchemaModel) => subject.next(FormSchemaModel));\r\n\t\treturn subject.asObservable();\r\n\t}\r\n}\r\n","import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { FieldConfig, Field } from \"../../../models\";\r\nimport { FormGroup } from \"@angular/forms\";\r\n\r\n@Component({\r\n\tselector: \"ngs-form-control-select\",\r\n\ttemplate: `<div  [formGroup]=\"group\">\r\n<mat-form-field>\r\n    <mat-select [formControlName]=\"config.name\" [placeholder]=\"config.title\">\r\n      <mat-option *ngFor=\"let option of config.options\" [value]=\"option.value\">{{option.key}}</mat-option>\r\n    </mat-select>\r\n</mat-form-field>\r\n</div>`,\r\n\tstyles: [`:host{display:block}.mat-form-field{width:100%}`]\r\n})\r\nexport class SelectComponent implements Field {\r\n\tconfig: FieldConfig;\r\n\tgroup: FormGroup;\r\n\tconstructor() {}\r\n}\r\n","import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\n\r\nimport { Field, FieldConfig } from \"../../../models\";\r\n\r\n@Component({\r\n\tselector: \"ngs-form-control-checkbox\",\r\n\ttemplate: `<div [formGroup]=\"group\">\r\n    <mat-checkbox [formControlName]=\"config.name\">\r\n        {{config.title}}\r\n    </mat-checkbox>\r\n</div>`,\r\n\tstyles: [`:host{display:block}.mat-form-field{width:100%}`]\r\n})\r\nexport class CheckboxComponent implements Field {\r\n\tconfig: FieldConfig;\r\n\tgroup: FormGroup;\r\n\r\n\tconstructor() {}\r\n}\r\n","import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\n\r\nimport { FieldConfig, Field } from \"../../../models\";\r\n\r\n@Component({\r\n\tselector: \"ngs-form-control-email\",\r\n\ttemplate: `<div  [formGroup]=\"group\">\r\n<mat-form-field fxFlexFill>\r\n    <input matInput [type]=\"config.inputType\" [placeholder]=\"config.title\" [formControlName]=\"config.name\">\r\n</mat-form-field>\r\n</div>`,\r\n\tstyles: [`:host{display:block}.mat-form-field{width:100%}`]\r\n})\r\nexport class EmailComponent implements Field {\r\n\tconfig: FieldConfig;\r\n\tgroup: FormGroup;\r\n\r\n\tconstructor() {}\r\n\r\n\tngOnInit() {}\r\n}\r\n","import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\n\r\nimport { FieldConfig, Field } from \"../../../models\";\r\n\r\n@Component({\r\n\tselector: \"ngs-form-control-color\",\r\n\ttemplate: `<div  [formGroup]=\"form\">\r\n<mat-form-field fxFlexFill>\r\n    <input matInput [type]=\"schema.inputType\" [placeholder]=\"schema.title\" [formControlName]=\"schema.name\">\r\n</mat-form-field>\r\n</div>`,\r\n\tstyles: [`:host{display:block}.mat-form-field{width:100%}`]\r\n})\r\nexport class ColorComponent implements Field {\r\n\tconfig: FieldConfig;\r\n\tgroup: FormGroup;\r\n\r\n\t@Input() form: FormGroup;\r\n\t@Input() schema: FieldConfig;\r\n\tconstructor() {}\r\n\r\n\tngOnInit() {}\r\n}\r\n","import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\n\r\nimport { FieldConfig, Field } from \"../../../models\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { MatTableDataSource } from \"@angular/material\";\r\nimport { SelectionModel } from \"@angular/cdk/collections\";\r\n\r\n@Component({\r\n\tselector: \"ngs-form-control-table\",\r\n\ttemplate: `<div class=\"example-container mat-elevation-z8\" *ngIf=\"ready\">\r\n    <mat-table #table [dataSource]=\"dataSource\">\r\n  \r\n      <ng-container matColumnDef=\"select\">\r\n        <mat-header-cell *matHeaderCellDef>\r\n          <mat-checkbox (change)=\"$event ? masterToggle() : null\"\r\n            [checked]=\"selection.hasValue() && isAllSelected()\"\r\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\">\r\n          </mat-checkbox>\r\n        </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let row\">\r\n          <mat-checkbox (click)=\"$event.stopPropagation()\"\r\n            (change)=\"$event ? selection.toggle(row) : null\"\r\n            [checked]=\"selection.isSelected(row)\">\r\n          </mat-checkbox>\r\n        </mat-cell>\r\n      </ng-container>\r\n\r\n      <div *ngFor=\"let col of filedDisplayedColumns\">\r\n        <ng-container  [matColumnDef]=\"col\">\r\n          <mat-header-cell *matHeaderCellDef> {{col}} </mat-header-cell>\r\n          <mat-cell *matCellDef=\"let element\"> {{element[col]}} </mat-cell>\r\n        </ng-container>\r\n      </div>\r\n        \r\n      <ng-container matColumnDef=\"actions\">\r\n        <mat-header-cell *matHeaderCellDef></mat-header-cell>\r\n        <mat-cell class='left-align' *matCellDef=\"let row\">\r\n          <button mat-icon-button>\r\n            <mat-icon aria-label=\"Ø§ÙØªØ®Ø§Ø¨\">arrow_back</mat-icon>\r\n          </button>\r\n        </mat-cell>\r\n      </ng-container>\r\n    \r\n      <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n      <mat-row *matRowDef=\"let row; columns: displayedColumns;\" (click)=\"selection.toggle(row)\"></mat-row>\r\n\r\n    </mat-table>\r\n  </div>\r\n\r\n\r\n<!-- <mat-form-field fxFlexFill [formGroup]=\"form\">\r\n  \r\n  <input matInput [id]=\"schema.name\" [type]=\"schema.inputType\" [placeholder]=\"schema.title\" [formControlName]=\"schema.name\">\r\n  \r\n  <mat-error *ngIf=\"form.get(schema.name).errors?.required\">\r\n    {{schema.validator.required.message}}\r\n  </mat-error>\r\n  <mat-error *ngIf=\"form.get(schema.name).errors?.minlength\">\r\n    {{schema.validator.minlength.message}}\r\n  </mat-error>\r\n  <mat-error *ngIf=\"form.get(schema.name).email?.minlength\">\r\n    {{schema.validator.email.message}}\r\n  </mat-error>\r\n</mat-form-field> -->\r\n  \r\n  <!-- <div *ngIf=\"form.get(schema.name).invalid && (form.get(schema.name).dirty || form.get(schema.name).touched)\" class=\"alert alert-danger\">\r\n  </div> -->`,\r\n\tstyles: [`:host{display:block}.mat-form-field{width:100%}`]\r\n})\r\nexport class TableComponent implements OnInit, Field {\r\n\tconfig: FieldConfig;\r\n\tgroup: FormGroup;\r\n\t@Input() form: FormGroup;\r\n\t@Input() schema: FieldConfig;\r\n\tready: boolean;\r\n\tdisplayedColumns: string[];\r\n\tfiledDisplayedColumns: string[];\r\n\tdataSource: MatTableDataSource<any>;\r\n\r\n\tselection = new SelectionModel<any>(true, []);\r\n\tconstructor(private http: HttpClient) {\r\n\t\tthis.ready = false;\r\n\t}\r\n\tngOnInit() {\r\n\t\tthis.http.get(this.schema.dataEndpoint).subscribe((data: any) => {\r\n\t\t\tthis.ready = true;\r\n\t\t\tthis.displayedColumns = data.displayedColumns;\r\n\t\t\tthis.filedDisplayedColumns = data.filedDisplayedColumns;\r\n\t\t\tthis.dataSource = new MatTableDataSource<any>(data.dataSource);\r\n\t\t});\r\n\t}\r\n\r\n\t/** Whether the number of selected elements matches the total number of rows. */\r\n\tisAllSelected() {\r\n\t\tconst numSelected = this.selection.selected.length;\r\n\t\tthis.form.patchValue({\r\n\t\t\t[this.schema.name]: this.selection.selected\r\n\t\t});\r\n\t\tconst numRows = this.dataSource.data.length;\r\n\t\treturn numSelected === numRows;\r\n\t}\r\n\r\n\t/** Selects all rows if they are not all selected; otherwise clear selection. */\r\n\tmasterToggle() {\r\n\t\tthis.isAllSelected() ? this.selection.clear() : this.dataSource.data.forEach(row => this.selection.select(row));\r\n\t}\r\n}\r\n","import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\n\r\nimport { FieldConfig } from \"../../../models\";\r\n\r\n@Component({\r\n\tselector: \"ngs-form-control-number\",\r\n\ttemplate: `<div  [formGroup]=\"form\">\r\n    <mat-form-field fxFlexFill>\r\n        <input matInput [type]=\"schema.inputType\" [placeholder]=\"schema.title\" [formControlName]=\"schema.name\">\r\n    </mat-form-field>\r\n</div>`,\r\n\tstyles: [`:host{display:block}.mat-form-field{width:100%}`]\r\n})\r\nexport class NumberComponent implements OnInit {\r\n\t@Input() form: FormGroup;\r\n\t@Input() schema: FieldConfig;\r\n\tconstructor() {}\r\n\r\n\tngOnInit() {}\r\n}\r\n","import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\n\r\nimport { FieldConfig, Field } from \"../../../models\";\r\n\r\n@Component({\r\n\tselector: \"ngs-form-control-text\",\r\n\ttemplate: `<mat-form-field fxFlexFill [formGroup]=\"group\">\r\n\r\n  <input matInput [id]=\"config.name\" [type]=\"config.inputType\" [placeholder]=\"config.title\" [formControlName]=\"config.name\">\r\n\r\n  <mat-error *ngIf=\"group.get(config.name).errors?.required\">\r\n    {{config.validator.required.message}}\r\n  </mat-error>\r\n  <mat-error *ngIf=\"group.get(config.name).errors?.minlength\">\r\n    {{config.validator.minlength.message}}\r\n  </mat-error>\r\n  <!-- <mat-error *ngIf=\"group.get(config.name).email?.minlength\">\r\n    {{config.validator.email.message}}\r\n  </mat-error> -->\r\n\r\n  <!-- <div *ngIf=\"form.get(config.name).invalid && (form.get(config.name).dirty || form.get(config.name).touched)\" class=\"alert alert-danger\">\r\n  </div> -->\r\n\r\n</mat-form-field>`,\r\n\tstyles: [`:host{display:block}.mat-form-field{width:100%}`]\r\n})\r\nexport class TextComponent implements Field {\r\n\tconfig: FieldConfig;\r\n\tgroup: FormGroup;\r\n\r\n\tconstructor() {}\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { FormSchemaModel } from \"../models\";\r\n\r\nexport enum FormsListActionTypes {\r\n\tFORMS_LIST = \"[FORM][LIST] FORMS_LIST\",\r\n\tFORMS_LIST_START = \"[FORM][LIST] FORMS_LIST_START\",\r\n\tFORMS_LIST_SUCCEED = \"[FORM][LIST] FORMS_LIST_SUCCEED\",\r\n\tFORMS_LIST_FAILED = \"[FORM][LIST] FORMS_LIST_FAILED\",\r\n\tADD_FORM_SCHEMA = \"[FORM][LIST] ADD_FORM_SCHEMA\",\r\n\tFORM_SCHEMA_UPDATE = \"[FORM][LIST] FORM_SCHEMA_UPDATE\",\r\n\tGET_FORM_SCHEMA = \"[FORM][LIST] GET_FORM_SCHEMA\",\r\n\tFORM_SCHEMA_FETCHED = \"[FORM][LIST] FORM_SCHEMA_FETCHED\"\r\n}\r\n\r\nexport class FormsListAction implements Action {\r\n\treadonly type = FormsListActionTypes.FORMS_LIST;\r\n}\r\nexport class FormsListStartAction implements Action {\r\n\treadonly type = FormsListActionTypes.FORMS_LIST_START;\r\n}\r\nexport class FormsListSucceedAction implements Action {\r\n\treadonly type = FormsListActionTypes.FORMS_LIST_SUCCEED;\r\n\tconstructor(public payload: FormSchemaModel[]) {}\r\n}\r\nexport class FormsListFailedAction implements Action {\r\n\treadonly type = FormsListActionTypes.FORMS_LIST_FAILED;\r\n}\r\nexport class UpdateFormSchemaAction implements Action {\r\n\treadonly type = FormsListActionTypes.FORM_SCHEMA_UPDATE;\r\n\tconstructor(public payload: FormSchemaModel) {}\r\n}\r\nexport class AddFormSchemaAction implements Action {\r\n\treadonly type = FormsListActionTypes.ADD_FORM_SCHEMA;\r\n\tconstructor(public payload: FormSchemaModel) {}\r\n}\r\nexport class GetFormSchemaAction implements Action {\r\n\treadonly type = FormsListActionTypes.GET_FORM_SCHEMA;\r\n\tconstructor(public payload: string) {}\r\n}\r\nexport class FormSchemaFechedAction implements Action {\r\n\treadonly type = FormsListActionTypes.FORM_SCHEMA_FETCHED;\r\n\tconstructor(public payload: FormSchemaModel) {}\r\n}\r\n\r\nexport type FormsListActions =\r\n\t| FormsListAction\r\n\t| FormsListStartAction\r\n\t| FormsListSucceedAction\r\n\t| FormsListFailedAction\r\n\t| UpdateFormSchemaAction\r\n\t| AddFormSchemaAction\r\n\t| GetFormSchemaAction\r\n\t| FormSchemaFechedAction;\r\n","import {\r\n\tComponent,\r\n\tOnInit,\r\n\tViewChild,\r\n\tViewContainerRef,\r\n\tComponentFactoryResolver,\r\n\tCompiler,\r\n\tReflectiveInjector,\r\n\tNgModule,\r\n\tInput,\r\n\tOutput,\r\n\tEventEmitter,\r\n\tOnChanges,\r\n\tDirective,\r\n\tType,\r\n\tOnDestroy\r\n} from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { FormControl, FormGroup, FormArray, AbstractControl, Validators } from \"@angular/forms\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\nimport { Subject } from \"rxjs\";\r\nimport { takeUntil } from \"rxjs/operators\";\r\nimport { ComponentRef } from \"@angular/core/src/linker/component_factory\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport {\r\n\tSelectComponent,\r\n\tEmailComponent,\r\n\tColorComponent,\r\n\tCheckboxComponent,\r\n\tTextComponent,\r\n\tTableComponent\r\n} from \"../form-controls\";\r\nimport { FormService } from \"../../services/form.service\";\r\nimport { MainContainerState } from \"../../main-container/main-container.reducers\";\r\nimport { GetFormSchemaAction } from \"../../list/list.actions\";\r\nimport { Field, FieldConfig, FormSchemaModel } from \"../../models\";\r\n\r\n@Component({\r\n\tselector: \"ngs-form-view\",\r\n\ttemplate: `<form *ngIf=\"formGroupCreated && card\" class=\"ngs-dynamic-form\" [formGroup]=\"formGroup\" (ngSubmit)=\"accepted()\">\r\n  <mat-card>\r\n    <mat-card-title>\r\n      {{(schema$ | async)?.name}}\r\n    </mat-card-title>\r\n    <mat-card-content fxLayout=\"row wrap\" fxLayoutGap=\"25px\">\r\n      <div  *ngFor=\"let field of (schema$ | async)?.form.fields;\" [fxFlex]=\"field.width * 10\">\r\n        <ng-container dynamicField  [config]=\"field\" [group]=\"formGroup\"></ng-container>\r\n      </div>\r\n    </mat-card-content>\r\n    <mat-card-actions align=\"end\">\r\n        <button type=\"button\" *ngIf=\"(schema$ | async)?.events.cancel.show\" (click)=\"cancel.emit()\" mat-button color=\"primary\">{{(schema$ | async)?.events.cancel.text}}</button>\r\n        <button type=\"submit\" *ngIf=\"(schema$ | async)?.events.accept.show\" mat-raised-button color=\"primary\">{{(schema$ | async)?.events.accept.text}}</button>\r\n      </mat-card-actions>\r\n  </mat-card>\r\n</form>\r\n\r\n<form *ngIf=\"formGroupCreated && !card\" class=\"ngs-dynamic-form\" [formGroup]=\"formGroup\" (ngSubmit)=\"accepted()\">\r\n  <div>\r\n    <h3>\r\n      {{(schema$ | async)?.name}}\r\n    </h3>\r\n    <div fxLayout=\"row wrap\" fxLayoutGap=\"25px\">\r\n      <div  *ngFor=\"let field of (schema$ | async)?.form.fields;\" [fxFlex]=\"field.width * 10\">\r\n        <ng-container dynamicField  [config]=\"field\" [group]=\"formGroup\"></ng-container>\r\n      </div>\r\n    </div>\r\n    <div>\r\n      <button type=\"button\" *ngIf=\"(schema$ | async)?.events.cancel.show\" (click)=\"cancel.emit()\" mat-button color=\"primary\">{{(schema$ | async)?.events.cancel.text}}</button>\r\n      <button type=\"submit\" *ngIf=\"(schema$ | async)?.events.accept.show\" mat-raised-button color=\"primary\">{{(schema$ | async)?.events.accept.text}}</button>\r\n    </div>\r\n  </div>\r\n</form>`,\r\n\tstyles: [``]\r\n})\r\nexport class FormViewComponent implements OnDestroy {\r\n\tunsubscribe = new Subject<void>();\r\n\t@Output() accept = new EventEmitter<FormGroup>();\r\n\t@Output() cancel = new EventEmitter<FormGroup>();\r\n\t@Input() local;\r\n\t@Input() card = false;\r\n\t@Input()\r\n\tset id(id: string) {\r\n\t\tif (!this.local) this.store.dispatch(new GetFormSchemaAction(id));\r\n\t\tthis.service\r\n\t\t\t.selectFormById(id)\r\n\t\t\t.pipe(takeUntil(this.unsubscribe))\r\n\t\t\t.subscribe(schema => this.schema$.next(schema));\r\n\t}\r\n\t@Input()\r\n\tset schema(schema: FormSchemaModel) {\r\n\t\tthis.schema$.next(schema);\r\n\t}\r\n\t_id: string;\r\n\tformGroup: FormGroup;\r\n\tformGroupCreated = false;\r\n\tschema$: BehaviorSubject<FormSchemaModel>;\r\n\r\n\tconstructor(\r\n\t\tprivate service: FormService,\r\n\t\tprivate compiler: Compiler,\r\n\t\tprivate resolver: ComponentFactoryResolver,\r\n\t\tprivate store: Store<MainContainerState>\r\n\t) {\r\n\t\tthis.schema$ = new BehaviorSubject(undefined);\r\n\t\tthis.schema$.pipe(takeUntil(this.unsubscribe)).subscribe(schema => {\r\n\t\t\tif (!schema) return;\r\n\t\t\tthis.formGroup = this.createFrom(schema.form) as FormGroup;\r\n\t\t\tif (!schema.form.name) return;\r\n\t\t\tthis.formGroupCreated = true;\r\n\t\t});\r\n\t}\r\n\tngOnDestroy() {\r\n\t\tthis.unsubscribe.next();\r\n\t\tthis.unsubscribe.complete();\r\n\t}\r\n\tgenerate(schema: FormSchemaModel) {\r\n\t\tthis.schema$.next(schema);\r\n\t}\r\n\r\n\tcreateFrom(data: FieldConfig, parentPath = \"\"): AbstractControl {\r\n\t\tif (data.type == \"control\") {\r\n\t\t\tif (data.parentType == \"array\") {\r\n\t\t\t\t// parentPath = `${parentPath}.controls[${(data as FieldConfig).name}]`;\r\n\t\t\t} else if (data.parentType == \"group\") {\r\n\t\t\t\tvar formGroupPath = parentPath;\r\n\t\t\t\tparentPath = `${parentPath}.controls.${(data as FieldConfig).name}`;\r\n\t\t\t}\r\n\t\t\tvar validators = [];\r\n\t\t\tif (data.validator.required && data.validator.required.active) {\r\n\t\t\t\tvalidators.push(Validators.required);\r\n\t\t\t}\r\n\t\t\tif (data.validator.minlength && data.validator.minlength.active) {\r\n\t\t\t\tvalidators.push(Validators.minLength(data.validator.minlength.value));\r\n\t\t\t}\r\n\t\t\tif (data.validator.email && data.validator.email.active) {\r\n\t\t\t\tvalidators.push(Validators.email);\r\n\t\t\t}\r\n\t\t\tvar ctr = new FormControl(data.value, validators);\r\n\t\t\t(ctr as any).schema = data;\r\n\t\t\t(ctr as any).schema.path = parentPath;\r\n\t\t\t(ctr as any).schema.formGroupPath = formGroupPath;\r\n\t\t\treturn ctr;\r\n\t\t} else if (data.type == \"group\") {\r\n\t\t\tvar formGroup = new FormGroup({});\r\n\t\t\tif (data.parentType == undefined) {\r\n\t\t\t\tparentPath = (data as FieldConfig).name;\r\n\t\t\t} else if (data.parentType == \"array\") {\r\n\t\t\t\tparentPath = `${parentPath}.controls[${(data as FieldConfig).name}]`;\r\n\t\t\t} else if (data.parentType == \"group\") {\r\n\t\t\t\tparentPath = `${parentPath}.controls.${(data as FieldConfig).name}`;\r\n\t\t\t}\r\n\r\n\t\t\t(formGroup as any).schema = data;\r\n\t\t\t(formGroup as any).schema.path = parentPath;\r\n\t\t\tdata.fields.forEach(item => {\r\n\t\t\t\titem.parentType = \"group\";\r\n\t\t\t\tformGroup.addControl(item.name, this.createFrom(item, parentPath));\r\n\t\t\t});\r\n\t\t\treturn formGroup;\r\n\t\t} else {\r\n\t\t\tvar formArray: FormArray = new FormArray([]);\r\n\t\t\tparentPath =\r\n\t\t\t\tparentPath == \"\" ? (data as FieldConfig).name : `${parentPath}.controls.${(data as FieldConfig).name}`;\r\n\t\t\t(formArray as any).schema = data;\r\n\t\t\t(formArray as any).schema.path = parentPath;\r\n\t\t\tdata.fields.forEach((item, idx) => {\r\n\t\t\t\titem.parentType = \"array\";\r\n\t\t\t\titem.name = idx.toString();\r\n\t\t\t\tformArray.controls.push(this.createFrom(item, parentPath));\r\n\t\t\t});\r\n\t\t\treturn formArray;\r\n\t\t}\r\n\t}\r\n\r\n\taccepted() {\r\n\t\tthis.accept.emit(this.formGroup);\r\n\t}\r\n\tcanceled() {\r\n\t\tthis.cancel.emit(this.formGroup);\r\n\t}\r\n}\r\n\r\nconst components: { [type: string]: Type<Field> } = {\r\n\tcheckbox: CheckboxComponent,\r\n\ttext: TextComponent,\r\n\ttable: TableComponent,\r\n\tcolor: ColorComponent,\r\n\temail: EmailComponent,\r\n\tselect: SelectComponent\r\n};\r\n\r\n@Directive({\r\n\tselector: \"[dynamicField]\"\r\n})\r\nexport class DynamicFieldDirective implements Field, OnChanges, OnInit {\r\n\t@Input() config: FieldConfig;\r\n\r\n\t@Input() group: FormGroup;\r\n\r\n\tcomponent: ComponentRef<Field>;\r\n\r\n\tconstructor(private resolver: ComponentFactoryResolver, private container: ViewContainerRef) {}\r\n\r\n\tngOnChanges() {\r\n\t\tif (this.component) {\r\n\t\t\tthis.component.instance.config = this.config;\r\n\t\t\tthis.component.instance.group = this.group;\r\n\t\t}\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\tif (!components[this.config.inputType]) {\r\n\t\t\tconst supportedTypes = Object.keys(components).join(\", \");\r\n\t\t\tthrow new Error(\r\n\t\t\t\t`Trying to use an unsupported type (${this.config.inputType}).\r\n\t\t  Supported types: ${supportedTypes}`\r\n\t\t\t);\r\n\t\t}\r\n\t\tconst component = this.resolver.resolveComponentFactory<Field>(components[this.config.inputType]);\r\n\t\tthis.component = this.container.createComponent(component);\r\n\t\tthis.component.instance.config = this.config;\r\n\t\tthis.component.instance.group = this.group;\r\n\t}\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { responseStatusTypes } from \"@soushians/shared\";\r\nimport { FormSchemaModel } from \"../models\";\r\nimport { FormsListActionTypes, FormsListActions } from \"./list.actions\";\r\n\r\nexport interface State {\r\n\tstatus: responseStatusTypes;\r\n\tdata: FormSchemaModel[];\r\n}\r\nexport const initialState: State = {\r\n\tstatus: \"pristine\",\r\n\tdata: []\r\n};\r\nexport function reducer(state = initialState, action: FormsListActions): State {\r\n\tswitch (action.type) {\r\n\t\tcase FormsListActionTypes.FORMS_LIST: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tstatus: \"dirty\"\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase FormsListActionTypes.FORMS_LIST_START: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tstatus: \"pending\"\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase FormsListActionTypes.FORMS_LIST_SUCCEED: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: action.payload,\r\n\t\t\t\tstatus: \"succeed\"\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase FormsListActionTypes.FORMS_LIST_FAILED: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tstatus: \"failed\"\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase FormsListActionTypes.FORM_SCHEMA_UPDATE: {\r\n\t\t\tconst data = state.data.concat();\r\n\t\t\tvar entityIdx = state.data.findIndex(form => form._id == action.payload._id);\r\n\t\t\tif (entityIdx > -1) {\r\n\t\t\t\tdata[entityIdx] = Object.assign({}, data[entityIdx], action.payload);\r\n\t\t\t} else {\r\n\t\t\t\tdata.push(action.payload);\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: data\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase FormsListActionTypes.ADD_FORM_SCHEMA: {\r\n\t\t\tconst data = state.data.concat();\r\n\t\t\tvar entityIdx = state.data.findIndex(form => form._id == action.payload._id);\r\n\t\t\tif (entityIdx > -1) {\r\n\t\t\t\tdata[entityIdx] = Object.assign({}, data[entityIdx], action.payload);\r\n\t\t\t} else {\r\n\t\t\t\tdata.push(action.payload);\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: data\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase FormsListActionTypes.FORM_SCHEMA_FETCHED: {\r\n\t\t\tconst data = state.data.concat();\r\n\t\t\tvar entityIdx = state.data.findIndex(form => form._id == action.payload._id);\r\n\t\t\tif (entityIdx > -1) {\r\n\t\t\t\tdata[entityIdx] = Object.assign({}, data[entityIdx], action.payload);\r\n\t\t\t} else {\r\n\t\t\t\tdata.push(action.payload);\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: data\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tdefault: {\r\n\t\t\treturn state;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport var getStatus = (state: State) => state.status;\r\n","import * as list from \"../list/list.reducers\";\r\n\r\nexport interface FormState {\r\n\tlist: list.State;\r\n}\r\n\r\nexport const FormReducers = {\r\n\tlist: list.reducer\r\n};\r\n\r\nexport interface MainContainerState {\r\n\t\"form\": FormState;\r\n}\r\n","import { Component, Input, Output, EventEmitter } from \"@angular/core\";\r\nimport { FieldConfig } from \"../../models\";\r\n\r\n@Component({\r\n\tselector: \"app-form-group\",\r\n\ttemplate: `<mat-card>\r\n  <mat-card-content>\r\n\r\n    <mat-form-field *ngIf=\"!noHeader\">\r\n      <input matInput [(ngModel)]=\"schema.name\" placeholder=\"Name\">\r\n    </mat-form-field>\r\n\r\n    <mat-form-field *ngIf=\"!noHeader\">\r\n      <input matInput [(ngModel)]=\"schema.title\" placeholder=\"Ø¹ÙÙØ§Ù\">\r\n    </mat-form-field>\r\n\r\n    <div class=\"button-row\">\r\n      <button mat-button color=\"primary\" (click)=\"addFormGroup(schema)\"> addFormGroup </button>\r\n      <button mat-button color=\"primary\" (click)=\"addFormArray(schema)\"> addFormArray </button>\r\n      <button mat-button color=\"primary\" (click)=\"addFormControl(schema)\">addFormControl</button>\r\n    </div>\r\n\r\n    <div *ngFor=\"let field of schema.fields;let i = index\">\r\n      <div [ngSwitch]=\"field.type\">\r\n        <app-form-group *ngSwitchCase=\"'group'\" [schema]=\"field\" (change)=\"changed()\"></app-form-group>\r\n        <!-- <app-form-array *ngSwitchCase=\"'array'\" [schema]=\"field\" (change)=\"changed()\"></app-form-array> -->\r\n        <app-form-control *ngSwitchCase=\"'control'\" [schema]=\"field\" (changes)=\"changed()\" (delete)=\"deleteFormGroup(i)\"></app-form-control>\r\n      </div>\r\n    </div>\r\n\r\n  </mat-card-content>\r\n</mat-card>`\r\n})\r\nexport class FormGroupComponent {\r\n\t@Input() schema: FieldConfig;\r\n\t@Input() noHeader: boolean = false;\r\n\t@Output() changes = new EventEmitter();\r\n\t@Output() delete = new EventEmitter();\r\n\tconstructor() {}\r\n\r\n\tchanged() {\r\n\t\tthis.changes.emit();\r\n\t}\r\n\r\n\taddFormGroup(root: FieldConfig) {\r\n\t\tconst group = new FieldConfig(\"group\");\r\n\t\tgroup.fields = [];\r\n\t\troot.fields.push(group);\r\n\t\tthis.schema.id = this.schema.id + 1;\r\n\t\treturn group;\r\n\t}\r\n\taddFormArray(root: FieldConfig) {\r\n\t\tconst array = new FieldConfig(\"array\");\r\n\t\tarray.fields = [];\r\n\t\troot.fields.push(array);\r\n\t\treturn array;\r\n\t}\r\n\taddFormControl(root: FieldConfig) {\r\n\t\tconst control = new FieldConfig(\"control\");\r\n\t\troot.fields.push(control);\r\n\t\treturn control;\r\n\t}\r\n\tdeleteFormGroup(idx: number) {\r\n\t\tthis.schema.fields.splice(idx, 1);\r\n\t}\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\r\nimport { FieldConfig } from \"../../models\";\r\n\r\n@Component({\r\n\tselector: \"app-form-array\",\r\n\ttemplate: `<mat-card>\r\n  <mat-card-content>\r\n    <mat-form-field>\r\n        <input matInput [(ngModel)]=\"schema.name\" placeholder=\"Name\">\r\n    </mat-form-field>\r\n      \r\n    <div class=\"button-row\">\r\n      <button mat-button color=\"primary\" (click)=\"addFormGroup(schema)\">addFormGroup</button>\r\n      <button mat-button color=\"primary\" (click)=\"addFormArray(schema)\">addFormArray</button>\r\n      <!-- <button mat-button color=\"primary\" (click)=\"addFormControl(schema)\">addFormControl</button> -->\r\n    </div>\r\n    \r\n    <div *ngFor=\"let field of schema.fields\">\r\n      <div [ngSwitch]=\"field.type\">\r\n        <app-form-group *ngSwitchCase=\"'group'\" [schema]=\"field\" (changes)=\"changed()\"></app-form-group>\r\n        <app-form-array *ngSwitchCase=\"'array'\" [schema]=\"field\" (changes)=\"changed()\"></app-form-array>\r\n        <!-- <app-form-control *ngSwitchCase=\"'control'\" [schema]=\"field\" (change)=\"changed($event)\"></app-form-control> -->\r\n      </div>\r\n    </div>\r\n    \r\n  </mat-card-content>\r\n</mat-card>`\r\n})\r\nexport class FormArrayComponent {\r\n\t@Input() schema: FieldConfig;\r\n\t@Output() changes = new EventEmitter();\r\n\tconstructor() {}\r\n\r\n\tchanged() {\r\n\t\tthis.changes.emit();\r\n\t}\r\n\r\n\taddFormGroup(root: FieldConfig) {\r\n\t\tconst group = new FieldConfig(\"group\");\r\n\t\tgroup.fields = [];\r\n\t\troot.fields.push(group);\r\n\t\treturn group;\r\n\t}\r\n\taddFormArray(root: FieldConfig) {\r\n\t\tconst array = new FieldConfig(\"array\");\r\n\t\tarray.fields = [];\r\n\t\troot.fields.push(array);\r\n\t\treturn array;\r\n\t}\r\n\taddFormControl(root: FieldConfig) {\r\n\t\tconst control = new FieldConfig(\"control\");\r\n\t\troot.fields.push(control);\r\n\t\treturn control;\r\n\t}\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\r\nimport { FormGroup, FormControl, FormArray } from \"@angular/forms\";\r\nimport { FieldConfig } from \"../../models\";\r\n\r\n@Component({\r\n\tselector: \"app-form-control\",\r\n\ttemplate: `  <mat-expansion-panel>\r\n    <mat-expansion-panel-header>\r\n      <mat-panel-title>\r\n        <button mat-icon-button (click)=\"delete.emit()\">\r\n            <mat-icon aria-label=\" icon-button\">delete_forever</mat-icon>\r\n          </button>\r\n        {{schema.name}}\r\n      </mat-panel-title>\r\n    </mat-expansion-panel-header>\r\n      <mat-form-field>\r\n        <input matInput [(ngModel)]=\"schema.name\" (change)=\"changed()\" placeholder=\"Name\">\r\n      </mat-form-field>\r\n      \r\n      <mat-form-field>\r\n        <input matInput [(ngModel)]=\"schema.title\" (change)=\"changed()\" placeholder=\"Placeholder\"/>\r\n      </mat-form-field>\r\n      \r\n      <mat-form-field>\r\n        <mat-select [(ngModel)]=\"schema.inputType\" (change)=\"changed()\" placeholder=\"Input Type\">\r\n          <mat-option value=\"table\">table</mat-option>\r\n          <mat-option value=\"select\">select</mat-option>\r\n          <mat-option value=\"text\">text</mat-option>\r\n          <mat-option value=\"number\">number</mat-option>\r\n          <mat-option value=\"email\">email</mat-option>\r\n          <mat-option value=\"color\">color</mat-option>\r\n          <mat-option value=\"radio\">radio</mat-option>\r\n          <mat-option value=\"checkbox\">checkbox</mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field>\r\n          <input matInput [(ngModel)]=\"schema.value\" (change)=\"changed()\" placeholder=\"Value\"/>\r\n      </mat-form-field>\r\n      \r\n        <mat-form-field>\r\n          <mat-select [(ngModel)]=\"schema.width\" (change)=\"changed()\" placeholder=\"width\">\r\n            <mat-option *ngFor=\"let item of width\" [value]=\"item\">{{item}}</mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n\r\n      <div *ngIf=\"schema.inputType=='table'\" [formGroup]=\"tableOptions\">\r\n        <mat-form-field>\r\n          <input matInput (change)=\"changed()\" formControlName=\"dataEndpoint\" placeholder=\"dataEndpoint\"/>\r\n        </mat-form-field>\r\n      </div>\r\n\r\n      <div *ngIf=\"schema.inputType=='select'\">\r\n        [options]\r\n        <button (click)=\"addOption()\">+</button>\r\n        <button (click)=\"insertOptions()\">insert</button>\r\n        <div *ngFor=\"let option of options.controls;index as i\">\r\n          {{i}}\r\n          <div [formGroup]=\"options.controls[i]\">\r\n            <mat-form-field>\r\n              <input matInput (change)=\"changed()\" formControlName=\"key\" placeholder=\"key\"/>\r\n            </mat-form-field>\r\n            <mat-form-field>\r\n              <input matInput (change)=\"changed()\" formControlName=\"value\" placeholder=\"value\"/>\r\n            </mat-form-field>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <br/>\r\n      <div>\r\n        <mat-slide-toggle (change)=\"changed()\"  [(ngModel)]=\"schema.validator.required.active\">Ø§Ø¬Ø¨Ø§Ø±Û</mat-slide-toggle>\r\n        <mat-form-field>\r\n          <input matInput (change)=\"changed()\" [(ngModel)]=\"schema.validator.required.message\"  placeholder=\"Ù¾ÛØºØ§Ù\"/>\r\n        </mat-form-field>\r\n        </div>\r\n      <div>\r\n        <mat-slide-toggle (change)=\"changed()\"  [(ngModel)]=\"schema.validator.email.active\">Ø§ÛÙÛÙ</mat-slide-toggle>\r\n        <mat-form-field>\r\n          <input matInput (change)=\"changed()\" [(ngModel)]=\"schema.validator.email.message\"  placeholder=\"Ù¾ÛØºØ§Ù\"/>\r\n        </mat-form-field>\r\n      </div>\r\n      <div>\r\n        <mat-slide-toggle (change)=\"changed()\"  [(ngModel)]=\"schema.validator.minlength.active\">Ø­Ø¯Ø§ÙÙ ØªØ¹Ø¯Ø§Ø¯ Ú©Ø§Ø±Ø§Ú©ØªØ±</mat-slide-toggle>\r\n        <mat-form-field>\r\n          <input matInput (change)=\"changed()\" [(ngModel)]=\"schema.validator.minlength.message\"  placeholder=\"Ù¾ÛØºØ§Ù\"/>\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n          <input matInput (change)=\"changed()\" [(ngModel)]=\"schema.validator.minlength.value\"  placeholder=\"ØªØ¹Ø¯Ø§Ø¯ Ø­Ø¯Ø§ÙÙ Ú©Ø§Ø±Ø§Ú©ØªØ±\"/>\r\n        </mat-form-field>\r\n    </div>\r\n      \r\n  </mat-expansion-panel>`\r\n})\r\nexport class FormControlComponent {\r\n\t@Input() schema: FieldConfig;\r\n\t@Output() changes = new EventEmitter();\r\n\t@Output() delete = new EventEmitter();\r\n\r\n\twidth = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ];\r\n\toptions = new FormArray([\r\n\t\tnew FormGroup({\r\n\t\t\tkey: new FormControl(),\r\n\t\t\tvalue: new FormControl()\r\n\t\t})\r\n\t]);\r\n\ttableOptions = new FormGroup({\r\n\t\tdataEndpoint: new FormControl(\"http://localhost:3000/api/fake/packgeCompareSimpleList\")\r\n\t});\r\n\tconstructor() {}\r\n\r\n\tchanged() {\r\n\t\tif ([ this.schema.name, this.schema.title, this.schema.inputType ].some(item => !item)) return true;\r\n\t\tif (this.schema.inputType == \"table\") {\r\n\t\t\tthis.schema.options = this.tableOptions.value;\r\n\t\t} else if (this.schema.inputType == \"select\") {\r\n\t\t\tthis.schema.options = this.options.value;\r\n\t\t}\r\n\t\tthis.changes.emit();\r\n\t}\r\n\r\n\taddOption() {\r\n\t\tthis.options.push(\r\n\t\t\tnew FormGroup({\r\n\t\t\t\tkey: new FormControl(),\r\n\t\t\t\tvalue: new FormControl()\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\tremoveOption(i) {\r\n\t\tthis.options.controls.splice(i, 1);\r\n\t}\r\n\tinsertOptions() {\r\n\t\tthis.schema.options = this.options.value;\r\n\t}\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { FormSchemaModel } from \"../models\";\r\n\r\nexport enum EditFormActionTypes {\r\n\tEDIT_FORM = \"[FORM][EDIT] EDIT_FORM\",\r\n\tEDIT_FORM_START = \"[FORM][EDIT] EDIT_FORM_START\",\r\n\tEDIT_FORM_SUCCEED = \"[FORM][EDIT] EDIT_FORM_SUCCEED\",\r\n\tEDIT_FORM_FAILED = \"[FORM][EDIT] EDIT_FORM_FAILED\"\r\n}\r\n\r\nexport class EditFormAction implements Action {\r\n\treadonly type = EditFormActionTypes.EDIT_FORM;\r\n\tconstructor(public payload: FormSchemaModel) {}\r\n}\r\nexport class EditFormStartAction implements Action {\r\n\treadonly type = EditFormActionTypes.EDIT_FORM_START;\r\n\tconstructor(public payload: FormSchemaModel) {}\r\n}\r\nexport class EditFormSucceedAction implements Action {\r\n\treadonly type = EditFormActionTypes.EDIT_FORM_SUCCEED;\r\n\tconstructor(public payload: FormSchemaModel) {}\r\n}\r\nexport class EditFormFailedAction implements Action {\r\n\treadonly type = EditFormActionTypes.EDIT_FORM_FAILED;\r\n}\r\n\r\nexport type EditFormActions = EditFormAction | EditFormStartAction | EditFormSucceedAction | EditFormFailedAction;\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { FormSchemaModel } from \"../models\";\r\n\r\nexport enum AddFormActionTypes {\r\n\tADD_FORM = \"[FORM][ADD] ADD_FORM_PROFILE\",\r\n\tADD_FORM_START = \"[FORM][ADD] ADD_FORM_START\",\r\n\tADD_FORM_SUCCEED = \"[FORM][ADD] ADD_FORM_SUCCEED\",\r\n\tADD_FORM_FAILED = \"[FORM][ADD] ADD_FORM_FAILED\"\r\n}\r\n\r\nexport class AddFormAction implements Action {\r\n\treadonly type = AddFormActionTypes.ADD_FORM;\r\n\tconstructor(public payload: FormSchemaModel) {}\r\n}\r\nexport class AddFormStartAction implements Action {\r\n\treadonly type = AddFormActionTypes.ADD_FORM_START;\r\n\tconstructor(public payload: FormSchemaModel) {}\r\n}\r\nexport class AddFormSucceedAction implements Action {\r\n\treadonly type = AddFormActionTypes.ADD_FORM_SUCCEED;\r\n}\r\nexport class AddFormFailedAction implements Action {\r\n\treadonly type = AddFormActionTypes.ADD_FORM_FAILED;\r\n}\r\n\r\nexport type AddFormActions = AddFormAction | AddFormStartAction | AddFormSucceedAction | AddFormFailedAction;\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { MainContainerState } from \"../../main-container/main-container.reducers\";\r\nimport { FormSchemaModel } from \"../../models\";\r\nimport { AddFormAction } from \"../add-form.actions\";\r\nimport { AddFormSchemaAction, UpdateFormSchemaAction } from \"../../list/list.actions\";\r\nimport { FormService } from \"../../services/form.service\";\r\n\r\n@Component({\r\n\ttemplate: `<ngs-form-add \r\n\t\t\t\t\t[schema]=\"schema\" \r\n\t\t\t\t\t(changes)=\"update_schema($event)\" \r\n\t\t\t\t\t(submited)=add($event)\r\n\t\t\t\t></ngs-form-add>`\r\n})\r\nexport class AddFormContainerComponent implements OnInit {\r\n\tschema: FormSchemaModel;\r\n\tconstructor(public store: Store<MainContainerState>, public service: FormService) {}\r\n\tngOnInit() {\r\n\t\tthis.schema = new FormSchemaModel();\r\n\t\tthis.schema.init();\r\n\t\tthis.store.dispatch(new AddFormSchemaAction(this.schema));\r\n\t}\r\n\tadd(form: FormSchemaModel) {\r\n\t\tthis.store.dispatch(new AddFormAction(form));\r\n\t}\r\n\tupdate_schema(form: FormSchemaModel) {\r\n\t\tthis.store.dispatch(new UpdateFormSchemaAction(form));\r\n\t}\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { MainContainerState } from \"../../main-container/main-container.reducers\";\r\nimport { EditFormApiModel } from \"../../models\";\r\nimport { FormService } from \"../../services/form.service\";\r\nimport { EditFormAction } from \"../../edit/edit-form.actions\";\r\nimport { AddFormContainerComponent } from \"../../add/add-form-container\";\r\nimport { GetFormSchemaAction } from \"../../list/list.actions\";\r\n\r\n@Component({\r\n\ttemplate: `<edit-form\r\n\t\t\t\t\t[formGroup]=\"formGroup\"\r\n\t\t\t\t\t[schema]=\"schema\"\r\n\t\t\t\t\t(changes)=\"update_schema($event)\"\r\n\t\t\t\t\t(submited)=\"update($event)\">\r\n\t\t\t\t</edit-form>`\r\n})\r\nexport class EditFormContainerComponent extends AddFormContainerComponent {\r\n\tformGroup = EditFormApiModel.Request.formGroup;\r\n\tconstructor(public service: FormService, private route: ActivatedRoute, public store: Store<MainContainerState>) {\r\n\t\tsuper(store, service);\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\tthis.route.params\r\n\t\t\t.map((params) => params[\"_id\"])\r\n\t\t\t.subscribe((id) => this.store.dispatch(new GetFormSchemaAction(id)));\r\n\r\n\t\tthis.route.params\r\n\t\t\t.map((params) => params[\"_id\"])\r\n\t\t\t.switchMap((id) => this.service.selectFormById(id))\r\n\t\t\t.filter((data) => data != null)\r\n\t\t\t.take(1)\r\n\t\t\t.subscribe((formSchema) => {\r\n\t\t\t\tthis.schema = formSchema;\r\n\t\t\t\tthis.formGroup.patchValue(formSchema);\r\n\t\t\t});\r\n\t}\r\n\r\n\tupdate(data) {\r\n\t\tthis.store.dispatch(new EditFormAction(data));\r\n\t}\r\n}\r\n","import { Component, OnInit, EventEmitter, Output, Input } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\n\r\nimport { FormSchemaModel, AddFormApiModel, FieldConfig } from \"../../models\";\r\n\r\n@Component({\r\n\tselector: \"ngs-form-add\",\r\n\ttemplate: `<div fxLayout=\"row\" *ngIf=\"schema\">\r\n  <div [fxFlex]=\"50\" *ngIf=\"formGroup\">\r\n    <form [formGroup]=\"formGroup\">\r\n      <mat-card>\r\n        <mat-card-title>Ø§ÛØ¬Ø§Ø¯ ÙØ±Ù Ø¬Ø¯ÛØ¯</mat-card-title>\r\n        <mat-card-content>\r\n          <mat-form-field>\r\n            <input type=\"text\" matInput (change)=\"changed()\" placeholder=\"ÙØ§Ù ÙØ±Ù\" formControlName=\"name\">\r\n          </mat-form-field>\r\n          <!-- <div class=\"button-row\">\r\n                <button mat-button color=\"primary\" (click)=\"addFormGroup(schema.form)\">Add form group</button>\r\n                <button mat-button color=\"primary\" (click)=\"addFormArray(schema.form)\">Add form array</button>\r\n                <button mat-button color=\"primary\" (click)=\"addFormControl(schema.form)\">Add form control</button>\r\n              </div> -->\r\n        </mat-card-content>\r\n      </mat-card>\r\n      <mat-card>\r\n        <mat-card-content>\r\n          <div [ngSwitch]=\"schema.form?.type\">\r\n            <app-form-group *ngSwitchCase=\"'group'\" [schema]=\"schema.form\" noHeader=\"true\" (changes)=\"changed()\"></app-form-group>\r\n            <app-form-array *ngSwitchCase=\"'array'\" [schema]=\"schema.form\" (changes)=\"changed()\"></app-form-array>\r\n          </div>\r\n        </mat-card-content>\r\n        <mat-card-actions>\r\n          <!-- <button mat-raised-button color=\"primary\" (click)=\"form.generate(schema)\">Ø§ÛØ¬Ø§Ø¯ ÙØ±Ù</button> -->\r\n          <button mat-raised-button color=\"primary\" (click)=\"emit()\" type=\"submit\">Ø«Ø¨Øª</button>\r\n        </mat-card-actions>\r\n\r\n        <div [formGroup]=\"$any(formGroup.controls.events).controls.accept\">\r\n          <mat-slide-toggle (change)=\"changed()\" formControlName=\"show\">ÙÙØ§ÛØ´ ØªØ§ÛÛØ¯</mat-slide-toggle>\r\n          <mat-form-field>\r\n            <input type=\"text\" (change)=\"changed()\" matInput placeholder=\"ÙØªÙ ØªØ§ÛÛØ¯\" formControlName=\"text\">\r\n          </mat-form-field>\r\n        </div>\r\n        <div [formGroup]=\"$any(formGroup.controls.events).controls.cancel\">\r\n          <mat-slide-toggle (change)=\"changed()\" formControlName=\"show\">ÙÙØ§ÛØ´ Ø§ÙØµØ±Ø§Ù</mat-slide-toggle>\r\n          <mat-form-field>\r\n            <input type=\"text\" (change)=\"changed()\" matInput placeholder=\"ÙØªÙ Ø§ÙØµØ±Ø§Ù\" formControlName=\"text\">\r\n          </mat-form-field>\r\n        </div>\r\n\r\n      </mat-card>\r\n    </form>\r\n  </div>\r\n  <div [fxFlex]=\"50\">\r\n    <ngs-form-view [local]='true' [id]=\"schema._id\"></ngs-form-view>\r\n  </div>\r\n</div>`\r\n})\r\nexport class AddFormComponent {\r\n\t@Input() schema: FormSchemaModel;\r\n\t@Input() formGroup = AddFormApiModel.Request.formGroup;\r\n\t@Output() submited = new EventEmitter();\r\n\t@Output() changes = new EventEmitter();\r\n\r\n\temit() {\r\n\t\tthis.formGroup.patchValue({ form: this.schema.form });\r\n\t\tthis.submited.emit(this.formGroup.value);\r\n\t}\r\n\tchanged() {\r\n\t\tthis.formGroup.patchValue({ form: this.schema.form });\r\n\t\tthis.changes.emit(this.formGroup.value);\r\n\t}\r\n\tchangeOrder($event) {}\r\n\r\n\taddFormGroup(root: FieldConfig) {\r\n\t\tconst group = new FieldConfig(\"group\");\r\n\t\tgroup.fields = [];\r\n\t\troot.fields.push(group);\r\n\t\treturn group;\r\n\t}\r\n\taddFormArray(root: FieldConfig) {\r\n\t\tconst array = new FieldConfig(\"array\");\r\n\t\tarray.fields = [];\r\n\t\troot.fields.push(array);\r\n\t\treturn array;\r\n\t}\r\n\taddFormControl(root: FieldConfig) {\r\n\t\tconst control = new FieldConfig(\"control\");\r\n\t\troot.fields.push(control);\r\n\t\treturn control;\r\n\t}\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\n\r\nimport { AddFormComponent } from \"../../add/add-form\";\r\n\r\n@Component({\r\n\tselector: \"edit-form\",\r\n\ttemplate: `<div fxLayout=\"row\" *ngIf=\"schema\">\r\n  <div [fxFlex]=\"50\" *ngIf=\"formGroup\">\r\n    <form [formGroup]=\"formGroup\">\r\n      <mat-card>\r\n        <mat-card-title>Ø§ÛØ¬Ø§Ø¯ ÙØ±Ù Ø¬Ø¯ÛØ¯</mat-card-title>\r\n        <mat-card-content>\r\n          <mat-form-field>\r\n            <input type=\"text\" matInput (change)=\"changed()\" placeholder=\"ÙØ§Ù ÙØ±Ù\" formControlName=\"name\">\r\n          </mat-form-field>\r\n          <!-- <div class=\"button-row\">\r\n                <button mat-button color=\"primary\" (click)=\"addFormGroup(schema.form)\">Add form group</button>\r\n                <button mat-button color=\"primary\" (click)=\"addFormArray(schema.form)\">Add form array</button>\r\n                <button mat-button color=\"primary\" (click)=\"addFormControl(schema.form)\">Add form control</button>\r\n              </div> -->\r\n        </mat-card-content>\r\n      </mat-card>\r\n      <mat-card>\r\n        <mat-card-content>\r\n          <div [ngSwitch]=\"schema.form?.type\">\r\n            <app-form-group *ngSwitchCase=\"'group'\" [schema]=\"schema.form\" noHeader=\"true\" (changes)=\"changed()\"></app-form-group>\r\n            <app-form-array *ngSwitchCase=\"'array'\" [schema]=\"schema.form\" (changes)=\"changed()\"></app-form-array>\r\n          </div>\r\n        </mat-card-content>\r\n        <mat-card-actions>\r\n          <!-- <button mat-raised-button color=\"primary\" (click)=\"$any(form).generate(schema)\">Ø§ÛØ¬Ø§Ø¯ ÙØ±Ù</button> -->\r\n          <button mat-raised-button color=\"primary\" (click)=\"emit()\" type=\"submit\">Ø«Ø¨Øª</button>\r\n        </mat-card-actions>\r\n\r\n        <div [formGroup]=\"$any(formGroup.controls.events).controls.accept\">\r\n          <mat-slide-toggle (change)=\"changed()\" formControlName=\"show\">ÙÙØ§ÛØ´ ØªØ§ÛÛØ¯</mat-slide-toggle>\r\n          <mat-form-field>\r\n            <input type=\"text\" (change)=\"changed()\" matInput placeholder=\"ÙØªÙ ØªØ§ÛÛØ¯\" formControlName=\"text\">\r\n          </mat-form-field>\r\n        </div>\r\n        <div [formGroup]=\"$any(formGroup.controls.events).controls.cancel\">\r\n          <mat-slide-toggle (change)=\"changed()\" formControlName=\"show\">ÙÙØ§ÛØ´ Ø§ÙØµØ±Ø§Ù</mat-slide-toggle>\r\n          <mat-form-field>\r\n            <input type=\"text\" (change)=\"changed()\" matInput placeholder=\"ÙØªÙ Ø§ÙØµØ±Ø§Ù\" formControlName=\"text\">\r\n          </mat-form-field>\r\n        </div>\r\n\r\n      </mat-card>\r\n    </form>\r\n  </div>\r\n  <div [fxFlex]=\"50\">\r\n    <ngs-form-view [local]='true' [id]=\"schema._id\"></ngs-form-view>\r\n  </div>\r\n</div>`\r\n})\r\nexport class EditFormComponent extends AddFormComponent {\r\n\t@Input() schema: any;\r\n\temit() {\r\n\t\tif (!this.formGroup.valid) return;\r\n\t\treturn this.submited.emit(this.formGroup.value);\r\n\t}\r\n}\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { MainContainerState } from \"../../main-container\";\r\nimport { FormSchemaModel } from \"../../models\";\r\nimport { FormsListAction } from \"../../list/list.actions\";\r\n\r\n@Component({\r\n\ttemplate: `<form-list\r\n\t\t\t\t\t[data]=\"data$\">\r\n\t\t\t\t</form-list>`\r\n})\r\nexport class FormListContainerComponent implements OnInit {\r\n\tdata$: Observable<FormSchemaModel[]>;\r\n\tconstructor(public store: Store<MainContainerState>) {\r\n\t\tthis.data$ = this.store.select(state => state.form.list.data);\r\n\t}\r\n\tngOnInit() {\r\n\t\tthis.store.dispatch(new FormsListAction());\r\n\t}\r\n}\r\n","import { Component, Input } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { FormSchemaModel } from \"../../models\";\r\n\r\n@Component({\r\n\tselector: \"form-list\",\r\n\ttemplate: `<div fxLayout=\"row\" fxLayoutWrap fxLayoutAlign=\"center center\" >\r\n    <mat-card class=\"cards-item\" *ngFor=\"let item of (data$ | async)\" fxFlex=\"51\">\r\n      <h3>\r\n        <a [routerLink]=\"['edit' ,  item._id]\">\r\n          <mat-icon aria-label=\"edit form\">edit</mat-icon>\r\n        </a>\r\n        {{item.name}}\r\n      </h3>\r\n  </mat-card>\r\n</div>`\r\n})\r\nexport class FormListComponent {\r\n\t@Input(\"data\") data$: Observable<FormSchemaModel[]>;\r\n}\r\n","import { Component, OnInit } from \"@angular/core\";\r\n\r\nimport * as MainContainerReducer from \"../../main-container/main-container.reducers\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { FormSchemaModel } from \"../../models\";\r\n\r\n@Component({\r\n\ttemplate: \"<router-outlet></router-outlet>\"\r\n})\r\nexport class MainContainerComponent {\r\n\tconstructor(private route: ActivatedRoute, private store: Store<MainContainerReducer.MainContainerState>) {}\r\n}\r\n","import \"rxjs/add/operator/map\";\r\nimport \"rxjs/add/operator/mergeMap\";\r\nimport \"rxjs/add/operator/switchMap\";\r\n\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { of } from \"rxjs/observable/of\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { FormService } from \"../services/form.service\";\r\nimport { AddFormApiModel } from \"../models\";\r\nimport { AddFormActionTypes, AddFormStartAction, AddFormSucceedAction, AddFormFailedAction } from \"./add-form.actions\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\n\r\n@Injectable()\r\nexport class AddFormEffects {\r\n\tconstructor(private actions$: Actions<any>, private router: Router, private service: FormService) {}\r\n\r\n\t@Effect()\r\n\tAddForm$ = this.actions$\r\n\t\t.ofType(AddFormActionTypes.ADD_FORM)\r\n\t\t.pipe(map(action => action.payload), map(data => new AddFormStartAction(data)));\r\n\r\n\t@Effect()\r\n\tAddFormStart$ = this.actions$\r\n\t\t.ofType(AddFormActionTypes.ADD_FORM_START)\r\n\t\t.pipe(\r\n\t\t\tmap(action => action.payload),\r\n\t\t\tswitchMap((data: AddFormApiModel.Request) => this.service.add(data)),\r\n\t\t\tmap(res => new AddFormSucceedAction()),\r\n\t\t\tcatchError(() => Observable.of(new AddFormFailedAction()))\r\n\t\t);\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { of } from \"rxjs/observable/of\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { switchMap, map, catchError } from \"rxjs/operators\";\r\n\r\nimport { FormService } from \"../services/form.service\";\r\nimport { FormSchemaModel } from \"../models\";\r\nimport {\r\n\tFormsListAction,\r\n\tFormsListActionTypes,\r\n\tFormsListActions,\r\n\tFormsListFailedAction,\r\n\tFormsListStartAction,\r\n\tFormsListSucceedAction,\r\n\tFormSchemaFechedAction\r\n} from \"./list.actions\";\r\n\r\n@Injectable()\r\nexport class FormsListEffects {\r\n\tconstructor(private actions$: Actions<any>, private router: Router, private service: FormService) {}\r\n\r\n\t@Effect()\r\n\tEditProfileRequest$ = this.actions$.ofType(FormsListActionTypes.FORMS_LIST).map(data => new FormsListStartAction());\r\n\r\n\t@Effect()\r\n\tGetForm$ = this.actions$\r\n\t\t.ofType(FormsListActionTypes.GET_FORM_SCHEMA)\r\n\t\t.pipe(\r\n\t\t\tmap(action => action.payload),\r\n\t\t\tswitchMap(id => this.service.get(id)),\r\n\t\t\tmap(formSchema => new FormSchemaFechedAction(formSchema))\r\n\t\t);\r\n\r\n\t@Effect()\r\n\tget_forms_list$ = this.actions$\r\n\t\t.ofType(FormsListActionTypes.FORMS_LIST_START)\r\n\t\t.pipe(\r\n\t\t\tswitchMap((data: any) => this.service.getList()),\r\n\t\t\tmap(res => new FormsListSucceedAction(res)),\r\n\t\t\tcatchError(() => Observable.of(new FormsListFailedAction()))\r\n\t\t);\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { of } from \"rxjs/observable/of\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { FormService } from \"../services/form.service\";\r\nimport { EditFormApiModel } from \"../models\";\r\nimport {\r\n\tEditFormActionTypes,\r\n\tEditFormStartAction,\r\n\tEditFormSucceedAction,\r\n\tEditFormFailedAction\r\n} from \"./edit-form.actions\";\r\nimport { UpdateFormSchemaAction } from \"../list\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\n\r\n@Injectable()\r\nexport class EditFormEffects {\r\n\tconstructor(private actions$: Actions<any>, private router: Router, private service: FormService) {}\r\n\r\n\t@Effect()\r\n\tEditForm$ = this.actions$\r\n\t\t.ofType(EditFormActionTypes.EDIT_FORM)\r\n\t\t.pipe(map(action => action.payload), map(data => new EditFormStartAction(data)));\r\n\r\n\t@Effect()\r\n\tEditFormStart$ = this.actions$\r\n\t\t.ofType(EditFormActionTypes.EDIT_FORM_START)\r\n\t\t.pipe(\r\n\t\t\tmap(action => action.payload),\r\n\t\t\tswitchMap((data: EditFormApiModel.Request) => this.service.update(data)),\r\n\t\t\tmap(formSchema => new EditFormSucceedAction(formSchema)),\r\n\t\t\tcatchError(() => Observable.of(new EditFormFailedAction()))\r\n\t\t);\r\n\r\n\t@Effect()\r\n\tUpdateFormsListStart$ = this.actions$\r\n\t\t.ofType(EditFormActionTypes.EDIT_FORM_SUCCEED)\r\n\t\t.pipe(map(action => action.payload), map(formSchema => new UpdateFormSchemaAction(formSchema)));\r\n}\r\n","import { ModuleWithProviders } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\n\r\nimport { MainContainerComponent } from \"./main-container/main-container.component/main-container.component\";\r\nimport { EditFormContainerComponent } from \"./edit/edit-form-container/edit-form-container.component\";\r\nimport { AddFormContainerComponent } from \"./add/add-form-container/add-form-container.component\";\r\nimport { FormListContainerComponent } from \"./list/form-list-container/form-list.container.component\";\r\n\r\nconst routes: Routes = [\r\n\t{\r\n\t\tpath: \"form\",\r\n\t\tcomponent: MainContainerComponent,\r\n\t\tchildren: [\r\n\t\t\t{\r\n\t\t\t\tpath: \"add\",\r\n\t\t\t\tcomponent: AddFormContainerComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: \"edit/:_id\",\r\n\t\t\t\tcomponent: EditFormContainerComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: \"\",\r\n\t\t\t\tcomponent: FormListContainerComponent\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n];\r\n\r\nexport const RoutingModule: ModuleWithProviders = RouterModule.forChild(routes);\r\n","import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\r\nimport {\r\n\tMatExpansionModule,\r\n\tMatSnackBarModule,\r\n\tMatIconModule,\r\n\tMatButtonModule,\r\n\tMatCardModule,\r\n\tMatSelectModule,\r\n\tMatInputModule,\r\n\tMatFormFieldModule,\r\n\tMatTabsModule,\r\n\tMatRadioModule,\r\n\tMatSlideToggleModule,\r\n\tMatDividerModule,\r\n\tMatCheckboxModule,\r\n\tMatTableModule\r\n} from \"@angular/material\";\r\nimport { StoreModule } from \"@ngrx/store\";\r\nimport { StoreDevtoolsModule } from \"@ngrx/store-devtools\";\r\nimport { EffectsModule, mergeEffects } from \"@ngrx/effects\";\r\n\r\nimport { FormModuleConfig, MODULE_CONFIG_TOKEN, MODULE_DEFAULT_CONFIG } from \"./form.config\";\r\nimport { FormReducers } from \"./main-container/main-container.reducers\";\r\nimport { SelectComponent } from \"./view/form-controls/select/select.component\";\r\nimport { FormGroupComponent } from \"./add/form-group/form-group.component\";\r\nimport { FormArrayComponent } from \"./add/form-array/form-array.component\";\r\nimport { FormControlComponent } from \"./add/form-control/form-control.component\";\r\nimport { FormViewComponent, DynamicFieldDirective } from \"./view/form-view/form-view.component\";\r\nimport { TextComponent } from \"./view/form-controls/text/text.component\";\r\nimport { CheckboxComponent } from \"./view/form-controls/checkbox/checkbox.component\";\r\nimport { EmailComponent } from \"./view/form-controls/email/email.component\";\r\nimport { ColorComponent } from \"./view/form-controls/color/color.component\";\r\nimport { NumberComponent } from \"./view/form-controls/number/number.component\";\r\nimport { TableComponent } from \"./view/form-controls/table/table.component\";\r\nimport { EditFormContainerComponent } from \"./edit/edit-form-container/edit-form-container.component\";\r\nimport { EditFormComponent } from \"./edit/edit-form/edit-form.component\";\r\nimport { FormListContainerComponent } from \"./list/form-list-container/form-list.container.component\";\r\nimport { FormListComponent } from \"./list/form-list/form-list.component\";\r\nimport { AddFormContainerComponent } from \"./add/add-form-container/add-form-container.component\";\r\nimport { MainContainerComponent } from \"./main-container/main-container.component/main-container.component\";\r\nimport { AddFormComponent } from \"./add/add-form/add-form.component\";\r\nimport { AddFormEffects } from \"./add/add-form.effects\";\r\nimport { EditFormEffects } from \"./edit/edit-form.effects\";\r\nimport { FormsListEffects } from \"./list/list.effects\";\r\nimport { RoutingModule } from \"./form-routing.module\";\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tHttpClientModule,\r\n\t\tFormsModule,\r\n\t\tRouterModule,\r\n\t\tCommonModule,\r\n\t\tMatExpansionModule,\r\n\t\tMatSnackBarModule,\r\n\t\tMatIconModule,\r\n\t\tMatButtonModule,\r\n\t\tMatCardModule,\r\n\t\tMatCheckboxModule,\r\n\t\tMatTableModule,\r\n\t\tMatSelectModule,\r\n\t\tMatInputModule,\r\n\t\tMatFormFieldModule,\r\n\t\tMatTabsModule,\r\n\t\tMatDividerModule,\r\n\t\tFlexLayoutModule,\r\n\t\tMatRadioModule,\r\n\t\tMatSlideToggleModule,\r\n\t\tReactiveFormsModule\r\n\t],\r\n\tdeclarations: [\r\n\t\tEditFormContainerComponent,\r\n\t\tEditFormComponent,\r\n\t\tFormListContainerComponent,\r\n\t\tFormListComponent,\r\n\t\tAddFormContainerComponent,\r\n\t\tMainContainerComponent,\r\n\t\tAddFormComponent,\r\n\t\tFormGroupComponent,\r\n\t\tFormArrayComponent,\r\n\t\tFormControlComponent,\r\n\t\tFormViewComponent,\r\n\t\tDynamicFieldDirective,\r\n\t\tSelectComponent,\r\n\t\tCheckboxComponent,\r\n\t\tEmailComponent,\r\n\t\tColorComponent,\r\n\t\tTextComponent,\r\n\t\tNumberComponent,\r\n\t\tTableComponent\r\n\t\t// NgsFormSelectorComponent\r\n\t],\r\n\tentryComponents: [\r\n\t\tSelectComponent,\r\n\t\tCheckboxComponent,\r\n\t\tEmailComponent,\r\n\t\tColorComponent,\r\n\t\tTextComponent,\r\n\t\tNumberComponent,\r\n\t\tTableComponent\r\n\t],\r\n\texports: [ FormViewComponent ]\r\n\t// exports: [ FormViewComponent, NgsFormSelectorComponent ]\r\n})\r\nexport class NgsFormModule {\r\n\tstatic forRoot(config?: FormModuleConfig): ModuleWithProviders {\r\n\t\treturn {\r\n\t\t\tngModule: RootNgsFormModule,\r\n\t\t\tproviders: [ { provide: MODULE_CONFIG_TOKEN, useValue: config } ]\r\n\t\t};\r\n\t}\r\n}\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tNgsFormModule,\r\n\t\tStoreModule.forFeature(\"form\", FormReducers),\r\n\t\tEffectsModule.forFeature([ AddFormEffects, EditFormEffects, FormsListEffects ]),\r\n\t\tRoutingModule\r\n\t],\r\n\texports: [ NgsFormModule ]\r\n})\r\nexport class RootNgsFormModule {}\r\n"]}