!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("rxjs"),require("@ngrx/store"),require("@soushians/config"),require("@angular/forms"),require("@angular/common/http"),require("@soushians/shared"),require("rxjs/BehaviorSubject"),require("rxjs/operators"),require("@angular/material"),require("@angular/cdk/collections"),require("tslib"),require("@angular/router"),require("rxjs/add/operator/map"),require("rxjs/add/operator/mergeMap"),require("rxjs/add/operator/switchMap"),require("rxjs/Observable"),require("@ngrx/effects"),require("@angular/common"),require("@angular/flex-layout")):"function"==typeof define&&define.amd?define("@soushians/form",["exports","@angular/core","rxjs","@ngrx/store","@soushians/config","@angular/forms","@angular/common/http","@soushians/shared","rxjs/BehaviorSubject","rxjs/operators","@angular/material","@angular/cdk/collections","tslib","@angular/router","rxjs/add/operator/map","rxjs/add/operator/mergeMap","rxjs/add/operator/switchMap","rxjs/Observable","@ngrx/effects","@angular/common","@angular/flex-layout"],e):e((t.soushians=t.soushians||{},t.soushians.form={}),t.ng.core,null,null,null,t.ng.forms,t.ng.common.http,null,t.Rx,t.Rx.Observable.prototype,t.ng.material,t.ng.cdk.collections,t.tslib,t.ng.router,t.Rx.Observable.prototype,t.Rx.Observable.prototype,t.Rx.Observable.prototype,t.Rx,null,t.ng.common,t.ng["flex-layout"])}(this,function(a,i,c,t,o,m,e,r,s,l,n,u,p,d,f,h,g,y,v,b,F){"use strict";var w={endpoints:{addForm:"",editForm:"",getForm:"",getList:"",deleteForm:""}},x=new i.InjectionToken("FormModuleConfig"),C=function(){function t(t,e){var n=this;this.store=e,this.config$=new c.BehaviorSubject(w),this._config=Object.assign({},w,t),this.config$.next(this._config),this.store.select(o.getFormModuleConfig).subscribe(function(t){t&&(n._config=Object.assign({},n._config,t.Config),n.config$.next(n._config))})}return Object.defineProperty(t.prototype,"config",{get:function(){return this._config},enumerable:!0,configurable:!0}),t}();C.decorators=[{type:i.Injectable,args:[{providedIn:"root"}]}],C.ctorParameters=function(){return[{type:undefined,decorators:[{type:i.Inject,args:[x]}]},{type:t.Store}]},C.ngInjectableDef=i.defineInjectable({factory:function(){return new C(i.inject(x),i.inject(t.Store))},token:C,providedIn:"root"}),function(t){var e=function(){function t(e){void 0===e&&(e={});var n=this;Object.keys(e).forEach(function(t){return n[t]=e[t]})}return t.prototype.getRequestBody=function(){return{name:this.name,form:this.form,events:this.events}},Object.defineProperty(t,"formGroup",{get:function(){return new m.FormGroup({_id:new m.FormControl("",[m.Validators.required]),name:new m.FormControl("",[m.Validators.required]),title:new m.FormControl("",[m.Validators.required]),form:new m.FormControl({}),events:new m.FormGroup({accept:new m.FormGroup({show:new m.FormControl(!1),text:new m.FormControl("ثبت")}),cancel:new m.FormGroup({show:new m.FormControl(!1),text:new m.FormControl("انصراف")})})})},enumerable:!0,configurable:!0}),t}();t.Request=e;var n=function(){};t.Response=n}(a.AddFormApiModel||(a.AddFormApiModel={})),function(t){var e=function(){function t(e){void 0===e&&(e={});var n=this;Object.keys(e).forEach(function(t){return n[t]=e[t]})}return t.prototype.getRequestBody=function(){return{_id:this._id,name:this.name,form:this.form,events:this.events}},Object.defineProperty(t,"formGroup",{get:function(){return new m.FormGroup({_id:new m.FormControl("",[m.Validators.required]),name:new m.FormControl("",[m.Validators.required]),form:new m.FormControl({}),events:new m.FormGroup({accept:new m.FormGroup({show:new m.FormControl(!1),text:new m.FormControl("ثبت")}),cancel:new m.FormGroup({show:new m.FormControl(!1),text:new m.FormControl("انصراف")})})})},enumerable:!0,configurable:!0}),t}();t.Request=e;var n=function(){};t.Response=n}(a.EditFormApiModel||(a.EditFormApiModel={})),function(t){var e=function(){function t(e){void 0===e&&(e={});var n=this;Object.keys(e).forEach(function(t){return n[t]=e[t]})}return t.prototype.getRequestBody=function(){return{Name:this.Name,Controls:this.Controls}},Object.defineProperty(t,"formGroup",{get:function(){return new m.FormGroup({Name:new m.FormControl("",[m.Validators.required]),Controls:new m.FormGroup({})})},enumerable:!0,configurable:!0}),t}();t.Request=e;var n=function(){};t.Response=n}(a.FormListApiModel||(a.FormListApiModel={}));var M=function(){this.required={active:!1,message:"این فیلد الزامی است"},this.minlength={active:!1,message:"حداقل تعداد کارکترها",value:5},this.email={active:!1,message:"لطفا ایمیل صحیح وارد نمایید"}},I=function(t){"control"!=(this.type=t)&&(this.fields=[]),this.width=3,this.validator=new M},O=function(){function t(){this.events={accept:{show:!1,text:"ثبت"},cancel:{show:!1,text:"انصراف"}},this.form=new I("group")}return t.prototype.init=function(){this._id=(10*Math.random()).toString()},t}(),S=function(){function t(t,e,n){this.http=t,this.store=e,this.configurationService=n}return t.prototype.add=function(t){var e=this,n=new a.AddFormApiModel.Request(t);return this.configurationService.config$.filter(function(t){return""!=t.endpoints.addForm}).take(1).switchMap(function(t){return e.http.post(t.endpoints.addForm,n.getRequestBody())}).map(function(t){return t.Result})},t.prototype.get=function(e){var n=this;return this.configurationService.config$.filter(function(t){return""!=t.endpoints.getForm}).take(1).switchMap(function(t){return n.http.get(r.stringTemplate(t.endpoints.getForm,{_id:e}))}).map(function(t){return t.Result})},t.prototype.getList=function(){var e=this;return this.configurationService.config$.filter(function(t){return""!=t.endpoints.getList}).switchMap(function(t){return e.http.get(t.endpoints.getList)}).map(function(t){return t.Result})},t.prototype.update=function(t){var e=this,n=new a.EditFormApiModel.Request(t);return this.configurationService.config$.filter(function(t){return""!=t.endpoints.editForm}).take(1).switchMap(function(t){return e.http.put(t.endpoints.editForm,n.getRequestBody())}).map(function(t){return t.Result})},t.prototype["delete"]=function(t){var e=this;return this.configurationService.config$.filter(function(t){return""!=t.endpoints.deleteForm}).switchMap(function(t){return e.http.get(t.endpoints.deleteForm)})},t.prototype.selectFormById=function(e){var n=new s.BehaviorSubject(undefined);return this.store.select(function(t){return t.form.list.data}).pipe(l.filter(function(t){return null!=t}),l.map(function(t){return t.find(function(t){return t._id==e})})).subscribe(function(t){return n.next(t)}),n.asObservable()},t}();S.decorators=[{type:i.Injectable,args:[{providedIn:"root"}]}],S.ctorParameters=function(){return[{type:e.HttpClient},{type:t.Store},{type:C}]},S.ngInjectableDef=i.defineInjectable({factory:function(){return new S(i.inject(e.HttpClient),i.inject(t.Store),i.inject(C))},token:S,providedIn:"root"});var G=function(t,e,n){this.http=t,this.store=e,this.configurationService=n};G.decorators=[{type:i.Injectable}],G.ctorParameters=function(){return[{type:e.HttpClient},{type:t.Store},{type:C}]};var _="[FORM][LIST] FORMS_LIST",k="[FORM][LIST] FORMS_LIST_START",R="[FORM][LIST] FORMS_LIST_SUCCEED",j="[FORM][LIST] FORMS_LIST_FAILED",A="[FORM][LIST] ADD_FORM_SCHEMA",D="[FORM][LIST] FORM_SCHEMA_UPDATE",E="[FORM][LIST] GET_FORM_SCHEMA",T="[FORM][LIST] FORM_SCHEMA_FETCHED",q=function(){this.type=_},$=function(t){this.payload=t,this.type=D},L=function(t){this.payload=t,this.type=A},N=function(t){this.payload=t,this.type=E},P={status:"pristine",data:[]};function H(t,e){switch(void 0===t&&(t=P),e.type){case _:return Object.assign({},t,{status:"dirty"});case k:return Object.assign({},t,{status:"pending"});case R:return Object.assign({},t,{data:e.payload,status:"succeed"});case j:return Object.assign({},t,{status:"failed"});case D:var n=t.data.concat();return-1<(o=t.data.findIndex(function(t){return t._id==e.payload._id}))?n[o]=Object.assign({},n[o],e.payload):n.push(e.payload),Object.assign({},t,{data:n});case A:n=t.data.concat();return-1<(o=t.data.findIndex(function(t){return t._id==e.payload._id}))?n[o]=Object.assign({},n[o],e.payload):n.push(e.payload),Object.assign({},t,{data:n});case T:var o;n=t.data.concat();return-1<(o=t.data.findIndex(function(t){return t._id==e.payload._id}))?n[o]=Object.assign({},n[o],e.payload):n.push(e.payload),Object.assign({},t,{data:n});default:return t}}var V={list:H},B=function(){};B.decorators=[{type:i.Component,args:[{selector:"ngs-form-control-select",template:'<div  [formGroup]="group">\n<mat-form-field>\n    <mat-select [formControlName]="config.name" [placeholder]="config.title">\n      <mat-option *ngFor="let option of config.options" [value]="option.value">{{option.key}}</mat-option>\n    </mat-select>\n</mat-form-field>\n</div>',styles:[":host{display:block}.mat-form-field{width:100%}"]}]}],B.ctorParameters=function(){return[]};var U=function(){function t(){this.noHeader=!1,this.changes=new i.EventEmitter,this["delete"]=new i.EventEmitter}return t.prototype.changed=function(){this.changes.emit()},t.prototype.addFormGroup=function(t){var e=new I("group");return e.fields=[],t.fields.push(e),this.schema.id=this.schema.id+1,e},t.prototype.addFormArray=function(t){var e=new I("array");return e.fields=[],t.fields.push(e),e},t.prototype.addFormControl=function(t){var e=new I("control");return t.fields.push(e),e},t.prototype.deleteFormGroup=function(t){this.schema.fields.splice(t,1)},t}();U.decorators=[{type:i.Component,args:[{selector:"app-form-group",template:'<mat-card>\n  <mat-card-content>\n\n    <mat-form-field *ngIf="!noHeader">\n      <input matInput [(ngModel)]="schema.name" placeholder="Name">\n    </mat-form-field>\n\n    <mat-form-field *ngIf="!noHeader">\n      <input matInput [(ngModel)]="schema.title" placeholder="عنوان">\n    </mat-form-field>\n\n    <div class="button-row">\n      <button mat-button color="primary" (click)="addFormGroup(schema)"> addFormGroup </button>\n      <button mat-button color="primary" (click)="addFormArray(schema)"> addFormArray </button>\n      <button mat-button color="primary" (click)="addFormControl(schema)">addFormControl</button>\n    </div>\n\n    <div *ngFor="let field of schema.fields;let i = index">\n      <div [ngSwitch]="field.type">\n        <app-form-group *ngSwitchCase="\'group\'" [schema]="field" (change)="changed()"></app-form-group>\n        <app-form-array *ngSwitchCase="\'array\'" [schema]="field" (change)="changed()"></app-form-array>\n        <app-form-control *ngSwitchCase="\'control\'" [schema]="field" (changes)="changed()" (delete)="deleteFormGroup(i)"></app-form-control>\n      </div>\n    </div>\n\n  </mat-card-content>\n</mat-card>'}]}],U.ctorParameters=function(){return[]},U.propDecorators={schema:[{type:i.Input}],noHeader:[{type:i.Input}],changes:[{type:i.Output}],"delete":[{type:i.Output}]};var z=function(){function t(){this.changes=new i.EventEmitter}return t.prototype.changed=function(){this.changes.emit()},t.prototype.addFormGroup=function(t){var e=new I("group");return e.fields=[],t.fields.push(e),e},t.prototype.addFormArray=function(t){var e=new I("array");return e.fields=[],t.fields.push(e),e},t.prototype.addFormControl=function(t){var e=new I("control");return t.fields.push(e),e},t}();z.decorators=[{type:i.Component,args:[{selector:"app-form-array",template:'<mat-card>\n  <mat-card-content>\n    <mat-form-field>\n        <input matInput [(ngModel)]="schema.name" placeholder="Name">\n    </mat-form-field>\n      \n    <div class="button-row">\n      <button mat-button color="primary" (click)="addFormGroup(schema)">addFormGroup</button>\n      <button mat-button color="primary" (click)="addFormArray(schema)">addFormArray</button>\n      \x3c!-- <button mat-button color="primary" (click)="addFormControl(schema)">addFormControl</button> --\x3e\n    </div>\n    \n    <div *ngFor="let field of schema.fields">\n      <div [ngSwitch]="field.type">\n        <app-form-group *ngSwitchCase="\'group\'" [schema]="field" (changes)="changed()"></app-form-group>\n        <app-form-array *ngSwitchCase="\'array\'" [schema]="field" (changes)="changed()"></app-form-array>\n        \x3c!-- <app-form-control *ngSwitchCase="\'control\'" [schema]="field" (change)="changed($event)"></app-form-control> --\x3e\n      </div>\n    </div>\n    \n  </mat-card-content>\n</mat-card>'}]}],z.ctorParameters=function(){return[]},z.propDecorators={schema:[{type:i.Input}],changes:[{type:i.Output}]};var K=function(){function t(){this.changes=new i.EventEmitter,this["delete"]=new i.EventEmitter,this.width=[1,2,3,4,5,6,7,8,9,10],this.options=new m.FormArray([new m.FormGroup({key:new m.FormControl,value:new m.FormControl})]),this.tableOptions=new m.FormGroup({dataEndpoint:new m.FormControl("http://localhost:3000/api/fake/packgeCompareSimpleList")})}return t.prototype.changed=function(){if([this.schema.name,this.schema.title,this.schema.inputType].some(function(t){return!t}))return!0;"table"==this.schema.inputType?this.schema.options=this.tableOptions.value:"select"==this.schema.inputType&&(this.schema.options=this.options.value),this.changes.emit()},t.prototype.addOption=function(){this.options.push(new m.FormGroup({key:new m.FormControl,value:new m.FormControl}))},t.prototype.removeOption=function(t){this.options.controls.splice(t,1)},t.prototype.insertOptions=function(){this.schema.options=this.options.value},t}();K.decorators=[{type:i.Component,args:[{selector:"app-form-control",template:'  <mat-expansion-panel>\n    <mat-expansion-panel-header>\n      <mat-panel-title>\n        <button mat-icon-button (click)="delete.emit()">\n            <mat-icon aria-label=" icon-button">delete_forever</mat-icon>\n          </button>\n        {{schema.name}}\n      </mat-panel-title>\n    </mat-expansion-panel-header>\n      <mat-form-field>\n        <input matInput [(ngModel)]="schema.name" (change)="changed()" placeholder="Name">\n      </mat-form-field>\n      \n      <mat-form-field>\n        <input matInput [(ngModel)]="schema.title" (change)="changed()" placeholder="Placeholder"/>\n      </mat-form-field>\n      \n      <mat-form-field>\n        <mat-select [(ngModel)]="schema.inputType" (change)="changed()" placeholder="Input Type">\n          <mat-option value="table">table</mat-option>\n          <mat-option value="select">select</mat-option>\n          <mat-option value="text">text</mat-option>\n          <mat-option value="number">number</mat-option>\n          <mat-option value="email">email</mat-option>\n          <mat-option value="color">color</mat-option>\n          <mat-option value="radio">radio</mat-option>\n          <mat-option value="checkbox">checkbox</mat-option>\n        </mat-select>\n      </mat-form-field>\n\n      <mat-form-field>\n          <input matInput [(ngModel)]="schema.value" (change)="changed()" placeholder="Value"/>\n      </mat-form-field>\n      \n        <mat-form-field>\n          <mat-select [(ngModel)]="schema.width" (change)="changed()" placeholder="width">\n            <mat-option *ngFor="let item of width" [value]="item">{{item}}</mat-option>\n          </mat-select>\n        </mat-form-field>\n\n      <div *ngIf="schema.inputType==\'table\'" [formGroup]="tableOptions">\n        <mat-form-field>\n          <input matInput (change)="changed()" formControlName="dataEndpoint" placeholder="dataEndpoint"/>\n        </mat-form-field>\n      </div>\n\n      <div *ngIf="schema.inputType==\'select\'">\n        [options]\n        <button (click)="addOption()">+</button>\n        <button (click)="insertOptions()">insert</button>\n        <div *ngFor="let option of options.controls;index as i">\n          {{i}}\n          <div [formGroup]="options.controls[i]">\n            <mat-form-field>\n              <input matInput (change)="changed()" formControlName="key" placeholder="key"/>\n            </mat-form-field>\n            <mat-form-field>\n              <input matInput (change)="changed()" formControlName="value" placeholder="value"/>\n            </mat-form-field>\n          </div>\n        </div>\n      </div>\n      <br/>\n      <div>\n        <mat-slide-toggle (change)="changed()"  [(ngModel)]="schema.validator.required.active">اجباری</mat-slide-toggle>\n        <mat-form-field>\n          <input matInput (change)="changed()" [(ngModel)]="schema.validator.required.message"  placeholder="پیغام"/>\n        </mat-form-field>\n        </div>\n      <div>\n        <mat-slide-toggle (change)="changed()"  [(ngModel)]="schema.validator.email.active">ایمیل</mat-slide-toggle>\n        <mat-form-field>\n          <input matInput (change)="changed()" [(ngModel)]="schema.validator.email.message"  placeholder="پیغام"/>\n        </mat-form-field>\n      </div>\n      <div>\n        <mat-slide-toggle (change)="changed()"  [(ngModel)]="schema.validator.minlength.active">حداقل تعداد کاراکتر</mat-slide-toggle>\n        <mat-form-field>\n          <input matInput (change)="changed()" [(ngModel)]="schema.validator.minlength.message"  placeholder="پیغام"/>\n        </mat-form-field>\n        <mat-form-field>\n          <input matInput (change)="changed()" [(ngModel)]="schema.validator.minlength.value"  placeholder="تعداد حداقل کاراکتر"/>\n        </mat-form-field>\n    </div>\n      \n  </mat-expansion-panel>'}]}],K.ctorParameters=function(){return[]},K.propDecorators={schema:[{type:i.Input}],changes:[{type:i.Output}],"delete":[{type:i.Output}]};var W=function(){};W.decorators=[{type:i.Component,args:[{selector:"ngs-form-control-checkbox",template:'<div [formGroup]="group">\n    <mat-checkbox [formControlName]="config.name">\n        {{config.title}}\n    </mat-checkbox>\n</div>',styles:[":host{display:block}.mat-form-field{width:100%}"]}]}],W.ctorParameters=function(){return[]};var J=function(){function t(){}return t.prototype.ngOnInit=function(){},t}();J.decorators=[{type:i.Component,args:[{selector:"ngs-form-control-email",template:'<div  [formGroup]="group">\n<mat-form-field fxFlexFill>\n    <input matInput [type]="config.inputType" [placeholder]="config.title" [formControlName]="config.name">\n</mat-form-field>\n</div>',styles:[":host{display:block}.mat-form-field{width:100%}"]}]}],J.ctorParameters=function(){return[]};var Q=function(){function t(){}return t.prototype.ngOnInit=function(){},t}();Q.decorators=[{type:i.Component,args:[{selector:"ngs-form-control-color",template:'<div  [formGroup]="form">\n<mat-form-field fxFlexFill>\n    <input matInput [type]="schema.inputType" [placeholder]="schema.title" [formControlName]="schema.name">\n</mat-form-field>\n</div>',styles:[":host{display:block}.mat-form-field{width:100%}"]}]}],Q.ctorParameters=function(){return[]},Q.propDecorators={form:[{type:i.Input}],schema:[{type:i.Input}]};var X=function(){function t(t){this.http=t,this.selection=new u.SelectionModel(!0,[]),this.ready=!1}return t.prototype.ngOnInit=function(){var e=this;this.http.get(this.schema.dataEndpoint).subscribe(function(t){e.ready=!0,e.displayedColumns=t.displayedColumns,e.filedDisplayedColumns=t.filedDisplayedColumns,e.dataSource=new n.MatTableDataSource(t.dataSource)})},t.prototype.isAllSelected=function(){var t,e=this.selection.selected.length;return this.form.patchValue(((t={})[this.schema.name]=this.selection.selected,t)),e===this.dataSource.data.length},t.prototype.masterToggle=function(){var e=this;this.isAllSelected()?this.selection.clear():this.dataSource.data.forEach(function(t){return e.selection.select(t)})},t}();X.decorators=[{type:i.Component,args:[{selector:"ngs-form-control-table",template:'<div class="example-container mat-elevation-z8" *ngIf="ready">\n    <mat-table #table [dataSource]="dataSource">\n  \n      <ng-container matColumnDef="select">\n        <mat-header-cell *matHeaderCellDef>\n          <mat-checkbox (change)="$event ? masterToggle() : null"\n            [checked]="selection.hasValue() && isAllSelected()"\n            [indeterminate]="selection.hasValue() && !isAllSelected()">\n          </mat-checkbox>\n        </mat-header-cell>\n        <mat-cell *matCellDef="let row">\n          <mat-checkbox (click)="$event.stopPropagation()"\n            (change)="$event ? selection.toggle(row) : null"\n            [checked]="selection.isSelected(row)">\n          </mat-checkbox>\n        </mat-cell>\n      </ng-container>\n\n      <div *ngFor="let col of filedDisplayedColumns">\n        <ng-container  [matColumnDef]="col">\n          <mat-header-cell *matHeaderCellDef> {{col}} </mat-header-cell>\n          <mat-cell *matCellDef="let element"> {{element[col]}} </mat-cell>\n        </ng-container>\n      </div>\n        \n      <ng-container matColumnDef="actions">\n        <mat-header-cell *matHeaderCellDef></mat-header-cell>\n        <mat-cell class=\'left-align\' *matCellDef="let row">\n          <button mat-icon-button>\n            <mat-icon aria-label="انتخاب">arrow_back</mat-icon>\n          </button>\n        </mat-cell>\n      </ng-container>\n    \n      <mat-header-row *matHeaderRowDef="displayedColumns"></mat-header-row>\n      <mat-row *matRowDef="let row; columns: displayedColumns;" (click)="selection.toggle(row)"></mat-row>\n\n    </mat-table>\n  </div>\n\n\n\x3c!-- <mat-form-field fxFlexFill [formGroup]="form">\n  \n  <input matInput [id]="schema.name" [type]="schema.inputType" [placeholder]="schema.title" [formControlName]="schema.name">\n  \n  <mat-error *ngIf="form.get(schema.name).errors?.required">\n    {{schema.validator.required.message}}\n  </mat-error>\n  <mat-error *ngIf="form.get(schema.name).errors?.minlength">\n    {{schema.validator.minlength.message}}\n  </mat-error>\n  <mat-error *ngIf="form.get(schema.name).email?.minlength">\n    {{schema.validator.email.message}}\n  </mat-error>\n</mat-form-field> --\x3e\n  \n  \x3c!-- <div *ngIf="form.get(schema.name).invalid && (form.get(schema.name).dirty || form.get(schema.name).touched)" class="alert alert-danger">\n  </div> --\x3e',styles:[":host{display:block}.mat-form-field{width:100%}"]}]}],X.ctorParameters=function(){return[{type:e.HttpClient}]},X.propDecorators={form:[{type:i.Input}],schema:[{type:i.Input}]};var Y=function(){function t(){}return t.prototype.ngOnInit=function(){},t}();Y.decorators=[{type:i.Component,args:[{selector:"ngs-form-control-number",template:'<div  [formGroup]="form">\n    <mat-form-field fxFlexFill>\n        <input matInput [type]="schema.inputType" [placeholder]="schema.title" [formControlName]="schema.name">\n    </mat-form-field>\n</div>',styles:[":host{display:block}.mat-form-field{width:100%}"]}]}],Y.ctorParameters=function(){return[]},Y.propDecorators={form:[{type:i.Input}],schema:[{type:i.Input}]};var Z=function(){};Z.decorators=[{type:i.Component,args:[{selector:"ngs-form-control-text",template:'<mat-form-field fxFlexFill [formGroup]="group">\n\n  <input matInput [id]="config.name" [type]="config.inputType" [placeholder]="config.title" [formControlName]="config.name">\n\n  <mat-error *ngIf="group.get(config.name).errors?.required">\n    {{config.validator.required.message}}\n  </mat-error>\n  <mat-error *ngIf="group.get(config.name).errors?.minlength">\n    {{config.validator.minlength.message}}\n  </mat-error>\n  \x3c!-- <mat-error *ngIf="group.get(config.name).email?.minlength">\n    {{config.validator.email.message}}\n  </mat-error> --\x3e\n\n  \x3c!-- <div *ngIf="form.get(config.name).invalid && (form.get(config.name).dirty || form.get(config.name).touched)" class="alert alert-danger">\n  </div> --\x3e\n\n</mat-form-field>',styles:[":host{display:block}.mat-form-field{width:100%}"]}]}],Z.ctorParameters=function(){return[]};var tt=function(){function t(t,e,n,o){var r=this;this.service=t,this.compiler=e,this.resolver=n,this.store=o,this.unsubscribe=new c.Subject,this.accept=new i.EventEmitter,this.cancel=new i.EventEmitter,this.formGroupCreated=!1,this.schema$=new s.BehaviorSubject(undefined),this.schema$.pipe(l.takeUntil(this.unsubscribe)).subscribe(function(t){t&&(r.formGroup=r.createFrom(t.form),t.form.name&&(r.formGroupCreated=!0))})}return Object.defineProperty(t.prototype,"id",{set:function(t){var e=this;this.local||this.store.dispatch(new N(t)),this.service.selectFormById(t).pipe(l.takeUntil(this.unsubscribe)).subscribe(function(t){return e.schema$.next(t)})},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"schema",{set:function(t){this.schema$.next(t)},enumerable:!0,configurable:!0}),t.prototype.ngOnDestroy=function(){this.unsubscribe.next(),this.unsubscribe.complete()},t.prototype.generate=function(t){this.schema$.next(t)},t.prototype.createFrom=function(t,n){var o=this;if(void 0===n&&(n=""),"control"==t.type){if("array"==t.parentType);else if("group"==t.parentType){var e=n;n=n+".controls."+t.name}var r=[];t.validator.required.active&&r.push(m.Validators.required),t.validator.minlength.active&&r.push(m.Validators.minLength(t.validator.minlength.value)),t.validator.email.active&&r.push(m.Validators.email);var a=new m.FormControl(t.value,r);return a.schema=t,a.schema.path=n,a.schema.formGroupPath=e,a}if("group"==t.type){var i=new m.FormGroup({});return t.parentType==undefined?n=t.name:"array"==t.parentType?n=n+".controls["+t.name+"]":"group"==t.parentType&&(n=n+".controls."+t.name),i.schema=t,i.schema.path=n,t.fields.forEach(function(t){t.parentType="group",i.addControl(t.name,o.createFrom(t,n))}),i}var c=new m.FormArray([]);return n=""==n?t.name:n+".controls."+t.name,c.schema=t,c.schema.path=n,t.fields.forEach(function(t,e){t.parentType="array",t.name=e.toString(),c.controls.push(o.createFrom(t,n))}),c},t.prototype.accepted=function(){this.accept.emit(this.formGroup)},t.prototype.canceled=function(){this.cancel.emit(this.formGroup)},t}();tt.decorators=[{type:i.Component,args:[{selector:"ngs-form-view",template:'<form *ngIf="formGroupCreated" class="dynamic-form" [formGroup]="formGroup" (ngSubmit)="accepted()">\n  <mat-card>\n    <mat-card-content fxLayout="row wrap" fxLayoutGap="25px">\n      <div  *ngFor="let field of (schema$ | async)?.form.fields;" [fxFlex]="field.width * 10">\n        <ng-container dynamicField  [config]="field" [group]="formGroup"></ng-container>\n      </div>\n    </mat-card-content>\n    <mat-card-actions>\n      <button fxFlex type="submit" *ngIf="(schema$ | async)?.events.accept.show" mat-raised-button color="primary">{{(schema$ | async)?.events.accept.text}}</button>\n      <button fxFlex type="button" *ngIf="(schema$ | async)?.events.cancel.show" (click)="cancel.emit()" mat-raised-button color="primary">{{(schema$ | async)?.events.cancel.text}</button>\n    </mat-card-actions>\n  </mat-card>\n</form>'}]}],tt.ctorParameters=function(){return[{type:S},{type:i.Compiler},{type:i.ComponentFactoryResolver},{type:t.Store}]},tt.propDecorators={accept:[{type:i.Output}],cancel:[{type:i.Output}],local:[{type:i.Input}],id:[{type:i.Input}],schema:[{type:i.Input}]};var et={checkbox:W,text:Z,table:X,color:Q,email:J,select:B},nt=function(){function t(t,e){this.resolver=t,this.container=e}return t.prototype.ngOnChanges=function(){this.component&&(this.component.instance.config=this.config,this.component.instance.group=this.group)},t.prototype.ngOnInit=function(){if(!et[this.config.subtype]){var t=Object.keys(et).join(", ");throw new Error("Trying to use an unsupported type ("+this.config.subtype+").\n\t\t  Supported types: "+t)}var e=this.resolver.resolveComponentFactory(et[this.config.subtype]);this.component=this.container.createComponent(e),this.component.instance.config=this.config,this.component.instance.group=this.group},t}();nt.decorators=[{type:i.Directive,args:[{selector:"[dynamicField]"}]}],nt.ctorParameters=function(){return[{type:i.ComponentFactoryResolver},{type:i.ViewContainerRef}]},nt.propDecorators={config:[{type:i.Input}],group:[{type:i.Input}]};var ot="[FORM][EDIT] EDIT_FORM",rt=function(t){this.payload=t,this.type=ot},at="[FORM][ADD] ADD_FORM_PROFILE",it="[FORM][ADD] ADD_FORM_START",ct="[FORM][ADD] ADD_FORM_SUCCEED",mt="[FORM][ADD] ADD_FORM_FAILED",st=function(t){this.payload=t,this.type=at},lt=function(t){this.payload=t,this.type=it},ut=function(){this.type=ct},pt=function(){this.type=mt},dt=function(){function t(t,e){this.store=t,this.service=e}return t.prototype.ngOnInit=function(){this.schema=new O,this.schema.init(),this.store.dispatch(new L(this.schema))},t.prototype.add=function(t){this.store.dispatch(new st(t))},t.prototype.update_schema=function(t){this.store.dispatch(new $(t))},t}();dt.decorators=[{type:i.Component,args:[{template:'<ngs-form-add \n\t\t\t\t\t[schema]="schema" \n\t\t\t\t\t(changes)="update_schema($event)" \n\t\t\t\t\t(submited)=add($event)\n\t\t\t\t></ngs-form-add>'}]}],dt.ctorParameters=function(){return[{type:t.Store},{type:S}]};var ft=function(r){function t(t,e,n){var o=r.call(this,n,t)||this;return o.service=t,o.route=e,o.store=n,o.formGroup=a.EditFormApiModel.Request.formGroup,o}return p.__extends(t,r),t.prototype.ngOnInit=function(){var e=this;this.route.params.map(function(t){return t._id}).subscribe(function(t){return e.store.dispatch(new N(t))}),this.route.params.map(function(t){return t._id}).switchMap(function(t){return e.service.selectFormById(t)}).filter(function(t){return null!=t}).take(1).subscribe(function(t){e.schema=t,e.formGroup.patchValue(t)})},t.prototype.update=function(t){this.store.dispatch(new rt(t))},t}(dt);ft.decorators=[{type:i.Component,args:[{template:'<edit-form\n\t\t\t\t\t[formGroup]="formGroup"\n\t\t\t\t\t[schema]="schema"\n\t\t\t\t\t(changes)="update_schema($event)"\n\t\t\t\t\t(submited)="update($event)">\n\t\t\t\t</edit-form>'}]}],ft.ctorParameters=function(){return[{type:S},{type:d.ActivatedRoute},{type:t.Store}]};var ht=function(){function t(){this.formGroup=a.AddFormApiModel.Request.formGroup,this.submited=new i.EventEmitter,this.changes=new i.EventEmitter}return t.prototype.emit=function(){this.formGroup.patchValue({form:this.schema.form}),this.submited.emit(this.formGroup.value)},t.prototype.changed=function(){this.formGroup.patchValue({form:this.schema.form}),this.changes.emit(this.formGroup.value)},t.prototype.changeOrder=function(t){},t.prototype.addFormGroup=function(t){var e=new I("group");return e.fields=[],t.fields.push(e),e},t.prototype.addFormArray=function(t){var e=new I("array");return e.fields=[],t.fields.push(e),e},t.prototype.addFormControl=function(t){var e=new I("control");return t.fields.push(e),e},t}();ht.decorators=[{type:i.Component,args:[{selector:"ngs-form-add",template:'<div fxLayout="row" *ngIf="schema">\n  <div [fxFlex]="50" *ngIf="formGroup">\n    <form [formGroup]="formGroup">\n      <mat-card>\n        <mat-card-title>ایجاد فرم جدید</mat-card-title>\n        <mat-card-content>\n          <mat-form-field>\n            <input type="text" matInput (change)="changed()" placeholder="نام فرم" formControlName="name">\n          </mat-form-field>\n          \x3c!-- <div class="button-row">\n                <button mat-button color="primary" (click)="addFormGroup(schema.form)">Add form group</button>\n                <button mat-button color="primary" (click)="addFormArray(schema.form)">Add form array</button>\n                <button mat-button color="primary" (click)="addFormControl(schema.form)">Add form control</button>\n              </div> --\x3e\n        </mat-card-content>\n      </mat-card>\n      <mat-card>\n        <mat-card-content>\n          <div [ngSwitch]="schema.form?.type">\n            <app-form-group *ngSwitchCase="\'group\'" [schema]="schema.form" noHeader="true" (changes)="changed()"></app-form-group>\n            <app-form-array *ngSwitchCase="\'array\'" [schema]="schema.form" (changes)="changed()"></app-form-array>\n          </div>\n        </mat-card-content>\n        <mat-card-actions>\n          \x3c!-- <button mat-raised-button color="primary" (click)="form.generate(schema)">ایجاد فرم</button> --\x3e\n          <button mat-raised-button color="primary" (click)="emit()" type="submit">ثبت</button>\n        </mat-card-actions>\n\n        <div [formGroup]="$any(formGroup.controls.events).controls.accept">\n          <mat-slide-toggle (change)="changed()" formControlName="show">نمایش تایید</mat-slide-toggle>\n          <mat-form-field>\n            <input type="text" (change)="changed()" matInput placeholder="متن تایید" formControlName="text">\n          </mat-form-field>\n        </div>\n        <div [formGroup]="$any(formGroup.controls.events).controls.cancel">\n          <mat-slide-toggle (change)="changed()" formControlName="show">نمایش انصراف</mat-slide-toggle>\n          <mat-form-field>\n            <input type="text" (change)="changed()" matInput placeholder="متن انصراف" formControlName="text">\n          </mat-form-field>\n        </div>\n\n      </mat-card>\n    </form>\n  </div>\n  <div [fxFlex]="50">\n    <ngs-form-view [local]=\'true\' [id]="schema._id"></ngs-form-view>\n  </div>\n</div>'}]}],ht.propDecorators={schema:[{type:i.Input}],formGroup:[{type:i.Input}],submited:[{type:i.Output}],changes:[{type:i.Output}]};var gt=function(t,e,n){var o=this;this.actions$=t,this.router=e,this.service=n,this.AddForm$=this.actions$.ofType(at).pipe(l.map(function(t){return t.payload}),l.map(function(t){return new lt(t)})),this.AddFormStart$=this.actions$.ofType(it).pipe(l.map(function(t){return t.payload}),l.switchMap(function(t){return o.service.add(t)}),l.map(function(t){return new ut}),l.catchError(function(){return y.Observable.of(new pt)}))};gt.decorators=[{type:i.Injectable}],gt.ctorParameters=function(){return[{type:v.Actions},{type:d.Router},{type:S}]},p.__decorate([v.Effect(),p.__metadata("design:type",Object)],gt.prototype,"AddForm$",void 0),p.__decorate([v.Effect(),p.__metadata("design:type",Object)],gt.prototype,"AddFormStart$",void 0);var yt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return p.__extends(e,t),e.prototype.emit=function(){if(this.formGroup.valid)return this.submited.emit(this.formGroup.value)},e}(ht);yt.decorators=[{type:i.Component,args:[{selector:"edit-form",template:'<div fxLayout="row" *ngIf="schema">\n  <div [fxFlex]="50" *ngIf="formGroup">\n    <form [formGroup]="formGroup">\n      <mat-card>\n        <mat-card-title>ایجاد فرم جدید</mat-card-title>\n        <mat-card-content>\n          <mat-form-field>\n            <input type="text" matInput (change)="changed()" placeholder="نام فرم" formControlName="name">\n          </mat-form-field>\n          \x3c!-- <div class="button-row">\n                <button mat-button color="primary" (click)="addFormGroup(schema.form)">Add form group</button>\n                <button mat-button color="primary" (click)="addFormArray(schema.form)">Add form array</button>\n                <button mat-button color="primary" (click)="addFormControl(schema.form)">Add form control</button>\n              </div> --\x3e\n        </mat-card-content>\n      </mat-card>\n      <mat-card>\n        <mat-card-content>\n          <div [ngSwitch]="schema.form?.type">\n            <app-form-group *ngSwitchCase="\'group\'" [schema]="schema.form" noHeader="true" (changes)="changed()"></app-form-group>\n            <app-form-array *ngSwitchCase="\'array\'" [schema]="schema.form" (changes)="changed()"></app-form-array>\n          </div>\n        </mat-card-content>\n        <mat-card-actions>\n          \x3c!-- <button mat-raised-button color="primary" (click)="$any(form).generate(schema)">ایجاد فرم</button> --\x3e\n          <button mat-raised-button color="primary" (click)="emit()" type="submit">ثبت</button>\n        </mat-card-actions>\n\n        <div [formGroup]="$any(formGroup.controls.events).controls.accept">\n          <mat-slide-toggle (change)="changed()" formControlName="show">نمایش تایید</mat-slide-toggle>\n          <mat-form-field>\n            <input type="text" (change)="changed()" matInput placeholder="متن تایید" formControlName="text">\n          </mat-form-field>\n        </div>\n        <div [formGroup]="$any(formGroup.controls.events).controls.cancel">\n          <mat-slide-toggle (change)="changed()" formControlName="show">نمایش انصراف</mat-slide-toggle>\n          <mat-form-field>\n            <input type="text" (change)="changed()" matInput placeholder="متن انصراف" formControlName="text">\n          </mat-form-field>\n        </div>\n\n      </mat-card>\n    </form>\n  </div>\n  <div [fxFlex]="50">\n    <ngs-form-view [local]=\'true\' [id]="schema._id"></ngs-form-view>\n  </div>\n</div>'}]}];var vt=function(){function t(t){this.store=t,this.data$=this.store.select(function(t){return t.form.list.data})}return t.prototype.ngOnInit=function(){this.store.dispatch(new q)},t}();vt.decorators=[{type:i.Component,args:[{template:'<form-list\n\t\t\t\t\t[data]="data$">\n\t\t\t\t</form-list>'}]}],vt.ctorParameters=function(){return[{type:t.Store}]};var bt=function(){};bt.decorators=[{type:i.Component,args:[{selector:"form-list",template:'<div fxLayout="row" fxLayoutWrap fxLayoutAlign="center center" >\n    <mat-card class="cards-item" *ngFor="let item of (data$ | async)" fxFlex="51">\n      <h3>\n        <a [routerLink]="[\'edit\' ,  item._id]">\n          <mat-icon aria-label="edit form">edit</mat-icon>\n        </a>\n        {{item.name}}\n      </h3>\n  </mat-card>\n</div>'}]}],bt.propDecorators={data$:[{type:i.Input,args:["data"]}]};var Ft=function(t,e){this.route=t,this.store=e};Ft.decorators=[{type:i.Component,args:[{template:"<router-outlet></router-outlet>"}]}],Ft.ctorParameters=function(){return[{type:d.ActivatedRoute},{type:t.Store}]};var wt=function(){function t(){}return t.forRoot=function(t){return{ngModule:xt,providers:[{provide:x,useValue:t}]}},t}();wt.decorators=[{type:i.NgModule,args:[{imports:[e.HttpClientModule,m.FormsModule,d.RouterModule,b.CommonModule,n.MatExpansionModule,n.MatSnackBarModule,n.MatIconModule,n.MatButtonModule,n.MatCardModule,n.MatCheckboxModule,n.MatTableModule,n.MatSelectModule,n.MatInputModule,n.MatFormFieldModule,n.MatTabsModule,n.MatDividerModule,F.FlexLayoutModule,n.MatRadioModule,n.MatSlideToggleModule,m.ReactiveFormsModule],declarations:[ft,yt,vt,bt,dt,Ft,ht,U,z,K,tt,nt,B,W,J,Q,Z,Y,X],entryComponents:[B,W,J,Q,Z,Y,X],exports:[tt]}]}];var xt=function(){};xt.decorators=[{type:i.NgModule,args:[{imports:[wt,t.StoreModule.forFeature("form",V)],exports:[wt]}]}],a.MODULE_DEFAULT_CONFIG=w,a.MODULE_CONFIG_TOKEN=x,a.FormConfigurationService=C,a.FormService=S,a.FormUtilityService=G,a.FormSchemaModel=O,a.FieldConfig=I,a.NgsFormModule=wt,a.RootNgsFormModule=xt,a.ɵi=ht,a.ɵb=dt,a.ɵl=dt,a.ɵn=ht,a.ɵp=z,a.ɵq=K,a.ɵo=U,a.ɵa=ft,a.ɵh=yt,a.ɵj=vt,a.ɵk=bt,a.ɵba=H,a.ɵm=Ft,a.ɵd=V,a.ɵf=C,a.ɵc=S,a.ɵu=W,a.ɵw=Q,a.ɵv=J,a.ɵy=Y,a.ɵt=B,a.ɵz=X,a.ɵx=Z,a.ɵs=nt,a.ɵr=tt,Object.defineProperty(a,"__esModule",{value:!0})});
//# sourceMappingURL=soushians-form.umd.min.js.map
