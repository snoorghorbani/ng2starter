{
  "version": 3,
  "file": "form-utility.service.js",
  "sources": [
    "ng://@soushians/form/projects/soushians/form/src/lib/services/form-utility.service.ts"
  ],
  "sourcesContent": [
    "import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs/Rx\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\n\r\nimport { FormSchemaModel, AddFormApiModel, EditFormApiModel, FormListApiModel } from \"../models\";\r\nimport { FormConfigurationService } from \"./form-configuration.service\";\r\n\r\nimport { MainContainerState } from \"../main-container/main-container.reducers\";\r\n\r\n@Injectable()\r\nexport class FormUtilityService {\r\n\tresponseCache: AddFormApiModel.Response;\r\n\r\n\tconstructor(\r\n\t\tprivate http: HttpClient,\r\n\t\tprivate store: Store<MainContainerState>,\r\n\t\tprivate configurationService: FormConfigurationService\r\n\t) {}\r\n\r\n\t// createFrom(data: FieldConfig, parentPath = \"\"): AbstractControl {\r\n\t// if (data.type == \"control\") {\r\n\t// \tif (data.parentType == \"array\") {\r\n\t// \t\t// parentPath = `${parentPath}.controls[${(data as FieldConfig).name}]`;\r\n\t// \t} else if (data.parentType == \"group\") {\r\n\t// \t\tvar formGroupPath = parentPath;\r\n\t// \t\tparentPath = `${parentPath}.controls.${(data as FieldConfig).name}`;\r\n\t// \t}\r\n\t// \tvar validators = [];\r\n\t// \tif (data.validator.required.active) {\r\n\t// \t\tvalidators.push(Validators.required);\r\n\t// \t}\r\n\t// \tif (data.validator.minlength.active) {\r\n\t// \t\tvalidators.push(Validators.minLength(data.validator.minlength.value));\r\n\t// \t}\r\n\t// \tif (data.validator.email.active) {\r\n\t// \t\tvalidators.push(Validators.email);\r\n\t// \t}\r\n\t// \tvar ctr = new FormControl(data.value, validators);\r\n\t// \t(ctr as any).schema = data;\r\n\t// \t(ctr as any).schema.path = parentPath;\r\n\t// \t(ctr as any).schema.formGroupPath = formGroupPath;\r\n\t// \treturn ctr;\r\n\t// } else if (data.type == \"group\") {\r\n\t// \tvar formGroup = new FormGroup({});\r\n\t// \tif (data.parentType == undefined) {\r\n\t// \t\tparentPath = (data as FieldConfig).name;\r\n\t// \t} else if (data.parentType == \"array\") {\r\n\t// \t\tparentPath = `${parentPath}.controls[${(data as FieldConfig).name}]`;\r\n\t// \t} else if (data.parentType == \"group\") {\r\n\t// \t\tparentPath = `${parentPath}.controls.${(data as FieldConfig).name}`;\r\n\t// \t}\r\n\r\n\t// \t(formGroup as any).schema = data;\r\n\t// \t(formGroup as any).schema.path = parentPath;\r\n\t// \tdata.fields.forEach(item => {\r\n\t// \t\titem.parentType = \"group\";\r\n\t// \t\tformGroup.addControl(item.name, this.createFrom(item, parentPath));\r\n\t// \t});\r\n\t// \treturn formGroup;\r\n\t// } else {\r\n\t// \tvar formArray: FormArray = new FormArray([]);\r\n\t// \tparentPath =\r\n\t// \t\tparentPath == \"\"\r\n\t// \t\t\t? (data as FieldConfig).name\r\n\t// \t\t\t: `${parentPath}.controls.${(data as FieldConfig).name}`;\r\n\t// \t(formArray as any).schema = data;\r\n\t// \t(formArray as any).schema.path = parentPath;\r\n\t// \tdata.fields.forEach((item, idx) => {\r\n\t// \t\titem.parentType = \"array\";\r\n\t// \t\titem.name = idx.toString();\r\n\t// \t\tformArray.controls.push(this.createFrom(item, parentPath));\r\n\t// \t});\r\n\t// \treturn formArray;\r\n\t// }\r\n\t// }\r\n}\r\n"
  ],
  "names": [],
  "mappings": ";;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAElD,OAAO,EAAE,KAAK,EAAE,MAAM,aAAa,CAAC;AAIpC,OAAO,EAAE,wBAAwB,EAAE,MAAM,8BAA8B,CAAC;AAKxE,MAAM;;;;;;IAGL,YACS,MACA,OACA;QAFA,SAAI,GAAJ,IAAI;QACJ,UAAK,GAAL,KAAK;QACL,yBAAoB,GAApB,oBAAoB;KACzB;;;YARJ,UAAU;;;;YAVF,UAAU;YAEV,KAAK;YAIL,wBAAwB"
}
