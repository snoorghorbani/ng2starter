/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { createSelector, createFeatureSelector } from "@ngrx/store";
import * as configList from "./config-list.reducer";
import { ConfigLoadedFailedAction } from "../actions";
/**
 * @record
 */
export function ConfigState() { }
function ConfigState_tsickle_Closure_declarations() {
    /** @type {?} */
    ConfigState.prototype.list;
}
ConfigLoadedFailedAction;
export var /** @type {?} */ ConfigReducers = {
    list: configList.Reducer
};
/**
 * @record
 */
export function FeatureState() { }
function FeatureState_tsickle_Closure_declarations() {
    /** @type {?} */
    FeatureState.prototype.configs;
}
//#region selectors
export var /** @type {?} */ selectConfigState = createFeatureSelector("config");
//#endregion
export var /** @type {?} */ getConfigListState = createSelector(selectConfigState, function (state) { return state.list; });
export var /** @type {?} */ getConfigs = createSelector(getConfigListState, configList.getConfigs);
export var /** @type {?} */ getAppConfig = createSelector(getConfigListState, configList.getAppConfig);
export var /** @type {?} */ getAuthenticationModuleConfig = createSelector(getConfigListState, configList.getAuthenticationModuleConfig);
export var /** @type {?} */ getUserModuleConfig = createSelector(getConfigListState, configList.getUserModuleConfig);
export var /** @type {?} */ getlayoutModuleConfig = createSelector(getConfigListState, configList.getlayoutModuleConfig);
export var /** @type {?} */ getConfigModuleConfig = createSelector(getConfigListState, configList.getConfigModuleConfig);
export var /** @type {?} */ getFormModuleConfig = createSelector(getConfigListState, configList.getFormModuleConfig);
export var /** @type {?} */ getSocketModuleConfig = createSelector(getConfigListState, configList.getSocketModuleConfig);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac291c2hpYW5zL2NvbmZpZy8iLCJzb3VyY2VzIjpbImxpYi9yZWR1Y2Vycy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxxQkFBcUIsRUFBb0IsTUFBTSxhQUFhLENBQUM7QUFFdEYsT0FBTyxLQUFLLFVBQVUsTUFBTSx1QkFBdUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsd0JBQXdCLEVBQTZCLE1BQU0sWUFBWSxDQUFDOzs7Ozs7Ozs7QUFJakYsd0JBQXdCLENBQUM7QUFDekIsTUFBTSxDQUFDLHFCQUFNLGNBQWMsR0FBRztJQUM3QixJQUFJLEVBQUUsVUFBVSxDQUFDLE9BQU87Q0FDeEIsQ0FBQzs7Ozs7Ozs7OztBQVFGLE1BQU0sQ0FBQyxxQkFBTSxpQkFBaUIsR0FBRyxxQkFBcUIsQ0FBYyxRQUFRLENBQUMsQ0FBQzs7QUFJOUUsTUFBTSxDQUFDLHFCQUFNLGtCQUFrQixHQUFHLGNBQWMsQ0FBQyxpQkFBaUIsRUFBRSxVQUFDLEtBQWtCLElBQUssT0FBQSxLQUFLLENBQUMsSUFBSSxFQUFWLENBQVUsQ0FBQyxDQUFDO0FBQ3hHLE1BQU0sQ0FBQyxxQkFBTSxVQUFVLEdBQUcsY0FBYyxDQUFDLGtCQUFrQixFQUFFLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNwRixNQUFNLENBQUMscUJBQU0sWUFBWSxHQUFHLGNBQWMsQ0FBQyxrQkFBa0IsRUFBRSxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDeEYsTUFBTSxDQUFDLHFCQUFNLDZCQUE2QixHQUFHLGNBQWMsQ0FDMUQsa0JBQWtCLEVBQ2xCLFVBQVUsQ0FBQyw2QkFBNkIsQ0FDeEMsQ0FBQztBQUNGLE1BQU0sQ0FBQyxxQkFBTSxtQkFBbUIsR0FBRyxjQUFjLENBQUMsa0JBQWtCLEVBQUUsVUFBVSxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDdEcsTUFBTSxDQUFDLHFCQUFNLHFCQUFxQixHQUFHLGNBQWMsQ0FBQyxrQkFBa0IsRUFBRSxVQUFVLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUMxRyxNQUFNLENBQUMscUJBQU0scUJBQXFCLEdBQUcsY0FBYyxDQUFDLGtCQUFrQixFQUFFLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBQzFHLE1BQU0sQ0FBQyxxQkFBTSxtQkFBbUIsR0FBRyxjQUFjLENBQUMsa0JBQWtCLEVBQUUsVUFBVSxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDdEcsTUFBTSxDQUFDLHFCQUFNLHFCQUFxQixHQUFHLGNBQWMsQ0FBQyxrQkFBa0IsRUFBRSxVQUFVLENBQUMscUJBQXFCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yLCBjcmVhdGVGZWF0dXJlU2VsZWN0b3IsIE1lbW9pemVkU2VsZWN0b3IgfSBmcm9tIFwiQG5ncngvc3RvcmVcIjtcclxuXHJcbmltcG9ydCAqIGFzIGNvbmZpZ0xpc3QgZnJvbSBcIi4vY29uZmlnLWxpc3QucmVkdWNlclwiO1xyXG5pbXBvcnQgeyBDb25maWdMb2FkZWRGYWlsZWRBY3Rpb24sIENvbmZpZ0xvYWRlZFN1Y2NlZWRBY3Rpb24gfSBmcm9tIFwiLi4vYWN0aW9uc1wiO1xyXG5leHBvcnQgaW50ZXJmYWNlIENvbmZpZ1N0YXRlIHtcclxuXHRsaXN0OiBjb25maWdMaXN0LlN0YXRlO1xyXG59XHJcbkNvbmZpZ0xvYWRlZEZhaWxlZEFjdGlvbjtcclxuZXhwb3J0IGNvbnN0IENvbmZpZ1JlZHVjZXJzID0ge1xyXG5cdGxpc3Q6IGNvbmZpZ0xpc3QuUmVkdWNlclxyXG59O1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBGZWF0dXJlU3RhdGUge1xyXG5cdFwiY29uZmlnc1wiOiBDb25maWdTdGF0ZTtcclxufVxyXG5cclxuLy8jcmVnaW9uIHNlbGVjdG9yc1xyXG5cclxuZXhwb3J0IGNvbnN0IHNlbGVjdENvbmZpZ1N0YXRlID0gY3JlYXRlRmVhdHVyZVNlbGVjdG9yPENvbmZpZ1N0YXRlPihcImNvbmZpZ1wiKTtcclxuXHJcbi8vI2VuZHJlZ2lvblxyXG5cclxuZXhwb3J0IGNvbnN0IGdldENvbmZpZ0xpc3RTdGF0ZSA9IGNyZWF0ZVNlbGVjdG9yKHNlbGVjdENvbmZpZ1N0YXRlLCAoc3RhdGU6IENvbmZpZ1N0YXRlKSA9PiBzdGF0ZS5saXN0KTtcclxuZXhwb3J0IGNvbnN0IGdldENvbmZpZ3MgPSBjcmVhdGVTZWxlY3RvcihnZXRDb25maWdMaXN0U3RhdGUsIGNvbmZpZ0xpc3QuZ2V0Q29uZmlncyk7XHJcbmV4cG9ydCBjb25zdCBnZXRBcHBDb25maWcgPSBjcmVhdGVTZWxlY3RvcihnZXRDb25maWdMaXN0U3RhdGUsIGNvbmZpZ0xpc3QuZ2V0QXBwQ29uZmlnKTtcclxuZXhwb3J0IGNvbnN0IGdldEF1dGhlbnRpY2F0aW9uTW9kdWxlQ29uZmlnID0gY3JlYXRlU2VsZWN0b3IoXHJcblx0Z2V0Q29uZmlnTGlzdFN0YXRlLFxyXG5cdGNvbmZpZ0xpc3QuZ2V0QXV0aGVudGljYXRpb25Nb2R1bGVDb25maWdcclxuKTtcclxuZXhwb3J0IGNvbnN0IGdldFVzZXJNb2R1bGVDb25maWcgPSBjcmVhdGVTZWxlY3RvcihnZXRDb25maWdMaXN0U3RhdGUsIGNvbmZpZ0xpc3QuZ2V0VXNlck1vZHVsZUNvbmZpZyk7XHJcbmV4cG9ydCBjb25zdCBnZXRsYXlvdXRNb2R1bGVDb25maWcgPSBjcmVhdGVTZWxlY3RvcihnZXRDb25maWdMaXN0U3RhdGUsIGNvbmZpZ0xpc3QuZ2V0bGF5b3V0TW9kdWxlQ29uZmlnKTtcclxuZXhwb3J0IGNvbnN0IGdldENvbmZpZ01vZHVsZUNvbmZpZyA9IGNyZWF0ZVNlbGVjdG9yKGdldENvbmZpZ0xpc3RTdGF0ZSwgY29uZmlnTGlzdC5nZXRDb25maWdNb2R1bGVDb25maWcpO1xyXG5leHBvcnQgY29uc3QgZ2V0Rm9ybU1vZHVsZUNvbmZpZyA9IGNyZWF0ZVNlbGVjdG9yKGdldENvbmZpZ0xpc3RTdGF0ZSwgY29uZmlnTGlzdC5nZXRGb3JtTW9kdWxlQ29uZmlnKTtcclxuZXhwb3J0IGNvbnN0IGdldFNvY2tldE1vZHVsZUNvbmZpZyA9IGNyZWF0ZVNlbGVjdG9yKGdldENvbmZpZ0xpc3RTdGF0ZSwgY29uZmlnTGlzdC5nZXRTb2NrZXRNb2R1bGVDb25maWcpO1xyXG4iXX0=