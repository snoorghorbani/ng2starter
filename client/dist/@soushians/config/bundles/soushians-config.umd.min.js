!function(o,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/forms"),require("@angular/core"),require("@ngrx/store"),require("rxjs/BehaviorSubject"),require("@angular/common/http"),require("rxjs/Rx"),require("@angular/router"),require("tslib"),require("rxjs/Observable"),require("@ngrx/effects"),require("rxjs/operators"),require("@angular/common"),require("@angular/flex-layout"),require("@angular/platform-browser/animations"),require("@angular/material")):"function"==typeof define&&define.amd?define("@soushians/config",["exports","@angular/forms","@angular/core","@ngrx/store","rxjs/BehaviorSubject","@angular/common/http","rxjs/Rx","@angular/router","tslib","rxjs/Observable","@ngrx/effects","rxjs/operators","@angular/common","@angular/flex-layout","@angular/platform-browser/animations","@angular/material"],e):e((o.soushians=o.soushians||{},o.soushians.config={}),o.ng.forms,o.ng.core,null,o.Rx,o.ng.common.http,o.Rx,o.ng.router,o.tslib,o.Rx,null,o.Rx.Observable.prototype,o.ng.common,o.ng["flex-layout"],o.ng.platformBrowser.animations,o.ng.material)}(this,function(r,n,u,o,i,e,t,a,c,f,m,l,s,d,p,g){"use strict";var h=function(){};!function(o){var e=function(){function o(e){void 0===e&&(e={});var t=this;Object.keys(e).forEach(function(o){return t[o]=e[o]})}return o.prototype.getRequestBody=function(){return{}},o}();o.Request=e;var t=function(){};o.Response=t}(r.GetConfigsApiModel||(r.GetConfigsApiModel={})),function(o){var e=function(){function o(e){void 0===e&&(e={});var t=this;Object.keys(e).forEach(function(o){return t[o]=e[o]})}return o.prototype.getRequestBody=function(){return{Name:this.Name,Config:this.Config}},Object.defineProperty(o,"formGroup",{get:function(){return new n.FormGroup({Name:new n.FormControl("",[n.Validators.required]),Config:new n.FormGroup({})})},enumerable:!0,configurable:!0}),o}();o.Request=e;var t=function(){};o.Response=t}(r.EditConfigApiModel||(r.EditConfigApiModel={}));var v={dev_api_host:"http://localhost:3000",prod_api_host:"http://5.196.149.107:3000",env:{production:!1}},C=new u.InjectionToken("UserModuleConfig"),y="[CONFIG] get config",b="[CONFIG] load config succeed",F="[CONFIG] update config",G="[CONFIG] load config failed",w=function(){this.type=y},x=function(o){this.payload=o,this.type=b},M=function(){this.type=G},I={data:[]};var N={list:function(o,e){switch(void 0===o&&(o=I),e.type){case b:return Object.assign({},o,{data:e.payload});case F:return Object.assign({},o,{data:o.data.map(function(o){return o._id==e.payload._id&&(o.Config=e.payload.Config),o})});default:return o}}},j=o.createFeatureSelector("config"),_=o.createSelector(j,function(o){return o.list}),q=o.createSelector(_,function(o){return o.data}),S=o.createSelector(_,function(o){return o.data.find(function(o){return"app_config"==o.Name})}),O=o.createSelector(_,function(o){return o.data.find(function(o){return"authentication_module_config"==o.Name})}),V=o.createSelector(_,function(o){return o.data.find(function(o){return"user_module_config"==o.Name})}),E=o.createSelector(_,function(o){return o.data.find(function(o){return"layout_config"==o.Name})}),R=o.createSelector(_,function(o){return o.data.find(function(o){return"config_module_config"==o.Name})}),L=o.createSelector(_,function(o){return o.data.find(function(o){return"form_module_config"==o.Name})}),k=o.createSelector(_,function(o){return o.data.find(function(o){return"socket_module_config"==o.Name})}),P=function(){function o(o,e){var t=this;this.store=e,this.config$=new i.BehaviorSubject(this._config),this._config=Object.assign({},v,o),this.config$.next(this._config),this.store.select(R).subscribe(function(o){o&&(t._config=Object.assign({},t._config,o.Config),t.config$.next(t._config))})}return Object.defineProperty(o.prototype,"config",{get:function(){return this._config},enumerable:!0,configurable:!0}),o}();P.decorators=[{type:u.Injectable,args:[{providedIn:"root"}]}],P.ctorParameters=function(){return[{type:undefined,decorators:[{type:u.Inject,args:[C]}]},{type:o.Store}]},P.ngInjectableDef=u.defineInjectable({factory:function(){return new P(u.inject(C),u.inject(o.Store))},token:P,providedIn:"root"});var A=function(){function o(o,e,t){var n=this;this.http=o,this.store=e,this.configurationService=t,this.configsEndpoint=this.configurationService.config.env.production?this.configurationService.config.prod_api_host:this.configurationService.config.dev_api_host,setTimeout(function(){n.store.dispatch(new w)},999)}return o.prototype.getConfigs=function(){var n=this;return this.http.get(this.configsEndpoint+"/api/config").take(1).map(function(o){if(n.configurationService.config.env.production){var e=n.configurationService.config.dev_api_host,t=n.configurationService.config.prod_api_host;return JSON.parse(JSON.stringify(o).replace(new RegExp(e,"g"),t)).Result}return o.Result})["catch"](function(o){return t.Observable["throw"](o)})},o.prototype.getConfigByName=function(o){return this.http.get(this.configsEndpoint+"/api/config/"+o).map(function(o){return o})["catch"](function(o){return t.Observable["throw"](o)})},o.prototype.editConfig=function(o){var e=new r.EditConfigApiModel.Request(o);return this.http.put(this.configsEndpoint+"/api/config/"+e.Name,e.getRequestBody()).map(function(o){return o})["catch"](function(o){return t.Observable["throw"](o)})},o.prototype.getLayoutConfigs=function(){return this.http.get(this.configsEndpoint+"/api/layout-config").map(function(o){return o})["catch"](function(o){return t.Observable["throw"](o)})},o}();A.decorators=[{type:u.Injectable,args:[{providedIn:"root"}]}],A.ctorParameters=function(){return[{type:e.HttpClient},{type:o.Store},{type:P}]},A.ngInjectableDef=u.defineInjectable({factory:function(){return new A(u.inject(e.HttpClient),u.inject(o.Store),u.inject(P))},token:A,providedIn:"root"});var B=function(o){this.store=o,this.configs=this.store.select(q)};B.decorators=[{type:u.Component,args:[{selector:"configs",template:'<div fxFlexLayout="row" fxLayoutWrap fxLayoutAlign="center center">\n  <mat-card class="config-box" *ngFor="let config of (configs | async)" [fxFlex]="50">\n      <h3>\n        <a [routerLink]="[\'edit\' ,  config.Name]">\n          <mat-icon aria-label="edit config">edit</mat-icon>\n        </a>\n        {{config.Name}}\n      </h3>\n  </mat-card>\n</div>',styles:[":host{width:100%}.config-box{margin:15px}"]}]}],B.ctorParameters=function(){return[{type:o.Store}]};var D=function(){function o(o,e,t){var n=this;this.configService=o,this.formBuilder=e,this.route=t,this.formGroup=r.EditConfigApiModel.Request.formGroup,this.route.params.subscribe(function(o){var e=o.name;n.configService.getConfigByName(e).subscribe(function(e){n.partialConfigModel={type:e.Result.Name,inputs:{configFormGroup:n.formGroup.controls.Config}},n.formGroup.patchValue({_id:e.Result._id,Name:e.Result.Name}),Object.keys(e.Result.Config).forEach(function(o){n.addControl(n.formGroup.controls.Config,o,e.Result.Config[o])})})})}return o.prototype.addControl=function(o,e,t){t instanceof Array?o.addControl(e,this.formBuilder.array(t)):t instanceof Object?o.addControl(e,this.formBuilder.group(t)):o.addControl(e,new n.FormControl(t))},o.prototype.ngOnInit=function(){},o.prototype.configChanged=function(o){this.formGroup.controls.Config.patchValue(o)},o.prototype.edit=function(){this.formGroup.valid&&this.configService.editConfig(this.formGroup.value).subscribe(function(o){})},o}();D.decorators=[{type:u.Component,args:[{selector:"config-config-edit",template:'<div >\n  <form [formGroup]="formGroup" (ngSubmit)="edit()" fxLayout="column">\n    <mat-card>\n      <mat-card-content>\n          <dynamic-config-component-selector (configChanged)="configChanged($event)" [data]="partialConfigModel"></dynamic-config-component-selector>\n      </mat-card-content>\n      <mat-card-actions fxLayoutAlign="center center">\n        <button fxFlex="nogrow" type="submit" mat-raised-button color="primary" (click)="edit">ویرایش</button>\n        <button fxFlex="nogrow" type="button" routerLink="/configs" mat-raised-button>بازگشت</button>\n      </mat-card-actions>\n    </mat-card>\n  </form>\n</div>'}]}],D.ctorParameters=function(){return[{type:A},{type:n.FormBuilder},{type:a.ActivatedRoute}]};var T=function(){function o(o){this.injector=o,this.formGroup=new n.FormGroup({AppTitle:new n.FormControl("",[n.Validators.required])}),this.configChanged=new u.EventEmitter,this.configFormGroup=this.injector.get("configFormGroup")}return Object.defineProperty(o.prototype,"configFormGroup",{set:function(o){var e=this;this.formGroup.patchValue(o.value),o.valueChanges.subscribe(function(o){e.formGroup.patchValue(o)})},enumerable:!0,configurable:!0}),o}();T.decorators=[{type:u.Component,args:[{selector:"config-app-config",template:'<div [formGroup]="formGroup">\n    <mat-form-field>\n        <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="نام پروژه" formControlName="AppTitle">\n    </mat-form-field>\n</div>'}]}],T.ctorParameters=function(){return[{type:u.Injector}]},T.propDecorators={configFormGroup:[{type:u.Input}],configChanged:[{type:u.Output}]};var $=function(){function o(o){this.injector=o,this.formGroup=new n.FormGroup({endpoints:new n.FormGroup({changePassword:new n.FormControl("",[n.Validators.required]),editProfile:new n.FormControl("",[n.Validators.required]),getUserInfo:new n.FormControl("",[n.Validators.required]),profileInformation:new n.FormControl("",[n.Validators.required])}),forms:new n.FormGroup({profile_edit:new n.FormControl("",[n.Validators.required])}),dashboardLinks:new n.FormArray([])}),this.configChanged=new u.EventEmitter,this.configFormGroup=this.injector.get("configFormGroup")}return Object.defineProperty(o.prototype,"configFormGroup",{get:function(){return this._configFormGroup},set:function(o){var e=this;(this._configFormGroup=o).controls.dashboardLinks.controls.forEach(function(o){e.formGroup.controls.dashboardLinks.push(new n.FormGroup({route:new n.FormControl("",[n.Validators.required]),icon:new n.FormControl("",[n.Validators.required]),title:new n.FormControl("",[n.Validators.required])}))}),this.formGroup.patchValue(o.value),o.valueChanges.subscribe(function(o){e.formGroup.patchValue(o)})},enumerable:!0,configurable:!0}),o.prototype.addMenu=function(){var o=new n.FormGroup({route:new n.FormControl("",[n.Validators.required]),icon:new n.FormControl("",[n.Validators.required]),title:new n.FormControl("",[n.Validators.required])});this.formGroup.get("dashboardLinks").push(o),this.configFormGroup.get("dashboardLinks").push(o)},o}();$.decorators=[{type:u.Component,args:[{selector:"config-user-module-config",template:'<h2>Endpoints</h2>\n<div [formGroup]="formGroup.get(\'endpoints\')" fxLayout="column">\n        <mat-form-field>\n            <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="change password" formControlName="changePassword">\n        </mat-form-field>\n        <mat-form-field>\n            <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="edit profile" formControlName="editProfile">\n        </mat-form-field>\n        <mat-form-field>\n            <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="get user info" formControlName="getUserInfo">\n        </mat-form-field>\n        <mat-form-field>\n            <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="Profile Information Endpoint" formControlName="profileInformation">\n        </mat-form-field>\n</div>\n<h2>Forms</h2>\n<div [formGroup]="formGroup.get(\'forms\')" fxLayout="column">\n    <mat-form-field>\n        <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="profile edit" formControlName="profile_edit">\n    </mat-form-field>\n            \x3c!-- <ngs-form-selector (select)="setFormId($event,\'signIn\')"></ngs-form-selector> --\x3e\n</div>\n\n\n<h2 fxFlex="100">\n    Dashobard Links\n    <button mat-icon-button color="primary" (click)="addMenu()">\n        <mat-icon aria-label="icon-button icon">add</mat-icon>\n    </button>\n</h2>\n<div fxFlex="100" *ngFor="let item of $any(formGroup.get(\'dashboardLinks\')).controls">\n    <div [formGroup]="item">\n        <mat-form-field>\n            <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="route" formControlName="route">\n        </mat-form-field>\n        <mat-form-field>\n            <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="icon" formControlName="icon">\n        </mat-form-field>\n        <mat-form-field>\n            <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="title" formControlName="title">\n        </mat-form-field>\n    </div>\n</div>'}]}],$.ctorParameters=function(){return[{type:u.Injector}]},$.propDecorators={configFormGroup:[{type:u.Input}],configChanged:[{type:u.Output}]};var U=function(){function o(o){this.injector=o,this.formGroup=new n.FormGroup({layoutMode:new n.FormControl("",[n.Validators.required]),showLeftNavBar:new n.FormControl("",[n.Validators.required]),mainSideNavMode:new n.FormControl("",[n.Validators.required]),showMainSidenav:new n.FormControl("",[n.Validators.required]),stickyLeftNavBar:new n.FormControl("",[n.Validators.required]),showSecondSideNav:new n.FormControl("",[n.Validators.required]),secondSideNavMode:new n.FormControl("",[n.Validators.required]),menuItems:new n.FormArray([])}),this.configChanged=new u.EventEmitter,this.roleItems=["Admin","User"],this.sideNavModes=["over","push","side"],this.layoutModes=["with-margin","without-margin","default"],this.configFormGroup=this.injector.get("configFormGroup")}return Object.defineProperty(o.prototype,"configFormGroup",{get:function(){return this._configFormGroup},set:function(o){var e=this;(this._configFormGroup=o).controls.menuItems.controls.forEach(function(o){e.formGroup.controls.menuItems.push(new n.FormGroup({route:new n.FormControl("",[n.Validators.required]),icon:new n.FormControl("",[n.Validators.required]),roles:new n.FormControl,title:new n.FormControl("",[n.Validators.required])}))}),this.formGroup.patchValue(o.value),o.valueChanges.subscribe(function(o){return e.formGroup.patchValue(o)})},enumerable:!0,configurable:!0}),o.prototype.addMenu=function(){var o=new n.FormGroup({route:new n.FormControl("",[n.Validators.required]),icon:new n.FormControl("",[n.Validators.required]),roles:new n.FormControl,title:new n.FormControl("",[n.Validators.required])});this.formGroup.get("menuItems").push(o),this.configFormGroup.get("menuItems").push(o)},o}();U.decorators=[{type:u.Component,args:[{template:'<div fxFlexLayout="row" fxLayoutWrap fxLayoutAlign="center center">\n    <div fxFlex="100" fxFlexLayout="row">\n        <div [formGroup]="formGroup">\n            <mat-form-field>\n                <mat-select (change)="configChanged.emit(formGroup.value)" placeholder="layout mode" formControlName="layoutMode" >\n                    <mat-option *ngFor="let item of layoutModes" [value]="item">{{item}}</mat-option>\n                </mat-select> \n            </mat-form-field>\n            <mat-slide-toggle  (change)="configChanged.emit(formGroup.value)"  formControlName="showLeftNavBar">show left navbar</mat-slide-toggle>\n            <mat-form-field>\n                <mat-select (change)="configChanged.emit(formGroup.value)" placeholder="main side nav mode" formControlName="mainSideNavMode" >\n                    <mat-option *ngFor="let item of sideNavModes" [value]="item">{{item}}</mat-option>\n                </mat-select> \n            </mat-form-field>\n            <mat-slide-toggle  (change)="configChanged.emit(formGroup.value)"  formControlName="showMainSidenav">show main side nav</mat-slide-toggle>\n            <mat-slide-toggle  (change)="configChanged.emit(formGroup.value)"  formControlName="stickyLeftNavBar">sticky left navbar</mat-slide-toggle>\n            <mat-slide-toggle  (change)="configChanged.emit(formGroup.value)"  formControlName="showSecondSideNav">show second side nav</mat-slide-toggle>\n            <mat-form-field>\n                <mat-select (change)="configChanged.emit(formGroup.value)" placeholder="second side nav mode" formControlName="secondSideNavMode" >\n                    <mat-option *ngFor="let item of sideNavModes" [value]="item">{{item}}</mat-option>\n                </mat-select> \n            </mat-form-field>\n        </div>\n    </div>\n\n    <h2 fxFlex="100">\n        Menu Items\n        <button mat-icon-button color="primary" (click)="addMenu()">\n            <mat-icon aria-label="icon-button icon">add</mat-icon>\n        </button>\n    </h2>\n    <div fxFlex="100" *ngFor="let item of formGroup.controls.menuItems.controls">\n        <div [formGroup]="item">\n            <mat-form-field>\n                <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="route" formControlName="route">\n            </mat-form-field>\n            <mat-form-field>\n                <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="icon" formControlName="icon">\n            </mat-form-field>\n            <mat-form-field>\n                <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="title" formControlName="title">\n            </mat-form-field>\n            <mat-form-field> \n                <mat-select (change)="configChanged.emit(formGroup.value)" placeholder="roles" formControlName="roles" multiple>\n                    <mat-option *ngFor="let role of roleItems" [value]="role">{{role}}</mat-option>\n                </mat-select> \n            </mat-form-field>\n        </div>\n    </div>\n</div>'}]}],U.ctorParameters=function(){return[{type:u.Injector}]},U.propDecorators={configFormGroup:[{type:u.Input}],configChanged:[{type:u.Output}]};var H=function(){function o(){}return o.prototype.ngOnInit=function(){},o}();H.decorators=[{type:u.Component,args:[{selector:"config-module-container",template:'<div fxLayoutAlign="" fxflex="100" fxLayout="column">\n    <router-outlet></router-outlet>\n</div>\n'}]}],H.ctorParameters=function(){return[]};var J=function(){function o(o){this.injector=o,this.formGroup=new n.FormGroup({endpoints:new n.FormGroup({signIn:new n.FormControl("",[n.Validators.required]),signOut:new n.FormControl("",[n.Validators.required]),userInformation:new n.FormControl("",[n.Validators.required])}),forms:new n.FormGroup({signIn:new n.FormControl("",[n.Validators.required])})}),this.configChanged=new u.EventEmitter,this.configFormGroup=this.injector.get("configFormGroup")}return Object.defineProperty(o.prototype,"configFormGroup",{set:function(o){var e=this;this.formGroup.patchValue(o.value),o.valueChanges.subscribe(function(o){e.formGroup.patchValue(o)})},enumerable:!0,configurable:!0}),o.prototype.setFormId=function(o,e){var t;this.formGroup.patchValue(((t={})[e]=o,t))},o}();J.decorators=[{type:u.Component,args:[{selector:"config-authentication-module-config",template:'<h2>Endpoints</h2>\n<div [formGroup]="formGroup.controls.endpoints" fxLayout="column">\n    <mat-form-field>\n        <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="sign in" formControlName="signIn">\n    </mat-form-field>\n    <mat-form-field>\n        <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="sign out" formControlName="signOut">\n    </mat-form-field>\n    <mat-form-field>\n        <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="user information" formControlName="userInformation">\n    </mat-form-field>\n</div>\n<h2>Forms</h2>\n<div [formGroup]="formGroup.controls.forms" fxLayout="column">\n    <mat-form-field>\n        <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="SignIn Forms" formControlName="signIn">\n    </mat-form-field>\n            \x3c!-- <ngs-form-selector (select)="setFormId($event,\'signIn\')"></ngs-form-selector> --\x3e\n</div>'}]}],J.ctorParameters=function(){return[{type:u.Injector}]},J.propDecorators={configFormGroup:[{type:u.Input}],configChanged:[{type:u.Output}]};var W=function(){function o(o){this.resolver=o,this.typeMapToDiagram={authentication_module_config:J,app_config:T,user_module_config:$,layout_config:U},this.configChanged=new u.EventEmitter,this.currentComponent=null}return Object.defineProperty(o.prototype,"data",{set:function(e){var t=this;if(e&&0!=Object.keys(e).length)if(e.type in this.typeMapToDiagram){var o=this.typeMapToDiagram[e.type],n=Object.keys(e.inputs).map(function(o){return{provide:o,useValue:e.inputs[o]}}),r=u.ReflectiveInjector.resolve(n),i=u.ReflectiveInjector.fromResolvedProviders(r,this.dynamicComponentContainer.parentInjector),a=this.resolver.resolveComponentFactory(o).create(i);a.instance.configChanged.subscribe(function(o){t.configChanged.emit(o)}),this.dynamicComponentContainer.insert(a.hostView),this.currentComponent&&this.currentComponent.destroy(),this.currentComponent=a}else this.currentComponent&&this.currentComponent.destroy()},enumerable:!0,configurable:!0}),o.prototype.ngAfterViewInit=function(){},o}();W.decorators=[{type:u.Component,args:[{selector:"dynamic-config-component-selector",template:"<div #dynamicComponentContainer></div>",styles:[":host{width:100%}.diagram-box{margin:15px}.diagram-box .c3{direction:ltr}"],entryComponents:[J,T,$,U]}]}],W.ctorParameters=function(){return[{type:u.ComponentFactoryResolver}]},W.propDecorators={dynamicComponentContainer:[{type:u.ViewChild,args:["dynamicComponentContainer",{read:u.ViewContainerRef}]}],configChanged:[{type:u.Output}],data:[{type:u.Input}]};var K=function(o,e){var t=this;this.actions$=o,this.configService=e,this.getConfigs$=this.actions$.ofType(y).pipe(l.map(function(o){return o.payload}),l.switchMap(function(o){return t.configService.getConfigs()}),l.map(function(o){return new x(o)}),l.catchError(function(){return f.Observable.of(new M)}))};K.decorators=[{type:u.Injectable}],K.ctorParameters=function(){return[{type:m.Actions},{type:A}]},c.__decorate([m.Effect(),c.__metadata("design:type",Object)],K.prototype,"getConfigs$",void 0);var z=[{path:"configs",component:H,children:[{path:"",component:B},{path:"edit/:name",component:D}]}],Q=a.RouterModule.forChild(z),X=function(){function o(){}return o.forRoot=function(o){return{ngModule:Y,providers:[{provide:C,useValue:o}]}},o}();X.decorators=[{type:u.NgModule,args:[{imports:[s.CommonModule,a.RouterModule,n.FormsModule,n.ReactiveFormsModule,e.HttpClientModule,d.FlexLayoutModule,g.MatIconModule,g.MatButtonModule,g.MatCardModule,g.MatSnackBarModule,g.MatSidenavModule,g.MatExpansionModule,g.MatSelectModule,g.MatFormFieldModule,g.MatListModule,g.MatMenuModule,g.MatRadioModule,g.MatInputModule,g.MatSlideToggleModule,g.MatToolbarModule,g.MatDatepickerModule,g.MatProgressBarModule,p.BrowserAnimationsModule,Q],declarations:[B,D,T,$,U,H,J,W],providers:[]}]}];var Y=function(){};Y.decorators=[{type:u.NgModule,args:[{imports:[X,o.StoreModule.forFeature("config",N),m.EffectsModule.forFeature([K])],exports:[X]}]}],r.ConfigService=A,r.ConfigModel=h,r.MODULE_DEFAULT_CONFIG=v,r.MODULE_CONFIG_TOKEN=C,r.ConfigReducers=N,r.selectConfigState=j,r.getConfigListState=_,r.getConfigs=q,r.getAppConfig=S,r.getAuthenticationModuleConfig=O,r.getUserModuleConfig=V,r.getlayoutModuleConfig=E,r.getConfigModuleConfig=R,r.getFormModuleConfig=L,r.getSocketModuleConfig=k,r.NgsConfigModule=X,r.RootNgsConfigModule=Y,r.ɵc=Q,r.ɵj=T,r.ɵn=J,r.ɵl=U,r.ɵk=$,r.ɵq=K,r.ɵp=N,r.ɵb=P,r.ɵf=D,r.ɵd=H,r.ɵe=B,r.ɵi=D,r.ɵm=H,r.ɵg=B,r.ɵo=W,Object.defineProperty(r,"__esModule",{value:!0})});
//# sourceMappingURL=soushians-config.umd.min.js.map
