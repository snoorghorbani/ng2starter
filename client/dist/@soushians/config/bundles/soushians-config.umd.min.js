!function(t,o){"object"==typeof exports&&"undefined"!=typeof module?o(exports,require("@angular/forms"),require("@angular/core"),require("@ngrx/store"),require("rxjs/BehaviorSubject"),require("@angular/common/http"),require("rxjs/Rx"),require("@angular/router"),require("rxjs/operators"),require("rxjs/Observable"),require("@ngrx/effects"),require("@angular/common"),require("@angular/flex-layout"),require("@angular/platform-browser/animations"),require("@angular/material")):"function"==typeof define&&define.amd?define("@soushians/config",["exports","@angular/forms","@angular/core","@ngrx/store","rxjs/BehaviorSubject","@angular/common/http","rxjs/Rx","@angular/router","rxjs/operators","rxjs/Observable","@ngrx/effects","@angular/common","@angular/flex-layout","@angular/platform-browser/animations","@angular/material"],o):o((t.soushians=t.soushians||{},t.soushians.config={}),t.ng.forms,t.ng.core,null,t.rxjs.BehaviorSubject,t.ng.common.http,t.rxjs.Rx,t.ng.router,t.rxjs.operators,t.rxjs.Observable,null,t.ng.common,t.ng["flex-layout"],t.ng.platformBrowser.animations,t.ng.material)}(this,function(r,n,a,o,i,e,u,c,f,s,m,l,d,p,g){"use strict";var t=function(){};!function(t){var o=function(){function t(o){void 0===o&&(o={});var e=this;Object.keys(o).forEach(function(t){return e[t]=o[t]})}return t.prototype.getRequestBody=function(){return{}},t}();t.Request=o;var e=function(){};t.Response=e}(r.GetConfigsApiModel||(r.GetConfigsApiModel={})),function(t){var o=function(){function t(o){void 0===o&&(o={});var e=this;Object.keys(o).forEach(function(t){return e[t]=o[t]})}return t.prototype.getRequestBody=function(){return{Name:this.Name,Config:this.Config}},Object.defineProperty(t,"formGroup",{get:function(){return new n.FormGroup({Name:new n.FormControl("",[n.Validators.required]),Config:new n.FormGroup({})})},enumerable:!0,configurable:!0}),t}();t.Request=o;var e=function(){};t.Response=e}(r.EditConfigApiModel||(r.EditConfigApiModel={}));var h={env:{production:!1,frontend_server:"config/module/front_end/did/not/set"}},y=new a.InjectionToken("UserModuleConfig"),v=function(){return(v=Object.assign||function(t){for(var o,e=1,n=arguments.length;e<n;e++)for(var r in o=arguments[e])Object.prototype.hasOwnProperty.call(o,r)&&(t[r]=o[r]);return t}).apply(this,arguments)};var C="[CONFIG] get config",x="[CONFIG] load config succeed",b="[CONFIG] update config",w="[CONFIG] load config failed",G=function(){this.type=C},F=function(t){this.payload=t,this.type=x},M=function(){this.type=w},I={data:[]};function L(t,o){switch(void 0===t&&(t=I),o.type){case x:return v({},t,{data:o.payload});case b:return v({},t,{data:t.data.map(function(t){return t._id==o.payload._id&&(t.Config=o.payload.Config),t})});default:return t}}var j={list:L},N=o.createFeatureSelector("config"),_=o.createSelector(N,function(t){return t.list}),q=o.createSelector(_,function(t){return t.data}),O=o.createSelector(_,function(t){return t.data.find(function(t){return"app_config"==t.Name})}),S=o.createSelector(_,function(t){return t.data.find(function(t){return"authentication_module_config"==t.Name})}),V=o.createSelector(_,function(t){return t.data.find(function(t){return"user_module_config"==t.Name})}),A=o.createSelector(_,function(t){return t.data.find(function(t){return"config_module_config"==t.Name})}),R=o.createSelector(_,function(t){return t.data.find(function(t){return"form_module_config"==t.Name})}),k=o.createSelector(_,function(t){return t.data.find(function(t){return"socket_module_config"==t.Name})}),E=function(){function t(t,o){var e=this;this.store=o,this.config$=new i.BehaviorSubject(this._config),this._config=Object.assign({},h,t),this.config$.next(this._config),this.store.select(A).subscribe(function(t){t&&(e._config=Object.assign({},e._config,t.Config),e.config$.next(e._config))})}return Object.defineProperty(t.prototype,"config",{get:function(){return this._config},enumerable:!0,configurable:!0}),t.decorators=[{type:a.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[{type:undefined,decorators:[{type:a.Inject,args:[y]}]},{type:o.Store}]},t.ngInjectableDef=a.defineInjectable({factory:function(){return new t(a.inject(y),a.inject(o.Store))},token:t,providedIn:"root"}),t}(),P=function(){function t(t,o,e){var n=this;this.http=t,this.store=o,this.configurationService=e,setTimeout(function(){n.store.dispatch(new G)},999)}return t.prototype.getConfigs=function(){return this.http.get(this.configurationService.config.env.frontend_server+"/api/config").take(1).map(function(t){return t.Result})["catch"](function(t){return u.Observable["throw"](t)})},t.prototype.getConfigByName=function(t){return this.http.get(this.configurationService.config.env.frontend_server+"/api/config/"+t).map(function(t){return t})["catch"](function(t){return u.Observable["throw"](t)})},t.prototype.editConfig=function(t){var o=new r.EditConfigApiModel.Request(t);return this.http.put(this.configurationService.config.env.frontend_server+"/api/config/"+o.Name,o.getRequestBody()).map(function(t){return t})["catch"](function(t){return u.Observable["throw"](t)})},t.prototype.getLayoutConfigs=function(){return this.http.get(this.configurationService.config.env.frontend_server+"/api/layout-config").map(function(t){return t})["catch"](function(t){return u.Observable["throw"](t)})},t.decorators=[{type:a.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[{type:e.HttpClient},{type:o.Store},{type:E}]},t.ngInjectableDef=a.defineInjectable({factory:function(){return new t(a.inject(e.HttpClient),a.inject(o.Store),a.inject(E))},token:t,providedIn:"root"}),t}(),B=function(){function t(t){this.store=t,this.configs=this.store.select(q)}return t.decorators=[{type:a.Component,args:[{selector:"configs",template:'<div fxLayout="row" fxLayoutAlign="center" fxLayoutGap="25px" class="main-container">\n\n  <div class="content-action">\n    <mat-card class="with-sticky-action">\n      <mat-card-header>\n        <mat-card-title fxLayout="row" fxLayoutGap="5px">\n          <mat-icon>settings_input_component</mat-icon>\n          <span>تنظیمات سامانه و ماژول ها</span>\n        </mat-card-title>\n        <mat-card-subtitle fxLayout="row" fxLayoutAlign="space-between center">\n          <span>\n            شامل تمامی درخواست‌ها از قبیل دائری، جمع‌آوری و ...\n          </span>\n        </mat-card-subtitle>\n      </mat-card-header>\n\n      <div fxLayout="row wrap" fxLayoutGap="10px" fxLayoutAlign="start">\n\n        <button fxFlex.lt-lg="18" fxFlex.lg="23.5" fxFlex.md="31" fxFlex.sm="48" fxFlex.xs="100" class=\'link\'\n          mat-raised-button [routerLink]="[\'edit\' ,  config.Name]" *ngFor="let config of (configs | async)">\n          <div fxLayout=\'column\' fxLayoutAlign=\'center center\'>\n            <mat-icon color=\'primary\'>settings</mat-icon>\n            <h3 class=\'title\'>{{config.Name}}</h3>\n          </div>\n        </button>\n\n      </div>\n\n    </mat-card>\n  </div>\n</div>',styles:[":host{width:100%}.config-box{margin:15px}button.link{padding:25px 15px;margin:.5%;box-sizing:border-box}button mat-icon{font-size:34px;width:34px;height:34px}"]}]}],t.ctorParameters=function(){return[{type:o.Store}]},t}(),D=function(){function t(t,o,e){var n=this;this.configService=t,this.formBuilder=o,this.route=e,this.formGroup=r.EditConfigApiModel.Request.formGroup,this.route.params.subscribe(function(t){var o=t.name;n.configService.getConfigByName(o).subscribe(function(o){n.partialConfigModel={type:o.Result.Name,inputs:{configFormGroup:n.formGroup.controls.Config}},n.formGroup.patchValue({_id:o.Result._id,Name:o.Result.Name}),Object.keys(o.Result.Config).forEach(function(t){n.addControl(n.formGroup.controls.Config,t,o.Result.Config[t])})})})}return t.prototype.addControl=function(t,o,e){e instanceof Array?t.addControl(o,this.formBuilder.array(e)):e instanceof Object?t.addControl(o,this.formBuilder.group(e)):t.addControl(o,new n.FormControl(e))},t.prototype.ngOnInit=function(){},t.prototype.configChanged=function(t){console.log("-")},t.prototype.edit=function(){this.formGroup.controls.Config.patchValue(this.dynConfig.config),this.formGroup.valid&&this.configService.editConfig(this.formGroup.value).subscribe(function(t){})},t.decorators=[{type:a.Component,args:[{selector:"config-config-edit",template:'<form [formGroup]="formGroup" (ngSubmit)="edit()" fxLayout="column">\n  <dynamic-config-component-selector #dynConfig (configChanged)="configChanged($event)" [data]="partialConfigModel"></dynamic-config-component-selector>\n  <button mat-fab  type="submit" mat-raised-button color="primary" (click)="edit">\n    <mat-icon>done</mat-icon>\n  </button>\n  \x3c!-- <button  type="button" routerLink="/configs" mat-raised-button>بازگشت</button> --\x3e\n</form>',styles:[""]}]}],t.ctorParameters=function(){return[{type:P},{type:n.FormBuilder},{type:c.ActivatedRoute}]},t.propDecorators={dynConfig:[{type:a.ViewChild,args:["dynConfig"]}]},t}(),$=function(){function t(t){this.injector=t,this.formGroup=new n.FormGroup({AppTitle:new n.FormControl("",[n.Validators.required])}),this.configChanged=new a.EventEmitter,this.configFormGroup=this.injector.get("configFormGroup")}return Object.defineProperty(t.prototype,"configFormGroup",{set:function(t){var o=this;this.formGroup.patchValue(t.value),t.valueChanges.subscribe(function(t){o.formGroup.patchValue(t)})},enumerable:!0,configurable:!0}),t.decorators=[{type:a.Component,args:[{selector:"config-app-config",template:'<div fxLayout="row" fxLayoutAlign="center" fxLayoutGap="25px" class="main-container">\n\n    <div class="content-action">\n        <mat-card class="with-sticky-action">\n            <mat-card-header>\n                <mat-card-title fxLayout="row" fxLayoutGap="5px">\n                    <mat-icon>settings_input_component</mat-icon>\n                    <span>تنظیمات سامانه</span>\n                </mat-card-title>\n                <mat-card-subtitle fxLayout="row" fxLayoutAlign="space-between center">\n                    <span>\n                        شامل تمامی درخواست‌ها از قبیل دائری، جمع‌آوری و ...\n                    </span>\n                </mat-card-subtitle>\n            </mat-card-header>\n\n            <div fxLayout="row wrap" fxLayoutGap="10px" fxLayoutAlign="start">\n\n                <div [formGroup]="formGroup">\n                    <mat-form-field>\n                        <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="نام پروژه"\n                            formControlName="AppTitle">\n                    </mat-form-field>\n                </div>\n            </div>\n\n        </mat-card>\n    </div>\n</div>'}]}],t.ctorParameters=function(){return[{type:a.Injector}]},t.propDecorators={configFormGroup:[{type:a.Input}],configChanged:[{type:a.Output}]},t}(),T=function(){function t(t){this.injector=t,this.formGroup=new n.FormGroup({endpoints:new n.FormGroup({changePassword:new n.FormControl("",[n.Validators.required]),editProfile:new n.FormControl("",[n.Validators.required]),getUserInfo:new n.FormControl("",[n.Validators.required]),whoAmI:new n.FormControl("",[n.Validators.required])}),forms:new n.FormGroup({profile_edit:new n.FormControl("",[n.Validators.required])}),dashboardLinks:new n.FormArray([])}),this.configChanged=new a.EventEmitter,this.configFormGroup=this.injector.get("configFormGroup")}return Object.defineProperty(t.prototype,"configFormGroup",{get:function(){return this._configFormGroup},set:function(t){var o=this;(this._configFormGroup=t).controls.dashboardLinks.controls.forEach(function(t){o.formGroup.controls.dashboardLinks.push(new n.FormGroup({route:new n.FormControl("",[n.Validators.required]),icon:new n.FormControl("",[n.Validators.required]),title:new n.FormControl("",[n.Validators.required])}))}),this.formGroup.patchValue(t.value),t.valueChanges.subscribe(function(t){o.formGroup.patchValue(t)})},enumerable:!0,configurable:!0}),t.prototype.addMenu=function(){var t=new n.FormGroup({route:new n.FormControl("",[n.Validators.required]),icon:new n.FormControl("",[n.Validators.required]),title:new n.FormControl("",[n.Validators.required])});this.formGroup.get("dashboardLinks").push(t),this.configFormGroup.get("dashboardLinks").push(t)},t.decorators=[{type:a.Component,args:[{selector:"config-user-module-config",template:'<div fxLayout="row" fxLayoutAlign="center" fxLayoutGap="25px" class="main-container">\n\n    <div class="content-action">\n        <mat-card fxLayout="column" fxLayoutGap="10px" fxLayoutAlign="" class="with-sticky-action">\n            <h2>Endpoints</h2>\n            <div [formGroup]="formGroup.get(\'endpoints\')" fxLayout="column">\n                <mat-form-field>\n                    <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="change password"\n                        formControlName="changePassword">\n                </mat-form-field>\n                <mat-form-field>\n                    <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="edit profile"\n                        formControlName="editProfile">\n                </mat-form-field>\n                <mat-form-field>\n                    <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="get user info"\n                        formControlName="getUserInfo">\n                </mat-form-field>\n                <mat-form-field>\n                    <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="Who Am I"\n                        formControlName="whoAmI">\n                </mat-form-field>\n            </div>\n            <h2>Forms</h2>\n            <div [formGroup]="formGroup.get(\'forms\')" fxLayout="column">\n                <mat-form-field>\n                    <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="profile edit"\n                        formControlName="profile_edit">\n                </mat-form-field>\n                \x3c!-- <ngs-form-selector (select)="setFormId($event,\'signIn\')"></ngs-form-selector> --\x3e\n            </div>\n\n\n            <h2 fxFlex="100">\n                Dashobard Links\n                <button mat-icon-button color="primary" (click)="addMenu()">\n                    <mat-icon aria-label="icon-button icon">add</mat-icon>\n                </button>\n            </h2>\n            <div fxFlex="100" *ngFor="let item of $any(formGroup.get(\'dashboardLinks\')).controls">\n                <div [formGroup]="item">\n                    <mat-form-field>\n                        <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="route"\n                            formControlName="route">\n                    </mat-form-field>\n                    <mat-form-field>\n                        <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="icon"\n                            formControlName="icon">\n                    </mat-form-field>\n                    <mat-form-field>\n                        <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="title"\n                            formControlName="title">\n                    </mat-form-field>\n                </div>\n            </div>\n        </mat-card>\n    </div>\n</div>'}]}],t.ctorParameters=function(){return[{type:a.Injector}]},t.propDecorators={configFormGroup:[{type:a.Input}],configChanged:[{type:a.Output}]},t}(),U=function(){function t(t,o){this.injector=t,this.store=o,this.configChanged=new a.EventEmitter,this.formGroup=new n.FormGroup({layoutMode:new n.FormControl("",[n.Validators.required]),showLeftNavBar:new n.FormControl("",[n.Validators.required]),mainSideNavMode:new n.FormControl("",[n.Validators.required]),showMainSidenav:new n.FormControl("",[n.Validators.required]),stickyLeftNavBar:new n.FormControl("",[n.Validators.required]),showSecondSideNav:new n.FormControl("",[n.Validators.required]),secondSideNavMode:new n.FormControl("",[n.Validators.required]),menuItems:new n.FormArray([])}),this.sideNavModes=["over","push","side"],this.layoutModes=["with-margin","without-margin","default"],this.configFormGroup=this.injector.get("configFormGroup"),this.roleItems$=this.store.select(O).pipe(f.filter(function(t){return null!=t}),f.map(function(t){return t.Config.Roles}))}return Object.defineProperty(t.prototype,"configFormGroup",{get:function(){return this._configFormGroup},set:function(t){var o=this;(this._configFormGroup=t).controls.menuItems.controls.forEach(function(t){o.formGroup.controls.menuItems.push(new n.FormGroup({route:new n.FormControl("",[n.Validators.required]),icon:new n.FormControl("",[n.Validators.required]),roles:new n.FormControl,title:new n.FormControl("",[n.Validators.required])}))}),this.formGroup.patchValue(t.value),t.valueChanges.subscribe(function(t){return o.formGroup.patchValue(t)})},enumerable:!0,configurable:!0}),t.prototype.addMenu=function(){var t=new n.FormGroup({route:new n.FormControl("",[n.Validators.required]),icon:new n.FormControl("",[n.Validators.required]),roles:new n.FormControl,title:new n.FormControl("",[n.Validators.required])});this.formGroup.get("menuItems").push(t),this.configFormGroup.get("menuItems").push(t)},t.prototype.removeMenu=function(t){var o=this.formGroup.get("menuItems").controls.indexOf(t);this.formGroup.get("menuItems").removeAt(o)},t.decorators=[{type:a.Component,args:[{template:'<div fxLayout="row" fxLayoutAlign="center" fxLayoutGap="25px" class="main-container">\n\n    <div class="content-action">\n        <mat-card class="with-sticky-action">\n            <mat-card-header>\n                <mat-card-title fxLayout="row" fxLayoutGap="5px">\n                    <mat-icon>settings_input_component</mat-icon>\n                    <span>تنظیمات ماژول Layout</span>\n                </mat-card-title>\n                <mat-card-subtitle fxLayout="row" fxLayoutAlign="space-between center">\n                    <span>\n                        شامل تمامی درخواست‌ها از قبیل دائری، جمع‌آوری و ...\n                    </span>\n                </mat-card-subtitle>\n            </mat-card-header>\n            <div fxLayout="row wrap" fxLayoutAlign="center" fxLayoutGap="25px">\n                <mat-card fxFlex="20" fxFlexLayout="row">\n                    <div [formGroup]="formGroup">\n                        <mat-form-field>\n                            <mat-select placeholder="layout mode" formControlName="layoutMode">\n                                <mat-option *ngFor="let item of layoutModes" [value]="item">{{item}}</mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <mat-slide-toggle formControlName="showLeftNavBar">show left navbar</mat-slide-toggle>\n                        <mat-form-field>\n                            <mat-select placeholder="main side nav mode" formControlName="mainSideNavMode">\n                                <mat-option *ngFor="let item of sideNavModes" [value]="item">{{item}}</mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <mat-slide-toggle formControlName="showMainSidenav">show main side nav</mat-slide-toggle>\n                        <mat-slide-toggle formControlName="stickyLeftNavBar">sticky left navbar</mat-slide-toggle>\n                        <mat-slide-toggle formControlName="showSecondSideNav">show second side nav</mat-slide-toggle>\n                        <mat-form-field>\n                            <mat-select placeholder="second side nav mode" formControlName="secondSideNavMode">\n                                <mat-option *ngFor="let item of sideNavModes" [value]="item">{{item}}</mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                    </div>\n                </mat-card>\n\n                <mat-card fxFlex fxLayout="column">\n                    <h2 fxFlex>\n                        Menu Items\n                        <button mat-icon-button color="primary" (click)="addMenu()">\n                            <mat-icon aria-label="icon-button icon">add</mat-icon>\n                        </button>\n                    </h2>\n                    <div fxFlex="nogrow" *ngFor="let item of $any(formGroup).get(\'menuItems\').controls">\n                        <div [formGroup]="item" fxLayout="row" fxLayoutGap="25px">\n                            <button mat-icon-button (click)="removeMenu(item)">\n                                <mat-icon>delete</mat-icon>\n                            </button>\n                            <mat-form-field>\n                                <input type="text" matInput placeholder="route" formControlName="route">\n                            </mat-form-field>\n                            <mat-form-field>\n                                <input type="text" matInput placeholder="icon" formControlName="icon">\n                            </mat-form-field>\n                            <mat-form-field>\n                                <input type="text" matInput placeholder="title" formControlName="title">\n                            </mat-form-field>\n                            <mat-form-field>\n                                <mat-select placeholder="roles" formControlName="roles" multiple>\n                                    <mat-option *ngFor="let role of roleItems$ | async" [value]="role">{{role}}</mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                </mat-card>\n            </div>\n        </mat-card>\n    </div>\n</div>'}]}],t.ctorParameters=function(){return[{type:a.Injector},{type:o.Store}]},t.propDecorators={configChanged:[{type:a.Output,args:["configChanged"]}],configFormGroup:[{type:a.Input}]},t}(),H=function(){function t(){}return t.prototype.ngOnInit=function(){},t.decorators=[{type:a.Component,args:[{selector:"config-module-container",template:'<div fxLayoutAlign="" fxflex="100" fxLayout="column">\n    <router-outlet></router-outlet>\n</div>\n'}]}],t.ctorParameters=function(){return[]},t}(),z=function(){function t(t){this.injector=t,this.formGroup=new n.FormGroup({endpoints:new n.FormGroup({signIn:new n.FormControl("",[n.Validators.required]),signOut:new n.FormControl("",[n.Validators.required]),whoAmI:new n.FormControl("",[n.Validators.required])}),forms:new n.FormGroup({signIn:new n.FormControl("",[n.Validators.required])})}),this.configChanged=new a.EventEmitter,this.configFormGroup=this.injector.get("configFormGroup")}return Object.defineProperty(t.prototype,"configFormGroup",{set:function(t){var o=this;this.formGroup.patchValue(t.value),t.valueChanges.subscribe(function(t){o.formGroup.patchValue(t)})},enumerable:!0,configurable:!0}),t.prototype.setFormId=function(t,o){var e;this.formGroup.patchValue(((e={})[o]=t,e))},t.decorators=[{type:a.Component,args:[{selector:"config-authentication-module-config",template:'<div fxLayout="row" fxLayoutAlign="center" fxLayoutGap="25px" class="main-container">\n\n    <div class="content-action">\n        <mat-card class="with-sticky-action">\n            <mat-card-header>\n                <mat-card-title fxLayout="row" fxLayoutGap="5px">\n                    <mat-icon>settings_input_component</mat-icon>\n                    <span>تنظیمات ماژول احراز هویت</span>\n                </mat-card-title>\n                <mat-card-subtitle fxLayout="row" fxLayoutAlign="space-between center">\n                    <span>\n                        شامل تمامی درخواست‌ها از قبیل دائری، جمع‌آوری و ...\n                    </span>\n                </mat-card-subtitle>\n            </mat-card-header>\n\n            <div>\n\n                <h2>Endpoints</h2>\n                <div [formGroup]="formGroup.controls.endpoints" fxLayout="column">\n                    <mat-form-field>\n                        <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="sign in"\n                            formControlName="signIn">\n                    </mat-form-field>\n                    <mat-form-field>\n                        <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="sign out"\n                            formControlName="signOut">\n                    </mat-form-field>\n                    <mat-form-field>\n                        <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="who am i"\n                            formControlName="whoAmI">\n                    </mat-form-field>\n                </div>\n                <h2>Forms</h2>\n                <div [formGroup]="formGroup.controls.forms" fxLayout="column">\n                    <mat-form-field>\n                        <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="SignIn Forms"\n                            formControlName="signIn">\n                    </mat-form-field>\n                    \x3c!-- <ngs-form-selector (select)="setFormId($event,\'signIn\')"></ngs-form-selector> --\x3e\n                </div>\n            </div>\n        </mat-card>\n    </div>\n</div>'}]}],t.ctorParameters=function(){return[{type:a.Injector}]},t.propDecorators={configFormGroup:[{type:a.Input}],configChanged:[{type:a.Output}]},t}(),K=function(){function t(t){this.resolver=t,this.typeMapToDiagram={authentication_module_config:z,app_config:$,user_module_config:T,layout_config:U},this.configChanged=new a.EventEmitter,this.currentComponent=null}return Object.defineProperty(t.prototype,"config",{get:function(){return this.currentComponent?this.currentComponent.instance.formGroup.value:{}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"data",{set:function(o){if(o&&0!=Object.keys(o).length)if(o.type in this.typeMapToDiagram){var t=this.typeMapToDiagram[o.type],e=Object.keys(o.inputs).map(function(t){return{provide:t,useValue:o.inputs[t]}}),n=a.ReflectiveInjector.resolve(e),r=a.ReflectiveInjector.fromResolvedProviders(n,this.dynamicComponentContainer.parentInjector),i=this.resolver.resolveComponentFactory(t).create(r);this.dynamicComponentContainer.insert(i.hostView),this.currentComponent&&this.currentComponent.destroy(),this.currentComponent=i}else this.currentComponent&&this.currentComponent.destroy()},enumerable:!0,configurable:!0}),t.prototype.ngAfterViewInit=function(){},t.decorators=[{type:a.Component,args:[{selector:"dynamic-config-component-selector",template:"<div #dynamicComponentContainer></div>",styles:[":host{width:100%}.diagram-box{margin:15px}.diagram-box .c3{direction:ltr}"],entryComponents:[z,$,T,U]}]}],t.ctorParameters=function(){return[{type:a.ComponentFactoryResolver}]},t.propDecorators={dynamicComponentContainer:[{type:a.ViewChild,args:["dynamicComponentContainer",{read:a.ViewContainerRef}]}],configChanged:[{type:a.Output}],data:[{type:a.Input}]},t}(),W=function(){function t(t,o){var e=this;this.actions$=t,this.configService=o,this.getConfigs$=this.actions$.ofType(C).pipe(f.map(function(t){return t.payload}),f.switchMap(function(t){return e.configService.getConfigs()}),f.map(function(t){return new F(t)}),f.catchError(function(){return s.Observable.of(new M)}))}return t.decorators=[{type:a.Injectable}],t.ctorParameters=function(){return[{type:m.Actions},{type:P}]},function(t,o,e,n){var r,i=arguments.length,a=i<3?o:null===n?n=Object.getOwnPropertyDescriptor(o,e):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,o,e,n);else for(var u=t.length-1;0<=u;u--)(r=t[u])&&(a=(i<3?r(a):3<i?r(o,e,a):r(o,e))||a);3<i&&a&&Object.defineProperty(o,e,a)}([m.Effect(),function(t,o){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,o)}("design:type",Object)],t.prototype,"getConfigs$",void 0),t}(),J=[{path:"configs",component:H,children:[{path:"",component:B},{path:"edit/:name",component:D}]}],Q=c.RouterModule.forChild(J),X=function(){function t(){}return t.forRoot=function(t){return{ngModule:Y,providers:[{provide:y,useValue:t}]}},t.decorators=[{type:a.NgModule,args:[{imports:[l.CommonModule,c.RouterModule,n.FormsModule,n.ReactiveFormsModule,e.HttpClientModule,d.FlexLayoutModule,g.MatIconModule,g.MatButtonModule,g.MatCardModule,g.MatSnackBarModule,g.MatSidenavModule,g.MatExpansionModule,g.MatSelectModule,g.MatFormFieldModule,g.MatListModule,g.MatMenuModule,g.MatRadioModule,g.MatInputModule,g.MatSlideToggleModule,g.MatToolbarModule,g.MatDatepickerModule,g.MatProgressBarModule,p.BrowserAnimationsModule],declarations:[B,D,$,T,U,H,z,K],providers:[]}]}],t}(),Y=function(){function t(){}return t.decorators=[{type:a.NgModule,args:[{imports:[X,o.StoreModule.forFeature("config",j),m.EffectsModule.forFeature([W]),Q],exports:[X]}]}],t}();r.ConfigService=P,r.ConfigModel=t,r.MODULE_DEFAULT_CONFIG=h,r.MODULE_CONFIG_TOKEN=y,r.ConfigReducers=j,r.selectConfigState=N,r.getConfigListState=_,r.getConfigs=q,r.getAppConfig=O,r.getAuthenticationModuleConfig=S,r.getUserModuleConfig=V,r.getConfigModuleConfig=A,r.getFormModuleConfig=R,r.getSocketModuleConfig=k,r.NgsConfigModule=X,r.RootNgsConfigModule=Y,r.ɵo=Q,r.ɵf=$,r.ɵj=z,r.ɵh=U,r.ɵg=T,r.ɵn=W,r.ɵm=L,r.ɵl=j,r.ɵb=E,r.ɵe=D,r.ɵi=H,r.ɵc=B,r.ɵk=K,Object.defineProperty(r,"__esModule",{value:!0})});
//# sourceMappingURL=soushians-config.umd.min.js.map