!function(t,o){"object"==typeof exports&&"undefined"!=typeof module?o(exports,require("rxjs"),require("rxjs/BehaviorSubject"),require("@angular/common"),require("@angular/common/http"),require("@angular/flex-layout"),require("@angular/platform-browser/animations"),require("@angular/material"),require("@ngrx/store"),require("@angular/forms"),require("@angular/core"),require("@ngrx/effects"),require("rxjs/observable/of"),require("rxjs/operators"),require("@angular/router")):"function"==typeof define&&define.amd?define("@soushians/config",["exports","rxjs","rxjs/BehaviorSubject","@angular/common","@angular/common/http","@angular/flex-layout","@angular/platform-browser/animations","@angular/material","@ngrx/store","@angular/forms","@angular/core","@ngrx/effects","rxjs/observable/of","rxjs/operators","@angular/router"],o):o((t.soushians=t.soushians||{},t.soushians.config={}),t.rxjs,t.rxjs.BehaviorSubject,t.ng.common,t.ng.common.http,t.ng["flex-layout"],t.ng.platformBrowser.animations,t.ng.material,t.i2,t.ng.forms,t.ng.core,t.effects,t.rxjs["observable/of"],t.rxjs.operators,t.ng.router)}(this,function(n,e,r,o,i,a,u,c,f,m,s,l,d,p,g){"use strict";var t=function at(){};!function(t){var o=function(){function t(o){void 0===o&&(o={});var e=this;Object.keys(o).forEach(function(t){return e[t]=o[t]})}return t.prototype.getRequestBody=function(){return{}},t}();t.Request=o;var e=function r(){};t.Response=e}(n.GetConfigsApiModel||(n.GetConfigsApiModel={})),function(t){var o=function(){function t(o){void 0===o&&(o={});var e=this;Object.keys(o).forEach(function(t){return e[t]=o[t]})}return t.prototype.getRequestBody=function(){return{Name:this.Name,Config:this.Config}},Object.defineProperty(t,"formGroup",{get:function(){return new m.FormGroup({Name:new m.FormControl("",[m.Validators.required]),Config:new m.FormGroup({})})},enumerable:!0,configurable:!0}),t}();t.Request=o;var e=function r(){};t.Response=e}(n.EditConfigApiModel||(n.EditConfigApiModel={}));var h={env:{production:!1,frontend_server:"config/module/front_end/did/not/set"}},y=new s.InjectionToken("UserModuleConfig"),v=function(){return(v=Object.assign||function(t){for(var o,e=1,r=arguments.length;e<r;e++)for(var n in o=arguments[e])Object.prototype.hasOwnProperty.call(o,n)&&(t[n]=o[n]);return t}).apply(this,arguments)};var C="[CONFIG] get config",x="[CONFIG] load config succeed",b="[CONFIG] update config",w="[CONFIG] load config failed",G=function ut(){this.type=C},F=function ct(t){this.payload=t,this.type=x},M=function ft(){this.type=w},I={data:[]};function L(t,o){switch(void 0===t&&(t=I),o.type){case x:return v({},t,{data:o.payload});case b:return v({},t,{data:t.data.map(function(t){return t._id==o.payload._id&&(t.Config=o.payload.Config),t})});default:return t}}var j=function(t){return t.data},N=function(t){return t.data.find(function(t){return"app_config"==t.Name})},_=function(t){return t.data.find(function(t){return"authentication_module_config"==t.Name})},q=function(t){return t.data.find(function(t){return"user_module_config"==t.Name})},S=function(t){return t.data.find(function(t){return"config_module_config"==t.Name})},V=function(t){return t.data.find(function(t){return"form_module_config"==t.Name})},O=function(t){return t.data.find(function(t){return"socket_module_config"==t.Name})},A={list:L},k=f.createFeatureSelector("config"),R=f.createSelector(k,function(t){return t.list}),E=f.createSelector(R,j),P=f.createSelector(R,N),B=f.createSelector(R,_),D=f.createSelector(R,q),$=f.createSelector(R,S),T=f.createSelector(R,V),U=f.createSelector(R,O),H=function(){function t(t,o){var e=this;this.store=o,this.config$=new r.BehaviorSubject(this._config),this._config=Object.assign({},h,t),this.config$.next(this._config),this.store.select($).subscribe(function(t){t&&(e._config=Object.assign({},e._config,t.Config),e.config$.next(e._config))})}return Object.defineProperty(t.prototype,"config",{get:function(){return this._config},enumerable:!0,configurable:!0}),t.decorators=[{type:s.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[{type:undefined,decorators:[{type:s.Inject,args:[y]}]},{type:f.Store}]},t.ngInjectableDef=s.defineInjectable({factory:function(){return new t(s.inject(y),s.inject(f.Store))},token:t,providedIn:"root"}),t}(),z=function(){function t(t,o,e){var r=this;this.http=t,this.store=o,this.configurationService=e,setTimeout(function(){r.store.dispatch(new G)},999)}return t.prototype.getConfigs=function(){return this.http.get(this.configurationService.config.env.frontend_server+"/api/config").pipe(p.take(1),p.map(function(t){return t.Result}),p.catchError(function(t){return e.Observable["throw"](t)}))},t.prototype.getConfigByName=function(t){return this.http.get(this.configurationService.config.env.frontend_server+"/api/config/"+t).pipe(p.map(function(t){return t}),p.catchError(function(t){return e.Observable["throw"](t)}))},t.prototype.editConfig=function(t){var o=new n.EditConfigApiModel.Request(t);return this.http.put(this.configurationService.config.env.frontend_server+"/api/config/"+o.Name,o.getRequestBody()).pipe(p.map(function(t){return t}),p.catchError(function(t){return e.Observable["throw"](t)}))},t.prototype.getLayoutConfigs=function(){return this.http.get(this.configurationService.config.env.frontend_server+"/api/layout-config").pipe(p.map(function(t){return t}),p.catchError(function(t){return e.Observable["throw"](t)}))},t.decorators=[{type:s.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[{type:i.HttpClient},{type:f.Store},{type:H}]},t.ngInjectableDef=s.defineInjectable({factory:function(){return new t(s.inject(i.HttpClient),s.inject(f.Store),s.inject(H))},token:t,providedIn:"root"}),t}(),K=function(){function t(t){this.store=t,this.configs=this.store.select(E)}return t.decorators=[{type:s.Component,args:[{selector:"configs",template:'<div fxLayout="row" fxLayoutAlign="center" fxLayoutGap="25px" class="main-container">\r\n\r\n  <div class="content-action">\r\n    <mat-card class="with-sticky-action">\r\n      <mat-card-header>\r\n        <mat-card-title fxLayout="row" fxLayoutGap="5px">\r\n          <mat-icon>settings_input_component</mat-icon>\r\n          <span>تنظیمات سامانه و ماژول ها</span>\r\n        </mat-card-title>\r\n        \x3c!-- <mat-card-subtitle fxLayout="row" fxLayoutAlign="space-between center">\r\n          <span>\r\n            شامل تمامی درخواست‌ها از قبیل دائری، جمع‌آوری و ...\r\n          </span>\r\n        </mat-card-subtitle> --\x3e\r\n      </mat-card-header>\r\n\r\n      <div fxLayout="row wrap" fxLayoutGap="10px" fxLayoutAlign="start">\r\n\r\n        <button fxFlex.lt-lg="18" fxFlex.lg="23.5" fxFlex.md="31" fxFlex.sm="48" fxFlex.xs="100" class=\'link\'\r\n          mat-raised-button [routerLink]="[\'edit\' ,  config.Name]" *ngFor="let config of (configs | async)">\r\n          <div fxLayout=\'column\' fxLayoutAlign=\'center center\'>\r\n            <mat-icon color=\'primary\'>settings</mat-icon>\r\n            <h3 class=\'title\'>{{config.Name}}</h3>\r\n          </div>\r\n        </button>\r\n\r\n      </div>\r\n\r\n    </mat-card>\r\n  </div>\r\n</div>',styles:[":host{width:100%}.config-box{margin:15px}button.link{padding:25px 15px;margin:.5%;box-sizing:border-box}button mat-icon{font-size:34px;width:34px;height:34px}"]}]}],t.ctorParameters=function(){return[{type:f.Store}]},t}(),W=function(){function t(t,o,e){var r=this;this.configService=t,this.formBuilder=o,this.route=e,this.formGroup=n.EditConfigApiModel.Request.formGroup,this.route.params.subscribe(function(t){var o=t.name;r.configService.getConfigByName(o).subscribe(function(o){r.partialConfigModel={type:o.Result.Name,inputs:{configFormGroup:r.formGroup.controls.Config}},r.formGroup.patchValue({_id:o.Result._id,Name:o.Result.Name}),Object.keys(o.Result.Config).forEach(function(t){r.addControl(r.formGroup.controls.Config,t,o.Result.Config[t])})})})}return t.prototype.addControl=function(t,o,e){e instanceof Array?t.addControl(o,this.formBuilder.array(e)):e instanceof Object?t.addControl(o,this.formBuilder.group(e)):t.addControl(o,new m.FormControl(e))},t.prototype.ngOnInit=function(){},t.prototype.configChanged=function(t){console.log("-")},t.prototype.edit=function(){this.formGroup.controls.Config.patchValue(this.dynConfig.config),this.formGroup.valid&&this.configService.editConfig(this.formGroup.value).subscribe(function(t){})},t.decorators=[{type:s.Component,args:[{selector:"config-config-edit",template:'<form [formGroup]="formGroup" (ngSubmit)="edit()" fxLayout="column">\r\n  <dynamic-config-component-selector #dynConfig (configChanged)="configChanged($event)" [data]="partialConfigModel"></dynamic-config-component-selector>\r\n  <button mat-fab  type="submit" mat-raised-button color="primary" (click)="edit">\r\n    <mat-icon>done</mat-icon>\r\n  </button>\r\n  \x3c!-- <button  type="button" routerLink="/configs" mat-raised-button>بازگشت</button> --\x3e\r\n</form>',styles:[""]}]}],t.ctorParameters=function(){return[{type:z},{type:m.FormBuilder},{type:g.ActivatedRoute}]},t.propDecorators={dynConfig:[{type:s.ViewChild,args:["dynConfig"]}]},t}(),J=function(){function t(t){this.injector=t,this.formGroup=new m.FormGroup({AppTitle:new m.FormControl("",[m.Validators.required])}),this.configChanged=new s.EventEmitter,this.configFormGroup=this.injector.get("configFormGroup")}return Object.defineProperty(t.prototype,"configFormGroup",{set:function(t){var o=this;this.formGroup.patchValue(t.value),t.valueChanges.subscribe(function(t){o.formGroup.patchValue(t)})},enumerable:!0,configurable:!0}),t.decorators=[{type:s.Component,args:[{selector:"config-app-config",template:'<div fxLayout="row" fxLayoutAlign="center" fxLayoutGap="25px" class="main-container">\r\n\r\n    <div class="content-action">\r\n        <mat-card class="with-sticky-action">\r\n            <mat-card-header>\r\n                <mat-card-title fxLayout="row" fxLayoutGap="5px">\r\n                    <mat-icon>settings_input_component</mat-icon>\r\n                    <span>تنظیمات سامانه</span>\r\n                </mat-card-title>\r\n                <mat-card-subtitle fxLayout="row" fxLayoutAlign="space-between center">\r\n                    <span>\r\n                        شامل تمامی درخواست‌ها از قبیل دائری، جمع‌آوری و ...\r\n                    </span>\r\n                </mat-card-subtitle>\r\n            </mat-card-header>\r\n\r\n            <div fxLayout="row wrap" fxLayoutGap="10px" fxLayoutAlign="start">\r\n\r\n                <div [formGroup]="formGroup">\r\n                    <mat-form-field>\r\n                        <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="نام پروژه"\r\n                            formControlName="AppTitle">\r\n                    </mat-form-field>\r\n                </div>\r\n            </div>\r\n\r\n        </mat-card>\r\n    </div>\r\n</div>'}]}],t.ctorParameters=function(){return[{type:s.Injector}]},t.propDecorators={configFormGroup:[{type:s.Input}],configChanged:[{type:s.Output}]},t}(),Q=function(){function t(t){this.injector=t,this.formGroup=new m.FormGroup({endpoints:new m.FormGroup({changePassword:new m.FormControl("",[m.Validators.required]),editProfile:new m.FormControl("",[m.Validators.required]),getUserInfo:new m.FormControl("",[m.Validators.required]),whoAmI:new m.FormControl("",[m.Validators.required])}),forms:new m.FormGroup({profile_edit:new m.FormControl("",[m.Validators.required])}),dashboardLinks:new m.FormArray([])}),this.configChanged=new s.EventEmitter,this.configFormGroup=this.injector.get("configFormGroup")}return Object.defineProperty(t.prototype,"configFormGroup",{get:function(){return this._configFormGroup},set:function(t){var o=this;(this._configFormGroup=t).controls.dashboardLinks.controls.forEach(function(t){o.formGroup.controls.dashboardLinks.push(new m.FormGroup({route:new m.FormControl("",[m.Validators.required]),icon:new m.FormControl("",[m.Validators.required]),title:new m.FormControl("",[m.Validators.required])}))}),this.formGroup.patchValue(t.value),t.valueChanges.subscribe(function(t){o.formGroup.patchValue(t)})},enumerable:!0,configurable:!0}),t.prototype.addMenu=function(){var t=new m.FormGroup({route:new m.FormControl("",[m.Validators.required]),icon:new m.FormControl("",[m.Validators.required]),title:new m.FormControl("",[m.Validators.required])});this.formGroup.get("dashboardLinks").push(t),this.configFormGroup.get("dashboardLinks").push(t)},t.decorators=[{type:s.Component,args:[{selector:"config-user-module-config",template:'<div fxLayout="row" fxLayoutAlign="center" fxLayoutGap="25px" class="main-container">\r\n\r\n    <div class="content-action">\r\n        <mat-card fxLayout="column" fxLayoutGap="10px" fxLayoutAlign="" class="with-sticky-action">\r\n            <h2>Endpoints</h2>\r\n            <div [formGroup]="formGroup.get(\'endpoints\')" fxLayout="column">\r\n                <mat-form-field>\r\n                    <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="change password"\r\n                        formControlName="changePassword">\r\n                </mat-form-field>\r\n                <mat-form-field>\r\n                    <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="edit profile"\r\n                        formControlName="editProfile">\r\n                </mat-form-field>\r\n                <mat-form-field>\r\n                    <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="get user info"\r\n                        formControlName="getUserInfo">\r\n                </mat-form-field>\r\n                <mat-form-field>\r\n                    <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="Who Am I"\r\n                        formControlName="whoAmI">\r\n                </mat-form-field>\r\n            </div>\r\n            <h2>Forms</h2>\r\n            <div [formGroup]="formGroup.get(\'forms\')" fxLayout="column">\r\n                <mat-form-field>\r\n                    <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="profile edit"\r\n                        formControlName="profile_edit">\r\n                </mat-form-field>\r\n                \x3c!-- <ngs-form-selector (select)="setFormId($event,\'signIn\')"></ngs-form-selector> --\x3e\r\n            </div>\r\n\r\n\r\n            <h2 fxFlex="100">\r\n                Dashobard Links\r\n                <button mat-icon-button color="primary" (click)="addMenu()">\r\n                    <mat-icon aria-label="icon-button icon">add</mat-icon>\r\n                </button>\r\n            </h2>\r\n            <div fxFlex="100" *ngFor="let item of $any(formGroup.get(\'dashboardLinks\')).controls">\r\n                <div [formGroup]="item">\r\n                    <mat-form-field>\r\n                        <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="route"\r\n                            formControlName="route">\r\n                    </mat-form-field>\r\n                    <mat-form-field>\r\n                        <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="icon"\r\n                            formControlName="icon">\r\n                    </mat-form-field>\r\n                    <mat-form-field>\r\n                        <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="title"\r\n                            formControlName="title">\r\n                    </mat-form-field>\r\n                </div>\r\n            </div>\r\n        </mat-card>\r\n    </div>\r\n</div>'}]}],t.ctorParameters=function(){return[{type:s.Injector}]},t.propDecorators={configFormGroup:[{type:s.Input}],configChanged:[{type:s.Output}]},t}(),X=function(){function t(t,o){this.injector=t,this.store=o,this.configChanged=new s.EventEmitter,this.formGroup=new m.FormGroup({layoutMode:new m.FormControl("",[m.Validators.required]),showLeftNavBar:new m.FormControl("",[m.Validators.required]),mainSideNavMode:new m.FormControl("",[m.Validators.required]),showMainSidenav:new m.FormControl("",[m.Validators.required]),stickyLeftNavBar:new m.FormControl("",[m.Validators.required]),showSecondSideNav:new m.FormControl("",[m.Validators.required]),secondSideNavMode:new m.FormControl("",[m.Validators.required]),menuItems:new m.FormArray([])}),this.sideNavModes=["over","push","side"],this.layoutModes=["with-margin","without-margin","default"],this.configFormGroup=this.injector.get("configFormGroup"),this.roleItems$=this.store.select(P).pipe(p.filter(function(t){return null!=t}),p.map(function(t){return t.Config.Roles}))}return Object.defineProperty(t.prototype,"configFormGroup",{get:function(){return this._configFormGroup},set:function(t){var o=this;(this._configFormGroup=t).controls.menuItems.controls.forEach(function(t){o.formGroup.controls.menuItems.push(new m.FormGroup({route:new m.FormControl("",[m.Validators.required]),icon:new m.FormControl("",[m.Validators.required]),roles:new m.FormControl,title:new m.FormControl("",[m.Validators.required])}))}),this.formGroup.patchValue(t.value),t.valueChanges.subscribe(function(t){return o.formGroup.patchValue(t)})},enumerable:!0,configurable:!0}),t.prototype.addMenu=function(){var t=new m.FormGroup({route:new m.FormControl("",[m.Validators.required]),icon:new m.FormControl("",[m.Validators.required]),roles:new m.FormControl,title:new m.FormControl("",[m.Validators.required])});this.formGroup.get("menuItems").push(t),this.configFormGroup.get("menuItems").push(t)},t.prototype.removeMenu=function(t){var o=this.formGroup.get("menuItems").controls.indexOf(t);this.formGroup.get("menuItems").removeAt(o)},t.decorators=[{type:s.Component,args:[{template:'<div fxLayout="row" fxLayoutAlign="center" fxLayoutGap="25px" class="main-container">\r\n\r\n    <div class="content-action">\r\n        <mat-card class="with-sticky-action">\r\n            <mat-card-header>\r\n                <mat-card-title fxLayout="row" fxLayoutGap="5px">\r\n                    <mat-icon>settings_input_component</mat-icon>\r\n                    <span>تنظیمات ماژول Layout</span>\r\n                </mat-card-title>\r\n                <mat-card-subtitle fxLayout="row" fxLayoutAlign="space-between center">\r\n                    <span>\r\n                        شامل تمامی درخواست‌ها از قبیل دائری، جمع‌آوری و ...\r\n                    </span>\r\n                </mat-card-subtitle>\r\n            </mat-card-header>\r\n            <div fxLayout="row wrap" fxLayoutAlign="center" fxLayoutGap="25px">\r\n                <mat-card fxFlex="20" fxFlexLayout="row">\r\n                    <div [formGroup]="formGroup">\r\n                        <mat-form-field>\r\n                            <mat-select placeholder="layout mode" formControlName="layoutMode">\r\n                                <mat-option *ngFor="let item of layoutModes" [value]="item">{{item}}</mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                        <mat-slide-toggle formControlName="showLeftNavBar">show left navbar</mat-slide-toggle>\r\n                        <mat-form-field>\r\n                            <mat-select placeholder="main side nav mode" formControlName="mainSideNavMode">\r\n                                <mat-option *ngFor="let item of sideNavModes" [value]="item">{{item}}</mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                        <mat-slide-toggle formControlName="showMainSidenav">show main side nav</mat-slide-toggle>\r\n                        <mat-slide-toggle formControlName="stickyLeftNavBar">sticky left navbar</mat-slide-toggle>\r\n                        <mat-slide-toggle formControlName="showSecondSideNav">show second side nav</mat-slide-toggle>\r\n                        <mat-form-field>\r\n                            <mat-select placeholder="second side nav mode" formControlName="secondSideNavMode">\r\n                                <mat-option *ngFor="let item of sideNavModes" [value]="item">{{item}}</mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n                </mat-card>\r\n\r\n                <mat-card fxFlex fxLayout="column">\r\n                    <h2 fxFlex>\r\n                        Menu Items\r\n                        <button mat-icon-button color="primary" (click)="addMenu()">\r\n                            <mat-icon aria-label="icon-button icon">add</mat-icon>\r\n                        </button>\r\n                    </h2>\r\n                    <div fxFlex="nogrow" *ngFor="let item of $any(formGroup).get(\'menuItems\').controls">\r\n                        <div [formGroup]="item" fxLayout="row" fxLayoutGap="25px">\r\n                            <button mat-icon-button (click)="removeMenu(item)">\r\n                                <mat-icon>delete</mat-icon>\r\n                            </button>\r\n                            <mat-form-field>\r\n                                <input type="text" matInput placeholder="route" formControlName="route">\r\n                            </mat-form-field>\r\n                            <mat-form-field>\r\n                                <input type="text" matInput placeholder="icon" formControlName="icon">\r\n                            </mat-form-field>\r\n                            <mat-form-field>\r\n                                <input type="text" matInput placeholder="title" formControlName="title">\r\n                            </mat-form-field>\r\n                            <mat-form-field>\r\n                                <mat-select placeholder="roles" formControlName="roles" multiple>\r\n                                    <mat-option *ngFor="let role of roleItems$ | async" [value]="role">{{role}}</mat-option>\r\n                                </mat-select>\r\n                            </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                </mat-card>\r\n            </div>\r\n        </mat-card>\r\n    </div>\r\n</div>'}]}],t.ctorParameters=function(){return[{type:s.Injector},{type:f.Store}]},t.propDecorators={configChanged:[{type:s.Output,args:["configChanged"]}],configFormGroup:[{type:s.Input}]},t}(),Y=function(){function t(){}return t.prototype.ngOnInit=function(){},t.decorators=[{type:s.Component,args:[{selector:"config-module-container",template:'<div fxLayoutAlign="" fxflex="100" fxLayout="column">\r\n    <router-outlet></router-outlet>\r\n</div>\r\n'}]}],t.ctorParameters=function(){return[]},t}(),Z=function(){function t(t){this.injector=t,this.formGroup=new m.FormGroup({endpoints:new m.FormGroup({signIn:new m.FormControl("",[m.Validators.required]),signOut:new m.FormControl("",[m.Validators.required]),whoAmI:new m.FormControl("",[m.Validators.required]),captchaUrl:new m.FormControl("",[m.Validators.required])}),forms:new m.FormGroup({signIn:new m.FormControl("",[m.Validators.required])})}),this.configChanged=new s.EventEmitter,this.configFormGroup=this.injector.get("configFormGroup")}return Object.defineProperty(t.prototype,"configFormGroup",{set:function(t){var o=this;this.formGroup.patchValue(t.value),t.valueChanges.subscribe(function(t){o.formGroup.patchValue(t)})},enumerable:!0,configurable:!0}),t.prototype.setFormId=function(t,o){var e;this.formGroup.patchValue(((e={})[o]=t,e))},t.decorators=[{type:s.Component,args:[{selector:"config-authentication-module-config",template:'<div fxLayout="row" fxLayoutAlign="center" fxLayoutGap="25px" class="main-container">\r\n\r\n    <div class="content-action">\r\n        <mat-card class="with-sticky-action">\r\n            <mat-card-header>\r\n                <mat-card-title fxLayout="row" fxLayoutGap="5px">\r\n                    <mat-icon>settings_input_component</mat-icon>\r\n                    <span>تنظیمات ماژول احراز هویت</span>\r\n                </mat-card-title>\r\n                \x3c!-- <mat-card-subtitle fxLayout="row" fxLayoutAlign="space-between center">\r\n                    <span>\r\n                        شامل تمامی درخواست‌ها از قبیل دائری، جمع‌آوری و ...\r\n                    </span>\r\n                </mat-card-subtitle> --\x3e\r\n            </mat-card-header>\r\n\r\n            <div>\r\n\r\n                <h2>Endpoints</h2>\r\n                <div [formGroup]="formGroup.controls.endpoints" fxLayout="column">\r\n                    <mat-form-field>\r\n                        <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="sign in"\r\n                            formControlName="signIn">\r\n                    </mat-form-field>\r\n                    <mat-form-field>\r\n                        <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="sign out"\r\n                            formControlName="signOut">\r\n                    </mat-form-field>\r\n                    <mat-form-field>\r\n                        <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="who am i"\r\n                            formControlName="whoAmI">\r\n                    </mat-form-field>\r\n                    <mat-form-field>\r\n                        <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="captcha url"\r\n                            formControlName="captchaUrl">\r\n                    </mat-form-field>\r\n                </div>\r\n                <h2>Forms</h2>\r\n                <div [formGroup]="formGroup.controls.forms" fxLayout="column">\r\n                    <mat-form-field>\r\n                        <input type="text" (change)="configChanged.emit(formGroup.value)" matInput placeholder="SignIn Forms"\r\n                            formControlName="signIn">\r\n                    </mat-form-field>\r\n                    \x3c!-- <ngs-form-selector (select)="setFormId($event,\'signIn\')"></ngs-form-selector> --\x3e\r\n                </div>\r\n            </div>\r\n        </mat-card>\r\n    </div>\r\n</div>'}]}],t.ctorParameters=function(){return[{type:s.Injector}]},t.propDecorators={configFormGroup:[{type:s.Input}],configChanged:[{type:s.Output}]},t}(),tt=function(){function t(t){this.resolver=t,this.typeMapToDiagram={authentication_module_config:Z,app_config:J,user_module_config:Q,layout_config:X},this.configChanged=new s.EventEmitter,this.currentComponent=null}return Object.defineProperty(t.prototype,"config",{get:function(){return this.currentComponent?this.currentComponent.instance.formGroup.value:{}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"data",{set:function(o){if(o&&0!=Object.keys(o).length)if(o.type in this.typeMapToDiagram){var t=this.typeMapToDiagram[o.type],e=Object.keys(o.inputs).map(function(t){return{provide:t,useValue:o.inputs[t]}}),r=s.ReflectiveInjector.resolve(e),n=s.ReflectiveInjector.fromResolvedProviders(r,this.dynamicComponentContainer.parentInjector),i=this.resolver.resolveComponentFactory(t).create(n);this.dynamicComponentContainer.insert(i.hostView),this.currentComponent&&this.currentComponent.destroy(),this.currentComponent=i}else this.currentComponent&&this.currentComponent.destroy()},enumerable:!0,configurable:!0}),t.prototype.ngAfterViewInit=function(){},t.decorators=[{type:s.Component,args:[{selector:"dynamic-config-component-selector",template:"<div #dynamicComponentContainer></div>",entryComponents:[Z,J,Q,X],styles:[":host{width:100%}.diagram-box{margin:15px}.diagram-box .c3{direction:ltr}"]}]}],t.ctorParameters=function(){return[{type:s.ComponentFactoryResolver}]},t.propDecorators={dynamicComponentContainer:[{type:s.ViewChild,args:["dynamicComponentContainer",{read:s.ViewContainerRef}]}],configChanged:[{type:s.Output}],data:[{type:s.Input}]},t}(),ot=function(){function t(t,o){var e=this;this.actions$=t,this.configService=o,this.getConfigs$=this.actions$.ofType(C).pipe(p.map(function(t){return t.payload}),p.switchMap(function(t){return e.configService.getConfigs()}),p.map(function(t){return new F(t)}),p.catchError(function(){return d.of(new M)}))}return t.decorators=[{type:s.Injectable}],t.ctorParameters=function(){return[{type:l.Actions},{type:z}]},function c(t,o,e,r){var n,i=arguments.length,a=i<3?o:null===r?r=Object.getOwnPropertyDescriptor(o,e):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,o,e,r);else for(var u=t.length-1;0<=u;u--)(n=t[u])&&(a=(i<3?n(a):3<i?n(o,e,a):n(o,e))||a);return 3<i&&a&&Object.defineProperty(o,e,a),a}([l.Effect(),function e(t,o){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,o)}("design:type",Object)],t.prototype,"getConfigs$",void 0),t}(),et=[{path:"configs",component:Y,children:[{path:"",component:K},{path:"edit/:name",component:W}]}],rt=g.RouterModule.forChild(et),nt=function(){function t(){}return t.forRoot=function(t){return{ngModule:it,providers:[{provide:y,useValue:t}]}},t.decorators=[{type:s.NgModule,args:[{imports:[o.CommonModule,g.RouterModule,m.FormsModule,m.ReactiveFormsModule,i.HttpClientModule,a.FlexLayoutModule,c.MatIconModule,c.MatButtonModule,c.MatCardModule,c.MatSnackBarModule,c.MatSidenavModule,c.MatExpansionModule,c.MatSelectModule,c.MatFormFieldModule,c.MatListModule,c.MatMenuModule,c.MatRadioModule,c.MatInputModule,c.MatSlideToggleModule,c.MatToolbarModule,c.MatDatepickerModule,c.MatProgressBarModule,u.BrowserAnimationsModule],declarations:[K,W,J,Q,X,Y,Z,tt],providers:[]}]}],t}(),it=function(){function t(){}return t.decorators=[{type:s.NgModule,args:[{imports:[nt,f.StoreModule.forFeature("config",A),l.EffectsModule.forFeature([ot]),rt],exports:[nt]}]}],t}();n.ConfigService=z,n.ConfigModel=t,n.MODULE_DEFAULT_CONFIG=h,n.MODULE_CONFIG_TOKEN=y,n.ConfigReducers=A,n.selectConfigState=k,n.getConfigListState=R,n.getConfigs=E,n.getAppConfig=P,n.getAuthenticationModuleConfig=B,n.getUserModuleConfig=D,n.getConfigModuleConfig=$,n.getFormModuleConfig=T,n.getSocketModuleConfig=U,n.NgsConfigModule=nt,n.RootNgsConfigModule=it,n.ɵu=rt,n.ɵn=J,n.ɵr=Z,n.ɵp=X,n.ɵo=Q,n.ɵt=ot,n.ɵa=L,n.ɵc=N,n.ɵd=_,n.ɵf=S,n.ɵb=j,n.ɵg=V,n.ɵh=O,n.ɵe=q,n.ɵk=H,n.ɵm=W,n.ɵq=Y,n.ɵl=K,n.ɵs=tt,Object.defineProperty(n,"__esModule",{value:!0})});
//# sourceMappingURL=soushians-config.umd.min.js.map