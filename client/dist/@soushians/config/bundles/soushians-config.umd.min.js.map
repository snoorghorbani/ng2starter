{
  "version": 3,
  "file": "soushians-config.umd.min.js",
  "sources": [
    "ng://@soushians/config/projects/soushians/config/src/lib/models/config.model.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/models/get-configs-api.model.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/models/edit-config-api.model.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/config.config.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/actions/config.action.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/reducers/config-list.reducer.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/reducers/index.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/services/configuration.service.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/services/config.service.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/smart-components/configs/configs.component.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/smart-components/config-edit/config-edit.component.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/dumb-components/app-config/app-config.component.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/dumb-components/user-module-config/user-module-config.component.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/dumb-components/layout-config/layout-module-config.component.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/smart-components/config-module-container/config-module-container.component.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/dumb-components/authentication-module-config/authentication-module-config.component.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/smart-components/dynamic-config-component-selector/dynamic-config-component-selector.component.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/effects/load-config.effects.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/config.routing-module.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/config.module.ts"
  ],
  "sourcesContent": [
    "export class ConfigModel<T> {\r\n\t_id: string;\r\n\tName: string;\r\n\tConfig: T;\r\n}",
    "import { Injectable } from \"@angular/core\";\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { ConfigModel } from \"./config.model\";\r\n\r\nexport module GetConfigsApiModel {\r\n\r\n    export class Request implements HttpRequestBaseModel<Request>{\r\n\r\n        constructor(initValue: GetConfigsApiModel.Request = {} as GetConfigsApiModel.Request) {\r\n            Object.keys(initValue).forEach(key => (this as any)[key] = (initValue as any)[key]);\r\n        }\r\n\r\n        getRequestBody() {\r\n            return {\r\n            }\r\n        }\r\n    }\r\n\r\n    export class Response {\r\n        Result: ConfigModel<any>[];\r\n        constructor() {\r\n\r\n        }\r\n    }\r\n}",
    "import { Injectable } from \"@angular/core\";\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { ConfigModel } from \"../models\";\r\n\r\nexport module EditConfigApiModel {\r\n\r\n    export class Request implements HttpRequestBaseModel<Request>{\r\n        Name: string;\r\n        Config: {};\r\n        constructor(initValue = {} as EditConfigApiModel.Request) {\r\n            Object.keys(initValue).forEach(key => (this as any)[key] = (initValue as any)[key]);\r\n        }\r\n\r\n        getRequestBody() {\r\n            debugger;\r\n            return {\r\n                Name: this.Name,\r\n                Config: this.Config\r\n            }\r\n        }\r\n        static get formGroup() {\r\n            return new FormGroup({\r\n                Name: new FormControl('', [Validators.required]),\r\n                Config: new FormGroup({}),\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    export class Response {\r\n        Result: ConfigModel<any>;\r\n        constructor() {\r\n        }\r\n    }\r\n\r\n}\r\n",
    "import { InjectionToken } from '@angular/core';\r\n\r\nexport interface ConfigModuleConfig {\r\n\tdev_api_host?: string;\r\n\tprod_api_host?: string;\r\n\tenv?: {\r\n\t\tproduction: boolean;\r\n\t};\r\n}\r\n\r\nexport const MODULE_DEFAULT_CONFIG: ConfigModuleConfig = {\r\n\tdev_api_host: 'http://localhost:3000',\r\n\tprod_api_host: 'http://5.196.149.107:3000',\r\n\tenv: {\r\n\t\tproduction: false\r\n\t}\r\n};\r\n\r\nexport const MODULE_CONFIG_TOKEN = new InjectionToken<ConfigModuleConfig>('UserModuleConfig');\r\n",
    "import { Action } from \"@ngrx/store\";\r\nimport { ConfigModel, GetConfigsApiModel } from \"../models\";\r\n\r\nexport enum ConfigActionTypes {\r\n\tGET_CONFIGS = \"[CONFIG] get config\",\r\n\tCONFIG_LOADED_SUCCEED = \"[CONFIG] load config succeed\",\r\n\tUPDATE_CONFIG = \"[CONFIG] update config\",\r\n\tCONFIG_LOADED_FAILED = \"[CONFIG] load config failed\"\r\n}\r\n\r\nexport class GetConfigAction implements Action {\r\n\treadonly type = ConfigActionTypes.GET_CONFIGS;\r\n}\r\n\r\nexport class ConfigLoadedSucceedAction implements Action {\r\n\treadonly type = ConfigActionTypes.CONFIG_LOADED_SUCCEED;\r\n\r\n\tconstructor(public payload: ConfigModel<any>[]) {}\r\n}\r\nexport class UpdateConfigAction implements Action {\r\n\treadonly type = ConfigActionTypes.UPDATE_CONFIG;\r\n\tconstructor(public payload: ConfigModel<any>) {}\r\n}\r\n\r\nexport class ConfigLoadedFailedAction implements Action {\r\n\treadonly type = ConfigActionTypes.CONFIG_LOADED_FAILED;\r\n}\r\nexport type Actions = GetConfigAction | ConfigLoadedSucceedAction | ConfigLoadedFailedAction | UpdateConfigAction;\r\n",
    "import * as config from \"../actions/config.action\";\r\nimport { ConfigModel, LayoutConfigModel } from \"../models\";\r\n\r\nexport interface State {\r\n\tdata: any[];\r\n}\r\n\r\nconst initialState: State = {\r\n\tdata: []\r\n};\r\n\r\nexport function Reducer(state = initialState, action: config.Actions): State {\r\n\tswitch (action.type) {\r\n\t\tcase config.ConfigActionTypes.CONFIG_LOADED_SUCCEED:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: action.payload\r\n\t\t\t};\r\n\t\tcase config.ConfigActionTypes.UPDATE_CONFIG:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: state.data.map(config => {\r\n\t\t\t\t\tdebugger;\r\n\t\t\t\t\tif (config._id == action.payload._id) config.Config = action.payload.Config;\r\n\t\t\t\t\treturn config;\r\n\t\t\t\t})\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport const getConfigs = (state: State) => state.data;\r\nexport const getAppConfig = (state: State) => state.data.find(config => config.Name == \"app_config\");\r\nexport const getAuthenticationModuleConfig = (state: State) =>\r\n\tstate.data.find(config => config.Name == \"authentication_module_config\");\r\nexport const getUserModuleConfig = (state: State) => state.data.find(config => config.Name == \"user_module_config\");\r\nexport const getlayoutModuleConfig = (state: State) => state.data.find(config => config.Name == \"layout_config\") as any;\r\nexport const getConfigModuleConfig = (state: State) =>\r\n\tstate.data.find(config => config.Name == \"config_module_config\") as any;\r\nexport const getFormModuleConfig = (state: State) =>\r\n\tstate.data.find(config => config.Name == \"form_module_config\") as any;\r\nexport const getSocketModuleConfig = (state: State) =>\r\n\tstate.data.find(config => config.Name == \"socket_module_config\") as any;\r\n",
    "import { createSelector, createFeatureSelector, MemoizedSelector } from \"@ngrx/store\";\r\n\r\nimport * as configList from \"./config-list.reducer\";\r\nimport { ConfigLoadedFailedAction, ConfigLoadedSucceedAction } from \"../actions\";\r\nexport interface ConfigState {\r\n\tlist: configList.State;\r\n}\r\nConfigLoadedFailedAction;\r\nexport const ConfigReducers = {\r\n\tlist: configList.Reducer\r\n};\r\n\r\nexport interface FeatureState {\r\n\t\"configs\": ConfigState;\r\n}\r\n\r\n//#region selectors\r\n\r\nexport const selectConfigState = createFeatureSelector<ConfigState>(\"config\");\r\n\r\n//#endregion\r\n\r\nexport const getConfigListState = createSelector(selectConfigState, (state: ConfigState) => state.list);\r\nexport const getConfigs = createSelector(getConfigListState, configList.getConfigs);\r\nexport const getAppConfig = createSelector(getConfigListState, configList.getAppConfig);\r\nexport const getAuthenticationModuleConfig = createSelector(\r\n\tgetConfigListState,\r\n\tconfigList.getAuthenticationModuleConfig\r\n);\r\nexport const getUserModuleConfig = createSelector(getConfigListState, configList.getUserModuleConfig);\r\nexport const getlayoutModuleConfig = createSelector(getConfigListState, configList.getlayoutModuleConfig);\r\nexport const getConfigModuleConfig = createSelector(getConfigListState, configList.getConfigModuleConfig);\r\nexport const getFormModuleConfig = createSelector(getConfigListState, configList.getFormModuleConfig);\r\nexport const getSocketModuleConfig = createSelector(getConfigListState, configList.getSocketModuleConfig);\r\n",
    "import { Injectable, Inject } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { ConfigModuleConfig, MODULE_CONFIG_TOKEN, MODULE_DEFAULT_CONFIG } from \"../config.config\";\r\nimport { getConfigModuleConfig } from \"../reducers\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class ConfigurationService {\r\n\tprivate _config: ConfigModuleConfig;\r\n\tget config() {\r\n\t\treturn this._config;\r\n\t}\r\n\tconfig$ = new BehaviorSubject(this._config);\r\n\r\n\tconstructor(@Inject(MODULE_CONFIG_TOKEN) configFile: ConfigModuleConfig, private store: Store<any>) {\r\n\t\tthis._config = Object.assign({}, MODULE_DEFAULT_CONFIG, configFile);\r\n\t\tthis.config$.next(this._config);\r\n\t\tthis.store.select(getConfigModuleConfig).subscribe(configConfig => {\r\n\t\t\tif (!configConfig) return;\r\n\t\t\tthis._config = Object.assign({}, this._config, configConfig.Config);\r\n\t\t\tthis.config$.next(this._config);\r\n\t\t});\r\n\t}\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs/Rx\";\r\nimport { ConfigState } from \"../reducers\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { EditConfigApiModel, GetConfigsApiModel, ConfigModel, LayoutConfigModel } from \"../models\";\r\n\r\nimport { GetConfigAction } from \"../actions\";\r\nimport { ConfigurationService } from \"./configuration.service\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class ConfigService {\r\n\tresponseCache: any;\r\n\tconfigsEndpoint: string;\r\n\r\n\tconstructor(\r\n\t\tprivate http: HttpClient,\r\n\t\tprivate store: Store<ConfigState>,\r\n\t\tprivate configurationService: ConfigurationService\r\n\t) {\r\n\t\tthis.configsEndpoint = this.configurationService.config.env.production\r\n\t\t\t? this.configurationService.config.prod_api_host\r\n\t\t\t: this.configurationService.config.dev_api_host;\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.store.dispatch(new GetConfigAction());\r\n\t\t}, 999);\r\n\t}\r\n\r\n\tgetConfigs(): Observable<ConfigModel<any>[]> {\r\n\t\treturn (\r\n\t\t\tthis.http\r\n\t\t\t\t.get(`${this.configsEndpoint}/api/config`)\r\n\t\t\t\t// .filter(() => this.configurationService.config.dev_api_host != undefined)\r\n\t\t\t\t.take(1)\r\n\t\t\t\t.map((response: GetConfigsApiModel.Response) => {\r\n\t\t\t\t\tif (this.configurationService.config.env.production) {\r\n\t\t\t\t\t\tconst dev_api_host = this.configurationService.config.dev_api_host;\r\n\t\t\t\t\t\tconst prod_api_host = this.configurationService.config.prod_api_host;\r\n\t\t\t\t\t\treturn JSON.parse(\r\n\t\t\t\t\t\t\tJSON.stringify(response).replace(new RegExp(dev_api_host, \"g\"), prod_api_host)\r\n\t\t\t\t\t\t).Result;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn response.Result;\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.catch(err => {\r\n\t\t\t\t\treturn Observable.throw(err);\r\n\t\t\t\t})\r\n\t\t);\r\n\t}\r\n\tgetConfigByName(name: string): Observable<any> {\r\n\t\treturn this.http.get(`${this.configsEndpoint}/api/config/${name}`).map(response => response).catch(err => {\r\n\t\t\treturn Observable.throw(err);\r\n\t\t});\r\n\t}\r\n\teditConfig(body: EditConfigApiModel.Request): Observable<any> {\r\n\t\tvar model = new EditConfigApiModel.Request(body);\r\n\r\n\t\treturn this.http\r\n\t\t\t.put(`${this.configsEndpoint}/api/config/${model.Name}`, model.getRequestBody())\r\n\t\t\t.map(response => response)\r\n\t\t\t.catch(err => {\r\n\t\t\t\treturn Observable.throw(err);\r\n\t\t\t});\r\n\t}\r\n\r\n\tgetLayoutConfigs(): Observable<LayoutConfigModel> {\r\n\t\treturn this.http\r\n\t\t\t.get(`${this.configsEndpoint}/api/layout-config`)\r\n\t\t\t.map((response: LayoutConfigModel) => response)\r\n\t\t\t.catch(err => {\r\n\t\t\t\treturn Observable.throw(err);\r\n\t\t\t});\r\n\t}\r\n}\r\n",
    "import { Component, OnInit } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { ConfigModel } from \"../../models\";\r\nimport { getConfigs, FeatureState } from \"../../reducers\";\r\n\r\n@Component({\r\n\tselector: \"configs\",\r\n\ttemplate: `<div fxFlexLayout=\"row\" fxLayoutWrap fxLayoutAlign=\"center center\">\r\n  <mat-card class=\"config-box\" *ngFor=\"let config of (configs | async)\" [fxFlex]=\"50\">\r\n      <h3>\r\n        <a [routerLink]=\"['edit' ,  config.Name]\">\r\n          <mat-icon aria-label=\"edit config\">edit</mat-icon>\r\n        </a>\r\n        {{config.Name}}\r\n      </h3>\r\n  </mat-card>\r\n</div>`,\r\n\tstyles: [`:host{width:100%}.config-box{margin:15px}`]\r\n})\r\nexport class ConfigsComponent {\r\n\tconfigs: Observable<ConfigModel<any>[]>;\r\n\tconstructor(private store: Store<FeatureState>) {\r\n\t\tthis.configs = this.store.select(getConfigs);\r\n\t}\r\n}\r\n",
    "import { NgModule, Component, OnInit, Output, EventEmitter, Input, ViewChild, ViewContainerRef } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { FormGroup, FormBuilder, FormControl } from \"@angular/forms\";\r\n\r\nimport { EditConfigApiModel, PartialConfig } from \"../../models\";\r\nimport { ConfigService } from \"../../services/config.service\";\r\n\r\n@Component({\r\n\tselector: \"config-config-edit\",\r\n\ttemplate: `<div >\r\n  <form [formGroup]=\"formGroup\" (ngSubmit)=\"edit()\" fxLayout=\"column\">\r\n    <mat-card>\r\n      <mat-card-content>\r\n          <dynamic-config-component-selector (configChanged)=\"configChanged($event)\" [data]=\"partialConfigModel\"></dynamic-config-component-selector>\r\n      </mat-card-content>\r\n      <mat-card-actions fxLayoutAlign=\"center center\">\r\n        <button fxFlex=\"nogrow\" type=\"submit\" mat-raised-button color=\"primary\" (click)=\"edit\">ویرایش</button>\r\n        <button fxFlex=\"nogrow\" type=\"button\" routerLink=\"/configs\" mat-raised-button>بازگشت</button>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n  </form>\r\n</div>`\r\n})\r\nexport class ConfigEditComponent implements OnInit {\r\n\tconfigInforamation: any;\r\n\tformGroup: FormGroup = EditConfigApiModel.Request.formGroup;\r\n\tpartialConfigModel: PartialConfig;\r\n\r\n\tconstructor(private configService: ConfigService, private formBuilder: FormBuilder, private route: ActivatedRoute) {\r\n\t\tthis.route.params.subscribe(params => {\r\n\t\t\tconst configName: string = params[\"name\"];\r\n\t\t\tthis.configService.getConfigByName(configName).subscribe(data => {\r\n\t\t\t\tthis.partialConfigModel = {\r\n\t\t\t\t\ttype: data.Result.Name,\r\n\t\t\t\t\tinputs: {\r\n\t\t\t\t\t\tconfigFormGroup: this.formGroup.controls.Config as FormGroup\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tthis.formGroup.patchValue({\r\n\t\t\t\t\t_id: data.Result._id,\r\n\t\t\t\t\tName: data.Result.Name\r\n\t\t\t\t});\r\n\t\t\t\tObject.keys(data.Result.Config).forEach(key => {\r\n\t\t\t\t\tthis.addControl(this.formGroup.controls.Config as FormGroup, key, data.Result.Config[key]);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\taddControl(formGroup: FormGroup, key: string, value: any) {\r\n\t\tif (value instanceof Array) {\r\n\t\t\tformGroup.addControl(key, this.formBuilder.array(value));\r\n\t\t} else if (value instanceof Object) {\r\n\t\t\tformGroup.addControl(key, this.formBuilder.group(value));\r\n\t\t} else {\r\n\t\t\tformGroup.addControl(key, new FormControl(value));\r\n\t\t}\r\n\t}\r\n\r\n\tngOnInit() {}\r\n\tconfigChanged(event: any) {\r\n\t\tdebugger;\r\n\t\tthis.formGroup.controls.Config.patchValue(event);\r\n\t}\r\n\tedit() {\r\n\t\tdebugger;\r\n\t\tif (!this.formGroup.valid) return;\r\n\t\tthis.configService.editConfig(this.formGroup.value).subscribe(config => {\r\n\t\t\tdebugger;\r\n\t\t});\r\n\t}\r\n}\r\n",
    "import { NgModule, Component, OnInit, Output, EventEmitter, Input, Injector } from \"@angular/core\";\r\nimport { FormGroup, Validators, FormControl } from \"@angular/forms\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\n@Component({\r\n\tselector: \"config-app-config\",\r\n\ttemplate: `<div [formGroup]=\"formGroup\">\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"نام پروژه\" formControlName=\"AppTitle\">\r\n    </mat-form-field>\r\n</div>`\r\n})\r\nexport class ConfigAppConfigComponent {\r\n\tformGroup: FormGroup = new FormGroup({ AppTitle: new FormControl(\"\", [ Validators.required ]) });\r\n\t@Input()\r\n\tset configFormGroup(configFormGroup: FormGroup) {\r\n\t\tthis.formGroup.patchValue(configFormGroup.value);\r\n\t\tconfigFormGroup.valueChanges.subscribe(data => {\r\n\t\t\tthis.formGroup.patchValue(data);\r\n\t\t});\r\n\t}\r\n\t@Output() configChanged = new EventEmitter();\r\n\tconstructor(private injector: Injector) {\r\n\t\tthis.configFormGroup = this.injector.get(\"configFormGroup\");\r\n\t}\r\n}\r\n",
    "import { NgModule, Component, OnInit, Output, EventEmitter, Input, Injector } from \"@angular/core\";\r\nimport { FormGroup, Validators, FormControl, FormArray } from \"@angular/forms\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\n\r\n@Component({\r\n\tselector: \"config-user-module-config\",\r\n\ttemplate: `<h2>Endpoints</h2>\r\n<div [formGroup]=\"formGroup.get('endpoints')\" fxLayout=\"column\">\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"change password\" formControlName=\"changePassword\">\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"edit profile\" formControlName=\"editProfile\">\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"get user info\" formControlName=\"getUserInfo\">\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"Profile Information Endpoint\" formControlName=\"profileInformation\">\r\n        </mat-form-field>\r\n</div>\r\n<h2>Forms</h2>\r\n<div [formGroup]=\"formGroup.get('forms')\" fxLayout=\"column\">\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"profile edit\" formControlName=\"profile_edit\">\r\n    </mat-form-field>\r\n            <!-- <ngs-form-selector (select)=\"setFormId($event,'signIn')\"></ngs-form-selector> -->\r\n</div>\r\n\r\n\r\n<h2 fxFlex=\"100\">\r\n    Dashobard Links\r\n    <button mat-icon-button color=\"primary\" (click)=\"addMenu()\">\r\n        <mat-icon aria-label=\"icon-button icon\">add</mat-icon>\r\n    </button>\r\n</h2>\r\n<div fxFlex=\"100\" *ngFor=\"let item of $any(formGroup.get('dashboardLinks')).controls\">\r\n    <div [formGroup]=\"item\">\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"route\" formControlName=\"route\">\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"icon\" formControlName=\"icon\">\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"title\" formControlName=\"title\">\r\n        </mat-form-field>\r\n    </div>\r\n</div>`\r\n})\r\nexport class UserModuleConfigComponent {\r\n\tformGroup: FormGroup = new FormGroup({\r\n\t\tendpoints: new FormGroup({\r\n\t\t\tchangePassword: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\teditProfile: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\tgetUserInfo: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\tprofileInformation: new FormControl(\"\", [ Validators.required ])\r\n\t\t}),\r\n\t\tforms: new FormGroup({\r\n\t\t\tprofile_edit: new FormControl(\"\", [ Validators.required ])\r\n\t\t}),\r\n\t\tdashboardLinks: new FormArray([])\r\n\t});\r\n\t_configFormGroup: FormGroup;\r\n\t@Input()\r\n\tset configFormGroup(configFormGroup: FormGroup) {\r\n\t\tthis._configFormGroup = configFormGroup;\r\n\t\t(configFormGroup.controls.dashboardLinks as FormArray).controls.forEach(control => {\r\n\t\t\t(this.formGroup.controls.dashboardLinks as FormArray).push(\r\n\t\t\t\tnew FormGroup({\r\n\t\t\t\t\troute: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\t\ticon: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\t\ttitle: new FormControl(\"\", [ Validators.required ])\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\tthis.formGroup.patchValue(configFormGroup.value);\r\n\t\tconfigFormGroup.valueChanges.subscribe(data => {\r\n\t\t\tthis.formGroup.patchValue(data);\r\n\t\t});\r\n\t}\r\n\tget configFormGroup() {\r\n\t\treturn this._configFormGroup;\r\n\t}\r\n\t@Output() configChanged = new EventEmitter();\r\n\tconstructor(private injector: Injector) {\r\n\t\tthis.configFormGroup = this.injector.get(\"configFormGroup\");\r\n\t}\r\n\taddMenu() {\r\n\t\tvar menuItem = new FormGroup({\r\n\t\t\troute: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\ticon: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\ttitle: new FormControl(\"\", [ Validators.required ])\r\n\t\t});\r\n\r\n\t\t(this.formGroup.get(\"dashboardLinks\") as FormArray).push(menuItem);\r\n\t\t(this.configFormGroup.get(\"dashboardLinks\") as FormArray).push(menuItem);\r\n\t}\r\n}\r\n",
    "import { Component, Output, EventEmitter, Input, Injector } from \"@angular/core\";\r\nimport { FormGroup, Validators, FormControl, FormArray } from \"@angular/forms\";\r\n\r\n@Component({\r\n\ttemplate: `<div fxFlexLayout=\"row\" fxLayoutWrap fxLayoutAlign=\"center center\">\r\n    <div fxFlex=\"100\" fxFlexLayout=\"row\">\r\n        <div [formGroup]=\"formGroup\">\r\n            <mat-form-field>\r\n                <mat-select (change)=\"configChanged.emit(formGroup.value)\" placeholder=\"layout mode\" formControlName=\"layoutMode\" >\r\n                    <mat-option *ngFor=\"let item of layoutModes\" [value]=\"item\">{{item}}</mat-option>\r\n                </mat-select> \r\n            </mat-form-field>\r\n            <mat-slide-toggle  (change)=\"configChanged.emit(formGroup.value)\"  formControlName=\"showLeftNavBar\">show left navbar</mat-slide-toggle>\r\n            <mat-form-field>\r\n                <mat-select (change)=\"configChanged.emit(formGroup.value)\" placeholder=\"main side nav mode\" formControlName=\"mainSideNavMode\" >\r\n                    <mat-option *ngFor=\"let item of sideNavModes\" [value]=\"item\">{{item}}</mat-option>\r\n                </mat-select> \r\n            </mat-form-field>\r\n            <mat-slide-toggle  (change)=\"configChanged.emit(formGroup.value)\"  formControlName=\"showMainSidenav\">show main side nav</mat-slide-toggle>\r\n            <mat-slide-toggle  (change)=\"configChanged.emit(formGroup.value)\"  formControlName=\"stickyLeftNavBar\">sticky left navbar</mat-slide-toggle>\r\n            <mat-slide-toggle  (change)=\"configChanged.emit(formGroup.value)\"  formControlName=\"showSecondSideNav\">show second side nav</mat-slide-toggle>\r\n            <mat-form-field>\r\n                <mat-select (change)=\"configChanged.emit(formGroup.value)\" placeholder=\"second side nav mode\" formControlName=\"secondSideNavMode\" >\r\n                    <mat-option *ngFor=\"let item of sideNavModes\" [value]=\"item\">{{item}}</mat-option>\r\n                </mat-select> \r\n            </mat-form-field>\r\n        </div>\r\n    </div>\r\n\r\n    <h2 fxFlex=\"100\">\r\n        Menu Items\r\n        <button mat-icon-button color=\"primary\" (click)=\"addMenu()\">\r\n            <mat-icon aria-label=\"icon-button icon\">add</mat-icon>\r\n        </button>\r\n    </h2>\r\n    <div fxFlex=\"100\" *ngFor=\"let item of formGroup.controls.menuItems.controls\">\r\n        <div [formGroup]=\"item\">\r\n            <mat-form-field>\r\n                <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"route\" formControlName=\"route\">\r\n            </mat-form-field>\r\n            <mat-form-field>\r\n                <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"icon\" formControlName=\"icon\">\r\n            </mat-form-field>\r\n            <mat-form-field>\r\n                <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"title\" formControlName=\"title\">\r\n            </mat-form-field>\r\n            <mat-form-field> \r\n                <mat-select (change)=\"configChanged.emit(formGroup.value)\" placeholder=\"roles\" formControlName=\"roles\" multiple>\r\n                    <mat-option *ngFor=\"let role of roleItems\" [value]=\"role\">{{role}}</mat-option>\r\n                </mat-select> \r\n            </mat-form-field>\r\n        </div>\r\n    </div>\r\n</div>`\r\n})\r\nexport class LayoutModuleConfigComponent {\r\n\tsideNavModes: string[];\r\n\tlayoutModes: string[];\r\n\tformGroup: any = new FormGroup({\r\n\t\tlayoutMode: new FormControl(\"\", [ Validators.required ]),\r\n\t\tshowLeftNavBar: new FormControl(\"\", [ Validators.required ]),\r\n\t\tmainSideNavMode: new FormControl(\"\", [ Validators.required ]),\r\n\t\tshowMainSidenav: new FormControl(\"\", [ Validators.required ]),\r\n\t\tstickyLeftNavBar: new FormControl(\"\", [ Validators.required ]),\r\n\t\tshowSecondSideNav: new FormControl(\"\", [ Validators.required ]),\r\n\t\tsecondSideNavMode: new FormControl(\"\", [ Validators.required ]),\r\n\t\tmenuItems: new FormArray([])\r\n\t});\r\n\t_configFormGroup: FormGroup;\r\n\t@Input()\r\n\tset configFormGroup(configFormGroup: FormGroup) {\r\n\t\tthis._configFormGroup = configFormGroup;\r\n\t\t(configFormGroup.controls.menuItems as FormArray).controls.forEach((control) => {\r\n\t\t\t(this.formGroup.controls.menuItems as FormArray).push(\r\n\t\t\t\tnew FormGroup({\r\n\t\t\t\t\troute: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\t\ticon: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\t\t// roles: new FormArray(control.value.roles.map((i) => new FormControl(\"Admin\"))),\r\n\t\t\t\t\troles: new FormControl(),\r\n\t\t\t\t\ttitle: new FormControl(\"\", [ Validators.required ])\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\tthis.formGroup.patchValue(configFormGroup.value);\r\n\t\tconfigFormGroup.valueChanges.subscribe((data) => this.formGroup.patchValue(data));\r\n\t}\r\n\tget configFormGroup() {\r\n\t\treturn this._configFormGroup;\r\n\t}\r\n\t@Output() configChanged = new EventEmitter();\r\n\r\n\troleItems: string[] = [ \"Admin\", \"User\" ];\r\n\r\n\tconstructor(private injector: Injector) {\r\n\t\tthis.sideNavModes = [ \"over\", \"push\", \"side\" ];\r\n\t\tthis.layoutModes = [ \"with-margin\", \"without-margin\", \"default\" ];\r\n\t\tthis.configFormGroup = this.injector.get(\"configFormGroup\");\r\n\t}\r\n\taddMenu() {\r\n\t\tvar menuItem = new FormGroup({\r\n\t\t\troute: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\ticon: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\troles: new FormControl(),\r\n\t\t\ttitle: new FormControl(\"\", [ Validators.required ])\r\n\t\t});\r\n\r\n\t\t(this.formGroup.get(\"menuItems\") as FormArray).push(menuItem);\r\n\t\t(this.configFormGroup.get(\"menuItems\") as FormArray).push(menuItem);\r\n\t}\r\n}\r\n",
    "import { Component, OnInit } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\n@Component({\r\n\tselector: \"config-module-container\",\r\n\ttemplate: `<div fxLayoutAlign=\"\" fxflex=\"100\" fxLayout=\"column\">\r\n    <router-outlet></router-outlet>\r\n</div>\r\n`\r\n})\r\nexport class ConfigModuleContainerComponent implements OnInit {\r\n\tconstructor() {}\r\n\r\n\tngOnInit() {}\r\n}\r\n",
    "import { NgModule, Component, OnInit, Output, EventEmitter, Input, Injector } from \"@angular/core\";\r\nimport { FormGroup, Validators, FormControl } from \"@angular/forms\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\n@Component({\r\n\tselector: \"config-authentication-module-config\",\r\n\ttemplate: `<h2>Endpoints</h2>\r\n<div [formGroup]=\"formGroup.controls.endpoints\" fxLayout=\"column\">\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"sign in\" formControlName=\"signIn\">\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"sign out\" formControlName=\"signOut\">\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"user information\" formControlName=\"userInformation\">\r\n    </mat-form-field>\r\n</div>\r\n<h2>Forms</h2>\r\n<div [formGroup]=\"formGroup.controls.forms\" fxLayout=\"column\">\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"SignIn Forms\" formControlName=\"signIn\">\r\n    </mat-form-field>\r\n            <!-- <ngs-form-selector (select)=\"setFormId($event,'signIn')\"></ngs-form-selector> -->\r\n</div>`\r\n})\r\nexport class AuthenticationModuleConfigComponent {\r\n\tformGroup: FormGroup = new FormGroup({\r\n\t\tendpoints: new FormGroup({\r\n\t\t\tsignIn: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\tsignOut: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\tuserInformation: new FormControl(\"\", [ Validators.required ])\r\n\t\t}),\r\n\t\tforms: new FormGroup({\r\n\t\t\tsignIn: new FormControl(\"\", [ Validators.required ])\r\n\t\t})\r\n\t});\r\n\t@Input()\r\n\tset configFormGroup(configFormGroup: FormGroup) {\r\n\t\tthis.formGroup.patchValue(configFormGroup.value);\r\n\t\tconfigFormGroup.valueChanges.subscribe(data => {\r\n\t\t\tthis.formGroup.patchValue(data);\r\n\t\t});\r\n\t}\r\n\t@Output() configChanged = new EventEmitter();\r\n\tconstructor(private injector: Injector) {\r\n\t\tthis.configFormGroup = this.injector.get(\"configFormGroup\");\r\n\t}\r\n\tsetFormId(formId: string, formName: string) {\r\n\t\tdebugger;\r\n\t\tthis.formGroup.patchValue({ [formName]: formId });\r\n\t}\r\n}\r\n",
    "import {\r\n\tComponent,\r\n\tOnInit,\r\n\tInput,\r\n\tAfterViewInit,\r\n\tComponentFactoryResolver,\r\n\tViewChild,\r\n\tViewContainerRef,\r\n\tReflectiveInjector,\r\n\tOnDestroy,\r\n\tOutput,\r\n\tEventEmitter\r\n} from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { PartialConfig } from \"../../models\";\r\nimport { AuthenticationModuleConfigComponent } from \"../../dumb-components/authentication-module-config/authentication-module-config.component\";\r\nimport { ConfigAppConfigComponent } from \"../../dumb-components/app-config/app-config.component\";\r\nimport { UserModuleConfigComponent } from \"../../dumb-components/user-module-config/user-module-config.component\";\r\nimport { LayoutModuleConfigComponent } from \"../../dumb-components/layout-config/layout-module-config.component\";\r\n\r\n@Component({\r\n\tselector: \"dynamic-config-component-selector\",\r\n\ttemplate: `<div #dynamicComponentContainer></div>`,\r\n\tstyles: [`:host{width:100%}.diagram-box{margin:15px}.diagram-box .c3{direction:ltr}`],\r\n\tentryComponents: [\r\n\t\tAuthenticationModuleConfigComponent,\r\n\t\tConfigAppConfigComponent,\r\n\t\tUserModuleConfigComponent,\r\n\t\tLayoutModuleConfigComponent\r\n\t]\r\n})\r\nexport class DynamicConfigComponentSelectorComponent implements AfterViewInit {\r\n\ttypeMapToDiagram: any = {\r\n\t\tauthentication_module_config: AuthenticationModuleConfigComponent,\r\n\t\tapp_config: ConfigAppConfigComponent,\r\n\t\tuser_module_config: UserModuleConfigComponent,\r\n\t\tlayout_config: LayoutModuleConfigComponent\r\n\t};\r\n\t@ViewChild(\"dynamicComponentContainer\", { read: ViewContainerRef })\r\n\tdynamicComponentContainer: ViewContainerRef;\r\n\t@Output() configChanged = new EventEmitter();\r\n\tcurrentComponent: any = null;\r\n\t@Input()\r\n\tset data(data: PartialConfig) {\r\n\t\tif (!data || Object.keys(data).length == 0) return;\r\n\t\tif (!(data.type in this.typeMapToDiagram)) {\r\n\t\t\tif (this.currentComponent) this.currentComponent.destroy();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet _component: any = this.typeMapToDiagram[data.type];\r\n\t\tlet inputProviders = Object.keys(data.inputs).map(inputName => {\r\n\t\t\treturn { provide: inputName, useValue: (data.inputs as any)[inputName] };\r\n\t\t});\r\n\t\tlet resolvedInputs = ReflectiveInjector.resolve(inputProviders);\r\n\r\n\t\tlet injector = ReflectiveInjector.fromResolvedProviders(\r\n\t\t\tresolvedInputs,\r\n\t\t\tthis.dynamicComponentContainer.parentInjector\r\n\t\t);\r\n\t\tlet factory = this.resolver.resolveComponentFactory(_component);\r\n\r\n\t\tlet component = factory.create(injector);\r\n\t\t(<any>component.instance).configChanged.subscribe((data: any) => {\r\n\t\t\tthis.configChanged.emit(data);\r\n\t\t});\r\n\t\tthis.dynamicComponentContainer.insert(component.hostView);\r\n\r\n\t\tif (this.currentComponent) {\r\n\t\t\tthis.currentComponent.destroy();\r\n\t\t}\r\n\r\n\t\tthis.currentComponent = component;\r\n\t}\r\n\tconstructor(private resolver: ComponentFactoryResolver) {}\r\n\tngAfterViewInit() {}\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { of } from \"rxjs/observable/of\";\r\n\r\nimport { ConfigActionTypes, ConfigLoadedSucceedAction, ConfigLoadedFailedAction } from \"../actions\";\r\nimport { ConfigService } from \"../services/config.service\";\r\nimport { GetConfigsApiModel } from \"../models\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\n\r\n@Injectable()\r\nexport class LoadConfigEffects {\r\n\tconstructor(private actions$: Actions<any>, private configService: ConfigService) {}\r\n\r\n\t@Effect()\r\n\tgetConfigs$ = this.actions$\r\n\t\t.ofType(ConfigActionTypes.GET_CONFIGS)\r\n\t\t.pipe(\r\n\t\t\tmap(action => action.payload),\r\n\t\t\tswitchMap((data: GetConfigsApiModel.Request) => this.configService.getConfigs()),\r\n\t\t\tmap(configs => new ConfigLoadedSucceedAction(configs)),\r\n\t\t\tcatchError(() => Observable.of(new ConfigLoadedFailedAction()))\r\n\t\t);\r\n}\r\n",
    "import { ModuleWithProviders } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { ConfigsComponent, ConfigEditComponent, ConfigModuleContainerComponent } from './smart-components';\r\n\r\nconst routes: Routes = [\r\n        {\r\n                path: 'configs',\r\n                component: ConfigModuleContainerComponent,\r\n                children: [\r\n                        {\r\n                                path: '',\r\n                                component: ConfigsComponent\r\n                        },\r\n                        {\r\n                                path: 'edit/:name',\r\n                                component: ConfigEditComponent\r\n                        }\r\n                ]\r\n        }\r\n];\r\n\r\nexport const RoutingModule: ModuleWithProviders = RouterModule.forChild(routes);\r\n",
    "import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { StoreModule } from \"@ngrx/store\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport {\r\n\tMatIconModule,\r\n\tMatButtonModule,\r\n\tMatCardModule,\r\n\tMatSnackBarModule,\r\n\tMatSidenavModule,\r\n\tMatExpansionModule,\r\n\tMatSelectModule,\r\n\tMatFormFieldModule,\r\n\tMatListModule,\r\n\tMatMenuModule,\r\n\tMatRadioModule,\r\n\tMatInputModule,\r\n\tMatToolbarModule,\r\n\tMatDatepickerModule,\r\n\tMatProgressBarModule,\r\n\tMatSlideToggleModule\r\n} from \"@angular/material\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { EffectsModule } from \"@ngrx/effects\";\r\n\r\nimport { GetConfigsApiModel } from \"./models\";\r\nimport { ConfigModuleConfig, MODULE_CONFIG_TOKEN, MODULE_DEFAULT_CONFIG } from \"./config.config\";\r\nimport { ConfigsComponent } from \"./smart-components/configs/configs.component\";\r\nimport { ConfigEditComponent } from \"./smart-components/config-edit/config-edit.component\";\r\nimport { ConfigAppConfigComponent } from \"./dumb-components/app-config/app-config.component\";\r\nimport { UserModuleConfigComponent } from \"./dumb-components/user-module-config/user-module-config.component\";\r\nimport { LayoutModuleConfigComponent } from \"./dumb-components/layout-config/layout-module-config.component\";\r\nimport { ConfigModuleContainerComponent } from \"./smart-components/config-module-container/config-module-container.component\";\r\nimport { AuthenticationModuleConfigComponent } from \"./dumb-components/authentication-module-config/authentication-module-config.component\";\r\nimport { DynamicConfigComponentSelectorComponent } from \"./smart-components/dynamic-config-component-selector/dynamic-config-component-selector.component\";\r\nimport { LoadConfigEffects } from \"./effects/load-config.effects\";\r\nimport { ConfigReducers } from \"./reducers\";\r\nimport { RoutingModule } from \"./config.routing-module\";\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n\t\tRouterModule,\r\n\t\tFormsModule,\r\n\t\tReactiveFormsModule,\r\n\t\tHttpClientModule,\r\n\t\tFlexLayoutModule,\r\n\t\tMatIconModule,\r\n\t\tMatButtonModule,\r\n\t\tMatCardModule,\r\n\t\tMatSnackBarModule,\r\n\t\tMatSidenavModule,\r\n\t\tMatExpansionModule,\r\n\t\tMatSelectModule,\r\n\t\tMatFormFieldModule,\r\n\t\tMatListModule,\r\n\t\tMatMenuModule,\r\n\t\tMatRadioModule,\r\n\t\tMatInputModule,\r\n\t\tMatSlideToggleModule,\r\n\t\tMatToolbarModule,\r\n\t\tMatDatepickerModule,\r\n\t\tMatProgressBarModule,\r\n\t\tBrowserAnimationsModule,\r\n\t\tRoutingModule\r\n\t],\r\n\tdeclarations: [\r\n\t\tConfigsComponent,\r\n\t\tConfigEditComponent,\r\n\t\tConfigAppConfigComponent,\r\n\t\tUserModuleConfigComponent,\r\n\t\tLayoutModuleConfigComponent,\r\n\t\tConfigModuleContainerComponent,\r\n\t\tAuthenticationModuleConfigComponent,\r\n\t\tDynamicConfigComponentSelectorComponent\r\n\t],\r\n\tproviders: []\r\n})\r\nexport class NgsConfigModule {\r\n\tstatic forRoot(config: ConfigModuleConfig): ModuleWithProviders {\r\n\t\treturn {\r\n\t\t\tngModule: RootNgsConfigModule,\r\n\t\t\tproviders: [ { provide: MODULE_CONFIG_TOKEN, useValue: config } ]\r\n\t\t};\r\n\t}\r\n}\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tNgsConfigModule,\r\n\t\tStoreModule.forFeature(\"config\", ConfigReducers),\r\n\t\tEffectsModule.forFeature([ LoadConfigEffects ])\r\n\t\t// RoutingModule\r\n\t],\r\n\texports: [ NgsConfigModule ]\r\n})\r\nexport class RootNgsConfigModule {}\r\n"
  ],
  "names": [
    "ConfigModel",
    "GetConfigsApiModel",
    "Request",
    "initValue",
    "_this",
    "this",
    "prototype",
    "getRequestBody",
    "Response",
    "EditConfigApiModel",
    "Name",
    "Config",
    "get",
    "FormGroup",
    "FormControl",
    "Validators",
    "required",
    "MODULE_DEFAULT_CONFIG",
    "dev_api_host",
    "prod_api_host",
    "env",
    "production",
    "MODULE_CONFIG_TOKEN",
    "InjectionToken",
    "GetConfigAction",
    "type",
    "ConfigActionTypes",
    "payload",
    "initialState",
    "data",
    "ConfigReducers",
    "list",
    "state",
    "action",
    "config.ConfigActionTypes",
    "Object",
    "assign",
    "map",
    "config",
    "_id",
    "selectConfigState",
    "createFeatureSelector",
    "getConfigListState",
    "createSelector",
    "getConfigs",
    "getAppConfig",
    "find",
    "getAuthenticationModuleConfig",
    "getUserModuleConfig",
    "getlayoutModuleConfig",
    "getConfigModuleConfig",
    "getFormModuleConfig",
    "getSocketModuleConfig",
    "ConfigurationService",
    "configFile",
    "store",
    "config$",
    "BehaviorSubject",
    "_config",
    "next",
    "select",
    "subscribe",
    "configConfig",
    "enumerable",
    "configurable",
    "decorators",
    "Injectable",
    "args",
    "ConfigService",
    "http",
    "configurationService",
    "configsEndpoint",
    "setTimeout",
    "dispatch",
    "take",
    "response",
    "JSON",
    "parse",
    "stringify",
    "replace",
    "RegExp",
    "Result",
    "catch",
    "err",
    "Observable",
    "throw",
    "getConfigByName",
    "name",
    "editConfig",
    "body",
    "model",
    "put",
    "getLayoutConfigs",
    "ConfigsComponent",
    "configs",
    "Component",
    "ConfigEditComponent",
    "configService",
    "formBuilder",
    "route",
    "formGroup",
    "params",
    "configName",
    "partialConfigModel",
    "inputs",
    "configFormGroup",
    "controls",
    "patchValue",
    "keys",
    "forEach",
    "key",
    "addControl",
    "value",
    "Array",
    "array",
    "group",
    "configChanged",
    "event",
    "edit",
    "valid",
    "ConfigAppConfigComponent",
    "injector",
    "AppTitle",
    "EventEmitter",
    "set",
    "valueChanges",
    "Injector",
    "UserModuleConfigComponent",
    "endpoints",
    "changePassword",
    "editProfile",
    "getUserInfo",
    "profileInformation",
    "forms",
    "profile_edit",
    "dashboardLinks",
    "FormArray",
    "_configFormGroup",
    "control",
    "push",
    "icon",
    "addMenu",
    "menuItem",
    "LayoutModuleConfigComponent",
    "layoutMode",
    "showLeftNavBar",
    "mainSideNavMode",
    "showMainSidenav",
    "stickyLeftNavBar",
    "showSecondSideNav",
    "secondSideNavMode",
    "menuItems",
    "roleItems",
    "sideNavModes",
    "layoutModes",
    "roles",
    "ConfigModuleContainerComponent",
    "template",
    "AuthenticationModuleConfigComponent",
    "signIn",
    "signOut",
    "userInformation",
    "_a",
    "formName",
    "formId",
    "DynamicConfigComponentSelectorComponent",
    "resolver",
    "typeMapToDiagram",
    "authentication_module_config",
    "app_config",
    "user_module_config",
    "layout_config",
    "currentComponent",
    "length",
    "_component",
    "inputProviders",
    "inputName",
    "provide",
    "useValue",
    "resolvedInputs",
    "ReflectiveInjector",
    "resolve",
    "fromResolvedProviders",
    "dynamicComponentContainer",
    "parentInjector",
    "component",
    "resolveComponentFactory",
    "create",
    "emit",
    "insert",
    "hostView",
    "destroy",
    "ngAfterViewInit",
    "selector",
    "styles",
    "LoadConfigEffects",
    "actions$",
    "getConfigs$",
    "ofType",
    "pipe",
    "switchMap",
    "ConfigLoadedSucceedAction",
    "catchError",
    "of",
    "ConfigLoadedFailedAction",
    "routes",
    "path",
    "children",
    "RoutingModule",
    "RouterModule",
    "forChild",
    "NgsConfigModule",
    "forRoot",
    "ngModule",
    "RootNgsConfigModule",
    "providers",
    "NgModule",
    "imports",
    "CommonModule",
    "FormsModule",
    "ReactiveFormsModule",
    "HttpClientModule",
    "FlexLayoutModule",
    "MatIconModule",
    "MatButtonModule",
    "MatCardModule",
    "MatSnackBarModule",
    "MatSidenavModule",
    "MatExpansionModule",
    "MatSelectModule",
    "MatFormFieldModule",
    "MatListModule",
    "MatMenuModule",
    "MatRadioModule",
    "MatInputModule",
    "MatSlideToggleModule",
    "MatToolbarModule",
    "MatDatepickerModule",
    "MatProgressBarModule",
    "BrowserAnimationsModule",
    "declarations"
  ],
  "mappings": "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"
}
