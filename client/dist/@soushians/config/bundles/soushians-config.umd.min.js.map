{"version":3,"sources":["ng://@soushians/config/lib/models/config.model.ts","ng://@soushians/config/lib/models/get-configs-api.model.ts","ng://@soushians/config/lib/models/edit-config-api.model.ts","ng://@soushians/config/lib/config.config.ts","null","ng://@soushians/config/lib/actions/config.action.ts","ng://@soushians/config/lib/reducers/config-list.reducer.ts","ng://@soushians/config/lib/reducers/index.ts","ng://@soushians/config/lib/services/configuration.service.ts","ng://@soushians/config/lib/services/config.service.ts","ng://@soushians/config/lib/smart-components/configs/configs.component.ts","ng://@soushians/config/lib/smart-components/config-edit/config-edit.component.ts","ng://@soushians/config/lib/dumb-components/app-config/app-config.component.ts","ng://@soushians/config/lib/dumb-components/user-module-config/user-module-config.component.ts","ng://@soushians/config/lib/dumb-components/layout-config/layout-module-config.component.ts","ng://@soushians/config/lib/smart-components/config-module-container/config-module-container.component.ts","ng://@soushians/config/lib/dumb-components/authentication-module-config/authentication-module-config.component.ts","ng://@soushians/config/lib/smart-components/dynamic-config-component-selector/dynamic-config-component-selector.component.ts","ng://@soushians/config/lib/effects/load-config.effects.ts","ng://@soushians/config/lib/config.routing-module.ts","ng://@soushians/config/lib/config.module.ts"],"names":["ConfigModel","GetConfigsApiModel","Request","initValue","_this","this","Object","keys","forEach","key","prototype","getRequestBody","Response","EditConfigApiModel","Name","Config","defineProperty","FormGroup","FormControl","Validators","required","MODULE_DEFAULT_CONFIG","dev_api_host","prod_api_host","env","production","MODULE_CONFIG_TOKEN","InjectionToken","__assign","assign","t","s","i","n","arguments","length","p","hasOwnProperty","call","GetConfigAction","ConfigActionTypes","ConfigLoadedSucceedAction","payload","ConfigLoadedFailedAction","initialState","data","Reducer","state","action","type","config.ConfigActionTypes","map","config","_id","ConfigReducers","list","configList.Reducer","selectConfigState","createFeatureSelector","getConfigListState","createSelector","getConfigs","getAppConfig","find","getAuthenticationModuleConfig","getUserModuleConfig","getConfigModuleConfig","getFormModuleConfig","getSocketModuleConfig","ConfigurationService","configFile","store","BehaviorSubject","_config","config$","next","select","subscribe","configConfig","Injectable","args","providedIn","Inject","Store","ConfigService","http","configurationService","configsEndpoint","setTimeout","dispatch","get","take","response","JSON","parse","stringify","replace","RegExp","Result","catch","err","Observable","throw","getConfigByName","name","editConfig","body","model","put","getLayoutConfigs","HttpClient","ConfigsComponent","configs","Component","selector","template","styles","ConfigEditComponent","configService","formBuilder","route","formGroup","params","configName","partialConfigModel","inputs","configFormGroup","controls","patchValue","addControl","value","Array","array","group","ngOnInit","configChanged","event","console","log","edit","dynConfig","valid","FormBuilder","ActivatedRoute","ViewChild","ConfigAppConfigComponent","injector","AppTitle","EventEmitter","valueChanges","Injector","Input","Output","UserModuleConfigComponent","endpoints","changePassword","editProfile","getUserInfo","whoAmI","forms","profile_edit","dashboardLinks","FormArray","_configFormGroup","control","push","icon","title","addMenu","menuItem","LayoutModuleConfigComponent","layoutMode","showLeftNavBar","mainSideNavMode","showMainSidenav","stickyLeftNavBar","showSecondSideNav","secondSideNavMode","menuItems","sideNavModes","layoutModes","roleItems$","pipe","filter","appconfig","Roles","roles","ConfigModuleContainerComponent","AuthenticationModuleConfigComponent","signIn","signOut","setFormId","formId","formName","_a","DynamicConfigComponentSelectorComponent","resolver","authentication_module_config","app_config","user_module_config","layout_config","currentComponent","instance","typeMapToDiagram","_component","inputProviders","inputName","provide","useValue","resolvedInputs","ReflectiveInjector","resolve","fromResolvedProviders","dynamicComponentContainer","parentInjector","component","resolveComponentFactory","create","insert","hostView","destroy","ngAfterViewInit","entryComponents","ComponentFactoryResolver","read","ViewContainerRef","LoadConfigEffects","actions$","ofType","switchMap","catchError","of","Actions","decorators","target","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","Effect","metadataKey","metadataValue","metadata","routes","path","children","RoutingModule","RouterModule","forChild","NgsConfigModule","forRoot","ngModule","RootNgsConfigModule","providers","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","HttpClientModule","FlexLayoutModule","MatIconModule","MatButtonModule","MatCardModule","MatSnackBarModule","MatSidenavModule","MatExpansionModule","MatSelectModule","MatFormFieldModule","MatListModule","MatMenuModule","MatRadioModule","MatInputModule","MatSlideToggleModule","MatToolbarModule","MatDatepickerModule","MatProgressBarModule","BrowserAnimationsModule","declarations","StoreModule","forFeature","EffectsModule","exports"],"mappings":"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","sourcesContent":["export class ConfigModel<T> {\r\n\t_id: string;\r\n\tName: string;\r\n\tConfig: T;\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { ConfigModel } from \"./config.model\";\r\n\r\nexport namespace GetConfigsApiModel {\r\n\texport class Request implements HttpRequestBaseModel<Request> {\r\n\t\tconstructor(initValue: GetConfigsApiModel.Request = {} as GetConfigsApiModel.Request) {\r\n\t\t\tObject.keys(initValue).forEach(key => ((this as any)[key] = (initValue as any)[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {};\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: ConfigModel<any>[];\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { ConfigModel } from \"../models\";\r\n\r\nexport namespace EditConfigApiModel {\r\n\texport class Request implements HttpRequestBaseModel<Request> {\r\n\t\tName: string;\r\n\t\tConfig: {};\r\n\t\tconstructor(initValue = {} as EditConfigApiModel.Request) {\r\n\t\t\tObject.keys(initValue).forEach(key => ((this as any)[key] = (initValue as any)[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {\r\n\t\t\t\tName: this.Name,\r\n\t\t\t\tConfig: this.Config\r\n\t\t\t};\r\n\t\t}\r\n\t\tstatic get formGroup() {\r\n\t\t\treturn new FormGroup({\r\n\t\t\t\tName: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tConfig: new FormGroup({})\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: ConfigModel<any>;\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","import { InjectionToken } from \"@angular/core\";\r\n\r\nexport interface ConfigModuleConfig {\r\n\tdev_api_host?: string;\r\n\tprod_api_host?: string;\r\n\tenv?: {\r\n\t\tproduction: boolean;\r\n\t};\r\n}\r\n\r\nexport const MODULE_DEFAULT_CONFIG: ConfigModuleConfig = {\r\n\tdev_api_host: \"http://localhost:3000\",\r\n\tprod_api_host: \"config/module/config/not/set\",\r\n\tenv: {\r\n\t\tproduction: false\r\n\t}\r\n};\r\n\r\nexport const MODULE_CONFIG_TOKEN = new InjectionToken<ConfigModuleConfig>(\"UserModuleConfig\");\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\nimport { ConfigModel, GetConfigsApiModel } from \"../models\";\r\n\r\nexport enum ConfigActionTypes {\r\n\tGET_CONFIGS = \"[CONFIG] get config\",\r\n\tCONFIG_LOADED_SUCCEED = \"[CONFIG] load config succeed\",\r\n\tUPDATE_CONFIG = \"[CONFIG] update config\",\r\n\tCONFIG_LOADED_FAILED = \"[CONFIG] load config failed\"\r\n}\r\n\r\nexport class GetConfigAction implements Action {\r\n\treadonly type = ConfigActionTypes.GET_CONFIGS;\r\n}\r\n\r\nexport class ConfigLoadedSucceedAction implements Action {\r\n\treadonly type = ConfigActionTypes.CONFIG_LOADED_SUCCEED;\r\n\r\n\tconstructor(public payload: ConfigModel<any>[]) {}\r\n}\r\nexport class UpdateConfigAction implements Action {\r\n\treadonly type = ConfigActionTypes.UPDATE_CONFIG;\r\n\tconstructor(public payload: ConfigModel<any>) {}\r\n}\r\n\r\nexport class ConfigLoadedFailedAction implements Action {\r\n\treadonly type = ConfigActionTypes.CONFIG_LOADED_FAILED;\r\n}\r\nexport type Actions = GetConfigAction | ConfigLoadedSucceedAction | ConfigLoadedFailedAction | UpdateConfigAction;\r\n","import * as config from \"../actions/config.action\";\r\n\r\nexport interface State {\r\n\tdata: any[];\r\n}\r\n\r\nconst initialState: State = {\r\n\tdata: []\r\n};\r\n\r\nexport function Reducer(state = initialState, action: config.Actions): State {\r\n\tswitch (action.type) {\r\n\t\tcase config.ConfigActionTypes.CONFIG_LOADED_SUCCEED:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: action.payload\r\n\t\t\t};\r\n\t\tcase config.ConfigActionTypes.UPDATE_CONFIG:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: state.data.map(config => {\r\n\t\t\t\t\tif (config._id == action.payload._id) config.Config = action.payload.Config;\r\n\t\t\t\t\treturn config;\r\n\t\t\t\t})\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport const getConfigs = (state: State) => state.data;\r\nexport const getAppConfig = (state: State) => state.data.find(config => config.Name == \"app_config\");\r\nexport const getAuthenticationModuleConfig = (state: State) =>\r\n\tstate.data.find(config => config.Name == \"authentication_module_config\");\r\nexport const getUserModuleConfig = (state: State) => state.data.find(config => config.Name == \"user_module_config\");\r\nexport const getConfigModuleConfig = (state: State) =>\r\n\tstate.data.find(config => config.Name == \"config_module_config\") as any;\r\nexport const getFormModuleConfig = (state: State) =>\r\n\tstate.data.find(config => config.Name == \"form_module_config\") as any;\r\nexport const getSocketModuleConfig = (state: State) =>\r\n\tstate.data.find(config => config.Name == \"socket_module_config\") as any;\r\n","import { createSelector, createFeatureSelector, MemoizedSelector } from \"@ngrx/store\";\r\n\r\nimport * as configList from \"./config-list.reducer\";\r\nimport { ConfigLoadedFailedAction, ConfigLoadedSucceedAction } from \"../actions\";\r\nexport interface ConfigState {\r\n\tlist: configList.State;\r\n}\r\nConfigLoadedFailedAction;\r\nexport const ConfigReducers = {\r\n\tlist: configList.Reducer\r\n};\r\n\r\nexport interface FeatureState {\r\n\t\"configs\": ConfigState;\r\n}\r\n\r\n//#region selectors\r\n\r\nexport const selectConfigState = createFeatureSelector<ConfigState>(\"config\");\r\n\r\n//#endregion\r\n\r\nexport const getConfigListState = createSelector(selectConfigState, (state: ConfigState) => state.list);\r\nexport const getConfigs = createSelector(getConfigListState, configList.getConfigs);\r\nexport const getAppConfig = createSelector(getConfigListState, configList.getAppConfig);\r\nexport const getAuthenticationModuleConfig = createSelector(\r\n\tgetConfigListState,\r\n\tconfigList.getAuthenticationModuleConfig\r\n);\r\nexport const getUserModuleConfig = createSelector(getConfigListState, configList.getUserModuleConfig);\r\nexport const getConfigModuleConfig = createSelector(getConfigListState, configList.getConfigModuleConfig);\r\nexport const getFormModuleConfig = createSelector(getConfigListState, configList.getFormModuleConfig);\r\nexport const getSocketModuleConfig = createSelector(getConfigListState, configList.getSocketModuleConfig);\r\n","import { Injectable, Inject } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { ConfigModuleConfig, MODULE_CONFIG_TOKEN, MODULE_DEFAULT_CONFIG } from \"../config.config\";\r\nimport { getConfigModuleConfig } from \"../reducers\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class ConfigurationService {\r\n\tprivate _config: ConfigModuleConfig;\r\n\tget config() {\r\n\t\treturn this._config;\r\n\t}\r\n\tconfig$ = new BehaviorSubject(this._config);\r\n\r\n\tconstructor(@Inject(MODULE_CONFIG_TOKEN) configFile: ConfigModuleConfig, private store: Store<any>) {\r\n\t\tthis._config = Object.assign({}, MODULE_DEFAULT_CONFIG, configFile);\r\n\t\tthis.config$.next(this._config);\r\n\t\tthis.store.select(getConfigModuleConfig).subscribe(configConfig => {\r\n\t\t\tif (!configConfig) return;\r\n\t\t\tthis._config = Object.assign({}, this._config, configConfig.Config);\r\n\t\t\tthis.config$.next(this._config);\r\n\t\t});\r\n\t}\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs/Rx\";\r\nimport { ConfigState } from \"../reducers\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { EditConfigApiModel, GetConfigsApiModel, ConfigModel } from \"../models\";\r\n\r\nimport { GetConfigAction } from \"../actions\";\r\nimport { ConfigurationService } from \"./configuration.service\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class ConfigService {\r\n\tresponseCache: any;\r\n\tconfigsEndpoint: string;\r\n\r\n\tconstructor(\r\n\t\tprivate http: HttpClient,\r\n\t\tprivate store: Store<ConfigState>,\r\n\t\tprivate configurationService: ConfigurationService\r\n\t) {\r\n\t\tthis.configsEndpoint = this.configurationService.config.env.production\r\n\t\t\t? this.configurationService.config.prod_api_host\r\n\t\t\t: this.configurationService.config.dev_api_host;\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.store.dispatch(new GetConfigAction());\r\n\t\t}, 999);\r\n\t}\r\n\r\n\tgetConfigs(): Observable<ConfigModel<any>[]> {\r\n\t\treturn (\r\n\t\t\tthis.http\r\n\t\t\t\t.get(`${this.configsEndpoint}/api/config`)\r\n\t\t\t\t// .filter(() => this.configurationService.config.dev_api_host != undefined)\r\n\t\t\t\t.take(1)\r\n\t\t\t\t.map((response: GetConfigsApiModel.Response) => {\r\n\t\t\t\t\tif (this.configurationService.config.env.production) {\r\n\t\t\t\t\t\tconst dev_api_host = this.configurationService.config.dev_api_host;\r\n\t\t\t\t\t\tconst prod_api_host = this.configurationService.config.prod_api_host;\r\n\t\t\t\t\t\treturn JSON.parse(\r\n\t\t\t\t\t\t\tJSON.stringify(response).replace(new RegExp(dev_api_host, \"g\"), prod_api_host)\r\n\t\t\t\t\t\t).Result;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn response.Result;\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.catch(err => {\r\n\t\t\t\t\treturn Observable.throw(err);\r\n\t\t\t\t})\r\n\t\t);\r\n\t}\r\n\tgetConfigByName(name: string): Observable<any> {\r\n\t\treturn this.http.get(`${this.configsEndpoint}/api/config/${name}`).map(response => response).catch(err => {\r\n\t\t\treturn Observable.throw(err);\r\n\t\t});\r\n\t}\r\n\teditConfig(body: EditConfigApiModel.Request): Observable<any> {\r\n\t\tvar model = new EditConfigApiModel.Request(body);\r\n\r\n\t\treturn this.http\r\n\t\t\t.put(`${this.configsEndpoint}/api/config/${model.Name}`, model.getRequestBody())\r\n\t\t\t.map(response => response)\r\n\t\t\t.catch(err => {\r\n\t\t\t\treturn Observable.throw(err);\r\n\t\t\t});\r\n\t}\r\n\r\n\tgetLayoutConfigs(): Observable<any> {\r\n\t\treturn this.http\r\n\t\t\t.get(`${this.configsEndpoint}/api/layout-config`)\r\n\t\t\t.map((response: any) => response)\r\n\t\t\t.catch(err => {\r\n\t\t\t\treturn Observable.throw(err);\r\n\t\t\t});\r\n\t}\r\n}\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { ConfigModel } from \"../../models\";\r\nimport { getConfigs, FeatureState } from \"../../reducers\";\r\n\r\n@Component({\r\n\tselector: \"configs\",\r\n\ttemplate: `<div fxFlexLayout=\"row\" fxLayoutWrap fxLayoutAlign=\"center center\">\r\n  <mat-card class=\"config-box\" *ngFor=\"let config of (configs | async)\" [fxFlex]=\"50\">\r\n      <h3>\r\n        <a [routerLink]=\"['edit' ,  config.Name]\">\r\n          <mat-icon aria-label=\"edit config\">edit</mat-icon>\r\n        </a>\r\n        {{config.Name}}\r\n      </h3>\r\n  </mat-card>\r\n</div>`,\r\n\tstyles: [`:host{width:100%}.config-box{margin:15px}`]\r\n})\r\nexport class ConfigsComponent {\r\n\tconfigs: Observable<ConfigModel<any>[]>;\r\n\tconstructor(private store: Store<FeatureState>) {\r\n\t\tthis.configs = this.store.select(getConfigs);\r\n\t}\r\n}\r\n","import { NgModule, Component, OnInit, Output, EventEmitter, Input, ViewChild, ViewContainerRef } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { FormGroup, FormBuilder, FormControl } from \"@angular/forms\";\r\n\r\nimport { EditConfigApiModel, PartialConfig } from \"../../models\";\r\nimport { ConfigService } from \"../../services/config.service\";\r\nimport { DynamicConfigComponentSelectorComponent } from \"../dynamic-config-component-selector\";\r\n\r\n@Component({\r\n\tselector: \"config-config-edit\",\r\n\ttemplate: `<form [formGroup]=\"formGroup\" (ngSubmit)=\"edit()\" fxLayout=\"column\">\r\n  <dynamic-config-component-selector #dynConfig (configChanged)=\"configChanged($event)\" [data]=\"partialConfigModel\"></dynamic-config-component-selector>\r\n  <button mat-fab  type=\"submit\" mat-raised-button color=\"primary\" (click)=\"edit\">\r\n    <mat-icon>done</mat-icon>\r\n  </button>\r\n  <!-- <button  type=\"button\" routerLink=\"/configs\" mat-raised-button>Ø¨Ø§Ø²Ú¯Ø´Øª</button> -->\r\n</form>`,\r\n\tstyles: [`:host{padding:25px}`]\r\n})\r\nexport class ConfigEditComponent implements OnInit {\r\n\tconfigInforamation: any;\r\n\tformGroup: FormGroup = EditConfigApiModel.Request.formGroup;\r\n\tpartialConfigModel: PartialConfig;\r\n\t@ViewChild(\"dynConfig\") dynConfig: DynamicConfigComponentSelectorComponent;\r\n\tconstructor(private configService: ConfigService, private formBuilder: FormBuilder, private route: ActivatedRoute) {\r\n\t\tthis.route.params.subscribe(params => {\r\n\t\t\tconst configName: string = params[\"name\"];\r\n\t\t\tthis.configService.getConfigByName(configName).subscribe(data => {\r\n\t\t\t\tthis.partialConfigModel = {\r\n\t\t\t\t\ttype: data.Result.Name,\r\n\t\t\t\t\tinputs: {\r\n\t\t\t\t\t\tconfigFormGroup: this.formGroup.controls.Config as FormGroup\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tthis.formGroup.patchValue({\r\n\t\t\t\t\t_id: data.Result._id,\r\n\t\t\t\t\tName: data.Result.Name\r\n\t\t\t\t});\r\n\t\t\t\tObject.keys(data.Result.Config).forEach(key => {\r\n\t\t\t\t\tthis.addControl(this.formGroup.controls.Config as FormGroup, key, data.Result.Config[key]);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\taddControl(formGroup: FormGroup, key: string, value: any) {\r\n\t\tif (value instanceof Array) {\r\n\t\t\tformGroup.addControl(key, this.formBuilder.array(value));\r\n\t\t} else if (value instanceof Object) {\r\n\t\t\tformGroup.addControl(key, this.formBuilder.group(value));\r\n\t\t} else {\r\n\t\t\tformGroup.addControl(key, new FormControl(value));\r\n\t\t}\r\n\t}\r\n\r\n\tngOnInit() {}\r\n\tconfigChanged(event: any) {\r\n\t\tconsole.log(\"-\");\r\n\t}\r\n\tedit() {\r\n\t\tthis.formGroup.controls.Config.patchValue(this.dynConfig.config);\r\n\t\tif (!this.formGroup.valid) return;\r\n\t\tthis.configService.editConfig(this.formGroup.value).subscribe(config => {});\r\n\t}\r\n}\r\n","import { NgModule, Component, OnInit, Output, EventEmitter, Input, Injector } from \"@angular/core\";\r\nimport { FormGroup, Validators, FormControl } from \"@angular/forms\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\n@Component({\r\n\tselector: \"config-app-config\",\r\n\ttemplate: `<div [formGroup]=\"formGroup\">\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"ÙØ§Ù Ù¾Ø±ÙÚÙ\" formControlName=\"AppTitle\">\r\n    </mat-form-field>\r\n</div>`\r\n})\r\nexport class ConfigAppConfigComponent {\r\n\tformGroup: FormGroup = new FormGroup({ AppTitle: new FormControl(\"\", [ Validators.required ]) });\r\n\t@Input()\r\n\tset configFormGroup(configFormGroup: FormGroup) {\r\n\t\tthis.formGroup.patchValue(configFormGroup.value);\r\n\t\tconfigFormGroup.valueChanges.subscribe(data => {\r\n\t\t\tthis.formGroup.patchValue(data);\r\n\t\t});\r\n\t}\r\n\t@Output() configChanged = new EventEmitter();\r\n\tconstructor(private injector: Injector) {\r\n\t\tthis.configFormGroup = this.injector.get(\"configFormGroup\");\r\n\t}\r\n}\r\n","import { NgModule, Component, OnInit, Output, EventEmitter, Input, Injector } from \"@angular/core\";\r\nimport { FormGroup, Validators, FormControl, FormArray } from \"@angular/forms\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\n\r\n@Component({\r\n\tselector: \"config-user-module-config\",\r\n\ttemplate: `<h2>Endpoints</h2>\r\n<div [formGroup]=\"formGroup.get('endpoints')\" fxLayout=\"column\">\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"change password\" formControlName=\"changePassword\">\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"edit profile\" formControlName=\"editProfile\">\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"get user info\" formControlName=\"getUserInfo\">\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"Who Am I\" formControlName=\"whoAmI\">\r\n        </mat-form-field>\r\n</div>\r\n<h2>Forms</h2>\r\n<div [formGroup]=\"formGroup.get('forms')\" fxLayout=\"column\">\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"profile edit\" formControlName=\"profile_edit\">\r\n    </mat-form-field>\r\n            <!-- <ngs-form-selector (select)=\"setFormId($event,'signIn')\"></ngs-form-selector> -->\r\n</div>\r\n\r\n\r\n<h2 fxFlex=\"100\">\r\n    Dashobard Links\r\n    <button mat-icon-button color=\"primary\" (click)=\"addMenu()\">\r\n        <mat-icon aria-label=\"icon-button icon\">add</mat-icon>\r\n    </button>\r\n</h2>\r\n<div fxFlex=\"100\" *ngFor=\"let item of $any(formGroup.get('dashboardLinks')).controls\">\r\n    <div [formGroup]=\"item\">\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"route\" formControlName=\"route\">\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"icon\" formControlName=\"icon\">\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"title\" formControlName=\"title\">\r\n        </mat-form-field>\r\n    </div>\r\n</div>`\r\n})\r\nexport class UserModuleConfigComponent {\r\n\tformGroup: FormGroup = new FormGroup({\r\n\t\tendpoints: new FormGroup({\r\n\t\t\tchangePassword: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\teditProfile: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\tgetUserInfo: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\twhoAmI: new FormControl(\"\", [ Validators.required ])\r\n\t\t}),\r\n\t\tforms: new FormGroup({\r\n\t\t\tprofile_edit: new FormControl(\"\", [ Validators.required ])\r\n\t\t}),\r\n\t\tdashboardLinks: new FormArray([])\r\n\t});\r\n\t_configFormGroup: FormGroup;\r\n\t@Input()\r\n\tset configFormGroup(configFormGroup: FormGroup) {\r\n\t\tthis._configFormGroup = configFormGroup;\r\n\t\t(configFormGroup.controls.dashboardLinks as FormArray).controls.forEach(control => {\r\n\t\t\t(this.formGroup.controls.dashboardLinks as FormArray).push(\r\n\t\t\t\tnew FormGroup({\r\n\t\t\t\t\troute: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\t\ticon: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\t\ttitle: new FormControl(\"\", [ Validators.required ])\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\tthis.formGroup.patchValue(configFormGroup.value);\r\n\t\tconfigFormGroup.valueChanges.subscribe(data => {\r\n\t\t\tthis.formGroup.patchValue(data);\r\n\t\t});\r\n\t}\r\n\tget configFormGroup() {\r\n\t\treturn this._configFormGroup;\r\n\t}\r\n\t@Output() configChanged = new EventEmitter();\r\n\tconstructor(private injector: Injector) {\r\n\t\tthis.configFormGroup = this.injector.get(\"configFormGroup\");\r\n\t}\r\n\taddMenu() {\r\n\t\tvar menuItem = new FormGroup({\r\n\t\t\troute: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\ticon: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\ttitle: new FormControl(\"\", [ Validators.required ])\r\n\t\t});\r\n\r\n\t\t(this.formGroup.get(\"dashboardLinks\") as FormArray).push(menuItem);\r\n\t\t(this.configFormGroup.get(\"dashboardLinks\") as FormArray).push(menuItem);\r\n\t}\r\n}\r\n","import { Component, Output, EventEmitter, Input, Injector } from \"@angular/core\";\r\nimport { FormGroup, Validators, FormControl, FormArray } from \"@angular/forms\";\r\nimport { Observable } from \"rxjs\";\r\nimport { map, filter } from \"rxjs/operators\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { FeatureState, getAppConfig } from \"../../reducers\";\r\n\r\n@Component({\r\n\ttemplate: `<div fxLayout=\"row wrap\" fxLayoutAlign=\"center\" fxLayoutGap=\"25px\">\r\n    <mat-card fxFlex=\"20\" fxFlexLayout=\"row\">\r\n        <div [formGroup]=\"formGroup\">\r\n            <mat-form-field>\r\n                <mat-select placeholder=\"layout mode\" formControlName=\"layoutMode\" >\r\n                    <mat-option *ngFor=\"let item of layoutModes\" [value]=\"item\">{{item}}</mat-option>\r\n                </mat-select> \r\n            </mat-form-field>\r\n            <mat-slide-toggle   formControlName=\"showLeftNavBar\">show left navbar</mat-slide-toggle>\r\n            <mat-form-field>\r\n                <mat-select placeholder=\"main side nav mode\" formControlName=\"mainSideNavMode\" >\r\n                    <mat-option *ngFor=\"let item of sideNavModes\" [value]=\"item\">{{item}}</mat-option>\r\n                </mat-select> \r\n            </mat-form-field>\r\n            <mat-slide-toggle formControlName=\"showMainSidenav\">show main side nav</mat-slide-toggle>\r\n            <mat-slide-toggle formControlName=\"stickyLeftNavBar\">sticky left navbar</mat-slide-toggle>\r\n            <mat-slide-toggle formControlName=\"showSecondSideNav\">show second side nav</mat-slide-toggle>\r\n            <mat-form-field>\r\n                <mat-select placeholder=\"second side nav mode\" formControlName=\"secondSideNavMode\" >\r\n                    <mat-option *ngFor=\"let item of sideNavModes\" [value]=\"item\">{{item}}</mat-option>\r\n                </mat-select> \r\n            </mat-form-field>\r\n        </div>\r\n    </mat-card>\r\n\r\n    <mat-card fxFlex fxLayout=\"column\">\r\n        <h2 fxFlex>\r\n            Menu Items\r\n            <button mat-icon-button color=\"primary\" (click)=\"addMenu()\">\r\n                <mat-icon aria-label=\"icon-button icon\">add</mat-icon>\r\n            </button>\r\n        </h2>\r\n        <div fxFlex=\"nogrow\" *ngFor=\"let item of $any(formGroup).get('menuItems').controls\">\r\n            <div [formGroup]=\"item\" fxLayout=\"row\" fxLayoutGap=\"25px\">\r\n                <button mat-icon-button>\r\n                    <mat-icon>delete</mat-icon>\r\n                </button>\r\n                <mat-form-field>\r\n                    <input type=\"text\" matInput placeholder=\"route\" formControlName=\"route\">\r\n                </mat-form-field>\r\n                <mat-form-field>\r\n                    <input type=\"text\" matInput placeholder=\"icon\" formControlName=\"icon\">\r\n                </mat-form-field>\r\n                <mat-form-field>\r\n                    <input type=\"text\" matInput placeholder=\"title\" formControlName=\"title\">\r\n                </mat-form-field>\r\n                <mat-form-field> \r\n                    <mat-select placeholder=\"roles\" formControlName=\"roles\" multiple>\r\n                        <mat-option *ngFor=\"let role of roleItems$ | async\" [value]=\"role\">{{role}}</mat-option>\r\n                    </mat-select> \r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n    </mat-card>\r\n</div>`\r\n})\r\nexport class LayoutModuleConfigComponent {\r\n\t@Output(\"configChanged\") configChanged = new EventEmitter();\r\n\t_configFormGroup: FormGroup;\r\n\t@Input()\r\n\tset configFormGroup(configFormGroup: FormGroup) {\r\n\t\tthis._configFormGroup = configFormGroup;\r\n\t\t(configFormGroup.controls.menuItems as FormArray).controls.forEach(control => {\r\n\t\t\t(this.formGroup.controls.menuItems as FormArray).push(\r\n\t\t\t\tnew FormGroup({\r\n\t\t\t\t\troute: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\t\ticon: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\t\t// roles: new FormArray(control.value.roles.map((i) => new FormControl(\"Admin\"))),\r\n\t\t\t\t\troles: new FormControl(),\r\n\t\t\t\t\ttitle: new FormControl(\"\", [ Validators.required ])\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\tthis.formGroup.patchValue(configFormGroup.value);\r\n\t\tconfigFormGroup.valueChanges.subscribe(data => this.formGroup.patchValue(data));\r\n\t}\r\n\tget configFormGroup() {\r\n\t\treturn this._configFormGroup;\r\n\t}\r\n\r\n\tsideNavModes: string[];\r\n\tlayoutModes: string[];\r\n\tformGroup = new FormGroup({\r\n\t\tlayoutMode: new FormControl(\"\", [ Validators.required ]),\r\n\t\tshowLeftNavBar: new FormControl(\"\", [ Validators.required ]),\r\n\t\tmainSideNavMode: new FormControl(\"\", [ Validators.required ]),\r\n\t\tshowMainSidenav: new FormControl(\"\", [ Validators.required ]),\r\n\t\tstickyLeftNavBar: new FormControl(\"\", [ Validators.required ]),\r\n\t\tshowSecondSideNav: new FormControl(\"\", [ Validators.required ]),\r\n\t\tsecondSideNavMode: new FormControl(\"\", [ Validators.required ]),\r\n\t\tmenuItems: new FormArray([])\r\n\t});\r\n\troleItems$: Observable<string[]>;\r\n\r\n\tconstructor(private injector: Injector, private store: Store<FeatureState>) {\r\n\t\tthis.sideNavModes = [ \"over\", \"push\", \"side\" ];\r\n\t\tthis.layoutModes = [ \"with-margin\", \"without-margin\", \"default\" ];\r\n\t\tthis.configFormGroup = this.injector.get(\"configFormGroup\");\r\n\t\tthis.roleItems$ = this.store\r\n\t\t\t.select(getAppConfig)\r\n\t\t\t.pipe(filter(config => config != null), map(appconfig => appconfig.Config.Roles));\r\n\t\t// this.configChanged.\r\n\t\t// this.formGroup.valueChanges.subscribe(value => {\r\n\t\t// \tdebugger;\r\n\t\t// \tthis.configChanged.emit(value);\r\n\t\t// });\r\n\t}\r\n\taddMenu() {\r\n\t\tvar menuItem = new FormGroup({\r\n\t\t\troute: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\ticon: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\troles: new FormControl(),\r\n\t\t\ttitle: new FormControl(\"\", [ Validators.required ])\r\n\t\t});\r\n\r\n\t\t(this.formGroup.get(\"menuItems\") as FormArray).push(menuItem);\r\n\t\t(this.configFormGroup.get(\"menuItems\") as FormArray).push(menuItem);\r\n\t}\r\n}\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\n@Component({\r\n\tselector: \"config-module-container\",\r\n\ttemplate: `<div fxLayoutAlign=\"\" fxflex=\"100\" fxLayout=\"column\">\r\n    <router-outlet></router-outlet>\r\n</div>\r\n`\r\n})\r\nexport class ConfigModuleContainerComponent implements OnInit {\r\n\tconstructor() {}\r\n\r\n\tngOnInit() {}\r\n}\r\n","import { NgModule, Component, OnInit, Output, EventEmitter, Input, Injector } from \"@angular/core\";\r\nimport { FormGroup, Validators, FormControl } from \"@angular/forms\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\n@Component({\r\n\tselector: \"config-authentication-module-config\",\r\n\ttemplate: `<h2>Endpoints</h2>\r\n<div [formGroup]=\"formGroup.controls.endpoints\" fxLayout=\"column\">\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"sign in\" formControlName=\"signIn\">\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"sign out\" formControlName=\"signOut\">\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"who am i\" formControlName=\"whoAmI\">\r\n    </mat-form-field>\r\n</div>\r\n<h2>Forms</h2>\r\n<div [formGroup]=\"formGroup.controls.forms\" fxLayout=\"column\">\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"SignIn Forms\" formControlName=\"signIn\">\r\n    </mat-form-field>\r\n            <!-- <ngs-form-selector (select)=\"setFormId($event,'signIn')\"></ngs-form-selector> -->\r\n</div>`\r\n})\r\nexport class AuthenticationModuleConfigComponent {\r\n\tformGroup: FormGroup = new FormGroup({\r\n\t\tendpoints: new FormGroup({\r\n\t\t\tsignIn: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\tsignOut: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\twhoAmI: new FormControl(\"\", [ Validators.required ])\r\n\t\t}),\r\n\t\tforms: new FormGroup({\r\n\t\t\tsignIn: new FormControl(\"\", [ Validators.required ])\r\n\t\t})\r\n\t});\r\n\t@Input()\r\n\tset configFormGroup(configFormGroup: FormGroup) {\r\n\t\tthis.formGroup.patchValue(configFormGroup.value);\r\n\t\tconfigFormGroup.valueChanges.subscribe(data => {\r\n\t\t\tthis.formGroup.patchValue(data);\r\n\t\t});\r\n\t}\r\n\t@Output() configChanged = new EventEmitter();\r\n\tconstructor(private injector: Injector) {\r\n\t\tthis.configFormGroup = this.injector.get(\"configFormGroup\");\r\n\t}\r\n\tsetFormId(formId: string, formName: string) {\r\n\t\tthis.formGroup.patchValue({ [formName]: formId });\r\n\t}\r\n}\r\n","import {\r\n\tComponent,\r\n\tOnInit,\r\n\tInput,\r\n\tAfterViewInit,\r\n\tComponentFactoryResolver,\r\n\tViewChild,\r\n\tViewContainerRef,\r\n\tReflectiveInjector,\r\n\tOnDestroy,\r\n\tOutput,\r\n\tEventEmitter\r\n} from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { PartialConfig } from \"../../models\";\r\nimport { AuthenticationModuleConfigComponent } from \"../../dumb-components/authentication-module-config/authentication-module-config.component\";\r\nimport { ConfigAppConfigComponent } from \"../../dumb-components/app-config/app-config.component\";\r\nimport { UserModuleConfigComponent } from \"../../dumb-components/user-module-config/user-module-config.component\";\r\nimport { LayoutModuleConfigComponent } from \"../../dumb-components/layout-config/layout-module-config.component\";\r\n\r\n@Component({\r\n\tselector: \"dynamic-config-component-selector\",\r\n\ttemplate: `<div #dynamicComponentContainer></div>`,\r\n\tstyles: [`:host{width:100%}.diagram-box{margin:15px}.diagram-box .c3{direction:ltr}`],\r\n\tentryComponents: [\r\n\t\tAuthenticationModuleConfigComponent,\r\n\t\tConfigAppConfigComponent,\r\n\t\tUserModuleConfigComponent,\r\n\t\tLayoutModuleConfigComponent\r\n\t]\r\n})\r\nexport class DynamicConfigComponentSelectorComponent implements AfterViewInit {\r\n\ttypeMapToDiagram: any = {\r\n\t\tauthentication_module_config: AuthenticationModuleConfigComponent,\r\n\t\tapp_config: ConfigAppConfigComponent,\r\n\t\tuser_module_config: UserModuleConfigComponent,\r\n\t\tlayout_config: LayoutModuleConfigComponent\r\n\t};\r\n\t@ViewChild(\"dynamicComponentContainer\", { read: ViewContainerRef })\r\n\tdynamicComponentContainer: ViewContainerRef;\r\n\t@Output() configChanged = new EventEmitter();\r\n\tget config() {\r\n\t\tif (!this.currentComponent) return {};\r\n\t\treturn this.currentComponent.instance.formGroup.value;\r\n\t}\r\n\tcurrentComponent: any = null;\r\n\t@Input()\r\n\tset data(data: PartialConfig) {\r\n\t\tif (!data || Object.keys(data).length == 0) return;\r\n\t\tif (!(data.type in this.typeMapToDiagram)) {\r\n\t\t\tif (this.currentComponent) this.currentComponent.destroy();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet _component: any = this.typeMapToDiagram[data.type];\r\n\t\tlet inputProviders = Object.keys(data.inputs).map(inputName => {\r\n\t\t\treturn { provide: inputName, useValue: (data.inputs as any)[inputName] };\r\n\t\t});\r\n\t\tlet resolvedInputs = ReflectiveInjector.resolve(inputProviders);\r\n\r\n\t\tlet injector = ReflectiveInjector.fromResolvedProviders(\r\n\t\t\tresolvedInputs,\r\n\t\t\tthis.dynamicComponentContainer.parentInjector\r\n\t\t);\r\n\t\tlet factory = this.resolver.resolveComponentFactory(_component);\r\n\r\n\t\tlet component = factory.create(injector);\r\n\t\t// (<any>component.instance).configChanged.add.subscribe((data: any) => {\r\n\t\t// \tthis.configChanged.emit(data);\r\n\t\t// });\r\n\t\tthis.dynamicComponentContainer.insert(component.hostView);\r\n\r\n\t\tif (this.currentComponent) {\r\n\t\t\tthis.currentComponent.destroy();\r\n\t\t}\r\n\r\n\t\tthis.currentComponent = component;\r\n\t}\r\n\tconstructor(private resolver: ComponentFactoryResolver) {}\r\n\tngAfterViewInit() {}\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { of } from \"rxjs/observable/of\";\r\n\r\nimport { ConfigActionTypes, ConfigLoadedSucceedAction, ConfigLoadedFailedAction } from \"../actions\";\r\nimport { ConfigService } from \"../services/config.service\";\r\nimport { GetConfigsApiModel } from \"../models\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\n\r\n@Injectable()\r\nexport class LoadConfigEffects {\r\n\tconstructor(private actions$: Actions<any>, private configService: ConfigService) {}\r\n\r\n\t@Effect()\r\n\tgetConfigs$ = this.actions$\r\n\t\t.ofType(ConfigActionTypes.GET_CONFIGS)\r\n\t\t.pipe(\r\n\t\t\tmap(action => action.payload),\r\n\t\t\tswitchMap((data: GetConfigsApiModel.Request) => this.configService.getConfigs()),\r\n\t\t\tmap(configs => new ConfigLoadedSucceedAction(configs)),\r\n\t\t\tcatchError(() => Observable.of(new ConfigLoadedFailedAction()))\r\n\t\t);\r\n}\r\n","import { ModuleWithProviders } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\n\r\nimport { ConfigModuleContainerComponent } from \"./smart-components/config-module-container/config-module-container.component\";\r\nimport { ConfigsComponent } from \"./smart-components/configs/configs.component\";\r\nimport { ConfigEditComponent } from \"./smart-components/config-edit/config-edit.component\";\r\n\r\nconst routes: Routes = [\r\n\t{\r\n\t\tpath: \"configs\",\r\n\t\tcomponent: ConfigModuleContainerComponent,\r\n\t\tchildren: [\r\n\t\t\t{\r\n\t\t\t\tpath: \"\",\r\n\t\t\t\tcomponent: ConfigsComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: \"edit/:name\",\r\n\t\t\t\tcomponent: ConfigEditComponent\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n];\r\n\r\nexport const RoutingModule: ModuleWithProviders = RouterModule.forChild(routes);\r\n","import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { StoreModule } from \"@ngrx/store\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport {\r\n\tMatIconModule,\r\n\tMatButtonModule,\r\n\tMatCardModule,\r\n\tMatSnackBarModule,\r\n\tMatSidenavModule,\r\n\tMatExpansionModule,\r\n\tMatSelectModule,\r\n\tMatFormFieldModule,\r\n\tMatListModule,\r\n\tMatMenuModule,\r\n\tMatRadioModule,\r\n\tMatInputModule,\r\n\tMatToolbarModule,\r\n\tMatDatepickerModule,\r\n\tMatProgressBarModule,\r\n\tMatSlideToggleModule\r\n} from \"@angular/material\";\r\nimport { EffectsModule } from \"@ngrx/effects\";\r\n\r\nimport { ConfigModuleConfig, MODULE_CONFIG_TOKEN } from \"./config.config\";\r\nimport { ConfigsComponent } from \"./smart-components/configs/configs.component\";\r\nimport { ConfigEditComponent } from \"./smart-components/config-edit/config-edit.component\";\r\nimport { ConfigAppConfigComponent } from \"./dumb-components/app-config/app-config.component\";\r\nimport { UserModuleConfigComponent } from \"./dumb-components/user-module-config/user-module-config.component\";\r\nimport { LayoutModuleConfigComponent } from \"./dumb-components/layout-config/layout-module-config.component\";\r\nimport { ConfigModuleContainerComponent } from \"./smart-components/config-module-container/config-module-container.component\";\r\nimport { AuthenticationModuleConfigComponent } from \"./dumb-components/authentication-module-config/authentication-module-config.component\";\r\nimport { DynamicConfigComponentSelectorComponent } from \"./smart-components/dynamic-config-component-selector/dynamic-config-component-selector.component\";\r\nimport { LoadConfigEffects } from \"./effects/load-config.effects\";\r\nimport { ConfigReducers } from \"./reducers/index\";\r\nimport { RoutingModule } from \"./config.routing-module\";\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n\t\tRouterModule,\r\n\t\tFormsModule,\r\n\t\tReactiveFormsModule,\r\n\t\tHttpClientModule,\r\n\t\tFlexLayoutModule,\r\n\t\tMatIconModule,\r\n\t\tMatButtonModule,\r\n\t\tMatCardModule,\r\n\t\tMatSnackBarModule,\r\n\t\tMatSidenavModule,\r\n\t\tMatExpansionModule,\r\n\t\tMatSelectModule,\r\n\t\tMatFormFieldModule,\r\n\t\tMatListModule,\r\n\t\tMatMenuModule,\r\n\t\tMatRadioModule,\r\n\t\tMatInputModule,\r\n\t\tMatSlideToggleModule,\r\n\t\tMatToolbarModule,\r\n\t\tMatDatepickerModule,\r\n\t\tMatProgressBarModule,\r\n\t\tBrowserAnimationsModule\r\n\t],\r\n\tdeclarations: [\r\n\t\tConfigsComponent,\r\n\t\tConfigEditComponent,\r\n\t\tConfigAppConfigComponent,\r\n\t\tUserModuleConfigComponent,\r\n\t\tLayoutModuleConfigComponent,\r\n\t\tConfigModuleContainerComponent,\r\n\t\tAuthenticationModuleConfigComponent,\r\n\t\tDynamicConfigComponentSelectorComponent\r\n\t],\r\n\tproviders: []\r\n})\r\nexport class NgsConfigModule {\r\n\tstatic forRoot(config: ConfigModuleConfig): ModuleWithProviders {\r\n\t\treturn {\r\n\t\t\tngModule: RootNgsConfigModule,\r\n\t\t\tproviders: [ { provide: MODULE_CONFIG_TOKEN, useValue: config } ]\r\n\t\t};\r\n\t}\r\n}\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tNgsConfigModule,\r\n\t\tStoreModule.forFeature(\"config\", ConfigReducers),\r\n\t\tEffectsModule.forFeature([ LoadConfigEffects ]),\r\n\t\tRoutingModule\r\n\t],\r\n\texports: [ NgsConfigModule ]\r\n})\r\nexport class RootNgsConfigModule {}\r\n"]}