{"version":3,"sources":["ng://@soushians/config/lib/models/config.model.ts","ng://@soushians/config/lib/models/get-configs-api.model.ts","ng://@soushians/config/lib/models/edit-config-api.model.ts","ng://@soushians/config/lib/config.config.ts","null","ng://@soushians/config/lib/actions/config.action.ts","ng://@soushians/config/lib/reducers/config-list.reducer.ts","ng://@soushians/config/lib/reducers/index.ts","ng://@soushians/config/lib/services/configuration.service.ts","ng://@soushians/config/lib/services/config.service.ts","ng://@soushians/config/lib/smart-components/configs/configs.component.ts","ng://@soushians/config/lib/smart-components/config-edit/config-edit.component.ts","ng://@soushians/config/lib/dumb-components/app-config/app-config.component.ts","ng://@soushians/config/lib/dumb-components/user-module-config/user-module-config.component.ts","ng://@soushians/config/lib/dumb-components/layout-config/layout-module-config.component.ts","ng://@soushians/config/lib/smart-components/config-module-container/config-module-container.component.ts","ng://@soushians/config/lib/dumb-components/authentication-module-config/authentication-module-config.component.ts","ng://@soushians/config/lib/smart-components/dynamic-config-component-selector/dynamic-config-component-selector.component.ts","ng://@soushians/config/lib/effects/load-config.effects.ts","ng://@soushians/config/lib/config.routing-module.ts","ng://@soushians/config/lib/config.module.ts"],"names":["ConfigModel","GetConfigsApiModel","Request","initValue","_this","this","Object","keys","forEach","key","prototype","getRequestBody","Response","EditConfigApiModel","Name","Config","defineProperty","FormGroup","FormControl","Validators","required","MODULE_DEFAULT_CONFIG","dev_api_host","prod_api_host","env","production","MODULE_CONFIG_TOKEN","InjectionToken","__assign","assign","t","s","i","n","arguments","length","p","hasOwnProperty","call","GetConfigAction","ConfigActionTypes","ConfigLoadedSucceedAction","payload","ConfigLoadedFailedAction","initialState","data","ConfigReducers","list","state","action","type","config.ConfigActionTypes","map","config","_id","selectConfigState","createFeatureSelector","getConfigListState","createSelector","getConfigs","getAppConfig","find","getAuthenticationModuleConfig","getUserModuleConfig","getlayoutModuleConfig","getConfigModuleConfig","getFormModuleConfig","getSocketModuleConfig","ConfigurationService","configFile","store","BehaviorSubject","_config","config$","next","select","subscribe","configConfig","Injectable","args","providedIn","Inject","Store","ConfigService","http","configurationService","configsEndpoint","setTimeout","dispatch","get","take","response","JSON","parse","stringify","replace","RegExp","Result","catch","err","Observable","throw","getConfigByName","name","editConfig","body","model","put","getLayoutConfigs","HttpClient","ConfigsComponent","configs","Component","selector","template","styles","ConfigEditComponent","configService","formBuilder","route","formGroup","params","configName","partialConfigModel","inputs","configFormGroup","controls","patchValue","addControl","value","Array","array","group","ngOnInit","configChanged","event","edit","valid","FormBuilder","ActivatedRoute","ConfigAppConfigComponent","injector","AppTitle","EventEmitter","valueChanges","Injector","Input","Output","UserModuleConfigComponent","endpoints","changePassword","editProfile","getUserInfo","whoAmI","forms","profile_edit","dashboardLinks","FormArray","_configFormGroup","control","push","icon","title","addMenu","menuItem","LayoutModuleConfigComponent","layoutMode","showLeftNavBar","mainSideNavMode","showMainSidenav","stickyLeftNavBar","showSecondSideNav","secondSideNavMode","menuItems","sideNavModes","layoutModes","roles","ConfigModuleContainerComponent","AuthenticationModuleConfigComponent","signIn","signOut","setFormId","formId","formName","_a","DynamicConfigComponentSelectorComponent","resolver","authentication_module_config","app_config","user_module_config","layout_config","typeMapToDiagram","_component","inputProviders","inputName","provide","useValue","resolvedInputs","ReflectiveInjector","resolve","fromResolvedProviders","dynamicComponentContainer","parentInjector","component","resolveComponentFactory","create","emit","insert","hostView","currentComponent","destroy","ngAfterViewInit","entryComponents","ComponentFactoryResolver","ViewChild","read","ViewContainerRef","LoadConfigEffects","actions$","ofType","pipe","switchMap","catchError","of","Actions","decorators","target","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","Effect","metadataKey","metadataValue","metadata","routes","path","children","RoutingModule","RouterModule","forChild","NgsConfigModule","forRoot","ngModule","RootNgsConfigModule","providers","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","HttpClientModule","FlexLayoutModule","MatIconModule","MatButtonModule","MatCardModule","MatSnackBarModule","MatSidenavModule","MatExpansionModule","MatSelectModule","MatFormFieldModule","MatListModule","MatMenuModule","MatRadioModule","MatInputModule","MatSlideToggleModule","MatToolbarModule","MatDatepickerModule","MatProgressBarModule","BrowserAnimationsModule","declarations","StoreModule","forFeature","EffectsModule","exports"],"mappings":"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","sourcesContent":["export class ConfigModel<T> {\r\n\t_id: string;\r\n\tName: string;\r\n\tConfig: T;\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { ConfigModel } from \"./config.model\";\r\n\r\nexport module GetConfigsApiModel {\r\n\r\n    export class Request implements HttpRequestBaseModel<Request>{\r\n\r\n        constructor(initValue: GetConfigsApiModel.Request = {} as GetConfigsApiModel.Request) {\r\n            Object.keys(initValue).forEach(key => (this as any)[key] = (initValue as any)[key]);\r\n        }\r\n\r\n        getRequestBody() {\r\n            return {\r\n            }\r\n        }\r\n    }\r\n\r\n    export class Response {\r\n        Result: ConfigModel<any>[];\r\n        constructor() {\r\n\r\n        }\r\n    }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { ConfigModel } from \"../models\";\r\n\r\nexport namespace EditConfigApiModel {\r\n\texport class Request implements HttpRequestBaseModel<Request> {\r\n\t\tName: string;\r\n\t\tConfig: {};\r\n\t\tconstructor(initValue = {} as EditConfigApiModel.Request) {\r\n\t\t\tObject.keys(initValue).forEach(key => ((this as any)[key] = (initValue as any)[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {\r\n\t\t\t\tName: this.Name,\r\n\t\t\t\tConfig: this.Config\r\n\t\t\t};\r\n\t\t}\r\n\t\tstatic get formGroup() {\r\n\t\t\treturn new FormGroup({\r\n\t\t\t\tName: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tConfig: new FormGroup({})\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: ConfigModel<any>;\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport interface ConfigModuleConfig {\r\n\tdev_api_host?: string;\r\n\tprod_api_host?: string;\r\n\tenv?: {\r\n\t\tproduction: boolean;\r\n\t};\r\n}\r\n\r\nexport const MODULE_DEFAULT_CONFIG: ConfigModuleConfig = {\r\n\tdev_api_host: 'http://localhost:3000',\r\n\tprod_api_host: 'http://5.196.149.107:3000',\r\n\tenv: {\r\n\t\tproduction: false\r\n\t}\r\n};\r\n\r\nexport const MODULE_CONFIG_TOKEN = new InjectionToken<ConfigModuleConfig>('UserModuleConfig');\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\nimport { ConfigModel, GetConfigsApiModel } from \"../models\";\r\n\r\nexport enum ConfigActionTypes {\r\n\tGET_CONFIGS = \"[CONFIG] get config\",\r\n\tCONFIG_LOADED_SUCCEED = \"[CONFIG] load config succeed\",\r\n\tUPDATE_CONFIG = \"[CONFIG] update config\",\r\n\tCONFIG_LOADED_FAILED = \"[CONFIG] load config failed\"\r\n}\r\n\r\nexport class GetConfigAction implements Action {\r\n\treadonly type = ConfigActionTypes.GET_CONFIGS;\r\n}\r\n\r\nexport class ConfigLoadedSucceedAction implements Action {\r\n\treadonly type = ConfigActionTypes.CONFIG_LOADED_SUCCEED;\r\n\r\n\tconstructor(public payload: ConfigModel<any>[]) {}\r\n}\r\nexport class UpdateConfigAction implements Action {\r\n\treadonly type = ConfigActionTypes.UPDATE_CONFIG;\r\n\tconstructor(public payload: ConfigModel<any>) {}\r\n}\r\n\r\nexport class ConfigLoadedFailedAction implements Action {\r\n\treadonly type = ConfigActionTypes.CONFIG_LOADED_FAILED;\r\n}\r\nexport type Actions = GetConfigAction | ConfigLoadedSucceedAction | ConfigLoadedFailedAction | UpdateConfigAction;\r\n","import * as config from \"../actions/config.action\";\r\nimport { ConfigModel, LayoutConfigModel } from \"../models\";\r\n\r\nexport interface State {\r\n\tdata: any[];\r\n}\r\n\r\nconst initialState: State = {\r\n\tdata: []\r\n};\r\n\r\nexport function Reducer(state = initialState, action: config.Actions): State {\r\n\tswitch (action.type) {\r\n\t\tcase config.ConfigActionTypes.CONFIG_LOADED_SUCCEED:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: action.payload\r\n\t\t\t};\r\n\t\tcase config.ConfigActionTypes.UPDATE_CONFIG:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: state.data.map(config => {\r\n\t\t\t\t\tif (config._id == action.payload._id) config.Config = action.payload.Config;\r\n\t\t\t\t\treturn config;\r\n\t\t\t\t})\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport const getConfigs = (state: State) => state.data;\r\nexport const getAppConfig = (state: State) => state.data.find(config => config.Name == \"app_config\");\r\nexport const getAuthenticationModuleConfig = (state: State) =>\r\n\tstate.data.find(config => config.Name == \"authentication_module_config\");\r\nexport const getUserModuleConfig = (state: State) => state.data.find(config => config.Name == \"user_module_config\");\r\nexport const getlayoutModuleConfig = (state: State) => state.data.find(config => config.Name == \"layout_config\") as any;\r\nexport const getConfigModuleConfig = (state: State) =>\r\n\tstate.data.find(config => config.Name == \"config_module_config\") as any;\r\nexport const getFormModuleConfig = (state: State) =>\r\n\tstate.data.find(config => config.Name == \"form_module_config\") as any;\r\nexport const getSocketModuleConfig = (state: State) =>\r\n\tstate.data.find(config => config.Name == \"socket_module_config\") as any;\r\n","import { createSelector, createFeatureSelector, MemoizedSelector } from \"@ngrx/store\";\r\n\r\nimport * as configList from \"./config-list.reducer\";\r\nimport { ConfigLoadedFailedAction, ConfigLoadedSucceedAction } from \"../actions\";\r\nexport interface ConfigState {\r\n\tlist: configList.State;\r\n}\r\nConfigLoadedFailedAction;\r\nexport const ConfigReducers = {\r\n\tlist: configList.Reducer\r\n};\r\n\r\nexport interface FeatureState {\r\n\t\"configs\": ConfigState;\r\n}\r\n\r\n//#region selectors\r\n\r\nexport const selectConfigState = createFeatureSelector<ConfigState>(\"config\");\r\n\r\n//#endregion\r\n\r\nexport const getConfigListState = createSelector(selectConfigState, (state: ConfigState) => state.list);\r\nexport const getConfigs = createSelector(getConfigListState, configList.getConfigs);\r\nexport const getAppConfig = createSelector(getConfigListState, configList.getAppConfig);\r\nexport const getAuthenticationModuleConfig = createSelector(\r\n\tgetConfigListState,\r\n\tconfigList.getAuthenticationModuleConfig\r\n);\r\nexport const getUserModuleConfig = createSelector(getConfigListState, configList.getUserModuleConfig);\r\nexport const getlayoutModuleConfig = createSelector(getConfigListState, configList.getlayoutModuleConfig);\r\nexport const getConfigModuleConfig = createSelector(getConfigListState, configList.getConfigModuleConfig);\r\nexport const getFormModuleConfig = createSelector(getConfigListState, configList.getFormModuleConfig);\r\nexport const getSocketModuleConfig = createSelector(getConfigListState, configList.getSocketModuleConfig);\r\n","import { Injectable, Inject } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { ConfigModuleConfig, MODULE_CONFIG_TOKEN, MODULE_DEFAULT_CONFIG } from \"../config.config\";\r\nimport { getConfigModuleConfig } from \"../reducers\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class ConfigurationService {\r\n\tprivate _config: ConfigModuleConfig;\r\n\tget config() {\r\n\t\treturn this._config;\r\n\t}\r\n\tconfig$ = new BehaviorSubject(this._config);\r\n\r\n\tconstructor(@Inject(MODULE_CONFIG_TOKEN) configFile: ConfigModuleConfig, private store: Store<any>) {\r\n\t\tthis._config = Object.assign({}, MODULE_DEFAULT_CONFIG, configFile);\r\n\t\tthis.config$.next(this._config);\r\n\t\tthis.store.select(getConfigModuleConfig).subscribe(configConfig => {\r\n\t\t\tif (!configConfig) return;\r\n\t\t\tthis._config = Object.assign({}, this._config, configConfig.Config);\r\n\t\t\tthis.config$.next(this._config);\r\n\t\t});\r\n\t}\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs/Rx\";\r\nimport { ConfigState } from \"../reducers\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { EditConfigApiModel, GetConfigsApiModel, ConfigModel, LayoutConfigModel } from \"../models\";\r\n\r\nimport { GetConfigAction } from \"../actions\";\r\nimport { ConfigurationService } from \"./configuration.service\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class ConfigService {\r\n\tresponseCache: any;\r\n\tconfigsEndpoint: string;\r\n\r\n\tconstructor(\r\n\t\tprivate http: HttpClient,\r\n\t\tprivate store: Store<ConfigState>,\r\n\t\tprivate configurationService: ConfigurationService\r\n\t) {\r\n\t\tthis.configsEndpoint = this.configurationService.config.env.production\r\n\t\t\t? this.configurationService.config.prod_api_host\r\n\t\t\t: this.configurationService.config.dev_api_host;\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.store.dispatch(new GetConfigAction());\r\n\t\t}, 999);\r\n\t}\r\n\r\n\tgetConfigs(): Observable<ConfigModel<any>[]> {\r\n\t\treturn (\r\n\t\t\tthis.http\r\n\t\t\t\t.get(`${this.configsEndpoint}/api/config`)\r\n\t\t\t\t// .filter(() => this.configurationService.config.dev_api_host != undefined)\r\n\t\t\t\t.take(1)\r\n\t\t\t\t.map((response: GetConfigsApiModel.Response) => {\r\n\t\t\t\t\tif (this.configurationService.config.env.production) {\r\n\t\t\t\t\t\tconst dev_api_host = this.configurationService.config.dev_api_host;\r\n\t\t\t\t\t\tconst prod_api_host = this.configurationService.config.prod_api_host;\r\n\t\t\t\t\t\treturn JSON.parse(\r\n\t\t\t\t\t\t\tJSON.stringify(response).replace(new RegExp(dev_api_host, \"g\"), prod_api_host)\r\n\t\t\t\t\t\t).Result;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn response.Result;\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.catch(err => {\r\n\t\t\t\t\treturn Observable.throw(err);\r\n\t\t\t\t})\r\n\t\t);\r\n\t}\r\n\tgetConfigByName(name: string): Observable<any> {\r\n\t\treturn this.http.get(`${this.configsEndpoint}/api/config/${name}`).map(response => response).catch(err => {\r\n\t\t\treturn Observable.throw(err);\r\n\t\t});\r\n\t}\r\n\teditConfig(body: EditConfigApiModel.Request): Observable<any> {\r\n\t\tvar model = new EditConfigApiModel.Request(body);\r\n\r\n\t\treturn this.http\r\n\t\t\t.put(`${this.configsEndpoint}/api/config/${model.Name}`, model.getRequestBody())\r\n\t\t\t.map(response => response)\r\n\t\t\t.catch(err => {\r\n\t\t\t\treturn Observable.throw(err);\r\n\t\t\t});\r\n\t}\r\n\r\n\tgetLayoutConfigs(): Observable<LayoutConfigModel> {\r\n\t\treturn this.http\r\n\t\t\t.get(`${this.configsEndpoint}/api/layout-config`)\r\n\t\t\t.map((response: LayoutConfigModel) => response)\r\n\t\t\t.catch(err => {\r\n\t\t\t\treturn Observable.throw(err);\r\n\t\t\t});\r\n\t}\r\n}\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { ConfigModel } from \"../../models\";\r\nimport { getConfigs, FeatureState } from \"../../reducers\";\r\n\r\n@Component({\r\n\tselector: \"configs\",\r\n\ttemplate: `<div fxFlexLayout=\"row\" fxLayoutWrap fxLayoutAlign=\"center center\">\r\n  <mat-card class=\"config-box\" *ngFor=\"let config of (configs | async)\" [fxFlex]=\"50\">\r\n      <h3>\r\n        <a [routerLink]=\"['edit' ,  config.Name]\">\r\n          <mat-icon aria-label=\"edit config\">edit</mat-icon>\r\n        </a>\r\n        {{config.Name}}\r\n      </h3>\r\n  </mat-card>\r\n</div>`,\r\n\tstyles: [`:host{width:100%}.config-box{margin:15px}`]\r\n})\r\nexport class ConfigsComponent {\r\n\tconfigs: Observable<ConfigModel<any>[]>;\r\n\tconstructor(private store: Store<FeatureState>) {\r\n\t\tthis.configs = this.store.select(getConfigs);\r\n\t}\r\n}\r\n","import { NgModule, Component, OnInit, Output, EventEmitter, Input, ViewChild, ViewContainerRef } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { FormGroup, FormBuilder, FormControl } from \"@angular/forms\";\r\n\r\nimport { EditConfigApiModel, PartialConfig } from \"../../models\";\r\nimport { ConfigService } from \"../../services/config.service\";\r\n\r\n@Component({\r\n\tselector: \"config-config-edit\",\r\n\ttemplate: `<div >\r\n  <form [formGroup]=\"formGroup\" (ngSubmit)=\"edit()\" fxLayout=\"column\">\r\n    <mat-card>\r\n      <mat-card-content>\r\n          <dynamic-config-component-selector (configChanged)=\"configChanged($event)\" [data]=\"partialConfigModel\"></dynamic-config-component-selector>\r\n      </mat-card-content>\r\n      <mat-card-actions fxLayoutAlign=\"center center\">\r\n        <button fxFlex=\"nogrow\" type=\"submit\" mat-raised-button color=\"primary\" (click)=\"edit\">ÙÛØ±Ø§ÛØ´</button>\r\n        <button fxFlex=\"nogrow\" type=\"button\" routerLink=\"/configs\" mat-raised-button>Ø¨Ø§Ø²Ú¯Ø´Øª</button>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n  </form>\r\n</div>`\r\n})\r\nexport class ConfigEditComponent implements OnInit {\r\n\tconfigInforamation: any;\r\n\tformGroup: FormGroup = EditConfigApiModel.Request.formGroup;\r\n\tpartialConfigModel: PartialConfig;\r\n\r\n\tconstructor(private configService: ConfigService, private formBuilder: FormBuilder, private route: ActivatedRoute) {\r\n\t\tthis.route.params.subscribe(params => {\r\n\t\t\tconst configName: string = params[\"name\"];\r\n\t\t\tthis.configService.getConfigByName(configName).subscribe(data => {\r\n\t\t\t\tthis.partialConfigModel = {\r\n\t\t\t\t\ttype: data.Result.Name,\r\n\t\t\t\t\tinputs: {\r\n\t\t\t\t\t\tconfigFormGroup: this.formGroup.controls.Config as FormGroup\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tthis.formGroup.patchValue({\r\n\t\t\t\t\t_id: data.Result._id,\r\n\t\t\t\t\tName: data.Result.Name\r\n\t\t\t\t});\r\n\t\t\t\tObject.keys(data.Result.Config).forEach(key => {\r\n\t\t\t\t\tthis.addControl(this.formGroup.controls.Config as FormGroup, key, data.Result.Config[key]);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\taddControl(formGroup: FormGroup, key: string, value: any) {\r\n\t\tif (value instanceof Array) {\r\n\t\t\tformGroup.addControl(key, this.formBuilder.array(value));\r\n\t\t} else if (value instanceof Object) {\r\n\t\t\tformGroup.addControl(key, this.formBuilder.group(value));\r\n\t\t} else {\r\n\t\t\tformGroup.addControl(key, new FormControl(value));\r\n\t\t}\r\n\t}\r\n\r\n\tngOnInit() {}\r\n\tconfigChanged(event: any) {\r\n\t\tthis.formGroup.controls.Config.patchValue(event);\r\n\t}\r\n\tedit() {\r\n\t\tif (!this.formGroup.valid) return;\r\n\t\tthis.configService.editConfig(this.formGroup.value).subscribe(config => {});\r\n\t}\r\n}\r\n","import { NgModule, Component, OnInit, Output, EventEmitter, Input, Injector } from \"@angular/core\";\r\nimport { FormGroup, Validators, FormControl } from \"@angular/forms\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\n@Component({\r\n\tselector: \"config-app-config\",\r\n\ttemplate: `<div [formGroup]=\"formGroup\">\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"ÙØ§Ù Ù¾Ø±ÙÚÙ\" formControlName=\"AppTitle\">\r\n    </mat-form-field>\r\n</div>`\r\n})\r\nexport class ConfigAppConfigComponent {\r\n\tformGroup: FormGroup = new FormGroup({ AppTitle: new FormControl(\"\", [ Validators.required ]) });\r\n\t@Input()\r\n\tset configFormGroup(configFormGroup: FormGroup) {\r\n\t\tthis.formGroup.patchValue(configFormGroup.value);\r\n\t\tconfigFormGroup.valueChanges.subscribe(data => {\r\n\t\t\tthis.formGroup.patchValue(data);\r\n\t\t});\r\n\t}\r\n\t@Output() configChanged = new EventEmitter();\r\n\tconstructor(private injector: Injector) {\r\n\t\tthis.configFormGroup = this.injector.get(\"configFormGroup\");\r\n\t}\r\n}\r\n","import { NgModule, Component, OnInit, Output, EventEmitter, Input, Injector } from \"@angular/core\";\r\nimport { FormGroup, Validators, FormControl, FormArray } from \"@angular/forms\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\n\r\n@Component({\r\n\tselector: \"config-user-module-config\",\r\n\ttemplate: `<h2>Endpoints</h2>\r\n<div [formGroup]=\"formGroup.get('endpoints')\" fxLayout=\"column\">\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"change password\" formControlName=\"changePassword\">\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"edit profile\" formControlName=\"editProfile\">\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"get user info\" formControlName=\"getUserInfo\">\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"Who Am I\" formControlName=\"whoAmI\">\r\n        </mat-form-field>\r\n</div>\r\n<h2>Forms</h2>\r\n<div [formGroup]=\"formGroup.get('forms')\" fxLayout=\"column\">\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"profile edit\" formControlName=\"profile_edit\">\r\n    </mat-form-field>\r\n            <!-- <ngs-form-selector (select)=\"setFormId($event,'signIn')\"></ngs-form-selector> -->\r\n</div>\r\n\r\n\r\n<h2 fxFlex=\"100\">\r\n    Dashobard Links\r\n    <button mat-icon-button color=\"primary\" (click)=\"addMenu()\">\r\n        <mat-icon aria-label=\"icon-button icon\">add</mat-icon>\r\n    </button>\r\n</h2>\r\n<div fxFlex=\"100\" *ngFor=\"let item of $any(formGroup.get('dashboardLinks')).controls\">\r\n    <div [formGroup]=\"item\">\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"route\" formControlName=\"route\">\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"icon\" formControlName=\"icon\">\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"title\" formControlName=\"title\">\r\n        </mat-form-field>\r\n    </div>\r\n</div>`\r\n})\r\nexport class UserModuleConfigComponent {\r\n\tformGroup: FormGroup = new FormGroup({\r\n\t\tendpoints: new FormGroup({\r\n\t\t\tchangePassword: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\teditProfile: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\tgetUserInfo: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\twhoAmI: new FormControl(\"\", [ Validators.required ])\r\n\t\t}),\r\n\t\tforms: new FormGroup({\r\n\t\t\tprofile_edit: new FormControl(\"\", [ Validators.required ])\r\n\t\t}),\r\n\t\tdashboardLinks: new FormArray([])\r\n\t});\r\n\t_configFormGroup: FormGroup;\r\n\t@Input()\r\n\tset configFormGroup(configFormGroup: FormGroup) {\r\n\t\tthis._configFormGroup = configFormGroup;\r\n\t\t(configFormGroup.controls.dashboardLinks as FormArray).controls.forEach(control => {\r\n\t\t\t(this.formGroup.controls.dashboardLinks as FormArray).push(\r\n\t\t\t\tnew FormGroup({\r\n\t\t\t\t\troute: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\t\ticon: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\t\ttitle: new FormControl(\"\", [ Validators.required ])\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\tthis.formGroup.patchValue(configFormGroup.value);\r\n\t\tconfigFormGroup.valueChanges.subscribe(data => {\r\n\t\t\tthis.formGroup.patchValue(data);\r\n\t\t});\r\n\t}\r\n\tget configFormGroup() {\r\n\t\treturn this._configFormGroup;\r\n\t}\r\n\t@Output() configChanged = new EventEmitter();\r\n\tconstructor(private injector: Injector) {\r\n\t\tthis.configFormGroup = this.injector.get(\"configFormGroup\");\r\n\t}\r\n\taddMenu() {\r\n\t\tvar menuItem = new FormGroup({\r\n\t\t\troute: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\ticon: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\ttitle: new FormControl(\"\", [ Validators.required ])\r\n\t\t});\r\n\r\n\t\t(this.formGroup.get(\"dashboardLinks\") as FormArray).push(menuItem);\r\n\t\t(this.configFormGroup.get(\"dashboardLinks\") as FormArray).push(menuItem);\r\n\t}\r\n}\r\n","import { Component, Output, EventEmitter, Input, Injector } from \"@angular/core\";\r\nimport { FormGroup, Validators, FormControl, FormArray } from \"@angular/forms\";\r\n\r\n@Component({\r\n\ttemplate: `<div fxFlexLayout=\"row\" fxLayoutWrap fxLayoutAlign=\"center center\">\r\n    <div fxFlex=\"100\" fxFlexLayout=\"row\">\r\n        <div [formGroup]=\"formGroup\">\r\n            <mat-form-field>\r\n                <mat-select (change)=\"configChanged.emit(formGroup.value)\" placeholder=\"layout mode\" formControlName=\"layoutMode\" >\r\n                    <mat-option *ngFor=\"let item of layoutModes\" [value]=\"item\">{{item}}</mat-option>\r\n                </mat-select> \r\n            </mat-form-field>\r\n            <mat-slide-toggle  (change)=\"configChanged.emit(formGroup.value)\"  formControlName=\"showLeftNavBar\">show left navbar</mat-slide-toggle>\r\n            <mat-form-field>\r\n                <mat-select (change)=\"configChanged.emit(formGroup.value)\" placeholder=\"main side nav mode\" formControlName=\"mainSideNavMode\" >\r\n                    <mat-option *ngFor=\"let item of sideNavModes\" [value]=\"item\">{{item}}</mat-option>\r\n                </mat-select> \r\n            </mat-form-field>\r\n            <mat-slide-toggle  (change)=\"configChanged.emit(formGroup.value)\"  formControlName=\"showMainSidenav\">show main side nav</mat-slide-toggle>\r\n            <mat-slide-toggle  (change)=\"configChanged.emit(formGroup.value)\"  formControlName=\"stickyLeftNavBar\">sticky left navbar</mat-slide-toggle>\r\n            <mat-slide-toggle  (change)=\"configChanged.emit(formGroup.value)\"  formControlName=\"showSecondSideNav\">show second side nav</mat-slide-toggle>\r\n            <mat-form-field>\r\n                <mat-select (change)=\"configChanged.emit(formGroup.value)\" placeholder=\"second side nav mode\" formControlName=\"secondSideNavMode\" >\r\n                    <mat-option *ngFor=\"let item of sideNavModes\" [value]=\"item\">{{item}}</mat-option>\r\n                </mat-select> \r\n            </mat-form-field>\r\n        </div>\r\n    </div>\r\n\r\n    <h2 fxFlex=\"100\">\r\n        Menu Items\r\n        <button mat-icon-button color=\"primary\" (click)=\"addMenu()\">\r\n            <mat-icon aria-label=\"icon-button icon\">add</mat-icon>\r\n        </button>\r\n    </h2>\r\n    <div fxFlex=\"100\" *ngFor=\"let item of formGroup.controls.menuItems.controls\">\r\n        <div [formGroup]=\"item\">\r\n            <mat-form-field>\r\n                <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"route\" formControlName=\"route\">\r\n            </mat-form-field>\r\n            <mat-form-field>\r\n                <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"icon\" formControlName=\"icon\">\r\n            </mat-form-field>\r\n            <mat-form-field>\r\n                <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"title\" formControlName=\"title\">\r\n            </mat-form-field>\r\n            <mat-form-field> \r\n                <mat-select (change)=\"configChanged.emit(formGroup.value)\" placeholder=\"roles\" formControlName=\"roles\" multiple>\r\n                    <mat-option *ngFor=\"let role of roleItems\" [value]=\"role\">{{role}}</mat-option>\r\n                </mat-select> \r\n            </mat-form-field>\r\n        </div>\r\n    </div>\r\n</div>`\r\n})\r\nexport class LayoutModuleConfigComponent {\r\n\tsideNavModes: string[];\r\n\tlayoutModes: string[];\r\n\tformGroup: any = new FormGroup({\r\n\t\tlayoutMode: new FormControl(\"\", [ Validators.required ]),\r\n\t\tshowLeftNavBar: new FormControl(\"\", [ Validators.required ]),\r\n\t\tmainSideNavMode: new FormControl(\"\", [ Validators.required ]),\r\n\t\tshowMainSidenav: new FormControl(\"\", [ Validators.required ]),\r\n\t\tstickyLeftNavBar: new FormControl(\"\", [ Validators.required ]),\r\n\t\tshowSecondSideNav: new FormControl(\"\", [ Validators.required ]),\r\n\t\tsecondSideNavMode: new FormControl(\"\", [ Validators.required ]),\r\n\t\tmenuItems: new FormArray([])\r\n\t});\r\n\t_configFormGroup: FormGroup;\r\n\t@Input()\r\n\tset configFormGroup(configFormGroup: FormGroup) {\r\n\t\tthis._configFormGroup = configFormGroup;\r\n\t\t(configFormGroup.controls.menuItems as FormArray).controls.forEach((control) => {\r\n\t\t\t(this.formGroup.controls.menuItems as FormArray).push(\r\n\t\t\t\tnew FormGroup({\r\n\t\t\t\t\troute: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\t\ticon: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\t\t// roles: new FormArray(control.value.roles.map((i) => new FormControl(\"Admin\"))),\r\n\t\t\t\t\troles: new FormControl(),\r\n\t\t\t\t\ttitle: new FormControl(\"\", [ Validators.required ])\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\tthis.formGroup.patchValue(configFormGroup.value);\r\n\t\tconfigFormGroup.valueChanges.subscribe((data) => this.formGroup.patchValue(data));\r\n\t}\r\n\tget configFormGroup() {\r\n\t\treturn this._configFormGroup;\r\n\t}\r\n\t@Output() configChanged = new EventEmitter();\r\n\r\n\troleItems: string[] = [ \"Admin\", \"User\" ];\r\n\r\n\tconstructor(private injector: Injector) {\r\n\t\tthis.sideNavModes = [ \"over\", \"push\", \"side\" ];\r\n\t\tthis.layoutModes = [ \"with-margin\", \"without-margin\", \"default\" ];\r\n\t\tthis.configFormGroup = this.injector.get(\"configFormGroup\");\r\n\t}\r\n\taddMenu() {\r\n\t\tvar menuItem = new FormGroup({\r\n\t\t\troute: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\ticon: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\troles: new FormControl(),\r\n\t\t\ttitle: new FormControl(\"\", [ Validators.required ])\r\n\t\t});\r\n\r\n\t\t(this.formGroup.get(\"menuItems\") as FormArray).push(menuItem);\r\n\t\t(this.configFormGroup.get(\"menuItems\") as FormArray).push(menuItem);\r\n\t}\r\n}\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\n@Component({\r\n\tselector: \"config-module-container\",\r\n\ttemplate: `<div fxLayoutAlign=\"\" fxflex=\"100\" fxLayout=\"column\">\r\n    <router-outlet></router-outlet>\r\n</div>\r\n`\r\n})\r\nexport class ConfigModuleContainerComponent implements OnInit {\r\n\tconstructor() {}\r\n\r\n\tngOnInit() {}\r\n}\r\n","import { NgModule, Component, OnInit, Output, EventEmitter, Input, Injector } from \"@angular/core\";\r\nimport { FormGroup, Validators, FormControl } from \"@angular/forms\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\n@Component({\r\n\tselector: \"config-authentication-module-config\",\r\n\ttemplate: `<h2>Endpoints</h2>\r\n<div [formGroup]=\"formGroup.controls.endpoints\" fxLayout=\"column\">\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"sign in\" formControlName=\"signIn\">\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"sign out\" formControlName=\"signOut\">\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"who am i\" formControlName=\"whoAmI\">\r\n    </mat-form-field>\r\n</div>\r\n<h2>Forms</h2>\r\n<div [formGroup]=\"formGroup.controls.forms\" fxLayout=\"column\">\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"SignIn Forms\" formControlName=\"signIn\">\r\n    </mat-form-field>\r\n            <!-- <ngs-form-selector (select)=\"setFormId($event,'signIn')\"></ngs-form-selector> -->\r\n</div>`\r\n})\r\nexport class AuthenticationModuleConfigComponent {\r\n\tformGroup: FormGroup = new FormGroup({\r\n\t\tendpoints: new FormGroup({\r\n\t\t\tsignIn: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\tsignOut: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\twhoAmI: new FormControl(\"\", [ Validators.required ])\r\n\t\t}),\r\n\t\tforms: new FormGroup({\r\n\t\t\tsignIn: new FormControl(\"\", [ Validators.required ])\r\n\t\t})\r\n\t});\r\n\t@Input()\r\n\tset configFormGroup(configFormGroup: FormGroup) {\r\n\t\tthis.formGroup.patchValue(configFormGroup.value);\r\n\t\tconfigFormGroup.valueChanges.subscribe(data => {\r\n\t\t\tthis.formGroup.patchValue(data);\r\n\t\t});\r\n\t}\r\n\t@Output() configChanged = new EventEmitter();\r\n\tconstructor(private injector: Injector) {\r\n\t\tthis.configFormGroup = this.injector.get(\"configFormGroup\");\r\n\t}\r\n\tsetFormId(formId: string, formName: string) {\r\n\t\tthis.formGroup.patchValue({ [formName]: formId });\r\n\t}\r\n}\r\n","import {\r\n\tComponent,\r\n\tOnInit,\r\n\tInput,\r\n\tAfterViewInit,\r\n\tComponentFactoryResolver,\r\n\tViewChild,\r\n\tViewContainerRef,\r\n\tReflectiveInjector,\r\n\tOnDestroy,\r\n\tOutput,\r\n\tEventEmitter\r\n} from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { PartialConfig } from \"../../models\";\r\nimport { AuthenticationModuleConfigComponent } from \"../../dumb-components/authentication-module-config/authentication-module-config.component\";\r\nimport { ConfigAppConfigComponent } from \"../../dumb-components/app-config/app-config.component\";\r\nimport { UserModuleConfigComponent } from \"../../dumb-components/user-module-config/user-module-config.component\";\r\nimport { LayoutModuleConfigComponent } from \"../../dumb-components/layout-config/layout-module-config.component\";\r\n\r\n@Component({\r\n\tselector: \"dynamic-config-component-selector\",\r\n\ttemplate: `<div #dynamicComponentContainer></div>`,\r\n\tstyles: [`:host{width:100%}.diagram-box{margin:15px}.diagram-box .c3{direction:ltr}`],\r\n\tentryComponents: [\r\n\t\tAuthenticationModuleConfigComponent,\r\n\t\tConfigAppConfigComponent,\r\n\t\tUserModuleConfigComponent,\r\n\t\tLayoutModuleConfigComponent\r\n\t]\r\n})\r\nexport class DynamicConfigComponentSelectorComponent implements AfterViewInit {\r\n\ttypeMapToDiagram: any = {\r\n\t\tauthentication_module_config: AuthenticationModuleConfigComponent,\r\n\t\tapp_config: ConfigAppConfigComponent,\r\n\t\tuser_module_config: UserModuleConfigComponent,\r\n\t\tlayout_config: LayoutModuleConfigComponent\r\n\t};\r\n\t@ViewChild(\"dynamicComponentContainer\", { read: ViewContainerRef })\r\n\tdynamicComponentContainer: ViewContainerRef;\r\n\t@Output() configChanged = new EventEmitter();\r\n\tcurrentComponent: any = null;\r\n\t@Input()\r\n\tset data(data: PartialConfig) {\r\n\t\tif (!data || Object.keys(data).length == 0) return;\r\n\t\tif (!(data.type in this.typeMapToDiagram)) {\r\n\t\t\tif (this.currentComponent) this.currentComponent.destroy();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet _component: any = this.typeMapToDiagram[data.type];\r\n\t\tlet inputProviders = Object.keys(data.inputs).map(inputName => {\r\n\t\t\treturn { provide: inputName, useValue: (data.inputs as any)[inputName] };\r\n\t\t});\r\n\t\tlet resolvedInputs = ReflectiveInjector.resolve(inputProviders);\r\n\r\n\t\tlet injector = ReflectiveInjector.fromResolvedProviders(\r\n\t\t\tresolvedInputs,\r\n\t\t\tthis.dynamicComponentContainer.parentInjector\r\n\t\t);\r\n\t\tlet factory = this.resolver.resolveComponentFactory(_component);\r\n\r\n\t\tlet component = factory.create(injector);\r\n\t\t(<any>component.instance).configChanged.subscribe((data: any) => {\r\n\t\t\tthis.configChanged.emit(data);\r\n\t\t});\r\n\t\tthis.dynamicComponentContainer.insert(component.hostView);\r\n\r\n\t\tif (this.currentComponent) {\r\n\t\t\tthis.currentComponent.destroy();\r\n\t\t}\r\n\r\n\t\tthis.currentComponent = component;\r\n\t}\r\n\tconstructor(private resolver: ComponentFactoryResolver) {}\r\n\tngAfterViewInit() {}\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { of } from \"rxjs/observable/of\";\r\n\r\nimport { ConfigActionTypes, ConfigLoadedSucceedAction, ConfigLoadedFailedAction } from \"../actions\";\r\nimport { ConfigService } from \"../services/config.service\";\r\nimport { GetConfigsApiModel } from \"../models\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\n\r\n@Injectable()\r\nexport class LoadConfigEffects {\r\n\tconstructor(private actions$: Actions<any>, private configService: ConfigService) {}\r\n\r\n\t@Effect()\r\n\tgetConfigs$ = this.actions$\r\n\t\t.ofType(ConfigActionTypes.GET_CONFIGS)\r\n\t\t.pipe(\r\n\t\t\tmap(action => action.payload),\r\n\t\t\tswitchMap((data: GetConfigsApiModel.Request) => this.configService.getConfigs()),\r\n\t\t\tmap(configs => new ConfigLoadedSucceedAction(configs)),\r\n\t\t\tcatchError(() => Observable.of(new ConfigLoadedFailedAction()))\r\n\t\t);\r\n}\r\n","import { ModuleWithProviders } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { ConfigsComponent, ConfigEditComponent, ConfigModuleContainerComponent } from './smart-components';\r\n\r\nconst routes: Routes = [\r\n        {\r\n                path: 'configs',\r\n                component: ConfigModuleContainerComponent,\r\n                children: [\r\n                        {\r\n                                path: '',\r\n                                component: ConfigsComponent\r\n                        },\r\n                        {\r\n                                path: 'edit/:name',\r\n                                component: ConfigEditComponent\r\n                        }\r\n                ]\r\n        }\r\n];\r\n\r\nexport const RoutingModule: ModuleWithProviders = RouterModule.forChild(routes);\r\n","import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { StoreModule } from \"@ngrx/store\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport {\r\n\tMatIconModule,\r\n\tMatButtonModule,\r\n\tMatCardModule,\r\n\tMatSnackBarModule,\r\n\tMatSidenavModule,\r\n\tMatExpansionModule,\r\n\tMatSelectModule,\r\n\tMatFormFieldModule,\r\n\tMatListModule,\r\n\tMatMenuModule,\r\n\tMatRadioModule,\r\n\tMatInputModule,\r\n\tMatToolbarModule,\r\n\tMatDatepickerModule,\r\n\tMatProgressBarModule,\r\n\tMatSlideToggleModule\r\n} from \"@angular/material\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { EffectsModule } from \"@ngrx/effects\";\r\n\r\nimport { GetConfigsApiModel } from \"./models\";\r\nimport { ConfigModuleConfig, MODULE_CONFIG_TOKEN, MODULE_DEFAULT_CONFIG } from \"./config.config\";\r\nimport { ConfigsComponent } from \"./smart-components/configs/configs.component\";\r\nimport { ConfigEditComponent } from \"./smart-components/config-edit/config-edit.component\";\r\nimport { ConfigAppConfigComponent } from \"./dumb-components/app-config/app-config.component\";\r\nimport { UserModuleConfigComponent } from \"./dumb-components/user-module-config/user-module-config.component\";\r\nimport { LayoutModuleConfigComponent } from \"./dumb-components/layout-config/layout-module-config.component\";\r\nimport { ConfigModuleContainerComponent } from \"./smart-components/config-module-container/config-module-container.component\";\r\nimport { AuthenticationModuleConfigComponent } from \"./dumb-components/authentication-module-config/authentication-module-config.component\";\r\nimport { DynamicConfigComponentSelectorComponent } from \"./smart-components/dynamic-config-component-selector/dynamic-config-component-selector.component\";\r\nimport { LoadConfigEffects } from \"./effects/load-config.effects\";\r\nimport { ConfigReducers } from \"./reducers\";\r\nimport { RoutingModule } from \"./config.routing-module\";\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n\t\tRouterModule,\r\n\t\tFormsModule,\r\n\t\tReactiveFormsModule,\r\n\t\tHttpClientModule,\r\n\t\tFlexLayoutModule,\r\n\t\tMatIconModule,\r\n\t\tMatButtonModule,\r\n\t\tMatCardModule,\r\n\t\tMatSnackBarModule,\r\n\t\tMatSidenavModule,\r\n\t\tMatExpansionModule,\r\n\t\tMatSelectModule,\r\n\t\tMatFormFieldModule,\r\n\t\tMatListModule,\r\n\t\tMatMenuModule,\r\n\t\tMatRadioModule,\r\n\t\tMatInputModule,\r\n\t\tMatSlideToggleModule,\r\n\t\tMatToolbarModule,\r\n\t\tMatDatepickerModule,\r\n\t\tMatProgressBarModule,\r\n\t\tBrowserAnimationsModule,\r\n\t\tRoutingModule\r\n\t],\r\n\tdeclarations: [\r\n\t\tConfigsComponent,\r\n\t\tConfigEditComponent,\r\n\t\tConfigAppConfigComponent,\r\n\t\tUserModuleConfigComponent,\r\n\t\tLayoutModuleConfigComponent,\r\n\t\tConfigModuleContainerComponent,\r\n\t\tAuthenticationModuleConfigComponent,\r\n\t\tDynamicConfigComponentSelectorComponent\r\n\t],\r\n\tproviders: []\r\n})\r\nexport class NgsConfigModule {\r\n\tstatic forRoot(config: ConfigModuleConfig): ModuleWithProviders {\r\n\t\treturn {\r\n\t\t\tngModule: RootNgsConfigModule,\r\n\t\t\tproviders: [ { provide: MODULE_CONFIG_TOKEN, useValue: config } ]\r\n\t\t};\r\n\t}\r\n}\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tNgsConfigModule,\r\n\t\tStoreModule.forFeature(\"config\", ConfigReducers),\r\n\t\tEffectsModule.forFeature([ LoadConfigEffects ])\r\n\t\t// RoutingModule\r\n\t],\r\n\texports: [ NgsConfigModule ]\r\n})\r\nexport class RootNgsConfigModule {}\r\n"]}