{"version":3,"sources":["ng://@soushians/config/lib/models/config.model.ts","ng://@soushians/config/lib/models/get-configs-api.model.ts","ng://@soushians/config/lib/models/edit-config-api.model.ts","ng://@soushians/config/lib/config.config.ts","null","ng://@soushians/config/lib/actions/config.action.ts","ng://@soushians/config/lib/reducers/config-list.reducer.ts","ng://@soushians/config/lib/reducers/index.ts","ng://@soushians/config/lib/services/configuration.service.ts","ng://@soushians/config/lib/services/config.service.ts","ng://@soushians/config/lib/smart-components/configs/configs.component.ts","ng://@soushians/config/lib/smart-components/config-edit/config-edit.component.ts","ng://@soushians/config/lib/dumb-components/app-config/app-config.component.ts","ng://@soushians/config/lib/dumb-components/user-module-config/user-module-config.component.ts","ng://@soushians/config/lib/dumb-components/layout-config/layout-module-config.component.ts","ng://@soushians/config/lib/smart-components/config-module-container/config-module-container.component.ts","ng://@soushians/config/lib/dumb-components/authentication-module-config/authentication-module-config.component.ts","ng://@soushians/config/lib/smart-components/dynamic-config-component-selector/dynamic-config-component-selector.component.ts","ng://@soushians/config/lib/effects/load-config.effects.ts","ng://@soushians/config/lib/config.routing-module.ts","ng://@soushians/config/lib/config.module.ts"],"names":["ConfigModel","GetConfigsApiModel","Request","initValue","_this","this","Object","keys","forEach","key","prototype","getRequestBody","Response","EditConfigApiModel","Name","Config","defineProperty","FormGroup","FormControl","Validators","required","MODULE_DEFAULT_CONFIG","env","production","frontend_server","MODULE_CONFIG_TOKEN","InjectionToken","__assign","assign","t","s","i","n","arguments","length","p","hasOwnProperty","call","apply","GetConfigAction","type","ConfigActionTypes","ConfigLoadedSucceedAction","payload","ConfigLoadedFailedAction","initialState","data","Reducer","state","action","config.ConfigActionTypes","map","config","_id","getConfigs","getAppConfig","find","getAuthenticationModuleConfig","getUserModuleConfig","getConfigModuleConfig","getFormModuleConfig","getSocketModuleConfig","ConfigReducers","list","configList.Reducer","selectConfigState","createFeatureSelector","getConfigListState","createSelector","configList.getConfigs","configList.getAppConfig","configList.getAuthenticationModuleConfig","configList.getUserModuleConfig","configList.getConfigModuleConfig","configList.getFormModuleConfig","configList.getSocketModuleConfig","ConfigurationService","configFile","store","config$","BehaviorSubject","_config","next","select","subscribe","configConfig","Injectable","args","providedIn","Inject","Store","ConfigService","http","configurationService","setTimeout","dispatch","get","pipe","take","response","Result","catchError","err","Observable","throw","getConfigByName","name","editConfig","body","model","put","getLayoutConfigs","HttpClient","ConfigsComponent","configs","Component","selector","template","styles","ConfigEditComponent","configService","formBuilder","route","formGroup","params","configName","partialConfigModel","inputs","configFormGroup","controls","patchValue","addControl","value","Array","array","group","ngOnInit","configChanged","event","console","log","edit","dynConfig","valid","FormBuilder","ActivatedRoute","ViewChild","ConfigAppConfigComponent","injector","AppTitle","EventEmitter","valueChanges","Injector","Input","Output","UserModuleConfigComponent","endpoints","changePassword","editProfile","getUserInfo","whoAmI","forms","profile_edit","dashboardLinks","FormArray","_configFormGroup","control","push","icon","title","addMenu","menuItem","LayoutModuleConfigComponent","layoutMode","showLeftNavBar","mainSideNavMode","showMainSidenav","stickyLeftNavBar","showSecondSideNav","secondSideNavMode","menuItems","sideNavModes","layoutModes","roleItems$","filter","appconfig","Roles","roles","removeMenu","item","index","indexOf","removeAt","ConfigModuleContainerComponent","AuthenticationModuleConfigComponent","signIn","signOut","captchaUrl","setFormId","formId","formName","_a","DynamicConfigComponentSelectorComponent","resolver","typeMapToDiagram","authentication_module_config","app_config","user_module_config","layout_config","currentComponent","instance","_component","inputProviders","inputName","provide","useValue","resolvedInputs","ReflectiveInjector","resolve","fromResolvedProviders","dynamicComponentContainer","parentInjector","component","resolveComponentFactory","create","insert","hostView","destroy","ngAfterViewInit","entryComponents","ComponentFactoryResolver","read","ViewContainerRef","LoadConfigEffects","actions$","getConfigs$","ofType","switchMap","of","Actions","__decorate","decorators","target","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","Effect","__metadata","metadataKey","metadataValue","metadata","routes","path","children","RoutingModule","RouterModule","forChild","NgsConfigModule","forRoot","ngModule","RootNgsConfigModule","providers","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","HttpClientModule","FlexLayoutModule","MatIconModule","MatButtonModule","MatCardModule","MatSnackBarModule","MatSidenavModule","MatExpansionModule","MatSelectModule","MatFormFieldModule","MatListModule","MatMenuModule","MatRadioModule","MatInputModule","MatSlideToggleModule","MatToolbarModule","MatDatepickerModule","MatProgressBarModule","BrowserAnimationsModule","declarations","StoreModule","forFeature","EffectsModule","exports"],"mappings":"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","sourcesContent":["export class ConfigModel<T> {\r\n\t_id: string;\r\n\tName: string;\r\n\tConfig: T;\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { ConfigModel } from \"./config.model\";\r\n\r\nexport namespace GetConfigsApiModel {\r\n\texport class Request implements HttpRequestBaseModel<Request> {\r\n\t\tconstructor(initValue: GetConfigsApiModel.Request = {} as GetConfigsApiModel.Request) {\r\n\t\t\tObject.keys(initValue).forEach(key => ((this as any)[key] = (initValue as any)[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {};\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: ConfigModel<any>[];\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { ConfigModel } from \"../models\";\r\n\r\nexport namespace EditConfigApiModel {\r\n\texport class Request implements HttpRequestBaseModel<Request> {\r\n\t\tName: string;\r\n\t\tConfig: {};\r\n\t\tconstructor(initValue = {} as EditConfigApiModel.Request) {\r\n\t\t\tObject.keys(initValue).forEach(key => ((this as any)[key] = (initValue as any)[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {\r\n\t\t\t\tName: this.Name,\r\n\t\t\t\tConfig: this.Config\r\n\t\t\t};\r\n\t\t}\r\n\t\tstatic get formGroup() {\r\n\t\t\treturn new FormGroup({\r\n\t\t\t\tName: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tConfig: new FormGroup({})\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: ConfigModel<any>;\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","import { InjectionToken } from \"@angular/core\";\r\n\r\nexport interface ConfigModuleConfig {\r\n\tenv?: {\r\n\t\tproduction: boolean;\r\n\t\tfrontend_server: string;\r\n\t};\r\n}\r\n\r\nexport const MODULE_DEFAULT_CONFIG: ConfigModuleConfig = {\r\n\tenv: {\r\n\t\tproduction: false,\r\n\t\tfrontend_server: \"config/module/front_end/did/not/set\"\r\n\t}\r\n};\r\n\r\nexport const MODULE_CONFIG_TOKEN = new InjectionToken<ConfigModuleConfig>(\"UserModuleConfig\");\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\nimport { ConfigModel, GetConfigsApiModel } from \"../models\";\r\n\r\nexport enum ConfigActionTypes {\r\n\tGET_CONFIGS = \"[CONFIG] get config\",\r\n\tCONFIG_LOADED_SUCCEED = \"[CONFIG] load config succeed\",\r\n\tUPDATE_CONFIG = \"[CONFIG] update config\",\r\n\tCONFIG_LOADED_FAILED = \"[CONFIG] load config failed\"\r\n}\r\n\r\nexport class GetConfigAction implements Action {\r\n\treadonly type = ConfigActionTypes.GET_CONFIGS;\r\n}\r\n\r\nexport class ConfigLoadedSucceedAction implements Action {\r\n\treadonly type = ConfigActionTypes.CONFIG_LOADED_SUCCEED;\r\n\r\n\tconstructor(public payload: ConfigModel<any>[]) {}\r\n}\r\nexport class UpdateConfigAction implements Action {\r\n\treadonly type = ConfigActionTypes.UPDATE_CONFIG;\r\n\tconstructor(public payload: ConfigModel<any>) {}\r\n}\r\n\r\nexport class ConfigLoadedFailedAction implements Action {\r\n\treadonly type = ConfigActionTypes.CONFIG_LOADED_FAILED;\r\n}\r\nexport type Actions = GetConfigAction | ConfigLoadedSucceedAction | ConfigLoadedFailedAction | UpdateConfigAction;\r\n","import * as config from \"../actions/config.action\";\r\n\r\nexport interface State {\r\n\tdata: any[];\r\n}\r\n\r\nconst initialState: State = {\r\n\tdata: []\r\n};\r\n\r\nexport function Reducer(state = initialState, action: config.Actions): State {\r\n\tswitch (action.type) {\r\n\t\tcase config.ConfigActionTypes.CONFIG_LOADED_SUCCEED:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: action.payload\r\n\t\t\t};\r\n\t\tcase config.ConfigActionTypes.UPDATE_CONFIG:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: state.data.map(config => {\r\n\t\t\t\t\tif (config._id == action.payload._id) config.Config = action.payload.Config;\r\n\t\t\t\t\treturn config;\r\n\t\t\t\t})\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport const getConfigs = (state: State) => state.data;\r\nexport const getAppConfig = (state: State) => state.data.find(config => config.Name == \"app_config\");\r\nexport const getAuthenticationModuleConfig = (state: State) =>\r\n\tstate.data.find(config => config.Name == \"authentication_module_config\");\r\nexport const getUserModuleConfig = (state: State) => state.data.find(config => config.Name == \"user_module_config\");\r\nexport const getConfigModuleConfig = (state: State) =>\r\n\tstate.data.find(config => config.Name == \"config_module_config\") as any;\r\nexport const getFormModuleConfig = (state: State) =>\r\n\tstate.data.find(config => config.Name == \"form_module_config\") as any;\r\nexport const getSocketModuleConfig = (state: State) =>\r\n\tstate.data.find(config => config.Name == \"socket_module_config\") as any;\r\n","import { createSelector, createFeatureSelector, MemoizedSelector } from \"@ngrx/store\";\r\n\r\nimport * as configList from \"./config-list.reducer\";\r\nimport { ConfigLoadedFailedAction, ConfigLoadedSucceedAction } from \"../actions\";\r\nexport interface ConfigState {\r\n\tlist: configList.State;\r\n}\r\nexport const ConfigReducers = {\r\n\tlist: configList.Reducer\r\n};\r\n\r\nexport interface FeatureState {\r\n\t\"configs\": ConfigState;\r\n}\r\n\r\n//#region selectors\r\n\r\nexport const selectConfigState = createFeatureSelector<ConfigState>(\"config\");\r\n\r\n//#endregion\r\n\r\nexport const getConfigListState = createSelector(selectConfigState, (state: ConfigState) => state.list);\r\nexport const getConfigs = createSelector(getConfigListState, configList.getConfigs);\r\nexport const getAppConfig = createSelector(getConfigListState, configList.getAppConfig);\r\nexport const getAuthenticationModuleConfig = createSelector(\r\n\tgetConfigListState,\r\n\tconfigList.getAuthenticationModuleConfig\r\n);\r\nexport const getUserModuleConfig = createSelector(getConfigListState, configList.getUserModuleConfig);\r\nexport const getConfigModuleConfig = createSelector(getConfigListState, configList.getConfigModuleConfig);\r\nexport const getFormModuleConfig = createSelector(getConfigListState, configList.getFormModuleConfig);\r\nexport const getSocketModuleConfig = createSelector(getConfigListState, configList.getSocketModuleConfig);\r\n","import { Injectable, Inject } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { ConfigModuleConfig, MODULE_CONFIG_TOKEN, MODULE_DEFAULT_CONFIG } from \"../config.config\";\r\nimport { getConfigModuleConfig } from \"../reducers\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class ConfigurationService {\r\n\tprivate _config: ConfigModuleConfig;\r\n\tget config() {\r\n\t\treturn this._config;\r\n\t}\r\n\tconfig$ = new BehaviorSubject(this._config);\r\n\r\n\tconstructor(@Inject(MODULE_CONFIG_TOKEN) configFile: ConfigModuleConfig, private store: Store<any>) {\r\n\t\tthis._config = Object.assign({}, MODULE_DEFAULT_CONFIG, configFile);\r\n\t\tthis.config$.next(this._config);\r\n\t\tthis.store.select(getConfigModuleConfig).subscribe(configConfig => {\r\n\t\t\tif (!configConfig) return;\r\n\t\t\tthis._config = Object.assign({}, this._config, configConfig.Config);\r\n\t\t\tthis.config$.next(this._config);\r\n\t\t});\r\n\t}\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { EditConfigApiModel, GetConfigsApiModel, ConfigModel } from \"../models\";\r\n\r\nimport { ConfigState } from \"../reducers\";\r\nimport { GetConfigAction } from \"../actions\";\r\nimport { ConfigurationService } from \"./configuration.service\";\r\nimport { take, map, catchError } from \"rxjs/operators\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class ConfigService {\r\n\tresponseCache: any;\r\n\r\n\tconstructor(\r\n\t\tprivate http: HttpClient,\r\n\t\tprivate store: Store<ConfigState>,\r\n\t\tprivate configurationService: ConfigurationService\r\n\t) {\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.store.dispatch(new GetConfigAction());\r\n\t\t}, 999);\r\n\t}\r\n\r\n\tgetConfigs(): Observable<ConfigModel<any>[]> {\r\n\t\treturn this.http\r\n\t\t\t.get(`${this.configurationService.config.env.frontend_server}/api/config`)\r\n\t\t\t.pipe(\r\n\t\t\t\ttake(1),\r\n\t\t\t\tmap((response: GetConfigsApiModel.Response) => response.Result),\r\n\t\t\t\tcatchError(err => Observable.throw(err))\r\n\t\t\t);\r\n\t}\r\n\tgetConfigByName(name: string): Observable<any> {\r\n\t\treturn this.http.get(`${this.configurationService.config.env.frontend_server}/api/config/${name}`).pipe(\r\n\t\t\tmap(response => response),\r\n\t\t\tcatchError(err => {\r\n\t\t\t\treturn Observable.throw(err);\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\teditConfig(body: EditConfigApiModel.Request): Observable<any> {\r\n\t\tconst model = new EditConfigApiModel.Request(body);\r\n\r\n\t\treturn this.http\r\n\t\t\t.put(\r\n\t\t\t\t`${this.configurationService.config.env.frontend_server}/api/config/${model.Name}`,\r\n\t\t\t\tmodel.getRequestBody()\r\n\t\t\t)\r\n\t\t\t.pipe(\r\n\t\t\t\tmap(response => response),\r\n\t\t\t\tcatchError(err => {\r\n\t\t\t\t\treturn Observable.throw(err);\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t}\r\n\r\n\tgetLayoutConfigs(): Observable<any> {\r\n\t\treturn this.http.get(`${this.configurationService.config.env.frontend_server}/api/layout-config`).pipe(\r\n\t\t\tmap((response: any) => response),\r\n\t\t\tcatchError(err => {\r\n\t\t\t\treturn Observable.throw(err);\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n}\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { ConfigModel } from \"../../models\";\r\nimport { getConfigs, FeatureState } from \"../../reducers\";\r\n\r\n@Component({\r\n\tselector: \"configs\",\r\n\ttemplate: `<div fxLayout=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"25px\" class=\"main-container\">\r\n\r\n  <div class=\"content-action\">\r\n    <mat-card class=\"with-sticky-action\">\r\n      <mat-card-header>\r\n        <mat-card-title fxLayout=\"row\" fxLayoutGap=\"5px\">\r\n          <mat-icon>settings_input_component</mat-icon>\r\n          <span>ØªÙØ¸ÛÙØ§Øª Ø³Ø§ÙØ§ÙÙ Ù ÙØ§ÚÙÙ ÙØ§</span>\r\n        </mat-card-title>\r\n        <!-- <mat-card-subtitle fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n          <span>\r\n            Ø´Ø§ÙÙ ØªÙØ§ÙÛ Ø¯Ø±Ø®ÙØ§Ø³ØªâÙØ§ Ø§Ø² ÙØ¨ÛÙ Ø¯Ø§Ø¦Ø±ÛØ Ø¬ÙØ¹âØ¢ÙØ±Û Ù ...\r\n          </span>\r\n        </mat-card-subtitle> -->\r\n      </mat-card-header>\r\n\r\n      <div fxLayout=\"row wrap\" fxLayoutGap=\"10px\" fxLayoutAlign=\"start\">\r\n\r\n        <button fxFlex.lt-lg=\"18\" fxFlex.lg=\"23.5\" fxFlex.md=\"31\" fxFlex.sm=\"48\" fxFlex.xs=\"100\" class='link'\r\n          mat-raised-button [routerLink]=\"['edit' ,  config.Name]\" *ngFor=\"let config of (configs | async)\">\r\n          <div fxLayout='column' fxLayoutAlign='center center'>\r\n            <mat-icon color='primary'>settings</mat-icon>\r\n            <h3 class='title'>{{config.Name}}</h3>\r\n          </div>\r\n        </button>\r\n\r\n      </div>\r\n\r\n    </mat-card>\r\n  </div>\r\n</div>`,\r\n\tstyles: [`:host{width:100%}.config-box{margin:15px}button.link{padding:25px 15px;margin:.5%;box-sizing:border-box}button mat-icon{font-size:34px;width:34px;height:34px}`]\r\n})\r\nexport class ConfigsComponent {\r\n\tconfigs: Observable<ConfigModel<any>[]>;\r\n\tconstructor(private store: Store<FeatureState>) {\r\n\t\tthis.configs = this.store.select(getConfigs);\r\n\t}\r\n}\r\n","import { NgModule, Component, OnInit, Output, EventEmitter, Input, ViewChild, ViewContainerRef } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { FormGroup, FormBuilder, FormControl } from \"@angular/forms\";\r\n\r\nimport { EditConfigApiModel, PartialConfig } from \"../../models\";\r\nimport { ConfigService } from \"../../services/config.service\";\r\nimport { DynamicConfigComponentSelectorComponent } from \"../dynamic-config-component-selector\";\r\n\r\n@Component({\r\n\tselector: \"config-config-edit\",\r\n\ttemplate: `<form [formGroup]=\"formGroup\" (ngSubmit)=\"edit()\" fxLayout=\"column\">\r\n  <dynamic-config-component-selector #dynConfig (configChanged)=\"configChanged($event)\" [data]=\"partialConfigModel\"></dynamic-config-component-selector>\r\n  <button mat-fab  type=\"submit\" mat-raised-button color=\"primary\" (click)=\"edit\">\r\n    <mat-icon>done</mat-icon>\r\n  </button>\r\n  <!-- <button  type=\"button\" routerLink=\"/configs\" mat-raised-button>Ø¨Ø§Ø²Ú¯Ø´Øª</button> -->\r\n</form>`,\r\n\tstyles: [``]\r\n})\r\nexport class ConfigEditComponent implements OnInit {\r\n\tconfigInforamation: any;\r\n\tformGroup: FormGroup = EditConfigApiModel.Request.formGroup;\r\n\tpartialConfigModel: PartialConfig;\r\n\t@ViewChild(\"dynConfig\") dynConfig: DynamicConfigComponentSelectorComponent;\r\n\tconstructor(private configService: ConfigService, private formBuilder: FormBuilder, private route: ActivatedRoute) {\r\n\t\tthis.route.params.subscribe(params => {\r\n\t\t\tconst configName: string = params[\"name\"];\r\n\t\t\tthis.configService.getConfigByName(configName).subscribe(data => {\r\n\t\t\t\tdebugger;\r\n\t\t\t\tthis.partialConfigModel = {\r\n\t\t\t\t\ttype: data.Result.Name,\r\n\t\t\t\t\tinputs: {\r\n\t\t\t\t\t\tconfigFormGroup: this.formGroup.controls.Config as FormGroup\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tthis.formGroup.patchValue({\r\n\t\t\t\t\t_id: data.Result._id,\r\n\t\t\t\t\tName: data.Result.Name\r\n\t\t\t\t});\r\n\t\t\t\tObject.keys(data.Result.Config).forEach(key => {\r\n\t\t\t\t\tthis.addControl(this.formGroup.controls.Config as FormGroup, key, data.Result.Config[key]);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\taddControl(formGroup: FormGroup, key: string, value: any) {\r\n\t\tif (value instanceof Array) {\r\n\t\t\tformGroup.addControl(key, this.formBuilder.array(value));\r\n\t\t} else if (value instanceof Object) {\r\n\t\t\tformGroup.addControl(key, this.formBuilder.group(value));\r\n\t\t} else {\r\n\t\t\tformGroup.addControl(key, new FormControl(value));\r\n\t\t}\r\n\t}\r\n\r\n\tngOnInit() { }\r\n\tconfigChanged(event: any) {\r\n\t\tconsole.log(\"-\");\r\n\t}\r\n\tedit() {\r\n\t\tthis.formGroup.controls.Config.patchValue(this.dynConfig.config);\r\n\t\tif (!this.formGroup.valid) return;\r\n\t\tthis.configService.editConfig(this.formGroup.value).subscribe(config => { });\r\n\t}\r\n}\r\n","import { NgModule, Component, OnInit, Output, EventEmitter, Input, Injector } from \"@angular/core\";\r\nimport { FormGroup, Validators, FormControl } from \"@angular/forms\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\n@Component({\r\n\tselector: \"config-app-config\",\r\n\ttemplate: `<div fxLayout=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"25px\" class=\"main-container\">\r\n\r\n    <div class=\"content-action\">\r\n        <mat-card class=\"with-sticky-action\">\r\n            <mat-card-header>\r\n                <mat-card-title fxLayout=\"row\" fxLayoutGap=\"5px\">\r\n                    <mat-icon>settings_input_component</mat-icon>\r\n                    <span>ØªÙØ¸ÛÙØ§Øª Ø³Ø§ÙØ§ÙÙ</span>\r\n                </mat-card-title>\r\n                <mat-card-subtitle fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n                    <span>\r\n                        Ø´Ø§ÙÙ ØªÙØ§ÙÛ Ø¯Ø±Ø®ÙØ§Ø³ØªâÙØ§ Ø§Ø² ÙØ¨ÛÙ Ø¯Ø§Ø¦Ø±ÛØ Ø¬ÙØ¹âØ¢ÙØ±Û Ù ...\r\n                    </span>\r\n                </mat-card-subtitle>\r\n            </mat-card-header>\r\n\r\n            <div fxLayout=\"row wrap\" fxLayoutGap=\"10px\" fxLayoutAlign=\"start\">\r\n\r\n                <div [formGroup]=\"formGroup\">\r\n                    <mat-form-field>\r\n                        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"ÙØ§Ù Ù¾Ø±ÙÚÙ\"\r\n                            formControlName=\"AppTitle\">\r\n                    </mat-form-field>\r\n                </div>\r\n            </div>\r\n\r\n        </mat-card>\r\n    </div>\r\n</div>`\r\n})\r\nexport class ConfigAppConfigComponent {\r\n\tformGroup: FormGroup = new FormGroup({ AppTitle: new FormControl(\"\", [ Validators.required ]) });\r\n\t@Input()\r\n\tset configFormGroup(configFormGroup: FormGroup) {\r\n\t\tthis.formGroup.patchValue(configFormGroup.value);\r\n\t\tconfigFormGroup.valueChanges.subscribe(data => {\r\n\t\t\tthis.formGroup.patchValue(data);\r\n\t\t});\r\n\t}\r\n\t@Output() configChanged = new EventEmitter();\r\n\tconstructor(private injector: Injector) {\r\n\t\tthis.configFormGroup = this.injector.get(\"configFormGroup\");\r\n\t}\r\n}\r\n","import { NgModule, Component, OnInit, Output, EventEmitter, Input, Injector } from \"@angular/core\";\r\nimport { FormGroup, Validators, FormControl, FormArray } from \"@angular/forms\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\n\r\n@Component({\r\n\tselector: \"config-user-module-config\",\r\n\ttemplate: `<div fxLayout=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"25px\" class=\"main-container\">\r\n\r\n    <div class=\"content-action\">\r\n        <mat-card fxLayout=\"column\" fxLayoutGap=\"10px\" fxLayoutAlign=\"\" class=\"with-sticky-action\">\r\n            <h2>Endpoints</h2>\r\n            <div [formGroup]=\"formGroup.get('endpoints')\" fxLayout=\"column\">\r\n                <mat-form-field>\r\n                    <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"change password\"\r\n                        formControlName=\"changePassword\">\r\n                </mat-form-field>\r\n                <mat-form-field>\r\n                    <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"edit profile\"\r\n                        formControlName=\"editProfile\">\r\n                </mat-form-field>\r\n                <mat-form-field>\r\n                    <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"get user info\"\r\n                        formControlName=\"getUserInfo\">\r\n                </mat-form-field>\r\n                <mat-form-field>\r\n                    <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"Who Am I\"\r\n                        formControlName=\"whoAmI\">\r\n                </mat-form-field>\r\n            </div>\r\n            <h2>Forms</h2>\r\n            <div [formGroup]=\"formGroup.get('forms')\" fxLayout=\"column\">\r\n                <mat-form-field>\r\n                    <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"profile edit\"\r\n                        formControlName=\"profile_edit\">\r\n                </mat-form-field>\r\n                <!-- <ngs-form-selector (select)=\"setFormId($event,'signIn')\"></ngs-form-selector> -->\r\n            </div>\r\n\r\n\r\n            <h2 fxFlex=\"100\">\r\n                Dashobard Links\r\n                <button mat-icon-button color=\"primary\" (click)=\"addMenu()\">\r\n                    <mat-icon aria-label=\"icon-button icon\">add</mat-icon>\r\n                </button>\r\n            </h2>\r\n            <div fxFlex=\"100\" *ngFor=\"let item of $any(formGroup.get('dashboardLinks')).controls\">\r\n                <div [formGroup]=\"item\">\r\n                    <mat-form-field>\r\n                        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"route\"\r\n                            formControlName=\"route\">\r\n                    </mat-form-field>\r\n                    <mat-form-field>\r\n                        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"icon\"\r\n                            formControlName=\"icon\">\r\n                    </mat-form-field>\r\n                    <mat-form-field>\r\n                        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"title\"\r\n                            formControlName=\"title\">\r\n                    </mat-form-field>\r\n                </div>\r\n            </div>\r\n        </mat-card>\r\n    </div>\r\n</div>`\r\n})\r\nexport class UserModuleConfigComponent {\r\n\tformGroup: FormGroup = new FormGroup({\r\n\t\tendpoints: new FormGroup({\r\n\t\t\tchangePassword: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\teditProfile: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\tgetUserInfo: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\twhoAmI: new FormControl(\"\", [ Validators.required ])\r\n\t\t}),\r\n\t\tforms: new FormGroup({\r\n\t\t\tprofile_edit: new FormControl(\"\", [ Validators.required ])\r\n\t\t}),\r\n\t\tdashboardLinks: new FormArray([])\r\n\t});\r\n\t_configFormGroup: FormGroup;\r\n\t@Input()\r\n\tset configFormGroup(configFormGroup: FormGroup) {\r\n\t\tthis._configFormGroup = configFormGroup;\r\n\t\t(configFormGroup.controls.dashboardLinks as FormArray).controls.forEach(control => {\r\n\t\t\t(this.formGroup.controls.dashboardLinks as FormArray).push(\r\n\t\t\t\tnew FormGroup({\r\n\t\t\t\t\troute: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\t\ticon: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\t\ttitle: new FormControl(\"\", [ Validators.required ])\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\tthis.formGroup.patchValue(configFormGroup.value);\r\n\t\tconfigFormGroup.valueChanges.subscribe(data => {\r\n\t\t\tthis.formGroup.patchValue(data);\r\n\t\t});\r\n\t}\r\n\tget configFormGroup() {\r\n\t\treturn this._configFormGroup;\r\n\t}\r\n\t@Output() configChanged = new EventEmitter();\r\n\tconstructor(private injector: Injector) {\r\n\t\tthis.configFormGroup = this.injector.get(\"configFormGroup\");\r\n\t}\r\n\taddMenu() {\r\n\t\tvar menuItem = new FormGroup({\r\n\t\t\troute: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\ticon: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\ttitle: new FormControl(\"\", [ Validators.required ])\r\n\t\t});\r\n\r\n\t\t(this.formGroup.get(\"dashboardLinks\") as FormArray).push(menuItem);\r\n\t\t(this.configFormGroup.get(\"dashboardLinks\") as FormArray).push(menuItem);\r\n\t}\r\n}\r\n","import { Component, Output, EventEmitter, Input, Injector } from \"@angular/core\";\r\nimport { FormGroup, Validators, FormControl, FormArray } from \"@angular/forms\";\r\nimport { Observable } from \"rxjs\";\r\nimport { map, filter } from \"rxjs/operators\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { FeatureState, getAppConfig } from \"../../reducers\";\r\n\r\n@Component({\r\n\ttemplate: `<div fxLayout=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"25px\" class=\"main-container\">\r\n\r\n    <div class=\"content-action\">\r\n        <mat-card class=\"with-sticky-action\">\r\n            <mat-card-header>\r\n                <mat-card-title fxLayout=\"row\" fxLayoutGap=\"5px\">\r\n                    <mat-icon>settings_input_component</mat-icon>\r\n                    <span>ØªÙØ¸ÛÙØ§Øª ÙØ§ÚÙÙ Layout</span>\r\n                </mat-card-title>\r\n                <mat-card-subtitle fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n                    <span>\r\n                        Ø´Ø§ÙÙ ØªÙØ§ÙÛ Ø¯Ø±Ø®ÙØ§Ø³ØªâÙØ§ Ø§Ø² ÙØ¨ÛÙ Ø¯Ø§Ø¦Ø±ÛØ Ø¬ÙØ¹âØ¢ÙØ±Û Ù ...\r\n                    </span>\r\n                </mat-card-subtitle>\r\n            </mat-card-header>\r\n            <div fxLayout=\"row wrap\" fxLayoutAlign=\"center\" fxLayoutGap=\"25px\">\r\n                <mat-card fxFlex=\"20\" fxFlexLayout=\"row\">\r\n                    <div [formGroup]=\"formGroup\">\r\n                        <mat-form-field>\r\n                            <mat-select placeholder=\"layout mode\" formControlName=\"layoutMode\">\r\n                                <mat-option *ngFor=\"let item of layoutModes\" [value]=\"item\">{{item}}</mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                        <mat-slide-toggle formControlName=\"showLeftNavBar\">show left navbar</mat-slide-toggle>\r\n                        <mat-form-field>\r\n                            <mat-select placeholder=\"main side nav mode\" formControlName=\"mainSideNavMode\">\r\n                                <mat-option *ngFor=\"let item of sideNavModes\" [value]=\"item\">{{item}}</mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                        <mat-slide-toggle formControlName=\"showMainSidenav\">show main side nav</mat-slide-toggle>\r\n                        <mat-slide-toggle formControlName=\"stickyLeftNavBar\">sticky left navbar</mat-slide-toggle>\r\n                        <mat-slide-toggle formControlName=\"showSecondSideNav\">show second side nav</mat-slide-toggle>\r\n                        <mat-form-field>\r\n                            <mat-select placeholder=\"second side nav mode\" formControlName=\"secondSideNavMode\">\r\n                                <mat-option *ngFor=\"let item of sideNavModes\" [value]=\"item\">{{item}}</mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n                </mat-card>\r\n\r\n                <mat-card fxFlex fxLayout=\"column\">\r\n                    <h2 fxFlex>\r\n                        Menu Items\r\n                        <button mat-icon-button color=\"primary\" (click)=\"addMenu()\">\r\n                            <mat-icon aria-label=\"icon-button icon\">add</mat-icon>\r\n                        </button>\r\n                    </h2>\r\n                    <div fxFlex=\"nogrow\" *ngFor=\"let item of $any(formGroup).get('menuItems').controls\">\r\n                        <div [formGroup]=\"item\" fxLayout=\"row\" fxLayoutGap=\"25px\">\r\n                            <button mat-icon-button (click)=\"removeMenu(item)\">\r\n                                <mat-icon>delete</mat-icon>\r\n                            </button>\r\n                            <mat-form-field>\r\n                                <input type=\"text\" matInput placeholder=\"route\" formControlName=\"route\">\r\n                            </mat-form-field>\r\n                            <mat-form-field>\r\n                                <input type=\"text\" matInput placeholder=\"icon\" formControlName=\"icon\">\r\n                            </mat-form-field>\r\n                            <mat-form-field>\r\n                                <input type=\"text\" matInput placeholder=\"title\" formControlName=\"title\">\r\n                            </mat-form-field>\r\n                            <mat-form-field>\r\n                                <mat-select placeholder=\"roles\" formControlName=\"roles\" multiple>\r\n                                    <mat-option *ngFor=\"let role of roleItems$ | async\" [value]=\"role\">{{role}}</mat-option>\r\n                                </mat-select>\r\n                            </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                </mat-card>\r\n            </div>\r\n        </mat-card>\r\n    </div>\r\n</div>`\r\n})\r\nexport class LayoutModuleConfigComponent {\r\n\t@Output(\"configChanged\") configChanged = new EventEmitter();\r\n\t_configFormGroup: FormGroup;\r\n\t@Input()\r\n\tset configFormGroup(configFormGroup: FormGroup) {\r\n\t\tthis._configFormGroup = configFormGroup;\r\n\t\t(configFormGroup.controls.menuItems as FormArray).controls.forEach(control => {\r\n\t\t\t(this.formGroup.controls.menuItems as FormArray).push(\r\n\t\t\t\tnew FormGroup({\r\n\t\t\t\t\troute: new FormControl(\"\", [Validators.required]),\r\n\t\t\t\t\ticon: new FormControl(\"\", [Validators.required]),\r\n\t\t\t\t\t// roles: new FormArray(control.value.roles.map((i) => new FormControl(\"Admin\"))),\r\n\t\t\t\t\troles: new FormControl(),\r\n\t\t\t\t\ttitle: new FormControl(\"\", [Validators.required])\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\tthis.formGroup.patchValue(configFormGroup.value);\r\n\t\tconfigFormGroup.valueChanges.subscribe(data => this.formGroup.patchValue(data));\r\n\t}\r\n\tget configFormGroup() {\r\n\t\treturn this._configFormGroup;\r\n\t}\r\n\r\n\tsideNavModes: string[];\r\n\tlayoutModes: string[];\r\n\tformGroup = new FormGroup({\r\n\t\tlayoutMode: new FormControl(\"\", [Validators.required]),\r\n\t\tshowLeftNavBar: new FormControl(\"\", [Validators.required]),\r\n\t\tmainSideNavMode: new FormControl(\"\", [Validators.required]),\r\n\t\tshowMainSidenav: new FormControl(\"\", [Validators.required]),\r\n\t\tstickyLeftNavBar: new FormControl(\"\", [Validators.required]),\r\n\t\tshowSecondSideNav: new FormControl(\"\", [Validators.required]),\r\n\t\tsecondSideNavMode: new FormControl(\"\", [Validators.required]),\r\n\t\tmenuItems: new FormArray([])\r\n\t});\r\n\troleItems$: Observable<string[]>;\r\n\r\n\tconstructor(private injector: Injector, private store: Store<FeatureState>) {\r\n\t\tthis.sideNavModes = [\"over\", \"push\", \"side\"];\r\n\t\tthis.layoutModes = [\"with-margin\", \"without-margin\", \"default\"];\r\n\t\tthis.configFormGroup = this.injector.get(\"configFormGroup\");\r\n\t\tthis.roleItems$ = this.store\r\n\t\t\t.select(getAppConfig)\r\n\t\t\t.pipe(filter(config => config != null), map(appconfig => appconfig.Config.Roles));\r\n\t\t// this.configChanged.\r\n\t\t// this.formGroup.valueChanges.subscribe(value => {\r\n\t\t// \tdebugger;\r\n\t\t// \tthis.configChanged.emit(value);\r\n\t\t// });\r\n\t}\r\n\taddMenu() {\r\n\t\tconst menuItem = new FormGroup({\r\n\t\t\troute: new FormControl(\"\", [Validators.required]),\r\n\t\t\ticon: new FormControl(\"\", [Validators.required]),\r\n\t\t\troles: new FormControl(),\r\n\t\t\ttitle: new FormControl(\"\", [Validators.required])\r\n\t\t});\r\n\r\n\t\t(this.formGroup.get(\"menuItems\") as FormArray).push(menuItem);\r\n\t\t(this.configFormGroup.get(\"menuItems\") as FormArray).push(menuItem);\r\n\t}\r\n\tremoveMenu(item: any) {\r\n\t\tdebugger;\r\n\t\tconst index = (this.formGroup.get(\"menuItems\") as FormArray).controls.indexOf(item);\r\n\t\t(this.formGroup.get(\"menuItems\") as FormArray).removeAt(index);\r\n\t}\r\n}\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\n@Component({\r\n\tselector: \"config-module-container\",\r\n\ttemplate: `<div fxLayoutAlign=\"\" fxflex=\"100\" fxLayout=\"column\">\r\n    <router-outlet></router-outlet>\r\n</div>\r\n`\r\n})\r\nexport class ConfigModuleContainerComponent implements OnInit {\r\n\tconstructor() {}\r\n\r\n\tngOnInit() {}\r\n}\r\n","import { NgModule, Component, OnInit, Output, EventEmitter, Input, Injector } from \"@angular/core\";\r\nimport { FormGroup, Validators, FormControl } from \"@angular/forms\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\n@Component({\r\n\tselector: \"config-authentication-module-config\",\r\n\ttemplate: `<div fxLayout=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"25px\" class=\"main-container\">\r\n\r\n    <div class=\"content-action\">\r\n        <mat-card class=\"with-sticky-action\">\r\n            <mat-card-header>\r\n                <mat-card-title fxLayout=\"row\" fxLayoutGap=\"5px\">\r\n                    <mat-icon>settings_input_component</mat-icon>\r\n                    <span>ØªÙØ¸ÛÙØ§Øª ÙØ§ÚÙÙ Ø§Ø­Ø±Ø§Ø² ÙÙÛØª</span>\r\n                </mat-card-title>\r\n                <!-- <mat-card-subtitle fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n                    <span>\r\n                        Ø´Ø§ÙÙ ØªÙØ§ÙÛ Ø¯Ø±Ø®ÙØ§Ø³ØªâÙØ§ Ø§Ø² ÙØ¨ÛÙ Ø¯Ø§Ø¦Ø±ÛØ Ø¬ÙØ¹âØ¢ÙØ±Û Ù ...\r\n                    </span>\r\n                </mat-card-subtitle> -->\r\n            </mat-card-header>\r\n\r\n            <div>\r\n\r\n                <h2>Endpoints</h2>\r\n                <div [formGroup]=\"formGroup.controls.endpoints\" fxLayout=\"column\">\r\n                    <mat-form-field>\r\n                        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"sign in\"\r\n                            formControlName=\"signIn\">\r\n                    </mat-form-field>\r\n                    <mat-form-field>\r\n                        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"sign out\"\r\n                            formControlName=\"signOut\">\r\n                    </mat-form-field>\r\n                    <mat-form-field>\r\n                        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"who am i\"\r\n                            formControlName=\"whoAmI\">\r\n                    </mat-form-field>\r\n                    <mat-form-field>\r\n                        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"captcha url\"\r\n                            formControlName=\"captchaUrl\">\r\n                    </mat-form-field>\r\n                </div>\r\n                <h2>Forms</h2>\r\n                <div [formGroup]=\"formGroup.controls.forms\" fxLayout=\"column\">\r\n                    <mat-form-field>\r\n                        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"SignIn Forms\"\r\n                            formControlName=\"signIn\">\r\n                    </mat-form-field>\r\n                    <!-- <ngs-form-selector (select)=\"setFormId($event,'signIn')\"></ngs-form-selector> -->\r\n                </div>\r\n            </div>\r\n        </mat-card>\r\n    </div>\r\n</div>`\r\n})\r\nexport class AuthenticationModuleConfigComponent {\r\n\tformGroup: FormGroup = new FormGroup({\r\n\t\tendpoints: new FormGroup({\r\n\t\t\tsignIn: new FormControl(\"\", [Validators.required]),\r\n\t\t\tsignOut: new FormControl(\"\", [Validators.required]),\r\n\t\t\twhoAmI: new FormControl(\"\", [Validators.required]),\r\n\t\t\tcaptchaUrl: new FormControl(\"\", [Validators.required])\r\n\t\t}),\r\n\t\tforms: new FormGroup({\r\n\t\t\tsignIn: new FormControl(\"\", [Validators.required])\r\n\t\t})\r\n\t});\r\n\t@Input()\r\n\tset configFormGroup(configFormGroup: FormGroup) {\r\n\t\tthis.formGroup.patchValue(configFormGroup.value);\r\n\t\tconfigFormGroup.valueChanges.subscribe(data => {\r\n\t\t\tthis.formGroup.patchValue(data);\r\n\t\t});\r\n\t}\r\n\t@Output() configChanged = new EventEmitter();\r\n\tconstructor(private injector: Injector) {\r\n\t\tthis.configFormGroup = this.injector.get(\"configFormGroup\");\r\n\t}\r\n\tsetFormId(formId: string, formName: string) {\r\n\t\tthis.formGroup.patchValue({ [formName]: formId });\r\n\t}\r\n}\r\n","import {\r\n\tComponent,\r\n\tOnInit,\r\n\tInput,\r\n\tAfterViewInit,\r\n\tComponentFactoryResolver,\r\n\tViewChild,\r\n\tViewContainerRef,\r\n\tReflectiveInjector,\r\n\tOnDestroy,\r\n\tOutput,\r\n\tEventEmitter\r\n} from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { PartialConfig } from \"../../models\";\r\nimport { AuthenticationModuleConfigComponent } from \"../../dumb-components/authentication-module-config/authentication-module-config.component\";\r\nimport { ConfigAppConfigComponent } from \"../../dumb-components/app-config/app-config.component\";\r\nimport { UserModuleConfigComponent } from \"../../dumb-components/user-module-config/user-module-config.component\";\r\nimport { LayoutModuleConfigComponent } from \"../../dumb-components/layout-config/layout-module-config.component\";\r\n\r\n@Component({\r\n\tselector: \"dynamic-config-component-selector\",\r\n\ttemplate: `<div #dynamicComponentContainer></div>`,\r\n\tstyles: [`:host{width:100%}.diagram-box{margin:15px}.diagram-box .c3{direction:ltr}`],\r\n\tentryComponents: [\r\n\t\tAuthenticationModuleConfigComponent,\r\n\t\tConfigAppConfigComponent,\r\n\t\tUserModuleConfigComponent,\r\n\t\tLayoutModuleConfigComponent\r\n\t]\r\n})\r\nexport class DynamicConfigComponentSelectorComponent implements AfterViewInit {\r\n\ttypeMapToDiagram: any = {\r\n\t\tauthentication_module_config: AuthenticationModuleConfigComponent,\r\n\t\tapp_config: ConfigAppConfigComponent,\r\n\t\tuser_module_config: UserModuleConfigComponent,\r\n\t\tlayout_config: LayoutModuleConfigComponent\r\n\t};\r\n\t@ViewChild(\"dynamicComponentContainer\", { read: ViewContainerRef })\r\n\tdynamicComponentContainer: ViewContainerRef;\r\n\t@Output() configChanged = new EventEmitter();\r\n\tget config() {\r\n\t\tif (!this.currentComponent) return {};\r\n\t\treturn this.currentComponent.instance.formGroup.value;\r\n\t}\r\n\tcurrentComponent: any = null;\r\n\t@Input()\r\n\tset data(data: PartialConfig) {\r\n\t\tif (!data || Object.keys(data).length == 0) return;\r\n\t\tif (!(data.type in this.typeMapToDiagram)) {\r\n\t\t\tif (this.currentComponent) this.currentComponent.destroy();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet _component: any = this.typeMapToDiagram[data.type];\r\n\t\tlet inputProviders = Object.keys(data.inputs).map(inputName => {\r\n\t\t\treturn { provide: inputName, useValue: (data.inputs as any)[inputName] };\r\n\t\t});\r\n\t\tlet resolvedInputs = ReflectiveInjector.resolve(inputProviders);\r\n\r\n\t\tlet injector = ReflectiveInjector.fromResolvedProviders(\r\n\t\t\tresolvedInputs,\r\n\t\t\tthis.dynamicComponentContainer.parentInjector\r\n\t\t);\r\n\t\tlet factory = this.resolver.resolveComponentFactory(_component);\r\n\r\n\t\tlet component = factory.create(injector);\r\n\t\t// (<any>component.instance).configChanged.add.subscribe((data: any) => {\r\n\t\t// \tthis.configChanged.emit(data);\r\n\t\t// });\r\n\t\tthis.dynamicComponentContainer.insert(component.hostView);\r\n\r\n\t\tif (this.currentComponent) {\r\n\t\t\tthis.currentComponent.destroy();\r\n\t\t}\r\n\r\n\t\tthis.currentComponent = component;\r\n\t}\r\n\tconstructor(private resolver: ComponentFactoryResolver) {}\r\n\tngAfterViewInit() {}\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { of } from \"rxjs/observable/of\";\r\n\r\nimport { ConfigActionTypes, ConfigLoadedSucceedAction, ConfigLoadedFailedAction } from \"../actions\";\r\nimport { ConfigService } from \"../services/config.service\";\r\nimport { GetConfigsApiModel } from \"../models\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\n\r\n@Injectable()\r\nexport class LoadConfigEffects {\r\n\tconstructor(private actions$: Actions<any>, private configService: ConfigService) {}\r\n\r\n\t@Effect()\r\n\tgetConfigs$ = this.actions$\r\n\t\t.ofType(ConfigActionTypes.GET_CONFIGS)\r\n\t\t.pipe(\r\n\t\t\tmap(action => action.payload),\r\n\t\t\tswitchMap((data: GetConfigsApiModel.Request) => this.configService.getConfigs()),\r\n\t\t\tmap(configs => new ConfigLoadedSucceedAction(configs)),\r\n\t\t\tcatchError(() => of(new ConfigLoadedFailedAction()))\r\n\t\t);\r\n}\r\n","import { ModuleWithProviders } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\n\r\nimport { ConfigModuleContainerComponent } from \"./smart-components/config-module-container/config-module-container.component\";\r\nimport { ConfigsComponent } from \"./smart-components/configs/configs.component\";\r\nimport { ConfigEditComponent } from \"./smart-components/config-edit/config-edit.component\";\r\n\r\nconst routes: Routes = [\r\n\t{\r\n\t\tpath: \"configs\",\r\n\t\tcomponent: ConfigModuleContainerComponent,\r\n\t\tchildren: [\r\n\t\t\t{\r\n\t\t\t\tpath: \"\",\r\n\t\t\t\tcomponent: ConfigsComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: \"edit/:name\",\r\n\t\t\t\tcomponent: ConfigEditComponent\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n];\r\n\r\nexport const RoutingModule: ModuleWithProviders = RouterModule.forChild(routes);\r\n","import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { StoreModule } from \"@ngrx/store\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport {\r\n\tMatIconModule,\r\n\tMatButtonModule,\r\n\tMatCardModule,\r\n\tMatSnackBarModule,\r\n\tMatSidenavModule,\r\n\tMatExpansionModule,\r\n\tMatSelectModule,\r\n\tMatFormFieldModule,\r\n\tMatListModule,\r\n\tMatMenuModule,\r\n\tMatRadioModule,\r\n\tMatInputModule,\r\n\tMatToolbarModule,\r\n\tMatDatepickerModule,\r\n\tMatProgressBarModule,\r\n\tMatSlideToggleModule\r\n} from \"@angular/material\";\r\nimport { EffectsModule } from \"@ngrx/effects\";\r\n\r\nimport { ConfigModuleConfig, MODULE_CONFIG_TOKEN } from \"./config.config\";\r\nimport { ConfigsComponent } from \"./smart-components/configs/configs.component\";\r\nimport { ConfigEditComponent } from \"./smart-components/config-edit/config-edit.component\";\r\nimport { ConfigAppConfigComponent } from \"./dumb-components/app-config/app-config.component\";\r\nimport { UserModuleConfigComponent } from \"./dumb-components/user-module-config/user-module-config.component\";\r\nimport { LayoutModuleConfigComponent } from \"./dumb-components/layout-config/layout-module-config.component\";\r\nimport { ConfigModuleContainerComponent } from \"./smart-components/config-module-container/config-module-container.component\";\r\nimport { AuthenticationModuleConfigComponent } from \"./dumb-components/authentication-module-config/authentication-module-config.component\";\r\nimport { DynamicConfigComponentSelectorComponent } from \"./smart-components/dynamic-config-component-selector/dynamic-config-component-selector.component\";\r\nimport { LoadConfigEffects } from \"./effects/load-config.effects\";\r\nimport { ConfigReducers } from \"./reducers/index\";\r\nimport { RoutingModule } from \"./config.routing-module\";\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n\t\tRouterModule,\r\n\t\tFormsModule,\r\n\t\tReactiveFormsModule,\r\n\t\tHttpClientModule,\r\n\t\tFlexLayoutModule,\r\n\t\tMatIconModule,\r\n\t\tMatButtonModule,\r\n\t\tMatCardModule,\r\n\t\tMatSnackBarModule,\r\n\t\tMatSidenavModule,\r\n\t\tMatExpansionModule,\r\n\t\tMatSelectModule,\r\n\t\tMatFormFieldModule,\r\n\t\tMatListModule,\r\n\t\tMatMenuModule,\r\n\t\tMatRadioModule,\r\n\t\tMatInputModule,\r\n\t\tMatSlideToggleModule,\r\n\t\tMatToolbarModule,\r\n\t\tMatDatepickerModule,\r\n\t\tMatProgressBarModule,\r\n\t\tBrowserAnimationsModule\r\n\t],\r\n\tdeclarations: [\r\n\t\tConfigsComponent,\r\n\t\tConfigEditComponent,\r\n\t\tConfigAppConfigComponent,\r\n\t\tUserModuleConfigComponent,\r\n\t\tLayoutModuleConfigComponent,\r\n\t\tConfigModuleContainerComponent,\r\n\t\tAuthenticationModuleConfigComponent,\r\n\t\tDynamicConfigComponentSelectorComponent\r\n\t],\r\n\tproviders: []\r\n})\r\nexport class NgsConfigModule {\r\n\tstatic forRoot(config: ConfigModuleConfig): ModuleWithProviders {\r\n\t\treturn {\r\n\t\t\tngModule: RootNgsConfigModule,\r\n\t\t\tproviders: [ { provide: MODULE_CONFIG_TOKEN, useValue: config } ]\r\n\t\t};\r\n\t}\r\n}\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tNgsConfigModule,\r\n\t\tStoreModule.forFeature(\"config\", ConfigReducers),\r\n\t\tEffectsModule.forFeature([ LoadConfigEffects ]),\r\n\t\tRoutingModule\r\n\t],\r\n\texports: [ NgsConfigModule ]\r\n})\r\nexport class RootNgsConfigModule {}\r\n"]}