{"version":3,"file":"soushians-widget.js.map","sources":["ng://@soushians/widget/lib/services/api/get-widgets/get-widgets.model.ts","ng://@soushians/widget/lib/services/api/get-widgets/get-widgets.actions.ts","ng://@soushians/widget/lib/services/api/get-widget/get-widget.model.ts","ng://@soushians/widget/lib/services/api/get-widget/get-widget.actions.ts","ng://@soushians/widget/lib/models/widget.model.ts","ng://@soushians/widget/lib/services/api/upsert-widget/upsert-widget.model.ts","ng://@soushians/widget/lib/services/api/upsert-widget/upsert-widget.actions.ts","ng://@soushians/widget/lib/widget.config.ts","ng://@soushians/widget/lib/services/widget-configuration.service.ts","ng://@soushians/widget/lib/services/widget.service.ts","ng://@soushians/widget/lib/view/dynamic-widget-view.component.ts","ng://@soushians/widget/lib/widget-selector/widget-selector.component.ts","ng://@soushians/widget/lib/root/root.component.ts","ng://@soushians/widget/lib/mangement/widget-management.component.ts","ng://@soushians/widget/lib/upsert/upsert.component.ts","ng://@soushians/widget/lib/widget-routing.module.ts","ng://@soushians/widget/lib/services/api/get-widget/get-widget.effects.ts","ng://@soushians/widget/lib/services/api/upsert-widget/upsert-widget.effects.ts","ng://@soushians/widget/lib/services/api/get-widgets/get-widgets.effects.ts","ng://@soushians/widget/lib/root/widget.actions.ts","ng://@soushians/widget/lib/root/widgets.reducers.ts","ng://@soushians/widget/lib/widget.reducer.ts","ng://@soushians/widget/lib/root/widgets.effects.ts","ng://@soushians/widget/lib/upsert/dynamic-widget-config.directive.ts","ng://@soushians/widget/lib/view/dynamic-widget-view.directive.ts","ng://@soushians/widget/lib/widget.module.ts","ng://@soushians/widget/lib/models/widget-view.interface.ts","ng://@soushians/widget/lib/models/widget-upsert.interface.ts"],"sourcesContent":["import { WidgetModel } from \"../../../models/widget.model\";\r\n\r\nexport namespace GetWidgetsApiModel {\r\n\texport class Request {\r\n\t\tconstructor(initValue = {}) {\r\n\t\t\tObject.keys(initValue).forEach(key => (this[key] = initValue[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {};\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: WidgetModel<any>[];\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { GetWidgetsApiModel } from \"./get-widgets.model\";\r\nimport { WidgetModel } from \"../../../models/widget.model\";\r\n\r\nexport const enum GET_WIDGETS_ACTION_TYPES {\r\n\tSTART = \"[GET_WIDGETS][API][GetWidgets] start\",\r\n\tSUCCEED = \"[GET_WIDGETS][API][GetWidgets] succeed\",\r\n\tFAILED = \"[GET_WIDGETS][API][GetWidgets] failed\"\r\n}\r\n\r\nexport class GetWidgetsStartAction implements Action {\r\n\treadonly type = GET_WIDGETS_ACTION_TYPES.START;\r\n}\r\nexport class GetWidgetsSucceedAction implements Action {\r\n\treadonly type = GET_WIDGETS_ACTION_TYPES.SUCCEED;\r\n\tconstructor(public payload: WidgetModel<any>[]) {}\r\n}\r\nexport class GetWidgetsFailedAction implements Action {\r\n\treadonly type = GET_WIDGETS_ACTION_TYPES.FAILED;\r\n\tconstructor(public payload: any) {}\r\n}\r\n\r\nexport type GetWidgetsActions = GetWidgetsStartAction | GetWidgetsSucceedAction | GetWidgetsFailedAction;\r\n","import { WidgetModel } from \"../../../models/widget.model\";\r\n\r\nexport namespace GetWidgetApiModel {\r\n\texport class Request {\r\n\t\t_id: string;\r\n\t\tconstructor(initValue = {}) {\r\n\t\t\tObject.keys(initValue).forEach(key => (this[key] = initValue[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {};\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: WidgetModel<any>;\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { GetWidgetApiModel } from \"./get-widget.model\";\r\nimport { WidgetModel } from \"../../../models/widget.model\";\r\n\r\nexport const enum GET_WIDGET_ACTION_TYPES {\r\n\tSTART = \"[WIDGET][API][GetWidget] start\",\r\n\tSUCCEED = \"[WIDGET][API][GetWidget] succeed\",\r\n\tFAILED = \"[WIDGET][API][GetWidget] failed\"\r\n}\r\n\r\nexport class GetWidgetStartAction implements Action {\r\n\treadonly type = GET_WIDGET_ACTION_TYPES.START;\r\n\tconstructor(public payload: string) {}\r\n}\r\nexport class GetWidgetSucceedAction implements Action {\r\n\treadonly type = GET_WIDGET_ACTION_TYPES.SUCCEED;\r\n\tconstructor(public payload: WidgetModel<any>) {}\r\n}\r\nexport class GetWidgetFailedAction implements Action {\r\n\treadonly type = GET_WIDGET_ACTION_TYPES.FAILED;\r\n\tconstructor(public payload: any) {}\r\n}\r\n\r\nexport type GetWidgetActions = GetWidgetStartAction | GetWidgetSucceedAction | GetWidgetFailedAction;\r\n","export class WidgetModel<T> {\r\n\t_id: string;\r\n\tname: string;\r\n\ttype: string;\r\n\tConfig: T;\r\n\tconstructor({ _id, name, type, Config }: { _id?: string; name?: string; type?: string; Config?: T } = {}) {\r\n\t\tthis._id = _id;\r\n\t\tthis.name = name;\r\n\t\tthis.type = type;\r\n\t\tthis.Config = Config;\r\n\t}\r\n}\r\n","import { WidgetModel } from \"../../../models/widget.model\";\r\n\r\nexport namespace UpsertWidgetApiModel {\r\n\texport class Request {\r\n\t\twidget: WidgetModel<any>;\r\n\t\tconstructor(widget = {}) {\r\n\t\t\tdebugger;\r\n\t\t\tthis.widget = new WidgetModel(widget);\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn this.widget;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: WidgetModel<any>;\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { UpsertWidgetApiModel } from \"./upsert-widget.model\";\r\nimport { WidgetModel } from \"../../../models/widget.model\";\r\n\r\nexport const enum UPSERT_WIDGET_ACTION_TYPES {\r\n\tSTART = \"[UPSERT_WIDGET][API][UpsertWidget] start\",\r\n\tSUCCEED = \"[UPSERT_WIDGET][API][UpsertWidget] succeed\",\r\n\tFAILED = \"[UPSERT_WIDGET][API][UpsertWidget] failed\"\r\n}\r\n\r\nexport class UpsertWidgetStartAction implements Action {\r\n\treadonly type = UPSERT_WIDGET_ACTION_TYPES.START;\r\n\tconstructor(public payload: WidgetModel<any>) {}\r\n}\r\nexport class UpsertWidgetSucceedAction implements Action {\r\n\treadonly type = UPSERT_WIDGET_ACTION_TYPES.SUCCEED;\r\n\tconstructor(public payload: WidgetModel<any>) {}\r\n}\r\nexport class UpsertWidgetFailedAction implements Action {\r\n\treadonly type = UPSERT_WIDGET_ACTION_TYPES.FAILED;\r\n\tconstructor(public payload: any) {}\r\n}\r\n\r\nexport type UpsertWidgetActions = UpsertWidgetStartAction | UpsertWidgetSucceedAction | UpsertWidgetFailedAction;\r\n","import { InjectionToken } from \"@angular/core\";\r\n\r\nimport { IModuleConfigMapTypes } from \"./models/module-config-map-types.interfce\";\r\n\r\nexport interface WidgetModuleConfig {\r\n\tdevelopment_uri?: string;\r\n\tproduction_uri?: string;\r\n\tenv?: {\r\n\t\tproduction: boolean;\r\n\t\tfrontend_server: string;\r\n\t};\r\n\tendpoints?: {\r\n\t\tget: string;\r\n\t\tfind: string;\r\n\t\tupsert: string;\r\n\t};\r\n\ttypes?: IModuleConfigMapTypes;\r\n}\r\nexport const MODULE_DEFAULT_CONFIG: WidgetModuleConfig = {\r\n\tenv: {\r\n\t\tproduction: false,\r\n\t\tfrontend_server: \"frontend_server/did/not/set\"\r\n\t},\r\n\tendpoints: {\r\n\t\tupsert: \"/api/uiwidget\",\r\n\t\tfind: \"/api/uiwidget\",\r\n\t\tget: \"/api/uiwidget/${model._id}\"\r\n\t},\r\n\ttypes: {}\r\n};\r\nexport const MODULE_CONFIG_TOKEN = new InjectionToken<WidgetModuleConfig>(\"WidgetModuleConfig\");\r\n","import { BehaviorSubject } from \"rxjs\";\r\nimport { Inject, Injectable } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { WidgetModuleConfig, MODULE_DEFAULT_CONFIG, MODULE_CONFIG_TOKEN } from \"../widget.config\";\r\nimport { AppState } from \"../widget.reducer\";\r\n\r\n@Injectable()\r\nexport class WidgetConfigurationService {\r\n\tprivate _config: WidgetModuleConfig;\r\n\tget config() {\r\n\t\treturn this._config;\r\n\t}\r\n\tconfig$ = new BehaviorSubject(MODULE_DEFAULT_CONFIG);\r\n\tconstructor(@Inject(MODULE_CONFIG_TOKEN) configFile, private store: Store<AppState>) {\r\n\t\tthis._config = Object.assign({}, MODULE_DEFAULT_CONFIG, configFile);\r\n\t\tthis.config$.next(this._config);\r\n\t\t// this.store.select(getWidgetModuleConfig).subscribe((widgetConfig) => {\r\n\t\t// \tif (!widgetConfig) {\r\n\t\t// \t\treturn;\r\n\t\t// \t}\r\n\t\t// \tthis._config = Object.assign({}, this._config, widgetConfig.Config);\r\n\t\t// \tthis.config$.next(this._config);\r\n\t\t// });\r\n\t}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { map, filter, tap, take, switchMap } from 'rxjs/operators';\r\nimport { Store } from '@ngrx/store';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { AppState } from '../widget.reducer';\r\nimport { WidgetConfigurationService } from './widget-configuration.service';\r\nimport { WidgetModel } from '../models/widget.model';\r\nimport { stringTemplate } from '@soushians/shared';\r\nimport { GetWidgetsApiModel, GetWidgetStartAction, UpsertWidgetApiModel } from './api';\r\n\r\n// import { getWidgetModuleConfig } from \"@soushians/config\";\r\n\r\n// import { WidgetConfigurationService } from \"./widget-configuration.service\";\r\n// import { WidgetRunSuccessfullyAction } from \"../widget.actions\";\r\n\r\n@Injectable()\r\nexport class WidgetService {\r\n\tconstructor(\r\n\t\tprivate http: HttpClient,\r\n\t\tprivate store: Store<AppState>,\r\n\t\tprivate configurationService: WidgetConfigurationService\r\n\t) {}\r\n\r\n\tget<T>(_id: string): Observable<WidgetModel<T>> {\r\n\t\treturn this.configurationService.config$.pipe(\r\n\t\t\tfilter((config) => config.endpoints.get !== ''),\r\n\t\t\ttake(1),\r\n\t\t\tswitchMap((config) =>\r\n\t\t\t\tthis.http.get(stringTemplate(config.env.frontend_server + config.endpoints.get, { _id }))\r\n\t\t\t),\r\n\t\t\tmap((response: UpsertWidgetApiModel.Response) => response.Result)\r\n\t\t);\r\n\t}\r\n\r\n\tgetWidgets(): Observable<WidgetModel<any>[]> {\r\n\t\treturn this.configurationService.config$.pipe(\r\n\t\t\tfilter((config) => config.endpoints.find != ''),\r\n\t\t\tswitchMap((config) => this.http.get(config.env.frontend_server + config.endpoints.find)),\r\n\t\t\tmap((response: GetWidgetsApiModel.Response) => response.Result)\r\n\t\t);\r\n\t}\r\n\tupsert<T>(widget: UpsertWidgetApiModel.Request): Observable<WidgetModel<T>> {\r\n\t\tconst model = new UpsertWidgetApiModel.Request(widget);\r\n\t\treturn this.configurationService.config$.pipe(\r\n\t\t\tfilter((config) => config.endpoints.upsert != ''),\r\n\t\t\ttake(1),\r\n\t\t\tswitchMap((config) =>\r\n\t\t\t\tthis.http.post(config.env.frontend_server + config.endpoints.upsert, model.getRequestBody())\r\n\t\t\t),\r\n\t\t\tmap((response: UpsertWidgetApiModel.Response) => response.Result)\r\n\t\t);\r\n\t}\r\n\t// delete(_id: string) {\r\n\t// \treturn this.configurationService.config$\r\n\t// \t\t.filter((config) => config.endpoints.deleteForm != \"\")\r\n\t// \t\t.switchMap((config) => this.http.get(config.endpoints.deleteForm));\r\n\t// }\r\n\tselectById<T>(_id: string): Observable<WidgetModel<T>> {\r\n\t\tconst subject = new BehaviorSubject<WidgetModel<T>>(undefined);\r\n\t\tthis.store\r\n\t\t\t.select((state) => state.widgets.db.data)\r\n\t\t\t.pipe(\r\n\t\t\t\tfilter((widgets) => widgets != null),\r\n\t\t\t\tmap((widgets) => widgets.find((widget) => widget._id == _id)),\r\n\t\t\t\ttap((widget) => {\r\n\t\t\t\t\tif (widget == null) {\r\n\t\t\t\t\t\tthis.store.dispatch(new GetWidgetStartAction(_id));\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t\t.subscribe((widget) => subject.next(widget));\r\n\t\treturn subject.asObservable();\r\n\t}\r\n}\r\n","import {\r\n\tComponent,\r\n\tOnInit,\r\n\tComponentRef,\r\n\tComponentFactoryResolver,\r\n\tViewContainerRef,\r\n\tDirective,\r\n\tInput\r\n} from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { pluck, filter, switchMap, map, startWith } from \"rxjs/operators\";\r\n\r\nimport { WidgetModel } from \"../models/widget.model\";\r\nimport { AppState } from \"../widget.reducer\";\r\nimport { IModuleConfigMapTypes } from \"../models/module-config-map-types.interfce\";\r\nimport { WidgetService } from \"../services/widget.service\";\r\nimport { WidgetConfigurationService } from \"../services/widget-configuration.service\";\r\n\r\n@Component({\r\n\ttemplate: \"\"\r\n})\r\nexport class DynamicWidgetViewComponent implements OnInit {\r\n\t@Input()\r\n\tset oid(id: string) {\r\n\t\tthis._selectWidget(id);\r\n\t}\r\n\twidget$: Observable<WidgetModel<any>>;\r\n\tcomponent: ComponentRef<any>;\r\n\tmapTypeToComponent: IModuleConfigMapTypes;\r\n\tconstructor(\r\n\t\tpublic store: Store<AppState>,\r\n\t\tprivate service: WidgetService,\r\n\t\tprivate configurationService: WidgetConfigurationService,\r\n\t\tprivate resolver: ComponentFactoryResolver,\r\n\t\tprivate container: ViewContainerRef\r\n\t) {\r\n\t\tthis._fill_component_map();\r\n\t}\r\n\tngOnInit() {\r\n\t\tthis.widget$.pipe(filter((widget) => widget != undefined)).subscribe((widget) => {\r\n\t\t\tthis._resolve_correct_component_base_on_widget_type(widget);\r\n\t\t});\r\n\t}\r\n\t_fill_component_map() {\r\n\t\tthis.configurationService.config$.pipe(map((config) => config.types), startWith({})).subscribe((types) => {\r\n\t\t\tdebugger;\r\n\t\t\tthis.mapTypeToComponent = types;\r\n\t\t});\r\n\t}\r\n\t_selectWidget(id: string) {\r\n\t\tthis.widget$ = this.service.selectById<any>(id);\r\n\t}\r\n\t_resolve_correct_component_base_on_widget_type(widget) {\r\n\t\tif (!this.mapTypeToComponent[widget.type]) {\r\n\t\t\tdebugger;\r\n\t\t\tconst supportedTypes = Object.keys(this.mapTypeToComponent).join(\", \");\r\n\t\t\tthrow new Error(\r\n\t\t\t\t`Trying to use an unsupported type (${widget.type}).\r\n\t\t  \t\t Supported types: ${supportedTypes}`\r\n\t\t\t);\r\n\t\t}\r\n\t\tconst component = this.resolver.resolveComponentFactory<any>(this.mapTypeToComponent[widget.type].view);\r\n\t\tthis.component = this.container.createComponent(component);\r\n\t\tthis.widget$.subscribe((w) => (this.component.instance.widget = w));\r\n\t}\r\n}\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { IGridItemComponent } from \"@soushians/grid\";\r\n\r\nimport { WidgetModel } from \"../models/widget.model\";\r\nimport { IWidgetViewInputInterface } from \"../models/widget-view-input.interface\";\r\nimport { AppState } from \"../widget.reducer\";\r\nimport { GetWidgetsStartAction } from \"../services/api\";\r\n\r\n@Component({\r\n\ttemplate: `<mat-select placeholder=\"Grid Type\" [(ngModel)]=\"selectedWidgetId\" name=\"selectedWidgetId\">\r\n  <mat-option *ngFor=\"let item of (widgets$ | async)\" [value]=\"item._id\">\r\n    {{item.type}} : <b>{{item.name}}</b>\r\n  </mat-option>\r\n</mat-select>`\r\n})\r\nexport class WidgetSelectorComponent implements OnInit, IGridItemComponent<IWidgetViewInputInterface> {\r\n\twidgets$: Observable<WidgetModel<any>[]>;\r\n\tselectedWidgetId: string;\r\n\tget valid() {\r\n\t\treturn this.config.oid != undefined;\r\n\t}\r\n\tget config() {\r\n\t\treturn {\r\n\t\t\toid: this.selectedWidgetId\r\n\t\t};\r\n\t}\r\n\tconstructor(public store: Store<AppState>) {\r\n\t\tthis.widgets$ = this.store.select(state => state.widgets.db.data);\r\n\t}\r\n\tngOnInit() {\r\n\t\tthis.store.dispatch(new GetWidgetsStartAction());\r\n\t}\r\n}\r\n","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n\tselector: \"widget-root\",\r\n\ttemplate: \"<router-outlet></router-outlet>\"\r\n})\r\nexport class RootComponent {}\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { WidgetModel } from \"../models/widget.model\";\r\nimport { AppState } from \"../widget.reducer\";\r\nimport { GetWidgetsStartAction } from \"../services/api/get-widgets/get-widgets.actions\";\r\n\r\n@Component({\r\n\ttemplate: `<div fxLayout=\"row wrap\" fxLayoutAlign=\"center center\" >\r\n    <mat-card class=\"cards-item\" *ngFor=\"let item of (widgets$ | async)\" fxFlex=\"51\">\r\n      <h3>\r\n        <a [routerLink]=\"['../upsert' ,  item.type,  item._id]\">\r\n          <mat-icon aria-label=\"edit widget\">edit</mat-icon>\r\n        </a>\r\n        {{item.name}}\r\n      </h3>\r\n  </mat-card>\r\n</div>`\r\n})\r\nexport class WidgetsManagementComponent implements OnInit {\r\n\twidgets$: Observable<WidgetModel<any>[]>;\r\n\tconstructor(public store: Store<AppState>) {\r\n\t\tthis.widgets$ = this.store.select((state) => state.widgets.db.data);\r\n\t}\r\n\tngOnInit() {\r\n\t\tthis.store.dispatch(new GetWidgetsStartAction());\r\n\t}\r\n}\r\n","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n\ttemplate: `<div fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n    <div fxFlex=\"50\">\r\n        <ng-container ngsDynamicWidgetConfig></ng-container>\r\n    </div>\r\n</div>`\r\n})\r\nexport class UpsertComponent {}\r\n","import { ModuleWithProviders } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\n\r\nimport { RootComponent } from \"./root/root.component\";\r\nimport { WidgetsManagementComponent } from \"./mangement/widget-management.component\";\r\nimport { UpsertComponent } from \"./upsert/upsert.component\";\r\n\r\nconst routes: Routes = [\r\n\t{\r\n\t\tpath: \"widget\",\r\n\t\tcomponent: RootComponent,\r\n\t\tchildren: [\r\n\t\t\t{\r\n\t\t\t\tpath: \"management\",\r\n\t\t\t\tcomponent: WidgetsManagementComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: \"upsert/:type\",\r\n\t\t\t\tcomponent: UpsertComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: \"upsert/:type/:_id\",\r\n\t\t\t\tcomponent: UpsertComponent\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n];\r\n\r\nexport const WidgetRoutingModule: ModuleWithProviders = RouterModule.forChild(routes);\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\nimport { of } from \"rxjs\";\r\n\r\nimport { WidgetService } from \"../../widget.service\";\r\nimport {\r\n\tGET_WIDGET_ACTION_TYPES,\r\n\tGetWidgetActions,\r\n\tGetWidgetSucceedAction,\r\n\tGetWidgetFailedAction\r\n} from \"./get-widget.actions\";\r\n\r\n@Injectable()\r\nexport class GetWidgetApiEffects {\r\n\tconstructor(private actions$: Actions<GetWidgetActions>, private service: WidgetService) {}\r\n\r\n\t@Effect()\r\n\tstart$ = this.actions$\r\n\t\t.ofType(GET_WIDGET_ACTION_TYPES.START)\r\n\t\t.pipe(\r\n\t\t\tmap((action) => action.payload),\r\n\t\t\tswitchMap((payload) => this.service.get(payload)),\r\n\t\t\tmap((res) => new GetWidgetSucceedAction(res)),\r\n\t\t\tcatchError((err) => of(new GetWidgetFailedAction(err)))\r\n\t\t);\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\nimport { of } from \"rxjs\";\r\n\r\nimport { WidgetService } from \"../../widget.service\";\r\nimport {\r\n\tUPSERT_WIDGET_ACTION_TYPES,\r\n\tUpsertWidgetActions,\r\n\tUpsertWidgetSucceedAction,\r\n\tUpsertWidgetFailedAction\r\n} from \"./upsert-widget.actions\";\r\n\r\n@Injectable()\r\nexport class UpsertWidgetApiEffects {\r\n\tconstructor(private actions$: Actions<UpsertWidgetActions>, private service: WidgetService) {}\r\n\r\n\t@Effect()\r\n\tstart$ = this.actions$\r\n\t\t.ofType(UPSERT_WIDGET_ACTION_TYPES.START)\r\n\t\t.pipe(\r\n\t\t\tmap((action) => action.payload),\r\n\t\t\tswitchMap((payload) => this.service.upsert(payload)),\r\n\t\t\tmap((res) => new UpsertWidgetSucceedAction(res)),\r\n\t\t\tcatchError((err) => of(new UpsertWidgetFailedAction(err)))\r\n\t\t);\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\nimport { of } from \"rxjs\";\r\n\r\nimport { WidgetService } from \"../../widget.service\";\r\nimport {\r\n\tGET_WIDGETS_ACTION_TYPES,\r\n\tGetWidgetsActions,\r\n\tGetWidgetsSucceedAction,\r\n\tGetWidgetsFailedAction\r\n} from \"./get-widgets.actions\";\r\n\r\n@Injectable()\r\nexport class GetWidgetsApiEffects {\r\n\tconstructor(private actions$: Actions<GetWidgetsActions>, private service: WidgetService) {}\r\n\r\n\t@Effect()\r\n\tstart$ = this.actions$\r\n\t\t.ofType(GET_WIDGETS_ACTION_TYPES.START)\r\n\t\t.pipe(\r\n\t\t\tswitchMap(() =>\r\n\t\t\t\tthis.service\r\n\t\t\t\t\t.getWidgets()\r\n\t\t\t\t\t.pipe(\r\n\t\t\t\t\t\tmap((res) => new GetWidgetsSucceedAction(res)),\r\n\t\t\t\t\t\tcatchError((err) => of(new GetWidgetsFailedAction(err)))\r\n\t\t\t\t\t)\r\n\t\t\t)\r\n\t\t);\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { WidgetModel } from \"../models/widget.model\";\r\n\r\nexport enum WidgetsActionTypes {\r\n\tUPSERT = \"[WIDGET][DB] UPSERT\",\r\n\tDELETE = \"[WIDGET][DB] DELETE\"\r\n}\r\n\r\nexport class UpsertWidgetAction implements Action {\r\n\treadonly type = WidgetsActionTypes.UPSERT;\r\n\tconstructor(public payload: WidgetModel<any>[]) {}\r\n}\r\nexport class DeleteWidgetAction implements Action {\r\n\treadonly type = WidgetsActionTypes.DELETE;\r\n\tconstructor(public payload: WidgetModel<any>) {}\r\n}\r\n\r\nexport type WidgetsActions = UpsertWidgetAction | DeleteWidgetAction;\r\n","import { WidgetModel } from \"../models/widget.model\";\r\nimport { WidgetsActions, WidgetsActionTypes } from \"./widget.actions\";\r\n\r\nexport interface State {\r\n\tdata: WidgetModel<any>[];\r\n}\r\n\r\nconst initialState: State = {\r\n\tdata: []\r\n};\r\n\r\nexport function Reducer(state = initialState, action: WidgetsActions): State {\r\n\tlet _data: WidgetModel<any>[];\r\n\tswitch (action.type) {\r\n\t\tcase WidgetsActionTypes.UPSERT:\r\n\t\t\t_data = state.data.concat();\r\n\t\t\tconst newWidgets = action.payload;\r\n\r\n\t\t\tnewWidgets.forEach(newWidget => {\r\n\t\t\t\tconst existedWidgetIndex = _data.findIndex(w => w._id == newWidget._id);\r\n\t\t\t\tif (existedWidgetIndex > -1) {\r\n\t\t\t\t\t_data.splice(existedWidgetIndex, 1, newWidget);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t_data.push(newWidget);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: _data\r\n\t\t\t};\r\n\r\n\t\tcase WidgetsActionTypes.DELETE:\r\n\t\t\t_data = Object.assign({}, state.data);\r\n\r\n\t\t\tconst widgetIndex = state.data.findIndex(w => w._id == action.payload._id);\r\n\t\t\t_data.splice(widgetIndex, 1);\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: _data\r\n\t\t\t};\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport const getWidgets = (state: State) => state.data;\r\n","import * as fromRoot from \"./root/widgets.reducers\";\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface WidgetState {\r\n\tdb: fromRoot.State;\r\n}\r\n\r\nexport const WidgetReducer = {\r\n\tdb: fromRoot.Reducer\r\n};\r\n\r\nexport interface AppState {\r\n\twidgets: WidgetState;\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { map, pluck } from \"rxjs/operators\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { GET_WIDGET_ACTION_TYPES, GET_WIDGETS_ACTION_TYPES } from \"../services/api\";\r\nimport { WidgetModel } from \"../models/widget.model\";\r\nimport { UpsertWidgetAction } from \"./widget.actions\";\r\n\r\n@Injectable()\r\nexport class WidgetDbEffects {\r\n\tconstructor(private actions$: Actions<any>) {}\r\n\r\n\t@Effect()\r\n\tUpsert$ = this.actions$\r\n\t\t.ofType(GET_WIDGET_ACTION_TYPES.SUCCEED)\r\n\t\t.pipe(pluck(\"payload\"), map((widget: WidgetModel<any>) => new UpsertWidgetAction([ widget ])));\r\n\r\n\t@Effect()\r\n\tUpsertMany$ = this.actions$\r\n\t\t.ofType(GET_WIDGETS_ACTION_TYPES.SUCCEED)\r\n\t\t.pipe(pluck(\"payload\"), map((widgets: WidgetModel<any>[]) => new UpsertWidgetAction(widgets)));\r\n}\r\n","import { Component, OnInit, ComponentRef, ComponentFactoryResolver, ViewContainerRef, Directive } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { pluck, filter, switchMap, map, startWith } from \"rxjs/operators\";\r\n\r\nimport { WidgetModel } from \"../models/widget.model\";\r\nimport { AppState } from \"../widget.reducer\";\r\nimport { WidgetService } from \"../services/widget.service\";\r\nimport { WidgetConfigurationService } from \"../services/widget-configuration.service\";\r\nimport { IModuleConfigMapTypes } from \"../models/module-config-map-types.interfce\";\r\n\r\n@Directive({\r\n\tselector: \"[ngsDynamicWidgetConfig]\"\r\n})\r\nexport class DynamicWidgetConfigDirective implements OnInit {\r\n\twidget$: Observable<WidgetModel<any>>;\r\n\tcomponent: ComponentRef<any>;\r\n\tmapTypeToComponent: IModuleConfigMapTypes;\r\n\tconstructor(\r\n\t\tpublic store: Store<AppState>,\r\n\t\tprivate route: ActivatedRoute,\r\n\t\tprivate service: WidgetService,\r\n\t\tprivate configurationService: WidgetConfigurationService,\r\n\t\tprivate resolver: ComponentFactoryResolver,\r\n\t\tprivate container: ViewContainerRef\r\n\t) {\r\n\t\tthis._fill_component_map();\r\n\t}\r\n\tngOnInit() {\r\n\t\tthis._selectWidget();\r\n\t\tthis.widget$.pipe(filter(widget => widget != undefined)).subscribe(widget => {\r\n\t\t\tthis._resolve_correct_component_base_on_widget_type(widget);\r\n\t\t});\r\n\t}\r\n\t_fill_component_map() {\r\n\t\tthis.configurationService.config$.pipe(map(config => config.types), startWith({})).subscribe(types => {\r\n\t\t\tdebugger;\r\n\t\t\tthis.mapTypeToComponent = types;\r\n\t\t});\r\n\t}\r\n\t_selectWidget() {\r\n\t\tthis.widget$ = this.route.params.pipe(\r\n\t\t\tpluck(\"_id\"),\r\n\t\t\tfilter((id: string) => id != null),\r\n\t\t\tswitchMap(id => this.service.selectById<any>(id))\r\n\t\t);\r\n\t}\r\n\t_resolve_correct_component_base_on_widget_type(widget) {\r\n\t\tif (!this.mapTypeToComponent[widget.type]) {\r\n\t\t\tconst supportedTypes = Object.keys(this.mapTypeToComponent).join(\", \");\r\n\t\t\tthrow new Error(\r\n\t\t\t\t`Trying to use an unsupported type (${widget.type}).\r\n\t\t  \t\t Supported types: ${supportedTypes}`\r\n\t\t\t);\r\n\t\t}\r\n\t\tconst component = this.resolver.resolveComponentFactory<any>(this.mapTypeToComponent[widget.type].upsert);\r\n\t\tthis.component = this.container.createComponent(component);\r\n\t\tthis.widget$.subscribe(w => (this.component.instance.widget = w));\r\n\t}\r\n}\r\n","import {\r\n\tComponent,\r\n\tOnInit,\r\n\tComponentRef,\r\n\tComponentFactoryResolver,\r\n\tViewContainerRef,\r\n\tDirective,\r\n\tInput\r\n} from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { pluck, filter, switchMap, map, startWith } from \"rxjs/operators\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\n\r\nimport { WidgetModel } from \"../models/widget.model\";\r\nimport { AppState } from \"../widget.reducer\";\r\nimport { WidgetService } from \"../services/widget.service\";\r\nimport { WidgetConfigurationService } from \"../services/widget-configuration.service\";\r\nimport { IModuleConfigMapTypes } from \"../models/module-config-map-types.interfce\";\r\n\r\n@Directive({\r\n\tselector: \"[ngsDynamicWidgetView]\"\r\n})\r\nexport class DynamicWidgetViewDirective implements OnInit {\r\n\t@Input()\r\n\tset oid(id: string) {\r\n\t\tthis._selectWidget(id);\r\n\t}\r\n\twidget$: Observable<WidgetModel<any>>;\r\n\tcomponent: ComponentRef<any>;\r\n\tmapTypeToComponent: IModuleConfigMapTypes;\r\n\tconstructor(\r\n\t\tpublic store: Store<AppState>,\r\n\t\tprivate route: ActivatedRoute,\r\n\t\tprivate service: WidgetService,\r\n\t\tprivate configurationService: WidgetConfigurationService,\r\n\t\tprivate resolver: ComponentFactoryResolver,\r\n\t\tprivate container: ViewContainerRef\r\n\t) {\r\n\t\tthis._fill_component_map();\r\n\t}\r\n\tngOnInit() {\r\n\t\tthis.widget$.pipe(filter(widget => widget != undefined)).subscribe(widget => {\r\n\t\t\tthis._resolve_correct_component_base_on_widget_type(widget);\r\n\t\t});\r\n\t}\r\n\t_fill_component_map() {\r\n\t\tthis.configurationService.config$.pipe(map(config => config.types), startWith({})).subscribe(types => {\r\n\t\t\tdebugger;\r\n\t\t\tthis.mapTypeToComponent = types;\r\n\t\t});\r\n\t}\r\n\t_selectWidget(id: string) {\r\n\t\tthis.widget$ = this.service.selectById<any>(id);\r\n\t}\r\n\t_resolve_correct_component_base_on_widget_type(widget) {\r\n\t\tif (!this.mapTypeToComponent[widget.type]) {\r\n\t\t\tconst supportedTypes = Object.keys(this.mapTypeToComponent).join(\", \");\r\n\t\t\tthrow new Error(\r\n\t\t\t\t`Trying to use an unsupported type (${widget.type}).\r\n\t\t  \t\t Supported types: ${supportedTypes}`\r\n\t\t\t);\r\n\t\t}\r\n\t\tconst component = this.resolver.resolveComponentFactory<any>(this.mapTypeToComponent[widget.type].view);\r\n\t\tthis.component = this.container.createComponent(component);\r\n\t\tthis.widget$.subscribe(w => (this.component.instance.widget = w));\r\n\t}\r\n}\r\n","import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { StoreDevtoolsModule } from \"@ngrx/store-devtools\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { StoreModule } from \"@ngrx/store\";\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport {\r\n\tMatExpansionModule,\r\n\tMatSnackBarModule,\r\n\tMatIconModule,\r\n\tMatButtonModule,\r\n\tMatCardModule,\r\n\tMatSelectModule,\r\n\tMatInputModule,\r\n\tMatFormFieldModule,\r\n\tMatTabsModule,\r\n\tMatRadioModule,\r\n\tMatSlideToggleModule,\r\n\tMatDividerModule,\r\n\tMatCheckbox,\r\n\tMatCheckboxModule,\r\n\tMatTableModule\r\n} from \"@angular/material\";\r\nimport { EffectsModule } from \"@ngrx/effects\";\r\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\r\n\r\nimport { WidgetConfigurationService } from \"./services/widget-configuration.service\";\r\nimport { WidgetService } from \"./services/widget.service\";\r\n// import { WidgetReducer } from \"./widget.reducer\";\r\nimport { WidgetModuleConfig, MODULE_CONFIG_TOKEN } from \"./widget.config\";\r\nimport { WidgetRoutingModule } from \"./widget-routing.module\";\r\nimport { RootComponent } from \"./root/root.component\";\r\nimport { GetWidgetApiEffects } from \"./services/api/get-widget/get-widget.effects\";\r\nimport { UpsertWidgetApiEffects } from \"./services/api/upsert-widget/upsert-widget.effects\";\r\nimport { GetWidgetsApiEffects } from \"./services/api/get-widgets/get-widgets.effects\";\r\nimport { WidgetReducer } from \"./widget.reducer\";\r\nimport { WidgetDbEffects } from \"./root/widgets.effects\";\r\nimport { WidgetsManagementComponent } from \"./mangement/widget-management.component\";\r\nimport { UpsertComponent } from \"./upsert/upsert.component\";\r\nimport { DynamicWidgetConfigDirective } from \"./upsert/dynamic-widget-config.directive\";\r\nimport { DynamicWidgetViewDirective } from \"./view/dynamic-widget-view.directive\";\r\nimport { WidgetSelectorComponent } from \"./widget-selector/widget-selector.component\";\r\nimport { DynamicWidgetViewComponent } from \"./view/dynamic-widget-view.component\";\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n\t\tRouterModule,\r\n\t\tMatExpansionModule,\r\n\t\tMatSnackBarModule,\r\n\t\tMatIconModule,\r\n\t\tMatButtonModule,\r\n\t\tMatCardModule,\r\n\t\tMatSelectModule,\r\n\t\tMatInputModule,\r\n\t\tMatFormFieldModule,\r\n\t\tMatTabsModule,\r\n\t\tMatRadioModule,\r\n\t\tFlexLayoutModule,\r\n\t\tFormsModule,\r\n\t\tReactiveFormsModule,\r\n\t\tMatSlideToggleModule,\r\n\t\tMatDividerModule,\r\n\t\tMatCheckboxModule,\r\n\t\tMatTableModule\r\n\t],\r\n\tdeclarations: [\r\n\t\tRootComponent,\r\n\t\tWidgetsManagementComponent,\r\n\t\tUpsertComponent,\r\n\t\tDynamicWidgetConfigDirective,\r\n\t\tDynamicWidgetViewDirective,\r\n\t\tWidgetSelectorComponent,\r\n\t\tDynamicWidgetViewComponent\r\n\t],\r\n\tentryComponents: [ WidgetSelectorComponent, DynamicWidgetViewComponent ],\r\n\texports: [ DynamicWidgetViewDirective, WidgetSelectorComponent, DynamicWidgetViewComponent ]\r\n})\r\nexport class NgsWidgetModule {\r\n\tstatic forRoot(config?: WidgetModuleConfig): ModuleWithProviders {\r\n\t\treturn {\r\n\t\t\tngModule: NgsWidgetRootModule,\r\n\t\t\tproviders: [ { provide: MODULE_CONFIG_TOKEN, useValue: config }, WidgetConfigurationService, WidgetService ]\r\n\t\t};\r\n\t}\r\n}\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tNgsWidgetModule,\r\n\t\tWidgetRoutingModule,\r\n\t\tStoreModule.forFeature(\"widgets\", WidgetReducer),\r\n\t\tEffectsModule.forFeature([ WidgetDbEffects, GetWidgetApiEffects, GetWidgetsApiEffects, UpsertWidgetApiEffects ])\r\n\t],\r\n\texports: [ NgsWidgetModule ]\r\n})\r\nexport class NgsWidgetRootModule {}\r\n","import { WidgetModel } from \"./widget.model\";\r\n\r\nexport class IWidgetView<T> {\r\n\twidget: WidgetModel<T>;\r\n}\r\n","import { WidgetModel } from \"./widget.model\";\r\n\r\nexport class IWidgetUpsert<T> {\r\n\twidget: WidgetModel<T>;\r\n}\r\n"],"names":["fromRoot.Reducer"],"mappings":";;;;;;;;;;;;;;;;;;AAEA,IAAiB,kBAAkB;AAAnC,WAAiB,kBAAkB;IAClC,IAAA;QACC,iBAAY,SAAc;YAAd,0BAAA,EAAA,cAAc;YAA1B,iBAEC;YADA,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG,IAAI,QAAC,KAAI,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,IAAC,CAAC,CAAC;SACpE;;;;QAED,gCAAc;;;QAAd;YACC,OAAO,EAAE,CAAC;SACV;sBAVH;QAWE,CAAA;IARY,0BAAO;IAUpB,IAAA;QAEC;SAAgB;uBAflB;QAgBE,CAAA;IAHY,2BAAQ;GAXL,kBAAkB,KAAlB,kBAAkB,QAelC;;;;;;ACND,IAAA;;;;gCAXA;IAaC,CAAA;AAFD,AAGA,IAAA;IAEC,iCAAmB,OAA2B;QAA3B,YAAO,GAAP,OAAO,CAAoB;;KAAI;kCAhBnD;IAiBC,CAAA;AAHD,AAIA,IAAA;IAEC,gCAAmB,OAAY;QAAZ,YAAO,GAAP,OAAO,CAAK;;KAAI;iCApBpC;IAqBC,CAAA;;;;;;;;;;;ACnBD,IAAiB,iBAAiB;AAAlC,WAAiB,iBAAiB;IACjC,IAAA;QAEC,iBAAY,SAAc;YAAd,0BAAA,EAAA,cAAc;YAA1B,iBAEC;YADA,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG,IAAI,QAAC,KAAI,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,IAAC,CAAC,CAAC;SACpE;;;;QAED,gCAAc;;;QAAd;YACC,OAAO,EAAE,CAAC;SACV;sBAXH;QAYE,CAAA;IATY,yBAAO;IAWpB,IAAA;QAEC;SAAgB;uBAhBlB;QAiBE,CAAA;IAHY,0BAAQ;GAZL,iBAAiB,KAAjB,iBAAiB,QAgBjC;;;;;;ACPD,IAAA;IAEC,8BAAmB,OAAe;QAAf,YAAO,GAAP,OAAO,CAAQ;;KAAI;+BAbvC;IAcC,CAAA;AAHD,AAIA,IAAA;IAEC,gCAAmB,OAAyB;QAAzB,YAAO,GAAP,OAAO,CAAkB;;KAAI;iCAjBjD;IAkBC,CAAA;AAHD,AAIA,IAAA;IAEC,+BAAmB,OAAY;QAAZ,YAAO,GAAP,OAAO,CAAK;;KAAI;gCArBpC;IAsBC,CAAA;;;;;;;;;;;;;;ACtBD;;;AAAA;IAKC,qBAAY,EAA4F;YAA5F,4BAA4F,EAA1F,YAAG,EAAE,cAAI,EAAE,cAAI,EAAE,kBAAM;QACpC,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACrB;sBAVF;IAWC;;;;;;ACXD,IAEiB,oBAAoB;AAArC,WAAiB,oBAAoB;IACpC,IAAA;QAEC,iBAAY,MAAW;YAAX,uBAAA,EAAA,WAAW;YACtB,SAAS;YACT,IAAI,CAAC,MAAM,GAAG,IAAI,WAAW,CAAC,MAAM,CAAC,CAAC;SACtC;;;;QAED,gCAAc;;;QAAd;YACC,OAAO,IAAI,CAAC,MAAM,CAAC;SACnB;sBAZH;QAaE,CAAA;IAVY,4BAAO;IAYpB,IAAA;QAEC;SAAgB;uBAjBlB;QAkBE,CAAA;IAHY,6BAAQ;GAbL,oBAAoB,KAApB,oBAAoB,QAiBpC;;;;;;ICRD;IAEC,iCAAmB,OAAyB;QAAzB,YAAO,GAAP,OAAO,CAAkB;;KAAI;kCAbjD;IAcC,CAAA;AAHD,AAIA,IAAA;IAEC,mCAAmB,OAAyB;QAAzB,YAAO,GAAP,OAAO,CAAkB;;KAAI;oCAjBjD;IAkBC,CAAA;AAHD,AAIA,IAAA;IAEC,kCAAmB,OAAY;QAAZ,YAAO,GAAP,OAAO,CAAK;;KAAI;mCArBpC;IAsBC,CAAA;;;;;;;;;;;;;;;;ACtBD,AAkBO,qBAAM,qBAAqB,GAAuB;IACxD,GAAG,EAAE;QACJ,UAAU,EAAE,KAAK;QACjB,eAAe,EAAE,6BAA6B;KAC9C;IACD,SAAS,EAAE;QACV,MAAM,EAAE,eAAe;QACvB,IAAI,EAAE,eAAe;QACrB,GAAG,EAAE,4BAA4B;KACjC;IACD,KAAK,EAAE,EAAE;CACT,CAAC;AACF,qBAAa,mBAAmB,GAAG,IAAI,cAAc,CAAqB,oBAAoB,CAAC;;;;;;AC9B/F;IAcC,oCAAyC,UAAU,EAAU,KAAsB;QAAtB,UAAK,GAAL,KAAK,CAAiB;uBADzE,IAAI,eAAe,CAAC,qBAAqB,CAAC;QAEnD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,qBAAqB,EAAE,UAAU,CAAC,CAAC;QACpE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;;;;;;;;KAQhC;IAdD,sBAAI,8CAAM;;;;QAAV;YACC,OAAO,IAAI,CAAC,OAAO,CAAC;SACpB;;;OAAA;;gBALD,UAAU;;;;gDAOG,MAAM,SAAC,mBAAmB;gBAZ/B,KAAK;;qCAFd;;;;;;;ACAA;IAmBC,uBACS,MACA,OACA;QAFA,SAAI,GAAJ,IAAI;QACJ,UAAK,GAAL,KAAK;QACL,yBAAoB,GAApB,oBAAoB;KACzB;;;;;;IAEJ,2BAAG;;;;;IAAH,UAAO,GAAW;QAAlB,iBASC;QARA,OAAO,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAC5C,MAAM,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,SAAS,CAAC,GAAG,KAAK,EAAE,GAAA,CAAC,EAC/C,IAAI,CAAC,CAAC,CAAC,EACP,SAAS,CAAC,UAAC,MAAM;YAChB,OAAA,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,MAAM,CAAC,GAAG,CAAC,eAAe,GAAG,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,EAAE,GAAG,KAAA,EAAE,CAAC,CAAC;SAAA,CACzF,EACD,GAAG,CAAC,UAAC,QAAuC,IAAK,OAAA,QAAQ,CAAC,MAAM,GAAA,CAAC,CACjE,CAAC;KACF;;;;IAED,kCAAU;;;IAAV;QAAA,iBAMC;QALA,OAAO,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAC5C,MAAM,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,SAAS,CAAC,IAAI,IAAI,EAAE,GAAA,CAAC,EAC/C,SAAS,CAAC,UAAC,MAAM,IAAK,OAAA,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,eAAe,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,GAAA,CAAC,EACxF,GAAG,CAAC,UAAC,QAAqC,IAAK,OAAA,QAAQ,CAAC,MAAM,GAAA,CAAC,CAC/D,CAAC;KACF;;;;;;IACD,8BAAM;;;;;IAAN,UAAU,MAAoC;QAA9C,iBAUC;QATA,qBAAM,KAAK,GAAG,IAAI,oBAAoB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACvD,OAAO,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAC5C,MAAM,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,SAAS,CAAC,MAAM,IAAI,EAAE,GAAA,CAAC,EACjD,IAAI,CAAC,CAAC,CAAC,EACP,SAAS,CAAC,UAAC,MAAM;YAChB,OAAA,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,eAAe,GAAG,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,cAAc,EAAE,CAAC;SAAA,CAC5F,EACD,GAAG,CAAC,UAAC,QAAuC,IAAK,OAAA,QAAQ,CAAC,MAAM,GAAA,CAAC,CACjE,CAAC;KACF;;;;;;;;;;;IAMD,kCAAU;;;;;IAAV,UAAc,GAAW;QAAzB,iBAeC;QAdA,qBAAM,OAAO,GAAG,IAAI,eAAe,CAAiB,SAAS,CAAC,CAAC;QAC/D,IAAI,CAAC,KAAK;aACR,MAAM,CAAC,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,GAAA,CAAC;aACxC,IAAI,CACJ,MAAM,CAAC,UAAC,OAAO,IAAK,OAAA,OAAO,IAAI,IAAI,GAAA,CAAC,EACpC,GAAG,CAAC,UAAC,OAAO,IAAK,OAAA,OAAO,CAAC,IAAI,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,GAAG,IAAI,GAAG,GAAA,CAAC,GAAA,CAAC,EAC7D,GAAG,CAAC,UAAC,MAAM;YACV,IAAI,MAAM,IAAI,IAAI,EAAE;gBACnB,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,oBAAoB,CAAC,GAAG,CAAC,CAAC,CAAC;aACnD;SACD,CAAC,CACF;aACA,SAAS,CAAC,UAAC,MAAM,IAAK,OAAA,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,GAAA,CAAC,CAAC;QAC9C,OAAO,OAAO,CAAC,YAAY,EAAE,CAAC;KAC9B;;gBAzDD,UAAU;;;;gBAbF,UAAU;gBADV,KAAK;gBAIL,0BAA0B;;wBAPnC;;;;;;;ACAA;IA8BC,oCACQ,OACC,SACA,sBACA,UACA;QAJD,UAAK,GAAL,KAAK;QACJ,YAAO,GAAP,OAAO;QACP,yBAAoB,GAApB,oBAAoB;QACpB,aAAQ,GAAR,QAAQ;QACR,cAAS,GAAT,SAAS;QAEjB,IAAI,CAAC,mBAAmB,EAAE,CAAC;KAC3B;IAfD,sBACI,2CAAG;;;;;QADP,UACQ,EAAU;YACjB,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;SACvB;;;OAAA;;;;IAaD,6CAAQ;;;IAAR;QAAA,iBAIC;QAHA,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,IAAI,SAAS,GAAA,CAAC,CAAC,CAAC,SAAS,CAAC,UAAC,MAAM;YAC3E,KAAI,CAAC,8CAA8C,CAAC,MAAM,CAAC,CAAC;SAC5D,CAAC,CAAC;KACH;;;;IACD,wDAAmB;;;IAAnB;QAAA,iBAKC;QAJA,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,KAAK,GAAA,CAAC,EAAE,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,UAAC,KAAK;YACpG,SAAS;YACT,KAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;SAChC,CAAC,CAAC;KACH;;;;;IACD,kDAAa;;;;IAAb,UAAc,EAAU;QACvB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAM,EAAE,CAAC,CAAC;KAChD;;;;;IACD,mFAA8C;;;;IAA9C,UAA+C,MAAM;QAArD,iBAYC;QAXA,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;YAC1C,SAAS;YACT,qBAAM,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACvE,MAAM,IAAI,KAAK,CACd,wCAAsC,MAAM,CAAC,IAAI,wCAC3B,cAAgB,CACtC,CAAC;SACF;QACD,qBAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,uBAAuB,CAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;QACxG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QAC3D,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,UAAC,CAAC,IAAK,QAAC,KAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,IAAC,CAAC,CAAC;KACpE;;gBA9CD,SAAS,SAAC;oBACV,QAAQ,EAAE,EAAE;iBACZ;;;;gBAXQ,KAAK;gBAML,aAAa;gBACb,0BAA0B;gBAblC,wBAAwB;gBACxB,gBAAgB;;;sBAkBf,KAAK;;qCAvBP;;;;;;;ACAA;IA6BC,iCAAmB,KAAsB;QAAtB,UAAK,GAAL,KAAK,CAAiB;QACxC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,GAAA,CAAC,CAAC;KAClE;IAVD,sBAAI,0CAAK;;;;QAAT;YACC,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,SAAS,CAAC;SACpC;;;OAAA;IACD,sBAAI,2CAAM;;;;QAAV;YACC,OAAO;gBACN,GAAG,EAAE,IAAI,CAAC,gBAAgB;aAC1B,CAAC;SACF;;;OAAA;;;;IAID,0CAAQ;;;IAAR;QACC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,qBAAqB,EAAE,CAAC,CAAC;KACjD;;gBAvBD,SAAS,SAAC;oBACV,QAAQ,EAAE,4PAIG;iBACb;;;;gBAfQ,KAAK;;kCAFd;;;;;;;ACAA;;;;gBAEC,SAAS,SAAC;oBACV,QAAQ,EAAE,aAAa;oBACvB,QAAQ,EAAE,iCAAiC;iBAC3C;;wBALD;;;;;;;ACAA;IAsBC,oCAAmB,KAAsB;QAAtB,UAAK,GAAL,KAAK,CAAiB;QACxC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,GAAA,CAAC,CAAC;KACpE;;;;IACD,6CAAQ;;;IAAR;QACC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,qBAAqB,EAAE,CAAC,CAAC;KACjD;;gBAnBD,SAAS,SAAC;oBACV,QAAQ,EAAE,oXASJ;iBACN;;;;gBAjBQ,KAAK;;qCAFd;;;;;;;ACAA;;;;gBAEC,SAAS,SAAC;oBACV,QAAQ,EAAE,mKAIJ;iBACN;;0BARD;;;;;;;ACCA,AAMA,qBAAM,MAAM,GAAW;IACtB;QACC,IAAI,EAAE,QAAQ;QACd,SAAS,EAAE,aAAa;QACxB,QAAQ,EAAE;YACT;gBACC,IAAI,EAAE,YAAY;gBAClB,SAAS,EAAE,0BAA0B;aACrC;YACD;gBACC,IAAI,EAAE,cAAc;gBACpB,SAAS,EAAE,eAAe;aAC1B;YACD;gBACC,IAAI,EAAE,mBAAmB;gBACzB,SAAS,EAAE,eAAe;aAC1B;SACD;KACD;CACD,CAAC;AAEF,qBAAa,mBAAmB,GAAwB,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;;;;;;;ICZpF,6BAAoB,QAAmC,EAAU,OAAsB;QAAvF,iBAA2F;QAAvE,aAAQ,GAAR,QAAQ,CAA2B;QAAU,YAAO,GAAP,OAAO,CAAe;sBAG9E,IAAI,CAAC,QAAQ;aACpB,MAAM,8CAA+B;aACrC,IAAI,CACJ,GAAG,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,OAAO,GAAA,CAAC,EAC/B,SAAS,CAAC,UAAC,OAAO,IAAK,OAAA,KAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,GAAA,CAAC,EACjD,GAAG,CAAC,UAAC,GAAG,IAAK,OAAA,IAAI,sBAAsB,CAAC,GAAG,CAAC,GAAA,CAAC,EAC7C,UAAU,CAAC,UAAC,GAAG,IAAK,OAAA,EAAE,CAAC,IAAI,qBAAqB,CAAC,GAAG,CAAC,CAAC,GAAA,CAAC,CACvD;KAVyF;;gBAF3F,UAAU;;;;gBAZF,OAAO;gBAIP,aAAa;;;QAYpB,MAAM,EAAE;;;8BAlBV;;;;;;;;ICgBC,gCAAoB,QAAsC,EAAU,OAAsB;QAA1F,iBAA8F;QAA1E,aAAQ,GAAR,QAAQ,CAA8B;QAAU,YAAO,GAAP,OAAO,CAAe;sBAGjF,IAAI,CAAC,QAAQ;aACpB,MAAM,wDAAkC;aACxC,IAAI,CACJ,GAAG,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,OAAO,GAAA,CAAC,EAC/B,SAAS,CAAC,UAAC,OAAO,IAAK,OAAA,KAAI,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,GAAA,CAAC,EACpD,GAAG,CAAC,UAAC,GAAG,IAAK,OAAA,IAAI,yBAAyB,CAAC,GAAG,CAAC,GAAA,CAAC,EAChD,UAAU,CAAC,UAAC,GAAG,IAAK,OAAA,EAAE,CAAC,IAAI,wBAAwB,CAAC,GAAG,CAAC,CAAC,GAAA,CAAC,CAC1D;KAV4F;;gBAF9F,UAAU;;;;gBAZF,OAAO;gBAIP,aAAa;;;QAYpB,MAAM,EAAE;;;iCAlBV;;;;;;;;ICgBC,8BAAoB,QAAoC,EAAU,OAAsB;QAAxF,iBAA4F;QAAxE,aAAQ,GAAR,QAAQ,CAA4B;QAAU,YAAO,GAAP,OAAO,CAAe;sBAG/E,IAAI,CAAC,QAAQ;aACpB,MAAM,oDAAgC;aACtC,IAAI,CACJ,SAAS,CAAC;YACT,OAAA,KAAI,CAAC,OAAO;iBACV,UAAU,EAAE;iBACZ,IAAI,CACJ,GAAG,CAAC,UAAC,GAAG,IAAK,OAAA,IAAI,uBAAuB,CAAC,GAAG,CAAC,GAAA,CAAC,EAC9C,UAAU,CAAC,UAAC,GAAG,IAAK,OAAA,EAAE,CAAC,IAAI,sBAAsB,CAAC,GAAG,CAAC,CAAC,GAAA,CAAC,CACxD;SAAA,CACF,CACD;KAd0F;;gBAF5F,UAAU;;;;gBAZF,OAAO;gBAIP,aAAa;;;QAYpB,MAAM,EAAE;;;+BAlBV;;;;;;;;;YCKU,qBAAqB;YACrB,qBAAqB;;AAG/B,IAAA;IAEC,4BAAmB,OAA2B;QAA3B,YAAO,GAAP,OAAO,CAAoB;oBAD9B,kBAAkB,CAAC,MAAM;KACS;6BAXnD;IAYC,CAAA;;;;;;SCJM,EAAE;AADT,qBAAM,YAAY,GAAU;IAC3B,IAAI,IAAI;CACR,CAAC;;;;;;AAEF,iBAAwB,KAAoB,EAAE,MAAsB;IAA5C,sBAAA,EAAA,oBAAoB;IAC3C,qBAAI,KAAyB,CAAC;IAC9B,QAAQ,MAAM,CAAC,IAAI;QAClB,KAAK,kBAAkB,CAAC,MAAM;YAC7B,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;YAC5B,qBAAM,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC;YAElC,UAAU,CAAC,OAAO,CAAC,UAAA,SAAS;gBAC3B,qBAAM,kBAAkB,GAAG,KAAK,CAAC,SAAS,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,GAAG,IAAI,SAAS,CAAC,GAAG,GAAA,CAAC,CAAC;gBACxE,IAAI,kBAAkB,GAAG,CAAC,CAAC,EAAE;oBAC5B,KAAK,CAAC,MAAM,CAAC,kBAAkB,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;iBAC/C;qBAAM;oBACN,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;iBACtB;aACD,CAAC,CAAC;YAEH,oBACI,KAAK,IACR,IAAI,EAAE,KAAK,IACV;QAEH,KAAK,kBAAkB,CAAC,MAAM;YAC7B,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;YAEtC,qBAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,GAAA,CAAC,CAAC;YAC3E,KAAK,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YAE7B,oBACI,KAAK,IACR,IAAI,EAAE,KAAK,IACV;QAEH;YACC,OAAO,KAAK,CAAC;KACd;CACD;;;;;;AC9CD,qBAOa,aAAa,GAAG;IAC5B,EAAE,EAAEA,OAAgB;CACpB;;;;;;;ICEA,yBAAoB,QAAsB;QAAtB,aAAQ,GAAR,QAAQ,CAAc;uBAGhC,IAAI,CAAC,QAAQ;aACrB,MAAM,kDAAiC;aACvC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,GAAG,CAAC,UAAC,MAAwB,IAAK,OAAA,IAAI,kBAAkB,CAAC,CAAE,MAAM,CAAE,CAAC,GAAA,CAAC,CAAC;2BAGjF,IAAI,CAAC,QAAQ;aACzB,MAAM,wDAAkC;aACxC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,GAAG,CAAC,UAAC,OAA2B,IAAK,OAAA,IAAI,kBAAkB,CAAC,OAAO,CAAC,GAAA,CAAC,CAAC;KAVjD;;gBAF9C,UAAU;;;;gBARF,OAAO;;;QAYd,MAAM,EAAE;;;;QAKR,MAAM,EAAE;;;0BAlBV;;;;;;;ACAA;IAmBC,sCACQ,OACC,OACA,SACA,sBACA,UACA;QALD,UAAK,GAAL,KAAK;QACJ,UAAK,GAAL,KAAK;QACL,YAAO,GAAP,OAAO;QACP,yBAAoB,GAApB,oBAAoB;QACpB,aAAQ,GAAR,QAAQ;QACR,cAAS,GAAT,SAAS;QAEjB,IAAI,CAAC,mBAAmB,EAAE,CAAC;KAC3B;;;;IACD,+CAAQ;;;IAAR;QAAA,iBAKC;QAJA,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,IAAI,SAAS,GAAA,CAAC,CAAC,CAAC,SAAS,CAAC,UAAA,MAAM;YACxE,KAAI,CAAC,8CAA8C,CAAC,MAAM,CAAC,CAAC;SAC5D,CAAC,CAAC;KACH;;;;IACD,0DAAmB;;;IAAnB;QAAA,iBAKC;QAJA,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,KAAK,GAAA,CAAC,EAAE,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,UAAA,KAAK;YACjG,SAAS;YACT,KAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;SAChC,CAAC,CAAC;KACH;;;;IACD,oDAAa;;;IAAb;QAAA,iBAMC;QALA,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CACpC,KAAK,CAAC,KAAK,CAAC,EACZ,MAAM,CAAC,UAAC,EAAU,IAAK,OAAA,EAAE,IAAI,IAAI,GAAA,CAAC,EAClC,SAAS,CAAC,UAAA,EAAE,IAAI,OAAA,KAAI,CAAC,OAAO,CAAC,UAAU,CAAM,EAAE,CAAC,GAAA,CAAC,CACjD,CAAC;KACF;;;;;IACD,qFAA8C;;;;IAA9C,UAA+C,MAAM;QAArD,iBAWC;QAVA,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;YAC1C,qBAAM,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACvE,MAAM,IAAI,KAAK,CACd,wCAAsC,MAAM,CAAC,IAAI,wCAC3B,cAAgB,CACtC,CAAC;SACF;QACD,qBAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,uBAAuB,CAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC;QAC1G,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QAC3D,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,UAAA,CAAC,IAAI,QAAC,KAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,IAAC,CAAC,CAAC;KAClE;;gBA/CD,SAAS,SAAC;oBACV,QAAQ,EAAE,0BAA0B;iBACpC;;;;gBAZQ,KAAK;gBACL,cAAc;gBAKd,aAAa;gBACb,0BAA0B;gBATO,wBAAwB;gBAAE,gBAAgB;;uCAApF;;;;;;;ACAA;IA+BC,oCACQ,OACC,OACA,SACA,sBACA,UACA;QALD,UAAK,GAAL,KAAK;QACJ,UAAK,GAAL,KAAK;QACL,YAAO,GAAP,OAAO;QACP,yBAAoB,GAApB,oBAAoB;QACpB,aAAQ,GAAR,QAAQ;QACR,cAAS,GAAT,SAAS;QAEjB,IAAI,CAAC,mBAAmB,EAAE,CAAC;KAC3B;IAhBD,sBACI,2CAAG;;;;;QADP,UACQ,EAAU;YACjB,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;SACvB;;;OAAA;;;;IAcD,6CAAQ;;;IAAR;QAAA,iBAIC;QAHA,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,IAAI,SAAS,GAAA,CAAC,CAAC,CAAC,SAAS,CAAC,UAAA,MAAM;YACxE,KAAI,CAAC,8CAA8C,CAAC,MAAM,CAAC,CAAC;SAC5D,CAAC,CAAC;KACH;;;;IACD,wDAAmB;;;IAAnB;QAAA,iBAKC;QAJA,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,KAAK,GAAA,CAAC,EAAE,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,UAAA,KAAK;YACjG,SAAS;YACT,KAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;SAChC,CAAC,CAAC;KACH;;;;;IACD,kDAAa;;;;IAAb,UAAc,EAAU;QACvB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAM,EAAE,CAAC,CAAC;KAChD;;;;;IACD,mFAA8C;;;;IAA9C,UAA+C,MAAM;QAArD,iBAWC;QAVA,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;YAC1C,qBAAM,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACvE,MAAM,IAAI,KAAK,CACd,wCAAsC,MAAM,CAAC,IAAI,wCAC3B,cAAgB,CACtC,CAAC;SACF;QACD,qBAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,uBAAuB,CAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;QACxG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QAC3D,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,UAAA,CAAC,IAAI,QAAC,KAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,IAAC,CAAC,CAAC;KAClE;;gBA9CD,SAAS,SAAC;oBACV,QAAQ,EAAE,wBAAwB;iBAClC;;;;gBAZQ,KAAK;gBAEL,cAAc;gBAId,aAAa;gBACb,0BAA0B;gBAblC,wBAAwB;gBACxB,gBAAgB;;;sBAmBf,KAAK;;qCAxBP;;;;;;;ACAA;;;;;;;IA+EQ,uBAAO;;;;IAAd,UAAe,MAA2B;QACzC,OAAO;YACN,QAAQ,EAAE,mBAAmB;YAC7B,SAAS,EAAE,CAAE,EAAE,OAAO,EAAE,mBAAmB,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,0BAA0B,EAAE,aAAa,CAAE;SAC5G,CAAC;KACF;;gBAxCD,QAAQ,SAAC;oBACT,OAAO,EAAE;wBACR,YAAY;wBACZ,YAAY;wBACZ,kBAAkB;wBAClB,iBAAiB;wBACjB,aAAa;wBACb,eAAe;wBACf,aAAa;wBACb,eAAe;wBACf,cAAc;wBACd,kBAAkB;wBAClB,aAAa;wBACb,cAAc;wBACd,gBAAgB;wBAChB,WAAW;wBACX,mBAAmB;wBACnB,oBAAoB;wBACpB,gBAAgB;wBAChB,iBAAiB;wBACjB,cAAc;qBACd;oBACD,YAAY,EAAE;wBACb,aAAa;wBACb,0BAA0B;wBAC1B,eAAe;wBACf,4BAA4B;wBAC5B,0BAA0B;wBAC1B,uBAAuB;wBACvB,0BAA0B;qBAC1B;oBACD,eAAe,EAAE,CAAE,uBAAuB,EAAE,0BAA0B,CAAE;oBACxE,OAAO,EAAE,CAAE,0BAA0B,EAAE,uBAAuB,EAAE,0BAA0B,CAAE;iBAC5F;;0BA7ED;;;;;;gBAuFC,QAAQ,SAAC;oBACT,OAAO,EAAE;wBACR,eAAe;wBACf,mBAAmB;wBACnB,WAAW,CAAC,UAAU,CAAC,SAAS,EAAE,aAAa,CAAC;wBAChD,aAAa,CAAC,UAAU,CAAC,CAAE,eAAe,EAAE,mBAAmB,EAAE,oBAAoB,EAAE,sBAAsB,CAAE,CAAC;qBAChH;oBACD,OAAO,EAAE,CAAE,eAAe,CAAE;iBAC5B;;8BA/FD;;;;;;;;;;ACEA;;;AAAA;;;sBAFA;IAIC;;;;;;;;;ACFD;;;AAAA;;;wBAFA;IAIC;;;;;;;;;;;;;;"}
