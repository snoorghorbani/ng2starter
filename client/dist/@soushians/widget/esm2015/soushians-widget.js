/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */
export { UpsertWidgetStartAction, NgsWidgetModule, WidgetModel, IWidgetView, IWidgetUpsert } from './public_api';
export { WidgetsManagementComponent as ɵc } from './lib/mangement/widget-management.component';
export { RootComponent as ɵb } from './lib/root/root.component';
export { WidgetDbEffects as ɵp } from './lib/root/widgets.effects';
export { Reducer as ɵo } from './lib/root/widgets.reducers';
export { GetWidgetApiEffects as ɵq } from './lib/services/api/get-widget/get-widget.effects';
export { GetWidgetsApiEffects as ɵs } from './lib/services/api/get-widgets/get-widgets.effects';
export { UpsertWidgetApiEffects as ɵu } from './lib/services/api/upsert-widget/upsert-widget.effects';
export { WidgetConfigurationService as ɵi } from './lib/services/widget-configuration.service';
export { WidgetService as ɵh } from './lib/services/widget.service';
export { DynamicWidgetConfigDirective as ɵg } from './lib/upsert/dynamic-widget-config.directive';
export { UpsertComponent as ɵf } from './lib/upsert/upsert.component';
export { DynamicWidgetViewComponent as ɵm } from './lib/view/dynamic-widget-view.component';
export { DynamicWidgetViewDirective as ɵk } from './lib/view/dynamic-widget-view.directive';
export { WidgetRoutingModule as ɵn } from './lib/widget-routing.module';
export { WidgetSelectorComponent as ɵl } from './lib/widget-selector/widget-selector.component';
export { MODULE_CONFIG_TOKEN as ɵj } from './lib/widget.config';
export { NgsWidgetRootModule as ɵa } from './lib/widget.module';
export { WidgetReducer as ɵd } from './lib/widget.reducer';

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic291c2hpYW5zLXdpZGdldC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bzb3VzaGlhbnMvd2lkZ2V0LyIsInNvdXJjZXMiOlsic291c2hpYW5zLXdpZGdldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBSUEsa0dBQWMsY0FBYyxDQUFDO0FBRTdCLE9BQU8sRUFBQywwQkFBMEIsSUFBSSxFQUFFLEVBQUMsTUFBTSw2Q0FBNkMsQ0FBQztBQUM3RixPQUFPLEVBQUMsYUFBYSxJQUFJLEVBQUUsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQzlELE9BQU8sRUFBQyxlQUFlLElBQUksRUFBRSxFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFDakUsT0FBTyxFQUFDLE9BQU8sSUFBSSxFQUFFLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQztBQUUxRCxPQUFPLEVBQUMsbUJBQW1CLElBQUksRUFBRSxFQUFDLE1BQU0sa0RBQWtELENBQUM7QUFFM0YsT0FBTyxFQUFDLG9CQUFvQixJQUFJLEVBQUUsRUFBQyxNQUFNLG9EQUFvRCxDQUFDO0FBRTlGLE9BQU8sRUFBQyxzQkFBc0IsSUFBSSxFQUFFLEVBQUMsTUFBTSx3REFBd0QsQ0FBQztBQUNwRyxPQUFPLEVBQUMsMEJBQTBCLElBQUksRUFBRSxFQUFDLE1BQU0sNkNBQTZDLENBQUM7QUFDN0YsT0FBTyxFQUFDLGFBQWEsSUFBSSxFQUFFLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUNsRSxPQUFPLEVBQUMsNEJBQTRCLElBQUksRUFBRSxFQUFDLE1BQU0sOENBQThDLENBQUM7QUFDaEcsT0FBTyxFQUFDLGVBQWUsSUFBSSxFQUFFLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUNwRSxPQUFPLEVBQUMsMEJBQTBCLElBQUksRUFBRSxFQUFDLE1BQU0sMENBQTBDLENBQUM7QUFDMUYsT0FBTyxFQUFDLDBCQUEwQixJQUFJLEVBQUUsRUFBQyxNQUFNLDBDQUEwQyxDQUFDO0FBQzFGLE9BQU8sRUFBQyxtQkFBbUIsSUFBSSxFQUFFLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQztBQUN0RSxPQUFPLEVBQUMsdUJBQXVCLElBQUksRUFBRSxFQUFDLE1BQU0saURBQWlELENBQUM7QUFDOUYsT0FBTyxFQUFDLG1CQUFtQixJQUFJLEVBQUUsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQzlELE9BQU8sRUFBQyxtQkFBbUIsSUFBSSxFQUFFLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUM5RCxPQUFPLEVBQWdCLGFBQWEsSUFBSSxFQUFFLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogR2VuZXJhdGVkIGJ1bmRsZSBpbmRleC4gRG8gbm90IGVkaXQuXG4gKi9cblxuZXhwb3J0ICogZnJvbSAnLi9wdWJsaWNfYXBpJztcblxuZXhwb3J0IHtXaWRnZXRzTWFuYWdlbWVudENvbXBvbmVudCBhcyDJtWN9IGZyb20gJy4vbGliL21hbmdlbWVudC93aWRnZXQtbWFuYWdlbWVudC5jb21wb25lbnQnO1xuZXhwb3J0IHtSb290Q29tcG9uZW50IGFzIMm1Yn0gZnJvbSAnLi9saWIvcm9vdC9yb290LmNvbXBvbmVudCc7XG5leHBvcnQge1dpZGdldERiRWZmZWN0cyBhcyDJtXB9IGZyb20gJy4vbGliL3Jvb3Qvd2lkZ2V0cy5lZmZlY3RzJztcbmV4cG9ydCB7UmVkdWNlciBhcyDJtW99IGZyb20gJy4vbGliL3Jvb3Qvd2lkZ2V0cy5yZWR1Y2Vycyc7XG5leHBvcnQge0dldFdpZGdldEFjdGlvbnMgYXMgybVyfSBmcm9tICcuL2xpYi9zZXJ2aWNlcy9hcGkvZ2V0LXdpZGdldC9nZXQtd2lkZ2V0LmFjdGlvbnMnO1xuZXhwb3J0IHtHZXRXaWRnZXRBcGlFZmZlY3RzIGFzIMm1cX0gZnJvbSAnLi9saWIvc2VydmljZXMvYXBpL2dldC13aWRnZXQvZ2V0LXdpZGdldC5lZmZlY3RzJztcbmV4cG9ydCB7R2V0V2lkZ2V0c0FjdGlvbnMgYXMgybV0fSBmcm9tICcuL2xpYi9zZXJ2aWNlcy9hcGkvZ2V0LXdpZGdldHMvZ2V0LXdpZGdldHMuYWN0aW9ucyc7XG5leHBvcnQge0dldFdpZGdldHNBcGlFZmZlY3RzIGFzIMm1c30gZnJvbSAnLi9saWIvc2VydmljZXMvYXBpL2dldC13aWRnZXRzL2dldC13aWRnZXRzLmVmZmVjdHMnO1xuZXhwb3J0IHtVcHNlcnRXaWRnZXRBY3Rpb25zIGFzIMm1dn0gZnJvbSAnLi9saWIvc2VydmljZXMvYXBpL3Vwc2VydC13aWRnZXQvdXBzZXJ0LXdpZGdldC5hY3Rpb25zJztcbmV4cG9ydCB7VXBzZXJ0V2lkZ2V0QXBpRWZmZWN0cyBhcyDJtXV9IGZyb20gJy4vbGliL3NlcnZpY2VzL2FwaS91cHNlcnQtd2lkZ2V0L3Vwc2VydC13aWRnZXQuZWZmZWN0cyc7XG5leHBvcnQge1dpZGdldENvbmZpZ3VyYXRpb25TZXJ2aWNlIGFzIMm1aX0gZnJvbSAnLi9saWIvc2VydmljZXMvd2lkZ2V0LWNvbmZpZ3VyYXRpb24uc2VydmljZSc7XG5leHBvcnQge1dpZGdldFNlcnZpY2UgYXMgybVofSBmcm9tICcuL2xpYi9zZXJ2aWNlcy93aWRnZXQuc2VydmljZSc7XG5leHBvcnQge0R5bmFtaWNXaWRnZXRDb25maWdEaXJlY3RpdmUgYXMgybVnfSBmcm9tICcuL2xpYi91cHNlcnQvZHluYW1pYy13aWRnZXQtY29uZmlnLmRpcmVjdGl2ZSc7XG5leHBvcnQge1Vwc2VydENvbXBvbmVudCBhcyDJtWZ9IGZyb20gJy4vbGliL3Vwc2VydC91cHNlcnQuY29tcG9uZW50JztcbmV4cG9ydCB7RHluYW1pY1dpZGdldFZpZXdDb21wb25lbnQgYXMgybVtfSBmcm9tICcuL2xpYi92aWV3L2R5bmFtaWMtd2lkZ2V0LXZpZXcuY29tcG9uZW50JztcbmV4cG9ydCB7RHluYW1pY1dpZGdldFZpZXdEaXJlY3RpdmUgYXMgybVrfSBmcm9tICcuL2xpYi92aWV3L2R5bmFtaWMtd2lkZ2V0LXZpZXcuZGlyZWN0aXZlJztcbmV4cG9ydCB7V2lkZ2V0Um91dGluZ01vZHVsZSBhcyDJtW59IGZyb20gJy4vbGliL3dpZGdldC1yb3V0aW5nLm1vZHVsZSc7XG5leHBvcnQge1dpZGdldFNlbGVjdG9yQ29tcG9uZW50IGFzIMm1bH0gZnJvbSAnLi9saWIvd2lkZ2V0LXNlbGVjdG9yL3dpZGdldC1zZWxlY3Rvci5jb21wb25lbnQnO1xuZXhwb3J0IHtNT0RVTEVfQ09ORklHX1RPS0VOIGFzIMm1an0gZnJvbSAnLi9saWIvd2lkZ2V0LmNvbmZpZyc7XG5leHBvcnQge05nc1dpZGdldFJvb3RNb2R1bGUgYXMgybVhfSBmcm9tICcuL2xpYi93aWRnZXQubW9kdWxlJztcbmV4cG9ydCB7QXBwU3RhdGUgYXMgybVlLFdpZGdldFJlZHVjZXIgYXMgybVkfSBmcm9tICcuL2xpYi93aWRnZXQucmVkdWNlcic7Il19