{"version":3,"sources":["ng://@soushians/diagram/lib/diagram.config.ts","ng://@soushians/diagram/lib/models/get-diagrams-api.model.ts","null","ng://@soushians/diagram/lib/actions/diagrams.actions.ts","ng://@soushians/diagram/lib/reducers/diagrams.reducer.ts","ng://@soushians/diagram/lib/models/edit-diagram-api.model.ts","ng://@soushians/diagram/lib/actions/edit-diagram.actions.ts","ng://@soushians/diagram/lib/reducers/edit-diagram.reducer.ts","ng://@soushians/diagram/lib/reducers/parent-guard.reducer.ts","ng://@soushians/diagram/lib/reducers/index.ts","ng://@soushians/diagram/lib/models/add-diagram-api.model.ts","ng://@soushians/diagram/lib/dumb-components/server-status-diagram/server-status-diagram.component.ts","ng://@soushians/diagram/lib/dumb-components/diagram-partial-config-edit/diagram-partial-config-edit.component.ts","ng://@soushians/diagram/lib/dumb-components/pie-diagram-partial-config/pie-diagram-partial-config.component.ts","ng://@soushians/diagram/lib/dumb-components/booleano-widget-partial-config/booleano-widget-partial-config.component.ts","ng://@soushians/diagram/lib/dumb-components/numeric-widget-partial-config/numeric-widget-partial-config.component.ts","ng://@soushians/diagram/lib/dumb-components/linear-diagram-partial-config/linear-diagram-partial-config.component.ts","ng://@soushians/diagram/lib/dumb-components/server-connecting-time-diagram/server-connecting-time-diagram.component.ts","ng://@soushians/diagram/lib/services/diagram-configuration.service.ts","ng://@soushians/diagram/lib/services/diagram.service.ts","ng://@soushians/diagram/lib/dumb-components/numeric-edit-diagram/numeric-edit-diagram.component.ts","ng://@soushians/diagram/lib/dumb-components/numeric-diagram/numeric-diagram.component.ts","ng://@soushians/diagram/lib/smart-components/diagram-module-container/diagram-module-container.component.ts","ng://@soushians/diagram/lib/smart-components/data-mapper/data-mapper.component.ts","ng://@soushians/diagram/lib/models/diagram.model.ts","ng://@soushians/diagram/lib/actions/add-diagram.actions.ts","ng://@soushians/diagram/lib/smart-components/add-diagram/add-diagram.component.ts","ng://@soushians/diagram/lib/smart-components/diagram-view/diagram-view.component.ts","ng://@soushians/diagram/lib/smart-components/diagrams/diagrams.component.ts","ng://@soushians/diagram/lib/smart-components/edit-diagram/edit-diagram.component.ts","ng://@soushians/diagram/lib/smart-components/diagram/diagram.component.ts","ng://@soushians/diagram/lib/smart-components/dynamic-component-selector/dynamic-component-selector.component.ts","ng://@soushians/diagram/lib/smart-components/dynamic-config-component-selector/dynamic-config-component-selector.component.ts","ng://@soushians/diagram/lib/effects/diagrams.effects.ts","ng://@soushians/diagram/lib/effects/add-diagram.effects.ts","ng://@soushians/diagram/lib/diagram-routing.module.ts","ng://@soushians/diagram/lib/smart-components/diagram-selector/diagram-selector.component.ts","ng://@soushians/diagram/lib/diagram.module.ts"],"names":["GetDiagramsApiModel","MODULE_DEFAULT_CONFIG","endpoints","env","production","frontend_server","MODULE_CONFIG_TOKEN","InjectionToken","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__decorate","decorators","target","key","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","Request","initValue","_this","keys","forEach","getRequestBody","Response","GetDiagramsStart","DiagramsActionTypes","GetDiagramsSucceed","payload","GetDiagramsFailed","console","log","EditDiagramApiModel","initialState","loaded","diagram","Result","diagramReducer","state","action","type","params","getRequestQueryParams","FormGroup","Name","FormControl","Validators","required","IsActive","Route","EditDiagramAction","EditDiagramActionTypes","status","data","Reducer","initialState$1","route","result","ParentGuardReducer","initialState$2","AddDiagramApiModel","DiagramReducers","diagrams","DiagramsReducer.diagramReducer","editDiagram","fromEditDiagram.Reducer","parentGuard","parentGuardReducer.ParentGuardReducer","selectFeatureState","createFeatureSelector","ServerStatusDiagramComponent","createSelector","injector","BehaviorSubject","get","_data","dataLoaded","next","timeChange","e","ngOnInit","Component","args","selector","template","styles","Injector","Input","DiagramPartialConfigEditComponent","formGroup","diagramService","ngOnDestroy","configChanged","PieDiagramPartialConfigComponent","EventEmitter","donutFormGroup","controls","_dataLoaded","ConfigChanged","emit","Output","BooleanoWidgetPartialConfigComponent","booleanoFormGroup","NumericWidgetPartialConfigComponent","LinearDiagramPartialConfigComponent","ServerConnectingTimeDiagramComponent","setInterval","time","DiagramConfigurationService","config","_config","Injectable","providedIn","Inject","_id","Source","Type","Groups","Widget","booleano","Chart","columns","colors","Colors","types","Types","ColumnMappings","Flow","legend","show","Legend","subchart","Subchart","zoom","enabled","Zoom","tooltip","grouped","Tooltip","Box","Cols","Rows","TextColor","BackgroundColor","Sync","FormArray","donut","title","SuccessMessage","FailureMessage","DiagramService","http","store","configurationService","getDiagrams","map","response","catch","err","Observable","throw","getSources","getGroups","getDiagram","id","addDiagram","model","post","updateDiagram","body","put","deleteDiagram","delete","getData","source","once","sourceId","getFloorTime","Interval","toString","res","Date","now","timer","switchMap","extract_columns_from_data","columnsMappings","item","ValueData","_","getValue","ValuePath","NamePath","push","split","pop","concat","NameData","is","array","get_data_report","report","get_last_node_of_data","filter","isLastNode","buildChartConfig","generateDiagram","sync","charts","c3","generate","bindto","subscribe","load","Data","precision","Math","floor","HttpClient","Store","NumericEditDiagramComponent","NumericDiagramComponent","counter","dataSubscribtion","unsubscribe","DiagramModuleContainerComponent","service","DataMapperComponent","dataReport","DiagramModel","AddDiagramAction","AddDiagramActionTypes","AddDiagramActionStart","AddDiagramActionSucceed","AddDiagramActionFailed","DiagramConfigChangedAction","HaveEndpointAction","DataLoadedAction","StructureDefinitionStartAction","StructureDefinitionFinishedAction","ColumnsMappingChangedAction","GenerateDiagramAction","AddDiagramComponent","formBuilder","sources","groups","diagramId","patchValue","colorsControl","columnKey","addControl","typesControl","mapping","addColumn","dispatch","diagramPartialConfig","value","inputs","diagramTypes","statusChanges","dataSubscription","getDataStructure","observer","pathOptions","typeChanged","typesFormGroup","cb","setValue","group","routeEntered","event","removeColumn","removeAt","calculateColumns","create","obser","column","temp","NumberOfColumns","Order","diagramModel","empty","add","FormBuilder","ActivatedRoute","diagramViewComponent","diagramData$","DiagramsComponent","EditDiagramComponent","DiagramComponent","_model","modelIsCorrect","ngAfterViewInit","delay","chart","undefined","Time","flow","duration","DynamicComponentSelectorComponent","resolver","bar","pie","scatter","line","area","area-spline","numero","tempo","backgroundColor","raw","_component","typeMapToDiagram","inputProviders","inputName","provide","useValue","resolvedInputs","ReflectiveInjector","resolve","fromResolvedProviders","dynamicComponentContainer","parentInjector","component","resolveComponentFactory","insert","hostView","currentComponent","destroy","entryComponents","ComponentFactoryResolver","ViewChild","read","ViewContainerRef","DynamicConfigComponentSelectorComponent","DiagramEffects","actions$","router","ofType","pipe","catchError","of","Actions","Router","Effect","AddDiagramEffects","navigate","routes","path","children","RoutingModule","RouterModule","forChild","DiagramSelectorComponent","diagrams$","selectedDiagramId","NgsDiagramModule","forRoot","ngModule","RootNgsDiagramModule","providers","NgModule","imports","HttpClientModule","FormsModule","CommonModule","MatExpansionModule","MatSnackBarModule","MatIconModule","MatButtonModule","MatCardModule","MatSelectModule","MatSliderModule","MatInputModule","MatCheckboxModule","MatFormFieldModule","MatTabsModule","FlexLayoutModule","MatRadioModule","MatTooltipModule","MatGridListModule","MatAutocompleteModule","ReactiveFormsModule","BrowserAnimationsModule","declarations","exports","StoreModule","forFeature","EffectsModule"],"mappings":"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","sourcesContent":["import { InjectionToken } from \"@angular/core\";\r\n\r\nexport interface DiagramModuleConfig {\r\n\tendpoints?: {};\r\n\tenv?: {\r\n\t\tproduction: boolean;\r\n\t\tfrontend_server: string;\r\n\t};\r\n}\r\n\r\nexport const MODULE_DEFAULT_CONFIG: DiagramModuleConfig = {\r\n\tendpoints: {},\r\n\tenv: {\r\n\t\tproduction: false,\r\n\t\tfrontend_server: \"frontend/server/did/not/set\"\r\n\t}\r\n};\r\n\r\nexport const MODULE_CONFIG_TOKEN = new InjectionToken<DiagramModuleConfig>(\"DiagramModuleConfig\");\r\n","import { DiagramModel } from \"./diagram.model\";\r\n\r\nexport namespace GetDiagramsApiModel {\r\n\texport class Request {\r\n\t\tdiagram: string;\r\n\r\n\t\tconstructor(initValue: GetDiagramsApiModel.Request = {} as GetDiagramsApiModel.Request) {\r\n\t\t\tObject.keys(initValue).forEach(key => (this[key] = initValue[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {};\r\n\t\t}\r\n\r\n\t\t//static get formGroup() {\r\n\t\t// return new FormGroup({\r\n\t\t//   diagram: new FormControl('', [Validators.minLength(8), Validators.required])\r\n\t\t// })\r\n\t\t//}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: DiagramModel[];\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { GetDiagramsApiModel } from \"../models/get-diagrams-api.model\";\r\n\r\nexport enum DiagramsActionTypes {\r\n\tGET_DIAGRAM = \"[DIAGRAM] GET_DIAGRAM\",\r\n\tGET_DIAGRAM_START = \"[DIAGRAM] GET_DIAGRAM_START\",\r\n\tGET_DIAGRAM_SUCCEED = \"[DIAGRAM] GET_DIAGRAM_SUCCEED\",\r\n\tGET_DIAGRAM_FAILED = \"[DIAGRAM] GET_DIAGRAM_FAILED\"\r\n}\r\n\r\nexport class GetDiagrams implements Action {\r\n\treadonly type = DiagramsActionTypes.GET_DIAGRAM;\r\n}\r\nexport class GetDiagramsStart implements Action {\r\n\treadonly type = DiagramsActionTypes.GET_DIAGRAM_START;\r\n}\r\nexport class GetDiagramsSucceed implements Action {\r\n\treadonly type = DiagramsActionTypes.GET_DIAGRAM_SUCCEED;\r\n\tconstructor(public payload: GetDiagramsApiModel.Response) {}\r\n}\r\nexport class GetDiagramsFailed implements Action {\r\n\treadonly type = DiagramsActionTypes.GET_DIAGRAM_FAILED;\r\n}\r\n\r\nexport type DiagramsAction = GetDiagrams | GetDiagramsStart | GetDiagramsSucceed | GetDiagramsFailed;\r\n","import { GetDiagramsApiModel } from \"../models/get-diagrams-api.model\";\r\nimport { DiagramsActionTypes, DiagramsAction } from \"../actions/diagrams.actions\";\r\n\r\nconsole.log(GetDiagramsApiModel);\r\n\r\nexport interface State {\r\n\tloaded: boolean;\r\n\tdiagram: GetDiagramsApiModel.Response;\r\n}\r\nexport const initialState: State = {\r\n\tloaded: false,\r\n\tdiagram: {\r\n\t\tResult: []\r\n\t}\r\n};\r\n\r\nexport function diagramReducer(state = initialState, action: DiagramsAction): State {\r\n\tswitch (action.type) {\r\n\t\tcase DiagramsActionTypes.GET_DIAGRAM: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloaded: true\r\n\t\t\t\t// diagram: action.payload,\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase DiagramsActionTypes.GET_DIAGRAM_START: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloaded: true\r\n\t\t\t\t//  diagram: action.payload,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tdefault: {\r\n\t\t\treturn state;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const DiagramInfo = (state: State) => state.diagram;\r\n","import { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { Injectable } from \"@angular/core\";\r\n\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\n\r\nimport { DiagramModel } from \"./diagram.model\";\r\n\r\nexport namespace EditDiagramApiModel {\r\n\texport class Request {\r\n\t\tconstructor(params: Request) {}\r\n\t\tgetRequestQueryParams() {\r\n\t\t\treturn {};\r\n\t\t}\r\n\t\t// TODO:\r\n\t\tstatic get formGroup() {\r\n\t\t\treturn new FormGroup({\r\n\t\t\t\tName: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tIsActive: new FormControl(\"true\", [ Validators.required ]),\r\n\t\t\t\tRoute: new FormControl(\"\", [ Validators.required ])\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: DiagramModel;\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { EditDiagramApiModel } from \"../models/edit-diagram-api.model\";\r\n\r\nexport enum EditDiagramActionTypes {\r\n\tEDIT_DIAGRAM = \"[DIAGRAM][EDIT] EDIT_DIAGRAM\",\r\n\tEDIT_DIAGRAM_START = \"[DIAGRAM][EDIT] EDIT_DIAGRAM_START\",\r\n\tEDIT_DIAGRAM_SUCCEED = \"[DIAGRAM][EDIT] EDIT_DIAGRAM_SUCCEED\",\r\n\tEDIT_DIAGRAM_FAILED = \"[DIAGRAM][EDIT] EDIT_DIAGRAM_FAILED\"\r\n}\r\n\r\nexport class EditDiagramAction implements Action {\r\n\treadonly type = EditDiagramActionTypes.EDIT_DIAGRAM;\r\n\tconstructor(public payload: EditDiagramApiModel.Response) {}\r\n}\r\nexport class EditDiagramActionStart implements Action {\r\n\treadonly type = EditDiagramActionTypes.EDIT_DIAGRAM_START;\r\n\tconstructor(public payload: EditDiagramApiModel.Response) {}\r\n}\r\nexport class EditDiagramActionSucceed implements Action {\r\n\treadonly type = EditDiagramActionTypes.EDIT_DIAGRAM_SUCCEED;\r\n\tconstructor(public payload: EditDiagramApiModel.Response) {}\r\n}\r\nexport class EditDiagramActionFailed implements Action {\r\n\treadonly type = EditDiagramActionTypes.EDIT_DIAGRAM_FAILED;\r\n}\r\n\r\nexport type EditDiagramActions =\r\n\t| EditDiagramAction\r\n\t| EditDiagramActionStart\r\n\t| EditDiagramActionSucceed\r\n\t| EditDiagramActionFailed;\r\n","import { responseStatusTypes } from \"@soushians/shared\";\r\n\r\nimport { EditDiagramApiModel } from \"../models/edit-diagram-api.model\";\r\nimport { EditDiagramActionTypes, EditDiagramActions } from \"../actions/edit-diagram.actions\";\r\n\r\nconsole.log(EditDiagramApiModel);\r\nexport interface State {\r\n\tstatus: responseStatusTypes;\r\n\tdata: EditDiagramApiModel.Response;\r\n}\r\nexport const initialState: State = {\r\n\tstatus: \"pristine\",\r\n\tdata: { Result: {} } as EditDiagramApiModel.Response\r\n};\r\nexport function Reducer(state = initialState, action: EditDiagramActions): State {\r\n\tswitch (action.type) {\r\n\t\tcase EditDiagramActionTypes.EDIT_DIAGRAM: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tstatus: \"dirty\",\r\n\t\t\t\tdata: new EditDiagramApiModel.Response()\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase EditDiagramActionTypes.EDIT_DIAGRAM_START: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tstatus: \"pending\",\r\n\t\t\t\tdata: new EditDiagramApiModel.Response()\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase EditDiagramActionTypes.EDIT_DIAGRAM_SUCCEED: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tstatus: \"succeed\"\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase EditDiagramActionTypes.EDIT_DIAGRAM_FAILED: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tstatus: \"failed\"\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tdefault: {\r\n\t\t\treturn state;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const EditDiagramInfo = (state: State) => state.data;\r\n","import { ParentGuardAction } from \"../actions/parent-guard.actions\";\r\n\r\nexport interface State {\r\n\troute: string;\r\n\tresult: boolean;\r\n}\r\nexport const initialState: State = {\r\n\troute: \"\",\r\n\tresult: false\r\n};\r\n\r\nexport function ParentGuardReducer(state = initialState, action: ParentGuardAction): State {\r\n\tswitch (action.type) {\r\n\t\tdefault: {\r\n\t\t\treturn state;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport var getParentRoutingGuard = (state: State) => state;\r\n","import { createSelector, createFeatureSelector, MemoizedSelector } from \"@ngrx/store\";\r\n\r\nimport * as DiagramsReducer from \"./diagrams.reducer\";\r\nimport * as fromEditDiagram from \"./edit-diagram.reducer\";\r\nimport * as parentGuardReducer from \"./parent-guard.reducer\";\r\n\r\nexport interface DiagramState {\r\n\tdiagrams: DiagramsReducer.State;\r\n\teditDiagram: fromEditDiagram.State;\r\n\tparentGuard: parentGuardReducer.State;\r\n}\r\n\r\nexport const DiagramReducers = {\r\n\tdiagrams: DiagramsReducer.diagramReducer,\r\n\teditDiagram: fromEditDiagram.Reducer,\r\n\tparentGuard: parentGuardReducer.ParentGuardReducer\r\n};\r\n\r\nexport interface FeatureState {\r\n\t\"diagram\": DiagramState;\r\n}\r\n\r\n//#region selectors\r\n\r\nexport const selectFeatureState = createFeatureSelector<DiagramState>(\"diagram\");\r\n\r\n// export const getDiagramInformationStatus = createSelector(\r\n//   selectFeatureState,\r\n//   (state: DiagramState) => state.diagram\r\n// );\r\n\r\n//#region edit diagram\r\nexport const selectEditDiagramState = createSelector(selectFeatureState, (state: DiagramState) => state.editDiagram);\r\n","import { FormGroup, FormControl, Validators, FormArray } from \"@angular/forms\";\r\n\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\n\r\nimport { DiagramModel } from \"./diagram.model\";\r\nimport { SourceModel } from \"./source.model\";\r\n\r\nexport namespace AddDiagramApiModel {\r\n\texport class Request implements HttpRequestBaseModel<Request> {\r\n\t\t_id: string;\r\n\t\tName: string;\r\n\t\tIsActive: Boolean;\r\n\t\tType: string;\r\n\t\tTypes: { [columnLabel: string]: string };\r\n\t\tLegend: Boolean;\r\n\t\tSubchart: Boolean;\r\n\t\tZoom: Boolean;\r\n\t\tTooltip: Boolean;\r\n\t\tRoute: string;\r\n\t\tSync: number;\r\n\t\tColors: string[];\r\n\t\tColumnMappings: { NamePath: string; ValuePath: string }[];\r\n\t\tFlow: string;\r\n\t\tcolumns: any[];\r\n\t\tCols: number;\r\n\t\tRows: number;\r\n\t\tTextColor: String;\r\n\t\tBackgroundColor: string;\r\n\t\tbooleano: any;\r\n\t\tSource: SourceModel;\r\n\t\tGroups: string[];\r\n\t\tconstructor(initValue: AddDiagramApiModel.Request = {} as AddDiagramApiModel.Request) {\r\n\t\t\tObject.keys(initValue).forEach(key => (this[key] = initValue[key]));\r\n\t\t}\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {\r\n\t\t\t\t_id: this._id,\r\n\t\t\t\tName: this.Name,\r\n\t\t\t\tIsActive: this.IsActive,\r\n\t\t\t\tSource: this.Source,\r\n\t\t\t\tType: this.Type,\r\n\t\t\t\tGroups: this.Groups,\r\n\t\t\t\tWidget: {\r\n\t\t\t\t\tbooleano: this.booleano\r\n\t\t\t\t},\r\n\t\t\t\tChart: {\r\n\t\t\t\t\tdata: {\r\n\t\t\t\t\t\ttype: this.Type,\r\n\t\t\t\t\t\tcolumns: this.columns,\r\n\t\t\t\t\t\tcolors: this.Colors,\r\n\t\t\t\t\t\ttypes: this.Types\r\n\t\t\t\t\t},\r\n\t\t\t\t\tColumnMappings: this.ColumnMappings,\r\n\t\t\t\t\tFlow: this.Flow,\r\n\t\t\t\t\tlegend: {\r\n\t\t\t\t\t\tshow: this.Legend\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsubchart: {\r\n\t\t\t\t\t\tshow: this.Subchart\r\n\t\t\t\t\t},\r\n\t\t\t\t\tzoom: {\r\n\t\t\t\t\t\tenabled: this.Zoom\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttooltip: {\r\n\t\t\t\t\t\tgrouped: this.Tooltip\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tBox: {\r\n\t\t\t\t\tCols: this.Cols,\r\n\t\t\t\t\tRows: this.Rows,\r\n\t\t\t\t\tTextColor: this.TextColor,\r\n\t\t\t\t\tBackgroundColor: this.BackgroundColor\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tstatic get formGroup() {\r\n\t\t\treturn new FormGroup({\r\n\t\t\t\t_id: new FormControl(\"\", []),\r\n\t\t\t\tName: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tSync: new FormControl(0, [ Validators.required ]),\r\n\t\t\t\tIsActive: new FormControl(\"true\", [ Validators.required ]),\r\n\t\t\t\tType: new FormControl(\"pie\", [ Validators.required ]),\r\n\t\t\t\tGroups: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tLegend: new FormControl(\"true\", [ Validators.required ]),\r\n\t\t\t\tSubchart: new FormControl(\"false\", [ Validators.required ]),\r\n\t\t\t\tZoom: new FormControl(\"false\", [ Validators.required ]),\r\n\t\t\t\tTooltip: new FormControl(\"false\", [ Validators.required ]),\r\n\t\t\t\tRoute: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tSource: new FormControl({}, [ Validators.required ]),\r\n\t\t\t\tcolumns: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tCols: new FormControl(1, [ Validators.required ]),\r\n\t\t\t\tRows: new FormControl(1, [ Validators.required ]),\r\n\t\t\t\tTextColor: new FormControl(\"#000000\", [ Validators.required ]),\r\n\t\t\t\tBackgroundColor: new FormControl(\"#ffffff\", [ Validators.required ]),\r\n\t\t\t\tColors: new FormGroup({}),\r\n\t\t\t\tTypes: new FormGroup({}),\r\n\t\t\t\tColumnMappings: new FormArray([]),\r\n\t\t\t\tFlow: new FormControl(true),\r\n\t\t\t\tdonut: new FormGroup({\r\n\t\t\t\t\ttitle: new FormControl(\"Default Title\")\r\n\t\t\t\t}),\r\n\t\t\t\tbooleano: new FormGroup({\r\n\t\t\t\t\tSuccessMessage: new FormControl(\"SuccessMessage\"),\r\n\t\t\t\t\tFailureMessage: new FormControl(\"FailureMessage\")\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\texport class Response {\r\n\t\tResult: DiagramModel;\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter, Injector } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { BehaviorSubject, Subscription } from \"rxjs\";\r\n\r\n@Component({\r\n\tselector: \"diagram-server-status\",\r\n\ttemplate: `<div *ngIf=\"dataLoaded | async\">\r\n  <!-- <mat-icon [ngClass]=\"dataStatus$ ? 'connected' : 'disconnected'\">\r\n    fiber_manual_record\r\n  </mat-icon> -->\r\n  <!-- <span *ngIf=\"dataStatus$\">{{data.Widget.booleano.SuccessMessage}}</span>\r\n  <span *ngIf=\"!dataStatus$\">{{data.Widget.booleano.FailureMessage}}</span> -->\r\n</div>`,\r\n\tstyles: [`.disconnected{color:#ba3030}.connected{color:#30ae1c}.numeric{font-size:2.4em;line-height:1.8}.numeric.title{font-family:iran-sans-bold,Tahoma;font-size:1.1em}`]\r\n})\r\nexport class ServerStatusDiagramComponent implements OnInit {\r\n\tdataSubscribtion: Subscription;\r\n\tdataLoaded = new BehaviorSubject(false);\r\n\t_data;\r\n\t@Input()\r\n\tset data(data) {\r\n\t\tthis._data = data;\r\n\t\tthis.dataLoaded.next(true);\r\n\t}\r\n\tget data() {\r\n\t\treturn this._data;\r\n\t}\r\n\r\n\tconstructor(private injector: Injector) {\r\n\t\tthis.data = this.injector.get(\"data\");\r\n\t}\r\n\r\n\ttimeChange(e) {\r\n\t\t// this.dataSubscribtion.unsubscribe();\r\n\t\t// this.dataSubscribtion = this.diagramService.getData(this.data.Source._id, this.data.Source.Interval)\r\n\t\t//   .subscribe(data => {\r\n\t\t//     debugger\r\n\t\t//     this.chart.load({\r\n\t\t//       columns: this.diagramService.extract_columns_from_data(data, this.data.Chart.ColumnMappings)\r\n\t\t//     });\r\n\t\t//   })\r\n\t}\r\n\tngOnInit() {}\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter, Injector, OnDestroy } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\nimport { Subscription } from \"rxjs\";\r\n\r\nimport { DiagramModel } from \"../../models/diagram.model\";\r\nimport { DiagramService } from \"../../services/diagram.service\";\r\n\r\n@Component({\r\n\tselector: \"diagram-partial-config-edit\",\r\n\ttemplate: `<form [formGroup]=\"formGroup\" fxLayout='column'>\r\n  <div>\r\n    <mat-checkbox (change)=\"configChanged()\" formControlName=\"Legend\" fxFlexFill>ÙÙØ§ÛØ´ ØªÙØ¶ÛØ­Ø§Øª</mat-checkbox>\r\n  </div>\r\n  <div>\r\n    <mat-checkbox (change)=\"configChanged()\" formControlName=\"Zoom\" fxFlexFill>Ø¨Ø²Ø±Ú¯ÙÙØ§ÛÛ</mat-checkbox>\r\n  </div>\r\n  <div>\r\n    <mat-checkbox (change)=\"configChanged()\" formControlName=\"Subchart\" fxFlexFill>ÙÙØ§ÛØ´ Ø¨Ø²Ø±Ú¯ÙÙØ§ÛÛ Ø¯Ø± Ø²ÛØ± ÙÙÙØ¯Ø§Ø±</mat-checkbox>\r\n  </div>\r\n  <div>\r\n    <mat-checkbox (change)=\"configChanged()\" formControlName=\"Tooltip\" fxFlexFill>ÙÙØ§ÛØ´ ØªÙØ¶ÛØ­Ø§Øª Ø¨Ù ØµÙØ±Øª Ú¯Ø±ÙÙÛ</mat-checkbox>\r\n  </div>\r\n</form>`,\r\n\tstyles: [`:host{width:100%}.diagram-box{margin:15px}.numeric{font-size:3em;line-height:1.8;font-family:iran-sans-bold,Tahoma}.numeric.title{font-size:1.5em}`]\r\n})\r\nexport class DiagramPartialConfigEditComponent implements OnInit, OnDestroy {\r\n\tdataSubscribtion: Subscription;\r\n\tdataLoaded = new BehaviorSubject(false);\r\n\t_data;\r\n\t@Input()\r\n\tset data(data) {\r\n\t\tthis._data = data;\r\n\t\tthis.dataLoaded.next(true);\r\n\t}\r\n\tget data() {\r\n\t\treturn this._data;\r\n\t}\r\n\tdiagramService: DiagramService;\r\n\tformGroup: FormGroup;\r\n\tconstructor(private injector: Injector) {\r\n\t\tthis.formGroup = this.injector.get(\"formGroup\");\r\n\t\tthis.diagramService = this.injector.get(\"diagramService\");\r\n\t}\r\n\tngOnInit() {\r\n\t\t// this.dataSubscribtion = this.diagramService.getData(this.data.Source.Route)\r\n\t\t//   .subscribe(data => {\r\n\t\t//     debugger;\r\n\t\t//   });\r\n\t}\r\n\tngOnDestroy() {\r\n\t\t// this.dataSubscribtion.unsubscribe();\r\n\t}\r\n\tconfigChanged() {}\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter, Injector, OnDestroy } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { Subscription } from \"rxjs\";\r\n\r\nimport { DiagramService } from \"../../services/diagram.service\";\r\n\r\n@Component({\r\n\tselector: \"pie-diagram-partial-config\",\r\n\ttemplate: `<div *ngIf=\"dataLoaded | async\" class=\"diagram-box\">\r\n  <form [formGroup]=\"formGroup\" fxLayout='column'>\r\n    <div>\r\n      <mat-checkbox (change)=\"configChanged()\" formControlName=\"Legend\" fxFlexFill>ÙÙØ§ÛØ´ ØªÙØ¶ÛØ­Ø§Øª</mat-checkbox>\r\n    </div>\r\n    <div>\r\n      <mat-checkbox (change)=\"configChanged()\" formControlName=\"IsActive\" fxFlexFill>ÙØ¶Ø¹ÛØª</mat-checkbox>\r\n    </div>\r\n    <div>\r\n      <mat-checkbox (change)=\"configChanged()\" formControlName=\"Legend\" fxFlexFill>ÙÙØ§ÛØ´ ØªÙØ¶ÛØ­Ø§Øª</mat-checkbox>\r\n    </div>\r\n    <div>\r\n      <mat-checkbox (change)=\"configChanged()\" formControlName=\"IsActive\" fxFlexFill>ÙØ¶Ø¹ÛØª</mat-checkbox>\r\n    </div>\r\n  </form>\r\n  <form [formGroup]=\"donutFormGroup\">\r\n    <mat-form-field>\r\n      <input matInput placeholder=\"Ø¹ÙÙØ§Ù\" formControlName=\"title\">\r\n    </mat-form-field>\r\n  </form>\r\n</div>`,\r\n\tstyles: [`:host{width:100%}.diagram-box{margin:15px}.numeric{font-size:3em;line-height:1.8;font-family:iran-sans-bold,Tahoma}.numeric.title{font-size:1.5em}`]\r\n})\r\nexport class PieDiagramPartialConfigComponent implements OnInit, OnDestroy {\r\n\t@Output() ConfigChanged = new EventEmitter();\r\n\tdataSubscribtion: Subscription;\r\n\tdataLoaded = new BehaviorSubject(false);\r\n\t_dataLoaded;\r\n\t@Input()\r\n\tset formGroup(data: FormGroup) {\r\n\t\tif (!data) return;\r\n\t\tthis._dataLoaded = data;\r\n\t\tthis.dataLoaded.next(true);\r\n\t}\r\n\tget formGroup() {\r\n\t\treturn this._dataLoaded;\r\n\t}\r\n\tdonutFormGroup: FormGroup;\r\n\tdiagramService: DiagramService;\r\n\tconstructor(private injector: Injector) {\r\n\t\tthis.formGroup = this.injector.get(\"formGroup\");\r\n\t\tthis.diagramService = this.injector.get(\"diagramService\");\r\n\t\tthis.donutFormGroup = this.formGroup.controls.donut as FormGroup;\r\n\t}\r\n\tngOnInit() {\r\n\t\t// this.dataSubscribtion = this.diagramService.getData(this.data.Source.Route)\r\n\t\t//   .subscribe(data => {\r\n\t\t//     debugger;\r\n\t\t//   });\r\n\t}\r\n\tngOnDestroy() {\r\n\t\t// this.dataSubscribtion.unsubscribe();\r\n\t}\r\n\tconfigChanged() {\r\n\t\tthis.ConfigChanged.emit();\r\n\t}\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter, Injector, OnDestroy } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { FormGroup } from \"@angular/forms\";\r\n\r\nimport { DiagramService } from \"../../services/diagram.service\";\r\n\r\n@Component({\r\n\tselector: \"booleano-widget-partial-config\",\r\n\ttemplate: `<div *ngIf=\"dataLoaded | async\" class=\"diagram-box\">\r\n  <form [formGroup]=\"booleanoFormGroup\">\r\n    <mat-form-field>\r\n      <input matInput placeholder=\"Ø¹ÙÙØ§Ù\" formControlName=\"SuccessMessage\">\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n      <input matInput placeholder=\"Ø¹ÙÙØ§Ù\" formControlName=\"FailureMessage\">\r\n    </mat-form-field>\r\n  </form>\r\n</div>`,\r\n\tstyles: [`:host{width:100%}.diagram-box{margin:15px}.numeric{font-size:3em;line-height:1.8;font-family:iran-sans-bold,Tahoma}.numeric.title{font-size:1.5em}`]\r\n})\r\nexport class BooleanoWidgetPartialConfigComponent implements OnInit, OnDestroy {\r\n\tdataSubscribtion: Subscription;\r\n\tdataLoaded = new BehaviorSubject(false);\r\n\t_dataLoaded;\r\n\t@Input()\r\n\tset formGroup(data: FormGroup) {\r\n\t\tif (!data) return;\r\n\t\tthis._dataLoaded = data;\r\n\t\tthis.dataLoaded.next(true);\r\n\t}\r\n\tget formGroup() {\r\n\t\treturn this._dataLoaded;\r\n\t}\r\n\tbooleanoFormGroup: FormGroup;\r\n\tdiagramService: DiagramService;\r\n\r\n\tconstructor(private injector: Injector) {\r\n\t\tthis.formGroup = this.injector.get(\"formGroup\");\r\n\t\tthis.diagramService = this.injector.get(\"diagramService\");\r\n\t\tthis.booleanoFormGroup = this.formGroup.controls.booleano as FormGroup;\r\n\t}\r\n\tngOnInit() {\r\n\t\t// this.dataSubscribtion = this.diagramService.getData(this.data.Source.Route)\r\n\t\t//   .subscribe(data => {\r\n\t\t//     debugger;\r\n\t\t//   });\r\n\t}\r\n\tngOnDestroy() {\r\n\t\t// this.dataSubscribtion.unsubscribe();\r\n\t}\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter, Injector, OnDestroy } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { FormGroup } from \"@angular/forms\";\r\n\r\nimport { DiagramService } from \"../../services/diagram.service\";\r\n\r\n@Component({\r\n\tselector: \"numeric-widget-partial-config\",\r\n\ttemplate: `<div *ngIf=\"dataLoaded | async\" class=\"diagram-box\">\r\n  <form [formGroup]=\"donutFormGroup\">\r\n    <mat-form-field>\r\n      <input matInput placeholder=\"Ø¹ÙÙØ§Ù\" formControlName=\"title\">\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n      <input matInput placeholder=\"Ø¹ÙÙØ§Ù\" formControlName=\"title\">\r\n    </mat-form-field>\r\n  </form>\r\n</div>`,\r\n\tstyles: [`:host{width:100%}.diagram-box{margin:15px}.numeric{font-size:3em;line-height:1.8;font-family:iran-sans-bold,Tahoma}.numeric.title{font-size:1.5em}`]\r\n})\r\nexport class NumericWidgetPartialConfigComponent implements OnInit, OnDestroy {\r\n\tdataSubscribtion: Subscription;\r\n\tdataLoaded = new BehaviorSubject(false);\r\n\t_dataLoaded;\r\n\t@Input()\r\n\tset formGroup(data: FormGroup) {\r\n\t\tif (!data) return;\r\n\t\tthis._dataLoaded = data;\r\n\t\tthis.dataLoaded.next(true);\r\n\t}\r\n\tget formGroup() {\r\n\t\treturn this._dataLoaded;\r\n\t}\r\n\tdonutFormGroup: FormGroup;\r\n\tdiagramService: DiagramService;\r\n\tconstructor(private injector: Injector) {\r\n\t\tthis.formGroup = this.injector.get(\"formGroup\");\r\n\t\tthis.diagramService = this.injector.get(\"diagramService\");\r\n\t\tthis.donutFormGroup = this.formGroup.controls.donut as FormGroup;\r\n\t}\r\n\tngOnInit() {\r\n\t\t// this.dataSubscribtion = this.diagramService.getData(this.data.Source.Route)\r\n\t\t//   .subscribe(data => {\r\n\t\t//     debugger;\r\n\t\t//   });\r\n\t}\r\n\tngOnDestroy() {\r\n\t\t// this.dataSubscribtion.unsubscribe();\r\n\t}\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter, Injector, OnDestroy } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { Subscription } from \"rxjs\";\r\n\r\nimport { DiagramService } from \"../../services/diagram.service\";\r\n\r\n@Component({\r\n\tselector: \"linear-diagram-partial-config\",\r\n\ttemplate: `<form [formGroup]=\"formGroup\" fxLayout='column'>\r\n  <div>\r\n    <mat-checkbox (change)=\"configChanged()\" formControlName=\"Legend\" fxFlexFill>ÙÙØ§ÛØ´ ØªÙØ¶ÛØ­Ø§Øª</mat-checkbox>\r\n  </div>\r\n  <div>\r\n    <mat-checkbox (change)=\"configChanged()\" formControlName=\"Zoom\" fxFlexFill>Ø¨Ø²Ø±Ú¯ÙÙØ§ÛÛ</mat-checkbox>\r\n  </div>\r\n  <div>\r\n    <mat-checkbox (change)=\"configChanged()\" formControlName=\"Subchart\" fxFlexFill>ÙÙØ§ÛØ´ Ø¨Ø²Ø±Ú¯ÙÙØ§ÛÛ Ø¯Ø± Ø²ÛØ± ÙÙÙØ¯Ø§Ø±</mat-checkbox>\r\n  </div>\r\n  <div>\r\n    <mat-checkbox (change)=\"configChanged()\" formControlName=\"Tooltip\" fxFlexFill>ÙÙØ§ÛØ´ ØªÙØ¶ÛØ­Ø§Øª Ø¨Ù ØµÙØ±Øª Ú¯Ø±ÙÙÛ</mat-checkbox>\r\n  </div>\r\n  <div>\r\n    <mat-checkbox (change)=\"configChanged()\" formControlName=\"Flow\" fxFlexFill>Flow</mat-checkbox>\r\n  </div>\r\n</form>`,\r\n\tstyles: [`:host{width:100%}.diagram-box{margin:15px}.numeric{font-size:3em;line-height:1.8;font-family:iran-sans-bold,Tahoma}.numeric.title{font-size:1.5em}`]\r\n})\r\nexport class LinearDiagramPartialConfigComponent implements OnInit, OnDestroy {\r\n\tdataSubscribtion: Subscription;\r\n\tdataLoaded = new BehaviorSubject(false);\r\n\t_data;\r\n\t@Input()\r\n\tset data(data) {\r\n\t\tthis._data = data;\r\n\t\tthis.dataLoaded.next(true);\r\n\t}\r\n\tget data() {\r\n\t\treturn this._data;\r\n\t}\r\n\t@Output() ConfigChanged = new EventEmitter();\r\n\tdiagramService: DiagramService;\r\n\tformGroup: FormGroup;\r\n\tconstructor(private injector: Injector) {\r\n\t\tthis.formGroup = this.injector.get(\"formGroup\");\r\n\t\tthis.diagramService = this.injector.get(\"diagramService\");\r\n\t}\r\n\tngOnInit() {\r\n\t\t// this.dataSubscribtion = this.diagramService.getData(this.data.Source.Route)\r\n\t\t//   .subscribe(data => {\r\n\t\t//     debugger;\r\n\t\t//   });\r\n\t}\r\n\tngOnDestroy() {\r\n\t\t// this.dataSubscribtion.unsubscribe();\r\n\t}\r\n\tconfigChanged() {\r\n\t\tthis.ConfigChanged.emit();\r\n\t}\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter, Injector } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\n\r\n@Component({\r\n\tselector: \"diagram-server-connecting-time\",\r\n\ttemplate: `<div *ngIf=\"dataLoaded | async\">\r\n  <div fxLayoutAlign=\"center center\" class=\"numeric title\">{{data.Description}}</div>\r\n  <!-- <div fxLayoutAlign=\"center center\" class=\"numeric\">{{time | timeCounter}}</div> -->\r\n  <div [id]=\"'diagram_' + data._id\"></div>\r\n</div>`,\r\n\tstyles: [`.numeric{font-size:2.4em;line-height:1.8}.numeric.title{font-family:iran-sans-bold,Tahoma;font-size:1.1em}`]\r\n})\r\nexport class ServerConnectingTimeDiagramComponent implements OnInit {\r\n\t@Input() time: number = 0;\r\n\tdataLoaded = new BehaviorSubject(false);\r\n\t_data;\r\n\t@Input()\r\n\tset data(data) {\r\n\t\tthis._data = data;\r\n\t\tthis.dataLoaded.next(true);\r\n\t}\r\n\tget data() {\r\n\t\treturn this._data;\r\n\t}\r\n\tconstructor(private injector: Injector) {\r\n\t\tthis.data = this.injector.get(\"data\");\r\n\t\tsetInterval(() => {\r\n\t\t\tthis.time = this.time + 1;\r\n\t\t}, 1000);\r\n\t}\r\n\r\n\tngOnInit() {}\r\n\ttimeChange(e) {\r\n\t\t// this.dataSubscribtion.unsubscribe();\r\n\t\t// this.dataSubscribtion = this.diagramService.getData(this.data.Source.Route, this.data.Source.Sync)\r\n\t\t//         .subscribe(data => {\r\n\t\t//                 this.chart.load({\r\n\t\t//                         columns: this.diagramService.extract_columns_from_data(data, this.data.Chart.ColumnMappings)\r\n\t\t//                 });\r\n\t\t//         })\r\n\t}\r\n}\r\n","import { Injectable, Inject } from \"@angular/core\";\r\n\r\nimport { MODULE_CONFIG_TOKEN, DiagramModuleConfig, MODULE_DEFAULT_CONFIG } from \"../diagram.config\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class DiagramConfigurationService {\r\n\tprivate _config: DiagramModuleConfig;\r\n\tget config() {\r\n\t\treturn this._config;\r\n\t}\r\n\r\n\tconstructor(@Inject(MODULE_CONFIG_TOKEN) config) {\r\n\t\tthis._config = Object.assign({}, MODULE_DEFAULT_CONFIG, config);\r\n\t}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, Subscription } from 'rxjs/Rx';\r\nimport { Store } from '@ngrx/store';\r\ndeclare var c3: any;\r\n\r\nimport { DiagramConfigurationService } from './diagram-configuration.service';\r\nimport { FeatureState } from '../reducers';\r\nimport { GetDiagramsApiModel } from '../models/get-diagrams-api.model';\r\nimport { SourceModel } from '../models/source.model';\r\nimport { AddDiagramApiModel } from '../models/add-diagram-api.model';\r\nimport { DiagramModuleConfig } from '../diagram.config';\r\n\r\ndeclare var _: any;\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root'\r\n})\r\nexport class DiagramService {\r\n\tconfig: DiagramModuleConfig;\r\n\tconstructor(\r\n\t\tprivate http: HttpClient,\r\n\t\tprivate store: Store<FeatureState>,\r\n\t\tprivate configurationService: DiagramConfigurationService\r\n\t) {\r\n\t\tthis.config = this.configurationService.config;\r\n\t}\r\n\r\n\tgetDiagrams(): Observable<GetDiagramsApiModel.Response> {\r\n\t\treturn this.http\r\n\t\t\t.get<GetDiagramsApiModel.Response>(this.config.env.frontend_server + '/api/diagram')\r\n\t\t\t.map((response) => response)\r\n\t\t\t.catch((err) => {\r\n\t\t\t\treturn Observable.throw(err);\r\n\t\t\t});\r\n\t}\r\n\tgetSources(): Observable<SourceModel[]> {\r\n\t\treturn this.http\r\n\t\t\t.get(this.config.env.frontend_server + '/api/source')\r\n\t\t\t.map((response) => (response as any).Result)\r\n\t\t\t.catch((err) => {\r\n\t\t\t\treturn Observable.throw(err);\r\n\t\t\t});\r\n\t}\r\n\tgetGroups(): Observable<string[]> {\r\n\t\treturn this.http\r\n\t\t\t.get(this.config.env.frontend_server + '/api/diagram/groups')\r\n\t\t\t.map((response) => (response as any).Result)\r\n\t\t\t.catch((err) => {\r\n\t\t\t\treturn Observable.throw(err);\r\n\t\t\t});\r\n\t}\r\n\tgetDiagram(id: string): Observable<any> {\r\n\t\tif (!id) debugger;\r\n\t\treturn this.http\r\n\t\t\t.get(this.config.env.frontend_server + `/api/diagram/${id}`)\r\n\t\t\t.map((response) => response)\r\n\t\t\t.catch((err) => {\r\n\t\t\t\treturn Observable.throw(err);\r\n\t\t\t});\r\n\t}\r\n\taddDiagram(data: any): Observable<AddDiagramApiModel.Response> {\r\n\t\tvar model = new AddDiagramApiModel.Request(data);\r\n\t\treturn this.http\r\n\t\t\t.post<AddDiagramApiModel.Response>(this.config.env.frontend_server + '/api/diagram', model.getRequestBody())\r\n\t\t\t.map((response) => response)\r\n\t\t\t.catch((err) => {\r\n\t\t\t\treturn Observable.throw(err);\r\n\t\t\t});\r\n\t}\r\n\tupdateDiagram(body: any): Observable<any> {\r\n\t\treturn this.http\r\n\t\t\t.put(this.config.env.frontend_server + '/api/diagram', body)\r\n\t\t\t.map((response) => response)\r\n\t\t\t.catch((err) => {\r\n\t\t\t\treturn Observable.throw(err);\r\n\t\t\t});\r\n\t}\r\n\tdeleteDiagram(id: string): Observable<any> {\r\n\t\treturn this.http\r\n\t\t\t.delete(`${this.config.env.frontend_server}/api/diagram/${id}`)\r\n\t\t\t.map((response) => response)\r\n\t\t\t.catch((err) => {\r\n\t\t\t\treturn Observable.throw(err);\r\n\t\t\t});\r\n\t}\r\n\tgetData(source: SourceModel, time: number = 0, once: Boolean = false): Observable<any> {\r\n\t\tif (once && time !== 0) {\r\n\t\t\treturn this.http\r\n\t\t\t\t.get(`${this.config.env.frontend_server}/api/data`, {\r\n\t\t\t\t\tparams: {\r\n\t\t\t\t\t\tsourceId: source._id,\r\n\t\t\t\t\t\ttime: this.getFloorTime(source.Interval, time).toString()\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.map((res: any) => res.Result);\r\n\t\t} else if (source.Interval == 0) {\r\n\t\t\treturn this.http\r\n\t\t\t\t.get(`${this.config.env.frontend_server}/api/data`, {\r\n\t\t\t\t\tparams: {\r\n\t\t\t\t\t\tsourceId: source._id,\r\n\t\t\t\t\t\ttime: null\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.map((res: any) => res.Result);\r\n\t\t} else {\r\n\t\t\ttime = time || Date.now();\r\n\t\t\treturn Observable.timer(0, source.Interval).switchMap((i) =>\r\n\t\t\t\tthis.http\r\n\t\t\t\t\t.get(`${this.config.env.frontend_server}/api/data`, {\r\n\t\t\t\t\t\tparams: {\r\n\t\t\t\t\t\t\tsourceId: source._id,\r\n\t\t\t\t\t\t\ttime: this.getFloorTime(source.Interval, time).toString()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.map((res: any) => res.Result)\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\textract_columns_from_data(data: any, columnsMappings) {\r\n\t\tlet res = [];\r\n\r\n\t\tcolumnsMappings.forEach((item) => {\r\n\t\t\tvar ValueData = _.getValue(data, item.ValuePath);\r\n\r\n\t\t\tif (!item.NamePath) {\r\n\t\t\t\treturn res.push([ item.ValuePath.split('.').pop() ].concat(ValueData));\r\n\t\t\t}\r\n\t\t\tvar NameData = _.getValue(data, item.NamePath);\r\n\r\n\t\t\tif (_.is.array(NameData)) {\r\n\t\t\t\treturn (res = res.concat(NameData.map((item, i) => [ item ].concat(ValueData[i]))));\r\n\t\t\t} else {\r\n\t\t\t\treturn res.push([ NameData ].concat(ValueData));\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn res;\r\n\t}\r\n\tget_data_report(data: any) {\r\n\t\treturn _.report(data);\r\n\t}\r\n\tget_last_node_of_data(data: any) {\r\n\t\treturn (_.report(data) as any[]).filter((item) => item.isLastNode);\r\n\t}\r\n\tbuildChartConfig(columns) {\r\n\t\treturn {\r\n\t\t\tdata: {\r\n\t\t\t\tcolumns\r\n\t\t\t},\r\n\t\t\tlegend: {\r\n\t\t\t\tshow: true\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\t// TODO: implement interface of c3 config\r\n\tcharts = {};\r\n\tgenerateDiagram(config: any, id: string, route: string, sync: number): Subscription {\r\n\t\tthis.charts[id] = c3.generate({\r\n\t\t\t...config,\r\n\t\t\tbindto: `#diagram_${id}`\r\n\t\t});\r\n\r\n\t\treturn this.getData({} as SourceModel, sync).subscribe((data) => {\r\n\t\t\tthis.charts[id].load({\r\n\t\t\t\tcolumns: this.extract_columns_from_data(data.Data, config.ColumnMappings)\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\tgetFloorTime(precision = 60 * 1000, time: number = 0) {\r\n\t\treturn Math.floor((time || Date.now()) / precision);\r\n\t}\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter, Injector } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\n\r\nimport { DiagramService } from \"../../services/diagram.service\";\r\n\r\n@Component({\r\n\tselector: \"numeric-edit-diagram\",\r\n\ttemplate: `<mat-card *ngIf=\"dataLoaded | async\" class=\"diagram-box\">\r\n  <mat-card-header>\r\n    <mat-card-title fxLayoutAlign=\"space-between center\">\r\n    </mat-card-title>\r\n  </mat-card-header>\r\n  <mat-card-content>\r\n  </mat-card-content>\r\n</mat-card>`,\r\n\tstyles: [`:host{width:100%}.diagram-box{margin:15px}.numeric{font-size:3em;line-height:1.8;font-family:iran-sans-bold,Tahoma}.numeric.title{font-size:1.5em}`]\r\n})\r\nexport class NumericEditDiagramComponent implements OnInit {\r\n\tdataLoaded = new BehaviorSubject(false);\r\n\t_data;\r\n\t@Input()\r\n\tset data(data) {\r\n\t\tthis._data = data;\r\n\t\tthis.dataLoaded.next(true);\r\n\t}\r\n\tget data() {\r\n\t\treturn this._data;\r\n\t}\r\n\tconstructor(private injector: Injector, private diagramService: DiagramService) {\r\n\t\tthis.data = this.injector.get(\"data\");\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\t// this.dataSubscribtion = this.diagramService.getData(this.data.Source.Route)\r\n\t\tthis.diagramService.getData(this.data.Source).subscribe(data => {\r\n\t\t\tdebugger;\r\n\t\t});\r\n\t}\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter, Injector, OnDestroy } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\nimport { Subscription } from \"rxjs\";\r\n\r\nimport { DiagramService } from \"../../services/diagram.service\";\r\n\r\n@Component({\r\n\tselector: \"diagram-numeric\",\r\n\ttemplate: `<div *ngIf=\"dataLoaded | async\">\r\n  <!-- <div fxLayoutAlign=\"center center\" class=\"numeric\">{{data.Source.Data | json}}</div> -->\r\n  <div fxLayoutAlign=\"center center\" class=\"numeric\">{{counter}}</div>\r\n  <div [id]=\"'diagram_' + data._id\"></div>\r\n</div>`,\r\n\tstyles: [`:host{width:100%}.numeric{font-size:3em;line-height:1.8;font-family:iran-sans-bold,Tahoma}.numeric.title{font-size:1.5em}.mat-card{padding:0}`]\r\n})\r\nexport class NumericDiagramComponent implements OnInit, OnDestroy {\r\n\tdataLoaded = new BehaviorSubject(false);\r\n\t_data;\r\n\tcounter: number;\r\n\t@Input()\r\n\tset data(data) {\r\n\t\tthis._data = data;\r\n\t\tthis.dataLoaded.next(true);\r\n\t}\r\n\tget data() {\r\n\t\treturn this._data;\r\n\t}\r\n\tdataSubscribtion: Subscription;\r\n\tconstructor(private injector: Injector, private diagramService: DiagramService) {\r\n\t\tthis.data = this.injector.get(\"data\");\r\n\t\tthis.counter = 0;\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\tthis.dataSubscribtion = this.diagramService.getData(this.data.Source).subscribe(data => {\r\n\t\t\tlet counter = this.diagramService.extract_columns_from_data(data.Data, this.data.Chart.ColumnMappings);\r\n\t\t\tthis.counter = counter[0][1];\r\n\t\t});\r\n\t}\r\n\tngOnDestroy() {\r\n\t\tthis.dataSubscribtion.unsubscribe();\r\n\t}\r\n}\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n// import { UserModel } from 'app/models/authentication';\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { DiagramService } from \"../../services/diagram.service\";\r\n\r\n// import * as appReducer from 'app/reducers';\r\n\r\n@Component({\r\n\tselector: \"diagram-module-container\",\r\n\ttemplate: `<div fxflex=\"100\" fxLayout=\"column\">\r\n    <router-outlet></router-outlet>\r\n</div>\r\n`\r\n})\r\nexport class DiagramModuleContainerComponent implements OnInit {\r\n\tconstructor(private service: DiagramService) {}\r\n\r\n\tngOnInit() {}\r\n}\r\n","import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\n\r\nimport { DiagramService } from \"../../services/diagram.service\";\r\nimport * as FeatureReducer from \"../../reducers\";\r\n\r\ndeclare var _: any;\r\n\r\n@Component({\r\n\tselector: \"data-mapper\",\r\n\ttemplate: `<div fxLayout=\"row\">\r\n    <div fxFlex=\"grow\">\r\n        <b>\r\n            Key\r\n        </b>\r\n    </div>\r\n    <div fxFlex=\"nogrow\">\r\n        <b>\r\n            Type\r\n        </b>\r\n    </div>\r\n</div>\r\n<div *ngFor=\"let item of dataReport\" [class]=\"'depts_' + item.depts\" fxLayout=\"row\">\r\n    <div fxFlex=\"grow\">\r\n        {{item.name}}\r\n    </div>\r\n    <div fxFlex=\"nogrow\">\r\n        {{item.type}}\r\n    </div>\r\n</div>\r\n`,\r\n\tstyles: [`mat-radio-button{width:100%;display:block}div.depts_2{margin-right:25px}div.depts_3{margin-right:50px}`]\r\n})\r\nexport class DataMapperComponent implements OnInit {\r\n\t@Input() destination: string;\r\n\t_data: any;\r\n\t@Input()\r\n\tset data(data) {\r\n\t\tif (!data) return;\r\n\t\tthis.dataReport = _.report(data);\r\n\t\tthis._data = data;\r\n\t}\r\n\tdataReport: any[] = [];\r\n\tconstructor(private diagramService: DiagramService, private store: Store<FeatureReducer.FeatureState>) {}\r\n\r\n\tngOnInit() {}\r\n}\r\n","import { SourceModel } from \"./source.model\";\r\n\r\nexport class DiagramModel {\r\n\t_id: string;\r\n\tName: string;\r\n\tIsActive: boolean;\r\n\tDescription: string;\r\n\tGroups: string[];\r\n\tBox: {\r\n\t\tNumberOfColumns: number;\r\n\t\tOrder: number;\r\n\t\tBackgroundColor: string;\r\n\t};\r\n\tSource: SourceModel;\r\n\tWidget: {\r\n\t\t\"booleano\": {\r\n\t\t\t\"SuccessMessage\": string;\r\n\t\t\t\"FailureMessage\": string;\r\n\t\t};\r\n\t};\r\n\r\n\tChart: {\r\n\t\tdata: {\r\n\t\t\ttype: \"pie\" | \"linear\" | \"scatter\" | \"bar\" | \"line\";\r\n\t\t\ttypes: { [key: string]: string };\r\n\t\t\tcolumns: any[];\r\n\t\t\tcolors: any[];\r\n\t\t};\r\n\t\tFlow: boolean;\r\n\t\tColumnMappings: {\r\n\t\t\tNamePath: string;\r\n\t\t\tValuePath: string;\r\n\t\t}[];\r\n\t\tlegend: {\r\n\t\t\tshow: boolean;\r\n\t\t};\r\n\t\tsubchart: {\r\n\t\t\tshow: boolean;\r\n\t\t};\r\n\t\tzoom: {\r\n\t\t\tenabled: boolean;\r\n\t\t};\r\n\t\ttooltip: {\r\n\t\t\tgrouped: boolean;\r\n\t\t};\r\n\t};\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { AddDiagramApiModel } from \"../models/add-diagram-api.model\";\r\n\r\nexport enum AddDiagramActionTypes {\r\n\tADD_DIAGRAM = \"[DIAGRAM][ADD] ADD_DIAGRAM\",\r\n\tADD_DIAGRAM_START = \"[DIAGRAM][ADD] ADD_DIAGRAM_START\",\r\n\tADD_DIAGRAM_SUCCEED = \"[DIAGRAM][ADD] ADD_DIAGRAM_SUCCEED\",\r\n\tDIAGRAM_CONFIG_CHANGED = \"[DIAGRAM][ADD] DIAGRAM_CONFIG_CHANGED\",\r\n\tADD_DIAGRAM_FAILED = \"[DIAGRAM][ADD] ADD_DIAGRAM_FAILED\",\r\n\tSTRUCTURE_DEFINITION_START = \"[DIAGRAM][ADD] STRUCTURE_DEFINITION_START\",\r\n\tHAVE_ENDPOINT = \"[DIAGRAM][ADD] HAVE_STRUCTURE\",\r\n\tDATA_LOADED = \"[DIAGRAM][ADD] DATA_LOADED\",\r\n\tSTRUCTURE_DEFINITION_END = \"[DIAGRAM][ADD] STRUCTURE_DEFINITION_END\",\r\n\tCOLUMNS_MAPPING_CHANGED = \"[DIAGRAM][ADD] COLUMNS_MAPPING_CHANGED\",\r\n\tDATA_CALCULATED = \"[DIAGRAM][ADD] DATA_CALCULATED\",\r\n\tCOLUMN_ADDED = \"[DIAGRAM][ADD] COLUMN_ADDED\",\r\n\tGENERATE_DIAGRAM = \"[DIAGRAM][ADD] GENERATE_DIAGRAM\"\r\n}\r\n\r\nexport class AddDiagramAction implements Action {\r\n\treadonly type = AddDiagramActionTypes.ADD_DIAGRAM;\r\n\tconstructor(public payload: AddDiagramApiModel.Response) {}\r\n}\r\nexport class AddDiagramActionStart implements Action {\r\n\treadonly type = AddDiagramActionTypes.ADD_DIAGRAM_START;\r\n\tconstructor(public payload: AddDiagramApiModel.Response) {}\r\n}\r\nexport class AddDiagramActionSucceed implements Action {\r\n\treadonly type = AddDiagramActionTypes.ADD_DIAGRAM_SUCCEED;\r\n\tconstructor(public payload: AddDiagramApiModel.Response) {}\r\n}\r\nexport class AddDiagramActionFailed implements Action {\r\n\treadonly type = AddDiagramActionTypes.ADD_DIAGRAM_FAILED;\r\n}\r\nexport class DiagramConfigChangedAction implements Action {\r\n\treadonly type = AddDiagramActionTypes.DIAGRAM_CONFIG_CHANGED;\r\n\tconstructor(public payload: any) {}\r\n}\r\nexport class HaveEndpointAction implements Action {\r\n\treadonly type = AddDiagramActionTypes.HAVE_ENDPOINT;\r\n\tconstructor(public payload: any) {}\r\n}\r\nexport class DataLoadedAction implements Action {\r\n\treadonly type = AddDiagramActionTypes.DATA_LOADED;\r\n\tconstructor(public payload: any) {}\r\n}\r\nexport class StructureDefinitionStartAction implements Action {\r\n\treadonly type = AddDiagramActionTypes.STRUCTURE_DEFINITION_START;\r\n\tconstructor(public payload: any) {}\r\n}\r\nexport class StructureDefinitionFinishedAction implements Action {\r\n\treadonly type = AddDiagramActionTypes.STRUCTURE_DEFINITION_END;\r\n\tconstructor(public payload: any) {}\r\n}\r\nexport class ColumnsMappingChangedAction implements Action {\r\n\treadonly type = AddDiagramActionTypes.COLUMNS_MAPPING_CHANGED;\r\n\tconstructor(public payload: any) {}\r\n}\r\nexport class DataCalculatedAction implements Action {\r\n\treadonly type = AddDiagramActionTypes.DATA_CALCULATED;\r\n\tconstructor(public payload: any) {}\r\n}\r\nexport class GenerateDiagramAction implements Action {\r\n\treadonly type = AddDiagramActionTypes.GENERATE_DIAGRAM;\r\n\tconstructor(public payload: any) {}\r\n}\r\n\r\nexport class ColumnAdded implements Action {\r\n\treadonly type = AddDiagramActionTypes.COLUMN_ADDED;\r\n}\r\n\r\nexport type AddDiagramActions =\r\n\t| AddDiagramAction\r\n\t| AddDiagramActionStart\r\n\t| AddDiagramActionSucceed\r\n\t| AddDiagramActionFailed\r\n\t| HaveEndpointAction\r\n\t| DataLoadedAction\r\n\t| StructureDefinitionStartAction\r\n\t| StructureDefinitionFinishedAction\r\n\t| ColumnsMappingChangedAction\r\n\t| DataCalculatedAction\r\n\t| GenerateDiagramAction\r\n\t| DiagramConfigChangedAction;\r\n","import { Component, OnInit, OnDestroy } from \"@angular/core\";\r\nimport { FormGroup, FormControl, Validators, FormArray, FormBuilder, AbstractControl } from \"@angular/forms\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { Route, ActivatedRoute } from \"@angular/router\";\r\nimport { Subscription } from \"rxjs/Subscription\";\r\nimport { publish } from \"rxjs/operator/publish\";\r\nimport { Effect } from \"@ngrx/effects\";\r\ndeclare var c3: any;\r\n\r\nimport { addDiagramReducer } from \"../../reducers/add-diagram.reducer\";\r\nimport { DiagramService } from \"../../services/diagram.service\";\r\n\r\nimport { FeatureState } from \"../../reducers\";\r\nimport { AddDiagramApiModel } from \"../../models/add-diagram-api.model\";\r\nimport { DiagramModel } from \"../../models/diagram.model\";\r\nimport { SourceModel } from \"../../models/source.model\";\r\nimport {\r\n\tHaveEndpointAction,\r\n\tColumnsMappingChangedAction,\r\n\tDiagramConfigChangedAction,\r\n\tAddDiagramAction\r\n} from \"../../actions/add-diagram.actions\";\r\n\r\n@Component({\r\n\tselector: \"diagram-add\",\r\n\ttemplate: `<div fxLayout=\"column\" fxFlex=\"100\">\r\n  <div fxLayout=\"row\" fxLayout.lt-md=\"column\">\r\n    <mat-card fxFlex=\"60\">\r\n      <form [formGroup]=\"formGroup\" fxLayout='column'>\r\n        <mat-card-header>\r\n          <mat-card-title>Ø§ÙØ²ÙØ¯Ù ÙÙÙØ¯Ø§Ø± Ø¬Ø¯ÛØ¯</mat-card-title>\r\n        </mat-card-header>\r\n        <mat-card-content>\r\n          <mat-form-field>\r\n            <input matInput placeholder=\"Ø¹ÙÙØ§Ù ÙÙÙØ¯Ø§Ø±\" formControlName=\"Name\">\r\n          </mat-form-field>\r\n          <mat-form-field fxFlexFill>\r\n            <mat-select placeholder=\"ÙØ§Ù ÙØ³ÛØ±\" formControlName=\"Source\" (change)=\"routeEntered($event)\">\r\n              <mat-option *ngFor=\"let item of sources | async\" [value]=\"item\">\r\n                {{item.Endpoint}}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n          <mat-form-field fxFlexFill>\r\n            <input matInput placeholder=\"sync time\" formControlName=\"Sync\">\r\n          </mat-form-field>\r\n          <div>\r\n            <mat-radio-group (change)=\"typeChanged()\" formControlName=\"Type\" fxFlexFill>\r\n              <label>ÙÙØ¹ ÙÙÙØ¯Ø§Ø± :</label>\r\n              <mat-radio-button (change)=\"typeChanged()\" *ngFor=\"let item of diagramTypes\" [value]=\"item\" class=\"form-element-margin\">\r\n                {{item}}\r\n              </mat-radio-button>\r\n            </mat-radio-group>\r\n          </div>\r\n          <mat-form-field>\r\n            <mat-select placeholder=\"Groups\" formControlName=\"Groups\" multiple>\r\n              <mat-select-trigger>\r\n                {{formGroup.controls.Groups.value ? formGroup.controls.Groups.value[0] : ''}}\r\n                <span *ngIf=\"formGroup.controls.Groups.value?.length > 1\">\r\n                  (+{{formGroup.controls.Groups.value.length - 1}} others)\r\n                </span>\r\n              </mat-select-trigger>\r\n              <mat-option *ngFor=\"let item of groups | async\" [value]=\"item\">{{item}}</mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n          <div>\r\n            <mat-checkbox (change)=\"configChanged()\" formControlName=\"IsActive\" fxFlexFill>ÙØ¶Ø¹ÛØª</mat-checkbox>\r\n          </div>\r\n          <dynamic-config-component-selector (ConfigChanged)=\"configChanged()\" [data]=\"diagramPartialConfig\"></dynamic-config-component-selector>\r\n        </mat-card-content>\r\n      </form>\r\n    </mat-card>\r\n    <dynamic-component-selector id=\"modify-diagram\" fxFlex=\"40\" [data]=\"diagramModel\"></dynamic-component-selector>\r\n  </div>\r\n\r\n  <div fxLayout=\"row\" fxLayout.lt-md=\"column\">\r\n    <mat-card fxFlex=\"25\">\r\n      <mat-card-header>\r\n        <mat-card-title> Ø³Ø§Ø®ØªØ§Ø± Ø¯ÛØªØ§ </mat-card-title>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <div class=\"item-margin\">\r\n          <data-mapper destination=\"value\" [data]=\"data\"></data-mapper>\r\n        </div>\r\n      </mat-card-content>\r\n    </mat-card>\r\n\r\n    <mat-card fxLayout=\"column\" fxFlex=\"25\">\r\n      <mat-card-header>\r\n        <mat-card-title>ÙÚ¯Ø§Ø´Øª Ø¯Ø§Ø¯Ù</mat-card-title>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <div fxLayout=\"column\" fxLayoutGap=\"5px\">\r\n          <div *ngFor=\"let column of columnsMappings; let i=index\" fxFlex=\"100\" fxLayout=\"column\">\r\n            <div fxLayout=\"column\">\r\n              <div [formGroup]=\"columnsMappings[i]\" fxLayout=\"row\" fxLayout.xs=\"column\">\r\n                <mat-form-field fxFlex=\"50\" fxFlex.xs=\"100\">\r\n                  <mat-select placeholder=\"ÙØ§Ù ÙØ³ÛØ±\" formControlName=\"NamePath\">\r\n                    <mat-option>--</mat-option>\r\n                    <mat-option *ngFor=\"let item of pathOptions\" [value]=\"item.path\" [class]=\"'mat-option depth_' + item.depts\">\r\n                      <!-- <mat-option *ngFor=\"let item of pathOptions\" [value]=\"item.path\" [class]=\"'mat-option depth_' + item.depts\" [disabled]=\"!item.isLastNode\"> -->\r\n                      {{item.path}}\r\n                    </mat-option>\r\n                  </mat-select>\r\n                </mat-form-field>\r\n                <mat-form-field fxFlex=\"50\" fxFlex.xs=\"100\">\r\n                  <mat-select placeholder=\"ÙÙØ¯Ø§Ø± ÙØ³ÛØ±\" formControlName=\"ValuePath\">\r\n                    <mat-option>--</mat-option>\r\n                    <!-- <mat-option *ngFor=\"let item of pathOptions\" [value]=\"item.path\" [class]=\"'mat-option depth_' + item.depts\" [disabled]=\"!item.isLastNode\"> -->\r\n                    <mat-option *ngFor=\"let item of pathOptions\" [value]=\"item.path\" [class]=\"'mat-option depth_' + item.depts\">\r\n                      {{item.path}}\r\n                    </mat-option>\r\n                  </mat-select>\r\n                </mat-form-field>\r\n                <button (click)=\"removeColumn(i)\" fxFlex mat-button color=\"primary\" type=\"button\">Ù¾Ø§Ú© Ú©Ø±Ø¯Ù</button>\r\n              </div>\r\n              <br />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <button (click)=\"addColumn()\" fxFlex mat-raised-button color=\"primary\" type=\"button\">Ø§ÙØ²ÙØ¯Ù Ø³ØªÙÙ</button>\r\n        </div>\r\n      </mat-card-content>\r\n    </mat-card>\r\n    <mat-card fxFlex=\"25\">\r\n      <mat-card-header>\r\n        <mat-card-title>ÙØªØ§ÛØ¬ Ø¯Ø§Ø¯Ù ÙØ§</mat-card-title>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <div class=\"item-margin\">\r\n          <div class=\"list-item\" *ngFor=\"let item of formGroup.controls.columns.value; let i=index\" fxLayoutAlign=\"space-between center\">\r\n            <span>{{item[0]}} : {{item[1]}}</span>\r\n            <span [formGroup]=\"formGroup.controls.Colors\" *ngIf=\"$any(formGroup.controls.Colors).controls[item[0]]\">\r\n              <input placeholder=\"Ø±ÙÚ¯ ÙÙÙØ¯Ø§Ø±\" (change)=\"configChanged()\" [formControlName]=\"item[0]\" type=\"color\">\r\n            </span>\r\n            <mat-form-field [formGroup]=\"formGroup.controls.Types\" *ngIf=\"$any(formGroup.controls.Types).controls[item[0]]\">\r\n              <!-- <input placeholder=\"tipo\" (change)=\"configChanged()\" > -->\r\n              <mat-select placeholder=\"tipo\" [formControlName]=\"item[0]\">\r\n                <mat-option>--</mat-option>\r\n                <mat-option *ngFor=\"let item of diagramTypes\" [value]=\"item\">\r\n                  {{item}}\r\n                </mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n          </div>\r\n        </div>\r\n      </mat-card-content>\r\n    </mat-card>\r\n    <mat-card fxLayout=\"column\" fxFlex=\"25\">\r\n      <mat-card-header>\r\n        <mat-card-title>ØªÙØ¸ÛÙØ§Øª Ø¸Ø§ÙØ±Û</mat-card-title>\r\n      </mat-card-header>\r\n      <mat-card-content [formGroup]=\"formGroup\">\r\n        <mat-form-field>\r\n          <input matInput placeholder=\"ØªØ¹Ø¯Ø§Ø¯ Ø³Ø·Ø±\" formControlName=\"Cols\">\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n          <input matInput placeholder=\"ØªØ¹Ø¯Ø§Ø¯ Ø³ØªÙÙ\" formControlName=\"Rows\">\r\n        </mat-form-field>\r\n        <div>\r\n          <label fxFlex=\"50\">Ø±ÙÚ¯ ÙØªÙ :</label>\r\n          <span>\r\n            <input (change)=\"configChanged()\" formControlName=\"TextColor\" type=\"color\">\r\n          </span>\r\n        </div>\r\n        <div>\r\n          <label fxFlex=\"50\">Ø±ÙÚ¯ Ù¾Ø³ Ø²ÙÛÙÙ :</label>\r\n          <span>\r\n            <input formControlName=\"BackgroundColor\" type=\"color\">\r\n          </span>\r\n        </div>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n  <div>\r\n    <mat-card fxLayoutAlign=\"end center\" fxLayout=\"row\" fxFlex=\"100\">\r\n      <mat-card-content>\r\n        <button (click)=\"add($event)\" fxFlex mat-raised-button color=\"primary\" type=\"submit\">Ø«Ø¨Øª</button>\r\n        <button fxFlex='nogrow' mat-button routerLink='/diagrams'>Ø§ÙØµØ±Ø§Ù</button>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n</div>`,\r\n\tstyles: [`#chart{width:300px;direction:ltr}.form-element-margin{margin:5px 10px}.item-margin{margin:10px 0;display:block}mat-option.depth_2{padding-right:30px}mat-option.depth_3{padding-right:50px}mat-option.depth_4{padding-right:70px}.mat-card{margin:12.5px}`]\r\n})\r\nexport class AddDiagramComponent implements OnInit, OnDestroy {\r\n\tformGroup: FormGroup = AddDiagramApiModel.Request.formGroup;\r\n\tdata: any;\r\n\tcolumns: any;\r\n\tchart;\r\n\tdiagramTypes: string[];\r\n\tpathOptions: {\r\n\t\tpath: string;\r\n\t\tname: string;\r\n\t\ttype: string;\r\n\t\tcolor: string;\r\n\t}[];\r\n\tcolumnsMappings: AbstractControl[];\r\n\tdataSubscription: Subscription;\r\n\tdiagramModel: DiagramModel;\r\n\tcomponentModel: { component: any; inputs: object };\r\n\ttypeMapToDiagram: { [type: string]: any };\r\n\tdiagramPartialConfig: { type: string; inputs: { formGroup: FormGroup; diagramService: DiagramService } };\r\n\tsources: Observable<SourceModel[]>;\r\n\tgroups: Observable<string[]>;\r\n\tsource: SourceModel;\r\n\tconstructor(\r\n\t\tprivate diagramService: DiagramService,\r\n\t\tprivate formBuilder: FormBuilder,\r\n\t\tprivate store: Store<FeatureState>,\r\n\t\tprivate route: ActivatedRoute\r\n\t) {\r\n\t\tthis.sources = this.diagramService.getSources();\r\n\t\tthis.groups = this.diagramService.getGroups();\r\n\t\t// this.diagramModel = new DiagramModel();\r\n\t\tthis.columnsMappings = (this.formGroup.controls.ColumnMappings as FormArray).controls;\r\n\t\tthis.route.params.subscribe(params => {\r\n\t\t\tconst diagramId: string = params[\"id\"];\r\n\t\t\tdiagramId &&\r\n\t\t\t\tthis.diagramService.getDiagram(diagramId).subscribe(data => {\r\n\t\t\t\t\tthis.formGroup.patchValue({\r\n\t\t\t\t\t\t_id: data._id,\r\n\t\t\t\t\t\tName: data.Name,\r\n\t\t\t\t\t\tIsActive: data.IsActive,\r\n\t\t\t\t\t\tGroups: data.Groups,\r\n\t\t\t\t\t\tType: data.Chart.data.type,\r\n\t\t\t\t\t\tLegend: data.Chart.legend.show,\r\n\t\t\t\t\t\tSubchart: data.Chart.subchart.show,\r\n\t\t\t\t\t\tZoom: data.Chart.zoom.enabled,\r\n\t\t\t\t\t\tTooltip: data.Chart.tooltip.grouped,\r\n\t\t\t\t\t\tSync: data.Source.Interval,\r\n\t\t\t\t\t\tSource: data.Source,\r\n\t\t\t\t\t\tcolumns: data.Chart.data.columns,\r\n\t\t\t\t\t\tColumnMappings: data.Chart.ColumnMappings,\r\n\t\t\t\t\t\tCols: data.Box.Cols,\r\n\t\t\t\t\t\tFlow: data.Chart.Flow,\r\n\t\t\t\t\t\tRows: data.Box.Rows,\r\n\t\t\t\t\t\tBackgroundColor: data.Box.BackgroundColor,\r\n\t\t\t\t\t\tTextColor: data.Box.TextColor\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tconst colorsControl = <FormGroup>this.formGroup.controls[\"Colors\"];\r\n\t\t\t\t\tObject.keys(data.Chart.data.colors || {}).forEach(columnKey => {\r\n\t\t\t\t\t\tif (!(columnKey in colorsControl.controls))\r\n\t\t\t\t\t\t\tcolorsControl.addControl(columnKey, new FormControl(data.Chart.data.colors[columnKey]));\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tconst typesControl = <FormGroup>this.formGroup.controls[\"Types\"];\r\n\t\t\t\t\tObject.keys(data.Chart.data.types || {}).forEach(key => {\r\n\t\t\t\t\t\tif (!(key in typesControl.controls))\r\n\t\t\t\t\t\t\ttypesControl.addControl(key, new FormControl(data.Chart.data.types[key]));\r\n\t\t\t\t\t});\r\n\t\t\t\t\tdata.Chart.ColumnMappings.forEach(mapping => this.addColumn(mapping.NamePath, mapping.ValuePath));\r\n\t\t\t\t\tthis.source = data.Source;\r\n\t\t\t\t\tthis.store.dispatch(new HaveEndpointAction(this));\r\n\r\n\t\t\t\t\tthis.diagramPartialConfig = {\r\n\t\t\t\t\t\ttype: this.formGroup.value.Type,\r\n\t\t\t\t\t\tinputs: {\r\n\t\t\t\t\t\t\tformGroup: this.formGroup,\r\n\t\t\t\t\t\t\tdiagramService: this.diagramService\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\t\t\tthis.diagramPartialConfig = {\r\n\t\t\t\ttype: this.formGroup.value.Type,\r\n\t\t\t\tinputs: {\r\n\t\t\t\t\tformGroup: this.formGroup,\r\n\t\t\t\t\tdiagramService: this.diagramService\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\tthis.diagramTypes = [\r\n\t\t\t\"bar\",\r\n\t\t\t\"donut\",\r\n\t\t\t\"pie\",\r\n\t\t\t\"scatter\",\r\n\t\t\t\"line\",\r\n\t\t\t\"area\",\r\n\t\t\t\"area-spline\",\r\n\t\t\t\"numero\",\r\n\t\t\t\"booleano\",\r\n\t\t\t\"tempo\"\r\n\t\t];\r\n\t}\r\n\tngOnInit() {\r\n\t\tthis.formGroup.controls.ColumnMappings.statusChanges.subscribe(status => {\r\n\t\t\tif (\r\n\t\t\t\tstatus == \"VALID\" &&\r\n\t\t\t\t(this.formGroup.controls.ColumnMappings as FormArray).controls.length > 0 &&\r\n\t\t\t\tthis.data\r\n\t\t\t)\r\n\t\t\t\tthis.store.dispatch(new ColumnsMappingChangedAction(this));\r\n\t\t});\r\n\t}\r\n\tngOnDestroy() {\r\n\t\tif (this.dataSubscription) this.dataSubscription.unsubscribe();\r\n\t}\r\n\t// getData() {\r\n\t//   const o$ = this.diagramService.getData(this.source);\r\n\t//   this.dataSubscription = o$.subscribe(data => new DataLoadedAction(this))\r\n\t//   return o$;\r\n\t// }\r\n\tgetDataStructure() {\r\n\t\tconst observer = this.diagramService.getData({ ...this.source, Interval: 0 }, Date.now() - 10000);\r\n\t\tthis.dataSubscription = observer.subscribe(data => {\r\n\t\t\tthis.data = data.Data;\r\n\t\t\tthis.pathOptions = this.diagramService.get_data_report(data.Data);\r\n\t\t});\r\n\t\treturn observer;\r\n\t}\r\n\tconfigChanged() {\r\n\t\tthis.store.dispatch(new DiagramConfigChangedAction(this));\r\n\t}\r\n\ttypeChanged() {\r\n\t\tconst typesFormGroup = (this.formGroup.controls.Types as FormGroup).controls;\r\n\t\tfor (let cb in typesFormGroup) {\r\n\t\t\ttypesFormGroup[cb].setValue(this.formGroup.value.Type);\r\n\t\t}\r\n\t\tthis.diagramPartialConfig = {\r\n\t\t\ttype: this.formGroup.value.Type,\r\n\t\t\tinputs: {\r\n\t\t\t\tformGroup: this.formGroup,\r\n\t\t\t\tdiagramService: this.diagramService\r\n\t\t\t}\r\n\t\t};\r\n\t\tthis.store.dispatch(new DiagramConfigChangedAction(this));\r\n\t}\r\n\taddColumn(NamePath: string = \"\", ValuePath: string = \"\") {\r\n\t\tconst control = <FormArray>this.formGroup.controls[\"ColumnMappings\"];\r\n\t\tcontrol.push(\r\n\t\t\tthis.formBuilder.group({\r\n\t\t\t\tNamePath: [ NamePath ],\r\n\t\t\t\tValuePath: [ ValuePath, Validators.required ]\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\trouteEntered(event) {\r\n\t\tthis.source = event.value;\r\n\t\tthis.formGroup.patchValue({ Source: event.value });\r\n\t\tthis.store.dispatch(new HaveEndpointAction(this));\r\n\t}\r\n\tremoveColumn(i: number) {\r\n\t\tconst control = <FormArray>this.formGroup.controls[\"ColumnMappings\"];\r\n\t\tcontrol.removeAt(i);\r\n\t}\r\n\tcalculateColumns(): Observable<void> {\r\n\t\treturn Observable.create(obser => {\r\n\t\t\tvar columnsMApping = {\r\n\t\t\t\t// NameVAlue:  (this.formGroup.controls.ColumnMappings as FormArray).controls.values\r\n\t\t\t};\r\n\t\t\tlet columns = this.diagramService.extract_columns_from_data(\r\n\t\t\t\tthis.data,\r\n\t\t\t\t(this.formGroup.controls.ColumnMappings as FormArray).value\r\n\t\t\t);\r\n\t\t\tthis.formGroup.controls.columns.setValue(columns);\r\n\t\t\t//add new item to this.formGroup.controls.colors form control\r\n\t\t\tconst colorsControl = <FormGroup>this.formGroup.controls[\"Colors\"];\r\n\t\t\tcolumns.forEach(column => {\r\n\t\t\t\tlet columnKey = column[0];\r\n\t\t\t\tif (!(columnKey in colorsControl.controls))\r\n\t\t\t\t\tcolorsControl.addControl(columnKey, new FormControl(\"#123456\"));\r\n\t\t\t});\r\n\r\n\t\t\tconst typesControl = <FormGroup>this.formGroup.controls[\"Types\"];\r\n\t\t\tcolumns.forEach(column => {\r\n\t\t\t\tlet key = column[0];\r\n\t\t\t\tif (!(key in typesControl.controls))\r\n\t\t\t\t\ttypesControl.addControl(key, new FormControl(this.formGroup.value.Type));\r\n\t\t\t});\r\n\t\t\tobser.next();\r\n\t\t});\r\n\t}\r\n\tgenerateDiagram(): Observable<any> {\r\n\t\tvar temp = new DiagramModel();\r\n\t\ttemp._id = \"template_id\";\r\n\t\ttemp.Name = this.formGroup.value.Name;\r\n\t\ttemp.Source = this.source;\r\n\t\ttemp.Box = {\r\n\t\t\tNumberOfColumns: 1,\r\n\t\t\tOrder: 1,\r\n\t\t\tBackgroundColor: this.formGroup.value.BackgroundColor\r\n\t\t};\r\n\t\ttemp.Widget = {\r\n\t\t\tbooleano: this.formGroup.value.booleano\r\n\t\t};\r\n\t\ttemp.Chart = {\r\n\t\t\tColumnMappings: this.formGroup.value.ColumnMappings,\r\n\t\t\tdata: {\r\n\t\t\t\tcolumns: this.formGroup.controls.columns.value,\r\n\t\t\t\ttype: this.formGroup.value.Type,\r\n\t\t\t\ttypes: this.formGroup.value.Types,\r\n\t\t\t\tcolors: this.formGroup.controls.Colors.value\r\n\t\t\t},\r\n\t\t\tFlow: this.formGroup.value.Flow,\r\n\t\t\tlegend: {\r\n\t\t\t\tshow: this.formGroup.value.Legend\r\n\t\t\t},\r\n\t\t\tsubchart: {\r\n\t\t\t\tshow: this.formGroup.value.Subchart\r\n\t\t\t},\r\n\t\t\tzoom: {\r\n\t\t\t\tenabled: this.formGroup.value.Zoom\r\n\t\t\t},\r\n\t\t\ttooltip: {\r\n\t\t\t\tgrouped: this.formGroup.value.Tooltip\r\n\t\t\t}\r\n\t\t\t// tooltip: {\r\n\t\t\t//         format: {\r\n\t\t\t//                 value: function (value) {\r\n\t\t\t//                         return value + \"%\";\r\n\t\t\t//                 }\r\n\t\t\t//         }\r\n\t\t\t// },\r\n\t\t\t// color: {\r\n\t\t\t//         pattern: ['#60B044', '#F6C600', '#F97600', '#FF0000'],\r\n\t\t\t//         threshold: {\r\n\t\t\t//                 //  unit: 'value', // percentage is default\r\n\t\t\t//                 values: [30, 60, 90, 100]\r\n\t\t\t//         }\r\n\t\t\t// },\r\n\t\t};\r\n\t\t// this.componentModel = {\r\n\t\t//   component: this.typeMapToDiagram[temp.Chart.data.type],\r\n\t\t//   inputs: { data: temp }\r\n\t\t// }\r\n\t\tthis.diagramModel = temp;\r\n\t\treturn Observable.empty();\r\n\t}\r\n\tadd(event) {\r\n\t\tthis.store.dispatch(new AddDiagramAction(this.formGroup.value));\r\n\t}\r\n}\r\n","import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { DiagramService } from \"../../services/diagram.service\";\r\nimport { GetDiagramsApiModel } from \"../../models/get-diagrams-api.model\";\r\n\r\n@Component({\r\n\tselector: \"diagram-view\",\r\n\ttemplate: `<div *ngIf=\"diagramData$ | async\" [style.color]=\"(diagramData$ | async)?.Box.Color\">\r\n    <dynamic-component-selector class=\"diagram-box\" [data]=\"(diagramData$ | async)\"></dynamic-component-selector>\r\n</div>`,\r\n\tstyles: [`:host{width:100%;margin:12.5px}.diagram-box{margin:15px}.diagram-box .c3{direction:ltr}.widget-title{font:1.3em IRANSans,tahoma}`]\r\n})\r\nexport class diagramViewComponent implements OnInit {\r\n\tdiagrams: Observable<GetDiagramsApiModel.Response>;\r\n\twidth = 100;\r\n\r\n\tdiagramData$: any;\r\n\t@Input(\"id\") diagramId: string;\r\n\r\n\tconstructor(private diagramService: DiagramService) {\r\n\t\tthis.diagrams = this.diagramService.getDiagrams();\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\tthis.diagramData$ = this.diagramService.getDiagram(this.diagramId);\r\n\t}\r\n}\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { GetDiagramsApiModel } from \"../../models/get-diagrams-api.model\";\r\nimport { DiagramService } from \"../../services/diagram.service\";\r\n@Component({\r\n\tselector: \"diagrams\",\r\n\ttemplate: `<mat-grid-list cols=\"12\" rowHeight=\"100px\">\r\n  <mat-grid-tile *ngFor=\"let diagram of (diagrams | async)?.Result\" \r\n  [colspan]=\"diagram.Box.Cols\" \r\n  [rowspan]=\"diagram.Box.Rows\" \r\n  [style.color]=\"diagram.Box.Color\">\r\n    <dynamic-component-selector class=\"diagram-box\" [data]=\"diagram\"></dynamic-component-selector>\r\n  </mat-grid-tile>\r\n</mat-grid-list>\r\n<br />\r\n<div fxFlexLayout=\"row\" fxLayoutWrap fxLayoutAlign=\"center center\">\r\n</div>\r\n<div fxLayoutAlign='end center'>\r\n  <button mat-fab routerLink=\"../diagrams/add\" class=\"add-btn\">\r\n    <mat-icon aria-label=\"Example icon-button with a heart icon\">add</mat-icon>\r\n  </button>\r\n</div>\r\n`,\r\n\tstyles: [`:host{width:100%}.diagram-box{margin:15px}.add-btn{position:fixed;bottom:50px;left:25px;z-index:1}`]\r\n})\r\nexport class DiagramsComponent implements OnInit {\r\n\tdiagrams: Observable<GetDiagramsApiModel.Response>;\r\n\twidth = 100;\r\n\tconstructor(private diagramService: DiagramService) {\r\n\t\tthis.diagrams = this.diagramService.getDiagrams();\r\n\r\n\t\t// this.diagrams\r\n\t\t//         .delay(100)\r\n\t\t//         .subscribe(diagrams =>\r\n\t\t//                 diagrams.Result.forEach(diagram =>\r\n\t\t//                         this.diagramService.generateDiagram(diagram.Chart, diagram._id, diagram.Source.Route, diagram.Source.Sync)));\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\t// this.socketService.initSocket();\r\n\t\t// this.socketService.send(\"add-message\");\r\n\t\t// this.socketService.onMessage().subscribe(msg=>{\r\n\t\t//         debugger\r\n\t\t// });\r\n\t}\r\n}\r\n","import { ActivatedRoute } from \"@angular/router\";\r\nimport { Component, OnInit } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\n\r\nimport { DiagramService } from \"../../services/diagram.service\";\r\nimport { FeatureState } from \"../../reducers\";\r\nimport { EditDiagramApiModel } from \"../../models/edit-diagram-api.model\";\r\nimport { EditDiagramAction } from \"../../actions/edit-diagram.actions\";\r\n\r\n@Component({\r\n\tselector: \"diagram-edit\",\r\n\ttemplate: `<mat-card fxLayout=\"column\" fxFlex=\"400px\">\r\n    <form [formGroup]=\"formGroup\" fxLayout='column' (ngSubmit)=\"add($event)\">\r\n\r\n        <mat-card-header>\r\n            <mat-card-title>Ø§ÙØ²ÙØ¯Ù ÙÙÙØ¯Ø§Ø± Ø¬Ø¯ÛØ¯</mat-card-title>\r\n        </mat-card-header>\r\n\r\n        <mat-card-content>\r\n            <mat-form-field fxFlexFill>\r\n                <input matInput placeholder=\"Ø¹ÙÙØ§Ù ÙÙÙØ¯Ø§Ø±\" formControlName=\"Name\">\r\n            </mat-form-field>\r\n            <mat-form-field fxFlexFill>\r\n                <input matInput placeholder=\"Ø¢Ø¯Ø±Ø³ ÙÙÙØ¯Ø§Ø±\" formControlName=\"Route\">\r\n            </mat-form-field>\r\n\r\n            <mat-checkbox formControlName=\"IsActive\">ÙØ¶Ø¹ÛØª</mat-checkbox>\r\n\r\n        </mat-card-content>\r\n        <mat-card-actions>\r\n            <button fxFlex mat-raised-button color=\"primary\" type=\"submit\">Ø«Ø¨Øª</button>\r\n            <button fxFlex='nogrow' mat-button routerLink='/diagrams'>Ø§ÙØµØ±Ø§Ù</button>\r\n        </mat-card-actions>\r\n    </form>\r\n</mat-card>\r\n`,\r\n\tstyles: [``]\r\n})\r\nexport class EditDiagramComponent implements OnInit {\r\n\tformGroup: FormGroup = EditDiagramApiModel.Request.formGroup;\r\n\tconstructor(\r\n\t\tprivate diagramService: DiagramService,\r\n\t\tprivate route: ActivatedRoute,\r\n\t\tprivate store: Store<FeatureState>\r\n\t) {\r\n\t\tlet Route = this.route.params.subscribe(params => {\r\n\t\t\tconst diagramId: string = params[\"id\"];\r\n\t\t\tthis.diagramService.getDiagram(diagramId).subscribe(data => this.formGroup.patchValue(data));\r\n\t\t});\r\n\t}\r\n\r\n\tngOnInit() {}\r\n\r\n\tadd(event) {\r\n\t\tthis.store.dispatch(new EditDiagramAction(this.formGroup.value));\r\n\t}\r\n}\r\n","import { Component, OnInit, Input, AfterViewInit, OnDestroy, Injector } from \"@angular/core\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { MatSliderChange } from \"@angular/material\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\n\r\nimport { DiagramService } from \"../../services/diagram.service\";\r\nimport { DiagramModel } from \"../../models/diagram.model\";\r\nimport { FeatureState } from \"../../reducers\";\r\n\r\ndeclare var c3: any;\r\n\r\n@Component({\r\n\tselector: \"diagram\",\r\n\ttemplate: `<div class=\"over\" fxlayout=\"row\" fxLayoutAlign=\"space-between\">\r\n    <div fxFlex=\"nogrow\" fxFlexAlign=\"start\" class=\"data-time\">{{now | date : 'y/M/d h:m:s'}}</div>\r\n    <div fxFlex=\"nogrow\" fxFlexAlign=\"center\" class=\"data-time\">{{time | date : 'y/M/d h:m:s'}}</div>\r\n    <div fxFlex=\"nogrow\" fxFlexAlign=\"end\" class=\"data-time\">{{now | date : 'y/M/d h:m:s'}}</div>\r\n</div>\r\n<div *ngIf=\"modelIsCorrect | async\" class=\"diagram widget\" [id]=\"'diagram_' + data._id\"></div>`,\r\n\tstyles: [`:host{width:100%}.diagram-box .c3{direction:ltr}mat-slider{width:100%}.data-time{direction:ltr;text-align:center}.over{visibility:hidden;opacity:0;position:absolute;top:35px;left:0;right:0;background:#fff;z-index:3;transition:all .4s ease-in-out}`]\r\n})\r\nexport class DiagramComponent implements AfterViewInit, OnDestroy {\r\n\tmodelIsCorrect: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\t_model: DiagramModel;\r\n\t@Input()\r\n\tset data(value: DiagramModel) {\r\n\t\tif (!(value.Chart && value._id)) return;\r\n\t\tthis._model = value;\r\n\t\tthis.modelIsCorrect.next(true);\r\n\t}\r\n\tget data() {\r\n\t\treturn this._model;\r\n\t}\r\n\tdataSubscribtion: Subscription;\r\n\tchart: any;\r\n\ttime: number;\r\n\tnow: number = Date.now();\r\n\tconstructor(\r\n\t\tprivate store: Store<FeatureState>,\r\n\t\tprivate diagramService: DiagramService,\r\n\t\tprivate http: HttpClient,\r\n\t\tprivate injector: Injector,\r\n\t\tprivate route: ActivatedRoute\r\n\t) {\r\n\t\tthis.data = this.injector.get(\"data\");\r\n\r\n\t\tthis.route.params.subscribe(params => {\r\n\t\t\tconst diagramId: string = params[\"id\"];\r\n\t\t\tdiagramId &&\r\n\t\t\t\tthis.diagramService.getDiagram(diagramId).subscribe(data => {\r\n\t\t\t\t\tconsole.log(data);\r\n\t\t\t\t});\r\n\t\t});\r\n\t}\r\n\tngAfterViewInit() {\r\n\t\t// this.dataSubscribtion = IntervalObservable\r\n\t\t//         // .create(this.model.Source.Sync)\r\n\t\t//         .create(999)\r\n\t\t//         .switchMap(i =>\r\n\t\t//                 this.http.get(`http://localhost:3000/api/data`, {\r\n\t\t//                         params: {\r\n\t\t//                                 route: this.model.Source.Route,\r\n\t\t//                                 time: '0'\r\n\t\t//                         }\r\n\t\t//                 })\r\n\t\t//         )\r\n\t\t//         // .switchMap((res: any) => Observable.of(res.Result.Data))\r\n\t\t//         .map((res: any) => res.Result.Data)\r\n\t\tthis.modelIsCorrect.delay(300).filter(data => data).subscribe(state => {\r\n\t\t\tthis.chart = c3.generate({\r\n\t\t\t\t...this.data.Chart,\r\n\t\t\t\tbindto: `#diagram_${this.data._id}`\r\n\t\t\t\t// size: {\r\n\t\t\t\t//         height: 150\r\n\t\t\t\t// }\r\n\t\t\t});\r\n\t\t\tthis.dataSubscribtion = this.diagramService\r\n\t\t\t\t.getData(this.data.Source)\r\n\t\t\t\t.filter(data => data != undefined)\r\n\t\t\t\t.subscribe(data => {\r\n\t\t\t\t\tthis.now = Date.now();\r\n\t\t\t\t\tthis.time = data.Time;\r\n\t\t\t\t\tif (this.data.Chart.Flow) {\r\n\t\t\t\t\t\tthis.chart.flow({\r\n\t\t\t\t\t\t\tcolumns: this.diagramService.extract_columns_from_data(\r\n\t\t\t\t\t\t\t\tdata.Data,\r\n\t\t\t\t\t\t\t\tthis.data.Chart.ColumnMappings\r\n\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\tduration: 1500\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.chart.load({\r\n\t\t\t\t\t\t\tcolumns: this.diagramService.extract_columns_from_data(\r\n\t\t\t\t\t\t\t\tdata.Data,\r\n\t\t\t\t\t\t\t\tthis.data.Chart.ColumnMappings\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t});\r\n\r\n\t\t// this.dataSubscribtion = this.diagramService.generateDiagram(\r\n\t\t//         this.model.Chart,\r\n\t\t//         this.model._id,\r\n\t\t//         this.model.Source.Route,\r\n\t\t//         this.model.Source.Sync\r\n\t\t// );\r\n\t}\r\n\tngOnDestroy() {\r\n\t\t// this.dataSubscribtion.unsubscribe();\r\n\t}\r\n\ttimeChange(e: MatSliderChange) {\r\n\t\tthis.dataSubscribtion.unsubscribe();\r\n\t\t// this.diagramService.getData(this.data.Source, Date.now() - ((1000 - e.value) * this.data.Source.Interval), true)\r\n\t\tthis.dataSubscribtion = this.diagramService\r\n\t\t\t.getData(this.data.Source, Date.now() - (1000 - e.value) * this.data.Source.Interval, true)\r\n\t\t\t.subscribe(data => {\r\n\t\t\t\tthis.time = data.Time;\r\n\t\t\t\tthis.now = Date.now();\r\n\t\t\t\t// const columns = this.diagramService\r\n\t\t\t\t//         .extract_columns_from_data(data.Data, this.data.Chart.ColumnMappings)\r\n\t\t\t\t//         .map(column => {\r\n\t\t\t\t//                 debugger;\r\n\t\t\t\t//                 column[0] += '_historic';\r\n\t\t\t\t//                 return column;\r\n\t\t\t\t//         });\r\n\t\t\t\tthis.chart.load({\r\n\t\t\t\t\tcolumns: this.diagramService.extract_columns_from_data(data.Data, this.data.Chart.ColumnMappings)\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t}\r\n}\r\n","import {\r\n\tComponent,\r\n\tInput,\r\n\tAfterViewInit,\r\n\tComponentFactoryResolver,\r\n\tViewChild,\r\n\tViewContainerRef,\r\n\tReflectiveInjector,\r\n\tOnDestroy\r\n} from \"@angular/core\";\r\n\r\nimport { DiagramModel } from \"../../models/diagram.model\";\r\nimport { DiagramService } from \"../../services/diagram.service\";\r\nimport { NumericDiagramComponent } from \"../../dumb-components/numeric-diagram/numeric-diagram.component\";\r\nimport { ServerStatusDiagramComponent } from \"../../dumb-components/server-status-diagram/server-status-diagram.component\";\r\nimport { ServerConnectingTimeDiagramComponent } from \"../../dumb-components/server-connecting-time-diagram/server-connecting-time-diagram.component\";\r\nimport { DiagramComponent } from \"../../smart-components/diagram/diagram.component\";\r\n\r\n@Component({\r\n\tselector: \"dynamic-component-selector\",\r\n\ttemplate: `<mat-card class=\"diagram-box\" [style.background]=\"backgroundColor\" fxLayout=\"column\" fxLayoutAlign=\"space-between stretch\">\r\n    <div fxFlex=\"0 0 auto\" *ngIf=\"_data\" fxLayoutAlign=\"space-between center\">\r\n        <span fxLayoutAlign=\"start center\" class=\"widget-title\">\r\n            {{_data.Name}}\r\n        </span>\r\n        <a [routerLink]=\"['../diagrams/edit' ,  _data._id]\" fxLayoutAlign=\"center center\" mat-icon-button color=\"primary\">\r\n            <mat-icon aria-label=\"edit diagram\">edit</mat-icon>\r\n        </a>\r\n    </div>\r\n    <!-- <mat-card-content> -->\r\n    <!-- <mat-slider invert [(ngModel)]=\"time\" (change)=\"timeChange($event)\"></mat-slider> -->\r\n    <mat-slider class=\"over\" fxFlex=\"0 0 auto\" invert min='1' max='1000' value=\"1000\" (change)=\"timeChange($event)\"></mat-slider>\r\n    <div fxFlex=\"1 1 auto\" class=\"widget-container\">\r\n        <div #dynamicComponentContainer></div>\r\n    </div>\r\n    <!-- </mat-card-content> -->\r\n</mat-card>`,\r\n\tstyles: [`:host{width:100%;margin:12.5px}.diagram-box{margin:15px}.diagram-box .c3{direction:ltr}.widget-title{font:1.3em IRANSans,tahoma}.over{visibility:hidden;opacity:0;position:absolute;top:60px;left:0;right:0;background:#fff;z-index:3;transition:all .4s ease-in-out}`],\r\n\tentryComponents: [\r\n\t\tNumericDiagramComponent,\r\n\t\tServerConnectingTimeDiagramComponent,\r\n\t\tServerStatusDiagramComponent,\r\n\t\tDiagramComponent\r\n\t]\r\n})\r\nexport class DynamicComponentSelectorComponent implements AfterViewInit {\r\n\ttypeMapToDiagram = {\r\n\t\tbar: DiagramComponent,\r\n\t\tdonut: DiagramComponent,\r\n\t\tpie: DiagramComponent,\r\n\t\tscatter: DiagramComponent,\r\n\t\tline: DiagramComponent,\r\n\t\tarea: DiagramComponent,\r\n\t\t\"area-spline\": DiagramComponent,\r\n\t\tnumero: NumericDiagramComponent,\r\n\t\ttempo: ServerConnectingTimeDiagramComponent,\r\n\t\tbooleano: ServerStatusDiagramComponent\r\n\t};\r\n\t@ViewChild(\"dynamicComponentContainer\", { read: ViewContainerRef })\r\n\tdynamicComponentContainer: ViewContainerRef;\r\n\t@ViewChild(DiagramComponent) widgetComponent: DiagramComponent;\r\n\tcurrentComponent: any = null;\r\n\t_data: any;\r\n\t@Input()\r\n\tset data(data: any) {\r\n\t\tif (!data || Object.keys(data).length == 0) return;\r\n\t\tthis.backgroundColor = data.Box.BackgroundColor;\r\n\t\tthis._data = data;\r\n\t\tlet raw = { data };\r\n\t\tlet _component = this.typeMapToDiagram[data.Chart.data.type];\r\n\t\tlet inputProviders = Object.keys(raw).map(inputName => {\r\n\t\t\treturn { provide: inputName, useValue: raw[inputName] };\r\n\t\t});\r\n\t\tlet resolvedInputs = ReflectiveInjector.resolve(inputProviders);\r\n\r\n\t\tlet injector = ReflectiveInjector.fromResolvedProviders(\r\n\t\t\tresolvedInputs,\r\n\t\t\tthis.dynamicComponentContainer.parentInjector\r\n\t\t);\r\n\t\tlet factory = this.resolver.resolveComponentFactory(_component);\r\n\r\n\t\tlet component = factory.create(injector);\r\n\r\n\t\tthis.dynamicComponentContainer.insert(component.hostView);\r\n\r\n\t\tif (this.currentComponent) {\r\n\t\t\tthis.currentComponent.destroy();\r\n\t\t}\r\n\r\n\t\tthis.currentComponent = component;\r\n\t}\r\n\tbackgroundColor: String = \"\";\r\n\tconstructor(private resolver: ComponentFactoryResolver) {}\r\n\tngAfterViewInit() {}\r\n\ttimeChange(e) {\r\n\t\tthis.currentComponent._component.timeChange(e);\r\n\t}\r\n}\r\n","import {\r\n\tComponent,\r\n\tOnInit,\r\n\tInput,\r\n\tAfterViewInit,\r\n\tComponentFactoryResolver,\r\n\tViewChild,\r\n\tViewContainerRef,\r\n\tReflectiveInjector,\r\n\tOnDestroy,\r\n\tOutput,\r\n\tEventEmitter\r\n} from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\n\r\nimport { DiagramService } from \"../../services/diagram.service\";\r\nimport { DiagramPartialConfigEditComponent } from \"../../dumb-components/diagram-partial-config-edit/diagram-partial-config-edit.component\";\r\nimport { PieDiagramPartialConfigComponent } from \"../../dumb-components/pie-diagram-partial-config/pie-diagram-partial-config.component\";\r\nimport { BooleanoWidgetPartialConfigComponent } from \"../../dumb-components/booleano-widget-partial-config/booleano-widget-partial-config.component\";\r\nimport { LinearDiagramPartialConfigComponent } from \"../../dumb-components/linear-diagram-partial-config/linear-diagram-partial-config.component\";\r\n\r\ndeclare var c3: any;\r\n\r\n@Component({\r\n\tselector: \"dynamic-config-component-selector\",\r\n\ttemplate: `<div #dynamicComponentContainer></div>`,\r\n\tstyles: [`:host{width:100%}.diagram-box{margin:15px}.diagram-box .c3{direction:ltr}`],\r\n\tentryComponents: [\r\n\t\tDiagramPartialConfigEditComponent,\r\n\t\tPieDiagramPartialConfigComponent,\r\n\t\tLinearDiagramPartialConfigComponent,\r\n\t\tBooleanoWidgetPartialConfigComponent\r\n\t]\r\n})\r\nexport class DynamicConfigComponentSelectorComponent implements AfterViewInit {\r\n\ttypeMapToDiagram = {\r\n\t\tbar: DiagramPartialConfigEditComponent,\r\n\t\tarea: LinearDiagramPartialConfigComponent,\r\n\t\t\"area-spline\": LinearDiagramPartialConfigComponent,\r\n\t\tdonut: DiagramPartialConfigEditComponent,\r\n\t\tpie: PieDiagramPartialConfigComponent,\r\n\t\tscatter: DiagramPartialConfigEditComponent,\r\n\t\tline: LinearDiagramPartialConfigComponent,\r\n\t\tbooleano: BooleanoWidgetPartialConfigComponent\r\n\t};\r\n\t@ViewChild(\"dynamicComponentContainer\", { read: ViewContainerRef })\r\n\tdynamicComponentContainer: ViewContainerRef;\r\n\t@Output() ConfigChanged = new EventEmitter();\r\n\tcurrentComponent: any = null;\r\n\t@Input()\r\n\tset data(data: any) {\r\n\t\tif (!data || Object.keys(data).length == 0) return;\r\n\t\tif (!(data.type in this.typeMapToDiagram)) {\r\n\t\t\tif (this.currentComponent) this.currentComponent.destroy();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet _component = this.typeMapToDiagram[data.type];\r\n\t\tlet inputProviders = Object.keys(data.inputs).map(inputName => {\r\n\t\t\treturn { provide: inputName, useValue: data.inputs[inputName] };\r\n\t\t});\r\n\t\tlet resolvedInputs = ReflectiveInjector.resolve(inputProviders);\r\n\r\n\t\tlet injector = ReflectiveInjector.fromResolvedProviders(\r\n\t\t\tresolvedInputs,\r\n\t\t\tthis.dynamicComponentContainer.parentInjector\r\n\t\t);\r\n\t\tlet factory = this.resolver.resolveComponentFactory(_component);\r\n\t\tlet component = factory.create(injector);\r\n\t\tif ((<any>component.instance).ConfigChanged)\r\n\t\t\t(<any>component.instance).ConfigChanged.subscribe(() => {\r\n\t\t\t\tthis.ConfigChanged.emit();\r\n\t\t\t});\r\n\r\n\t\tthis.dynamicComponentContainer.insert(component.hostView);\r\n\r\n\t\tif (this.currentComponent) {\r\n\t\t\tthis.currentComponent.destroy();\r\n\t\t}\r\n\r\n\t\tthis.currentComponent = component;\r\n\t}\r\n\tconstructor(private resolver: ComponentFactoryResolver) {}\r\n\tngAfterViewInit() {}\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\n\r\nimport { DiagramService } from \"../services/diagram.service\";\r\nimport { GetDiagramsApiModel } from \"../models/get-diagrams-api.model\";\r\nimport { GetDiagramsSucceed, GetDiagramsFailed, GetDiagramsStart } from \"../actions/diagrams.actions\";\r\n\r\n@Injectable()\r\nexport class DiagramEffects {\r\n\tconstructor(private actions$: Actions<any>, private router: Router, private diagramService: DiagramService) {}\r\n\r\n\t@Effect()\r\n\tDiagramRequest$ = this.actions$.ofType().pipe(map(action => action.payload), map(data => new GetDiagramsStart()));\r\n\r\n\t@Effect()\r\n\tgetDiagram$ = this.actions$\r\n\t\t.ofType()\r\n\t\t.pipe(\r\n\t\t\tmap(action => action.payload),\r\n\t\t\tswitchMap((data: GetDiagramsApiModel.Request) =>\r\n\t\t\t\tthis.diagramService\r\n\t\t\t\t\t.getDiagrams()\r\n\t\t\t\t\t.pipe(\r\n\t\t\t\t\t\tmap(res => new GetDiagramsSucceed(res)),\r\n\t\t\t\t\t\tcatchError(() => Observable.of(new GetDiagramsFailed()))\r\n\t\t\t\t\t)\r\n\t\t\t)\r\n\t\t);\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { of } from \"rxjs/observable/of\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\n\r\nimport { DiagramService } from \"../services/diagram.service\";\r\nimport { AddDiagramApiModel } from \"../models/add-diagram-api.model\";\r\nimport {\r\n\tAddDiagramActionTypes,\r\n\tAddDiagramActionStart,\r\n\tAddDiagramActionSucceed,\r\n\tAddDiagramActionFailed,\r\n\tDataLoadedAction,\r\n\tStructureDefinitionStartAction,\r\n\tGenerateDiagramAction,\r\n\tStructureDefinitionFinishedAction\r\n} from \"../actions/add-diagram.actions\";\r\n\r\n@Injectable()\r\nexport class AddDiagramEffects {\r\n\tconstructor(private actions$: Actions<any>, private router: Router, private diagramService: DiagramService) {}\r\n\r\n\t@Effect()\r\n\taddDiagramRequest$ = this.actions$\r\n\t\t.ofType(AddDiagramActionTypes.ADD_DIAGRAM)\r\n\t\t.pipe(map(action => action.payload), map(data => new AddDiagramActionStart(data)));\r\n\r\n\t@Effect()\r\n\taddDiagram$ = this.actions$\r\n\t\t.ofType(AddDiagramActionTypes.ADD_DIAGRAM_START)\r\n\t\t.pipe(\r\n\t\t\tmap(action => action.payload),\r\n\t\t\tswitchMap((data: AddDiagramApiModel.Request) =>\r\n\t\t\t\tthis.diagramService\r\n\t\t\t\t\t.addDiagram(data)\r\n\t\t\t\t\t.pipe(\r\n\t\t\t\t\t\tmap(res => new AddDiagramActionSucceed(res)),\r\n\t\t\t\t\t\tcatchError(() => Observable.of(new AddDiagramActionFailed()))\r\n\t\t\t\t\t)\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t@Effect({ dispatch: false })\r\n\tADD_DIAGRAM_SUCCEED$ = this.actions$.ofType(AddDiagramActionTypes.ADD_DIAGRAM_SUCCEED).pipe(\r\n\t\tmap(action => action.payload),\r\n\t\tmap(data => {\r\n\t\t\tthis.router.navigate([ \"diagrams\" ]);\r\n\t\t\treturn Observable.empty();\r\n\t\t})\r\n\t);\r\n\r\n\t@Effect()\r\n\tHAVE_ENDPOINT$ = this.actions$\r\n\t\t.ofType(AddDiagramActionTypes.HAVE_ENDPOINT)\r\n\t\t.pipe(map(action => action.payload), map(data => new DataLoadedAction(data)));\r\n\r\n\t@Effect()\r\n\tDATA_LOADED$ = this.actions$\r\n\t\t.ofType(AddDiagramActionTypes.DATA_LOADED)\r\n\t\t.pipe(map(action => action.payload), map(data => new StructureDefinitionStartAction(data)));\r\n\r\n\t@Effect()\r\n\tDIAGRAM_CONFIG_CHANGED$ = this.actions$\r\n\t\t.ofType(AddDiagramActionTypes.DIAGRAM_CONFIG_CHANGED)\r\n\t\t.pipe(map(action => action.payload), map(data => new GenerateDiagramAction(data)));\r\n\r\n\t@Effect()\r\n\tSTRUCTURE_DEFINITION_START$ = this.actions$\r\n\t\t.ofType(AddDiagramActionTypes.STRUCTURE_DEFINITION_START)\r\n\t\t.pipe(\r\n\t\t\tmap(action => action.payload),\r\n\t\t\tswitchMap(data => data.getDataStructure().map(() => new StructureDefinitionFinishedAction(data)))\r\n\t\t);\r\n\r\n\t@Effect()\r\n\tCOLUMNS_MAPPING_CHANGED$ = this.actions$\r\n\t\t.ofType(AddDiagramActionTypes.COLUMNS_MAPPING_CHANGED)\r\n\t\t.pipe(\r\n\t\t\tmap(action => action.payload),\r\n\t\t\tswitchMap(data => data.calculateColumns().map(() => new StructureDefinitionFinishedAction(data)))\r\n\t\t);\r\n\r\n\t@Effect()\r\n\tSTRUCTURE_DEFINITION_END$ = this.actions$\r\n\t\t.ofType(AddDiagramActionTypes.STRUCTURE_DEFINITION_END)\r\n\t\t// .skipUntil(this.actions$.ofType(AddDiagramActionTypes.DATA_LOADED))\r\n\t\t.pipe(\r\n\t\t\tmap(action => action.payload),\r\n\t\t\tswitchMap(data => data.calculateColumns().map(() => new GenerateDiagramAction(data)))\r\n\t\t);\r\n\r\n\t@Effect({ dispatch: false })\r\n\tGenerateDiagram$ = this.actions$\r\n\t\t.ofType(AddDiagramActionTypes.GENERATE_DIAGRAM)\r\n\t\t.pipe(map(action => action.payload), map(data => data.generateDiagram()));\r\n}\r\n","import { ModuleWithProviders } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\n\r\nimport { DiagramModuleContainerComponent } from \"./smart-components/diagram-module-container/diagram-module-container.component\";\r\nimport { DiagramsComponent } from \"./smart-components/diagrams/diagrams.component\";\r\nimport { AddDiagramComponent } from \"./smart-components/add-diagram/add-diagram.component\";\r\nimport { NumericDiagramComponent } from \"./dumb-components/numeric-diagram/numeric-diagram.component\";\r\nimport { ServerConnectingTimeDiagramComponent } from \"./dumb-components/server-connecting-time-diagram/server-connecting-time-diagram.component\";\r\nimport { ServerStatusDiagramComponent } from \"./dumb-components/server-status-diagram/server-status-diagram.component\";\r\n\r\nconst routes: Routes = [\r\n\t{\r\n\t\tpath: \"diagrams\",\r\n\t\tcomponent: DiagramModuleContainerComponent,\r\n\t\tchildren: [\r\n\t\t\t{\r\n\t\t\t\tpath: \"\",\r\n\t\t\t\tcomponent: DiagramsComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: \"add\",\r\n\t\t\t\tcomponent: AddDiagramComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: \"edit/:id\",\r\n\t\t\t\tcomponent: AddDiagramComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: \"numero\",\r\n\t\t\t\tcomponent: NumericDiagramComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: \"tempo\",\r\n\t\t\t\tcomponent: ServerConnectingTimeDiagramComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: \"booleano\",\r\n\t\t\t\tcomponent: ServerStatusDiagramComponent\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n];\r\n\r\nexport const RoutingModule: ModuleWithProviders = RouterModule.forChild(routes);\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { IGridItemComponent } from \"@soushians/grid\";\r\n\r\nimport { DiagramModel } from \"../../models/diagram.model\";\r\nimport { DiagramService } from \"../../services/diagram.service\";\r\nimport { map } from \"rxjs/operators\";\r\n\r\n@Component({\r\n\ttemplate: `<div fxLayout=\"column wrap\" fxLayoutGap=\"15px\">\r\n<h4>ÙÛØ³Øª ÙÙÙØ¯Ø§Ø±ÙØ§</h4>\r\n      <mat-form-field fxFlex=\"100\">\r\n  <mat-select placeholder=\"ÙÙÙØ¯Ø§Ø± ÙØ§\" [(ngModel)]=\"selectedDiagramId\" name=\"selectedDiagramId\">\r\n  <mat-option *ngFor=\"let item of (diagrams$ | async)\" [value]=\"item._id\">\r\n    {{item.Name}}\r\n  </mat-option>\r\n</mat-select>\r\n</mat-form-field>\r\n</div>`\r\n})\r\nexport class DiagramSelectorComponent implements OnInit, IGridItemComponent<{ diagramId: string }> {\r\n\tdiagrams$: Observable<DiagramModel[]>;\r\n\tselectedDiagramId: string;\r\n\tget valid() {\r\n\t\treturn this.config.diagramId != undefined;\r\n\t}\r\n\tget config() {\r\n\t\treturn {\r\n\t\t\tdiagramId: this.selectedDiagramId\r\n\t\t};\r\n\t}\r\n\tconstructor(private diagramService: DiagramService) {\r\n\t\tthis.diagrams$ = this.diagramService.getDiagrams().pipe(map(res => res.Result));\r\n\t}\r\n\tngOnInit() {}\r\n}\r\n","import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport {\r\n\tMatExpansionModule,\r\n\tMatSnackBarModule,\r\n\tMatIconModule,\r\n\tMatButtonModule,\r\n\tMatCardModule,\r\n\tMatTooltipModule,\r\n\tMatSelectModule,\r\n\tMatInputModule,\r\n\tMatFormFieldModule,\r\n\tMatTabsModule,\r\n\tMatRadioModule,\r\n\tMatCheckboxModule,\r\n\tMatGridListModule,\r\n\tMatSliderModule,\r\n\tMatAutocompleteModule\r\n} from \"@angular/material\";\r\nimport { StoreModule } from \"@ngrx/store\";\r\nimport { StoreDevtoolsModule } from \"@ngrx/store-devtools\";\r\nimport { EffectsModule, mergeEffects } from \"@ngrx/effects\";\r\n\r\nimport { SharedModule } from \"@soushians/shared\";\r\n\r\nimport { DiagramModuleConfig, MODULE_CONFIG_TOKEN } from \"./diagram.config\";\r\n\r\nimport { DiagramReducers } from \"./reducers/index\";\r\n\r\nimport { ServerStatusDiagramComponent } from \"./dumb-components/server-status-diagram/server-status-diagram.component\";\r\nimport { DiagramPartialConfigEditComponent } from \"./dumb-components/diagram-partial-config-edit/diagram-partial-config-edit.component\";\r\nimport { PieDiagramPartialConfigComponent } from \"./dumb-components/pie-diagram-partial-config/pie-diagram-partial-config.component\";\r\nimport { BooleanoWidgetPartialConfigComponent } from \"./dumb-components/booleano-widget-partial-config/booleano-widget-partial-config.component\";\r\nimport { NumericWidgetPartialConfigComponent } from \"./dumb-components/numeric-widget-partial-config/numeric-widget-partial-config.component\";\r\nimport { LinearDiagramPartialConfigComponent } from \"./dumb-components/linear-diagram-partial-config/linear-diagram-partial-config.component\";\r\nimport { ServerConnectingTimeDiagramComponent } from \"./dumb-components/server-connecting-time-diagram/server-connecting-time-diagram.component\";\r\nimport { NumericEditDiagramComponent } from \"./dumb-components/numeric-edit-diagram/numeric-edit-diagram.component\";\r\nimport { NumericDiagramComponent } from \"./dumb-components/numeric-diagram/numeric-diagram.component\";\r\n\r\nimport { DiagramModuleContainerComponent } from \"./smart-components/diagram-module-container/diagram-module-container.component\";\r\nimport { DataMapperComponent } from \"./smart-components/data-mapper/data-mapper.component\";\r\n\r\nimport { AddDiagramComponent } from \"./smart-components/add-diagram/add-diagram.component\";\r\nimport { diagramViewComponent } from \"./smart-components/diagram-view/diagram-view.component\";\r\nimport { DiagramsComponent } from \"./smart-components/diagrams/diagrams.component\";\r\nimport { EditDiagramComponent } from \"./smart-components/edit-diagram/edit-diagram.component\";\r\nimport { DiagramComponent } from \"./smart-components/diagram/diagram.component\";\r\nimport { DynamicComponentSelectorComponent } from \"./smart-components/dynamic-component-selector/dynamic-component-selector.component\";\r\nimport { DynamicConfigComponentSelectorComponent } from \"./smart-components/dynamic-config-component-selector/dynamic-config-component-selector.component\";\r\n\r\nimport { DiagramEffects } from \"./effects/diagrams.effects\";\r\nimport { AddDiagramEffects } from \"./effects/add-diagram.effects\";\r\n\r\nimport { RoutingModule } from \"./diagram-routing.module\";\r\nimport { DiagramSelectorComponent } from \"./smart-components/diagram-selector/diagram-selector.component\";\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tHttpClientModule,\r\n\t\tFormsModule,\r\n\t\tRouterModule,\r\n\t\tCommonModule,\r\n\t\tMatExpansionModule,\r\n\t\tMatSnackBarModule,\r\n\t\tMatIconModule,\r\n\t\tMatButtonModule,\r\n\t\tMatCardModule,\r\n\t\tMatSelectModule,\r\n\t\tMatSliderModule,\r\n\t\tMatInputModule,\r\n\t\tMatCheckboxModule,\r\n\t\tMatFormFieldModule,\r\n\t\tMatTabsModule,\r\n\t\tFlexLayoutModule,\r\n\t\tMatRadioModule,\r\n\t\tMatTooltipModule,\r\n\t\tMatGridListModule,\r\n\t\tMatAutocompleteModule,\r\n\t\tReactiveFormsModule,\r\n\t\tBrowserAnimationsModule\r\n\t],\r\n\tdeclarations: [\r\n\t\tAddDiagramComponent,\r\n\t\tDiagramsComponent,\r\n\t\tdiagramViewComponent,\r\n\t\tEditDiagramComponent,\r\n\t\tDynamicConfigComponentSelectorComponent,\r\n\t\tDiagramComponent,\r\n\t\tDynamicComponentSelectorComponent,\r\n\t\tDiagramModuleContainerComponent,\r\n\t\tDataMapperComponent,\r\n\t\tNumericDiagramComponent,\r\n\t\tServerStatusDiagramComponent,\r\n\t\tDiagramPartialConfigEditComponent,\r\n\t\tPieDiagramPartialConfigComponent,\r\n\t\tBooleanoWidgetPartialConfigComponent,\r\n\t\tNumericWidgetPartialConfigComponent,\r\n\t\tServerConnectingTimeDiagramComponent,\r\n\t\tNumericEditDiagramComponent,\r\n\t\tLinearDiagramPartialConfigComponent,\r\n\t\tDiagramSelectorComponent\r\n\t],\r\n\tentryComponents: [ DiagramSelectorComponent, diagramViewComponent ],\r\n\texports: [ DiagramSelectorComponent ],\r\n\tproviders: []\r\n})\r\nexport class NgsDiagramModule {\r\n\tstatic forRoot(config?: DiagramModuleConfig): ModuleWithProviders {\r\n\t\treturn {\r\n\t\t\tngModule: RootNgsDiagramModule,\r\n\t\t\tproviders: [ { provide: MODULE_CONFIG_TOKEN, useValue: config } ]\r\n\t\t};\r\n\t}\r\n}\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tNgsDiagramModule,\r\n\t\tStoreModule.forFeature(\"diagram\", DiagramReducers),\r\n\t\tEffectsModule.forFeature([ DiagramEffects, AddDiagramEffects ]),\r\n\t\tRoutingModule\r\n\t],\r\n\texports: [ NgsDiagramModule ]\r\n})\r\nexport class RootNgsDiagramModule {}\r\n"]}