import { OnInit, EventEmitter } from "@angular/core";
import { GridsterConfig, GridsterItem } from "angular-gridster2";
import { Store } from "@ngrx/store";
import { MatBottomSheet } from "@angular/material";
import { AppState } from "../grid.reducer";
import { GridModel } from "../models";
import { GridService } from "../services/grid.service";
import { GridConfigurationService } from "../services/grid-configuration.service";
import { IGridItemModel } from "../models/gird-item.model";
export declare class GridComponent implements OnInit {
    private store;
    private service;
    private configurationService;
    private bottomSheet;
    itemValidateCallback: EventEmitter<{}>;
    itemRemovedCallback: EventEmitter<{}>;
    itemInitCallback: EventEmitter<{}>;
    itemResizeCallback: EventEmitter<{}>;
    itemChangeCallback: EventEmitter<{}>;
    gridSizeChangedCallback: EventEmitter<{}>;
    destroyCallback: EventEmitter<{}>;
    initCallback: EventEmitter<{}>;
    oid: string;
    options: GridsterConfig;
    grid: GridModel;
    ready: boolean;
    gridItemTypes: any[string];
    constructor(store: Store<AppState>, service: GridService, configurationService: GridConfigurationService, bottomSheet: MatBottomSheet);
    static itemChange(item: any, itemComponent: any): void;
    static itemResize(item: any, itemComponent: any): void;
    ngOnInit(): void;
    _initCallback(item: any): void;
    removeItem(item: any): void;
    addItem(): void;
    emptyCellClick(event: MouseEvent, item: GridsterItem): void;
    openConfig(): void;
    gridItemTypeChanged(item: IGridItemModel<any>): void;
    showConfig(item: IGridItemModel<any>): void;
    _get_grid_by_oid_and_update_component(): void;
}
