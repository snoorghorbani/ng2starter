{"version":3,"file":"soushians-grid.js.map","sources":["ng://@soushians/grid/lib/grid.config.ts","ng://@soushians/grid/lib/root/root.component.ts","ng://@soushians/grid/lib/grid-routing.module.ts","ng://@soushians/grid/lib/services/grid-configuration.service.ts","ng://@soushians/grid/lib/models/upsert-grid.api-model.ts","ng://@soushians/grid/lib/models/grid.model.ts","ng://@soushians/grid/lib/services/api/upsert-grid/upsert-grid.model.ts","ng://@soushians/grid/lib/services/api/get-grid/get-grid.actions.ts","ng://@soushians/grid/lib/services/grid.service.ts","ng://@soushians/grid/lib/services/api/get-grid/get-grid.effects.ts","ng://@soushians/grid/lib/services/api/upsert-grid/upsert-grid.actions.ts","ng://@soushians/grid/lib/services/api/upsert-grid/upsert-grid.effects.ts","ng://@soushians/grid/lib/services/api/get-grids/get-grids.actions.ts","ng://@soushians/grid/lib/services/api/get-grids/get-grids.effects.ts","ng://@soushians/grid/lib/root/widget.actions.ts","ng://@soushians/grid/lib/root/grids.reducers.ts","ng://@soushians/grid/lib/grid.reducer.ts","ng://@soushians/grid/lib/root/grids.effects.ts","ng://@soushians/grid/lib/grid-item/dynamic-grid-item-config.directive.ts","ng://@soushians/grid/lib/grid-config/grid-config.component.ts","ng://@soushians/grid/lib/grid/grid.component.ts","ng://@soushians/grid/lib/grid-item/dynamic-grid-item-view.directive.ts","ng://@soushians/grid/lib/grid.module.ts"],"sourcesContent":["import { InjectionToken } from \"@angular/core\";\r\nexport interface IGridType {\r\n\tupsertComponet?: any;\r\n\tconfigComponent?: any;\r\n\ttype?: \"simple\" | \"complex\";\r\n\tviewComponent: any;\r\n}\r\nexport interface GridModuleConfig {\r\n\tdevelopment_uri?: string;\r\n\tproduction_uri?: string;\r\n\tenv?: {\r\n\t\tproduction: boolean;\r\n\t};\r\n\tendpoints?: {\r\n\t\tget: string;\r\n\t\tfind: string;\r\n\t\tupsert: string;\r\n\t};\r\n\ttypes?: { [key: string]: IGridType };\r\n}\r\nexport const MODULE_DEFAULT_CONFIG: GridModuleConfig = {\r\n\tdevelopment_uri: \"http://localhost:3000\",\r\n\tproduction_uri: \"\",\r\n\tenv: {\r\n\t\tproduction: false\r\n\t},\r\n\tendpoints: {\r\n\t\tupsert: \"http://localhost:3000/api/grid\",\r\n\t\tfind: \"http://localhost:3000/api/grid\",\r\n\t\tget: \"http://localhost:3000/api/grid/${model._id}\"\r\n\t},\r\n\ttypes: {}\r\n};\r\nexport const MODULE_CONFIG_TOKEN = new InjectionToken<GridModuleConfig>(\"GridModuleConfig\");\r\n","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n\tselector: \"ngs-grid-root\",\r\n\ttemplate: \"<router-outlet></router-outlet>\"\r\n})\r\nexport class RootComponent {}\r\n","import { ModuleWithProviders } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\nimport { RootComponent } from \"./root/root.component\";\r\n\r\nconst routes: Routes = [\r\n\t{\r\n\t\tpath: \"grid\",\r\n\t\tcomponent: RootComponent,\r\n\t\tchildren: []\r\n\t}\r\n];\r\n\r\nexport const GridRoutingModule: ModuleWithProviders = RouterModule.forChild(routes);\r\n","import { BehaviorSubject } from \"rxjs\";\r\nimport { Inject, Injectable } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { GridModuleConfig, MODULE_DEFAULT_CONFIG, MODULE_CONFIG_TOKEN } from \"../grid.config\";\r\nimport { AppState } from \"../grid.reducer\";\r\n\r\n@Injectable()\r\nexport class GridConfigurationService {\r\n\tprivate _config: GridModuleConfig;\r\n\tget config() {\r\n\t\treturn this._config;\r\n\t}\r\n\tconfig$ = new BehaviorSubject(MODULE_DEFAULT_CONFIG);\r\n\tconstructor(@Inject(MODULE_CONFIG_TOKEN) configFile, private store: Store<AppState>) {\r\n\t\tthis._config = Object.assign({}, MODULE_DEFAULT_CONFIG, configFile);\r\n\t\tthis.config$.next(this._config);\r\n\t\t// this.store.select(getGridModuleConfig).subscribe((gridConfig) => {\r\n\t\t// \tif (!gridConfig) {\r\n\t\t// \t\treturn;\r\n\t\t// \t}\r\n\t\t// \tthis._config = Object.assign({}, this._config, gridConfig.Config);\r\n\t\t// \tthis.config$.next(this._config);\r\n\t\t// });\r\n\t}\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { GridModel } from \"./grid.model\";\r\n\r\nexport namespace UpsertGridApiModel {\r\n\texport class Request {\r\n\t\tgrid: GridModel;\r\n\t\tconstructor(initValue: Partial<UpsertGridApiModel.Request> = {}) {\r\n\t\t\tObject.keys(initValue).forEach((key) => (this[key] = initValue[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn this.grid;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: GridModel;\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","import { GridsterConfig } from \"angular-gridster2\";\r\nimport { IGridItemModel } from \"./gird-item.model\";\r\n\r\nexport class GridModel {\r\n\t_id: string;\r\n\toid: string;\r\n\tname: string;\r\n\ttype: string;\r\n\tconfig: GridsterConfig;\r\n\titems: IGridItemModel<any>[];\r\n\tconstructor(\r\n\t\t{\r\n\t\t\t_id,\r\n\t\t\toid,\r\n\t\t\tname,\r\n\t\t\ttype,\r\n\t\t\tconfig,\r\n\t\t\titems\r\n\t\t}: { _id?: string; oid?: string; name?: string; type?: string; config?: GridsterConfig; items?: any[] } = {\r\n\t\t\tconfig: {},\r\n\t\t\titems: []\r\n\t\t}\r\n\t) {\r\n\t\tthis._id = _id;\r\n\t\tthis.oid = oid;\r\n\t\tthis.name = name;\r\n\t\tthis.type = type;\r\n\t\tthis.config = config;\r\n\t\tthis.items = items;\r\n\t}\r\n}\r\n","import { GridModel } from \"../../../models\";\r\n\r\nexport namespace UpsertGridApiModel {\r\n\texport class Request {\r\n\t\tgrid: GridModel;\r\n\t\tconstructor(grid = {}) {\r\n\t\t\tdebugger;\r\n\t\t\tthis.grid = new GridModel(grid);\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn this.grid;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: GridModel;\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { GetGridApiModel } from \"./get-grid.model\";\r\nimport { GridModel } from \"../../../models/grid.model\";\r\n\r\nexport const enum GET_GRID_ACTION_TYPES {\r\n\tSTART = \"[GRID][API][GetGrid] start\",\r\n\tSUCCEED = \"[GRID][API][GetGrid] succeed\",\r\n\tFAILED = \"[GRID][API][GetGrid] failed\"\r\n}\r\n\r\nexport class GetGridStartAction implements Action {\r\n\treadonly type = GET_GRID_ACTION_TYPES.START;\r\n\tconstructor(public payload: string) {}\r\n}\r\nexport class GetGridSucceedAction implements Action {\r\n\treadonly type = GET_GRID_ACTION_TYPES.SUCCEED;\r\n\tconstructor(public payload: GridModel) {}\r\n}\r\nexport class GetGridFailedAction implements Action {\r\n\treadonly type = GET_GRID_ACTION_TYPES.FAILED;\r\n\tconstructor(public payload: any) {}\r\n}\r\n\r\nexport type GetGridActions = GetGridStartAction | GetGridSucceedAction | GetGridFailedAction;\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable, BehaviorSubject, ReplaySubject } from \"rxjs\";\r\nimport { map, filter, tap, take, switchMap, combineLatest, withLatestFrom } from \"rxjs/operators\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\n\r\nimport { stringTemplate } from \"@soushians/shared\";\r\nimport { UserFacadeService } from \"@soushians/user\";\r\n\r\nimport { AppState } from \"../grid.reducer\";\r\nimport { GridConfigurationService } from \"./grid-configuration.service\";\r\nimport { GridModel } from \"../models\";\r\nimport { UpsertGridApiModel } from \"./api/upsert-grid/upsert-grid.model\";\r\nimport { GetGridsApiModel } from \"./api/get-grids/get-grids.model\";\r\nimport { GetGridStartAction } from \"./api/get-grid/get-grid.actions\";\r\nimport { takeWhile } from \"../../../../../../node_modules/rxjs-compat/operator/takeWhile\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class GridService {\r\n\tuserId$: Observable<string>;\r\n\tconstructor(\r\n\t\tprivate http: HttpClient,\r\n\t\tprivate store: Store<AppState>,\r\n\t\tprivate userFacadeService: UserFacadeService,\r\n\t\tprivate configurationService: GridConfigurationService\r\n\t) {\r\n\t\tthis.userId$ = this.userFacadeService.getDisplayName().filter((i) => i != undefined);\r\n\t}\r\n\r\n\tget(_id: string): Observable<GridModel> {\r\n\t\treturn this.configurationService.config$.pipe(\r\n\t\t\tfilter((config) => config.endpoints.get !== \"\"),\r\n\t\t\ttake(1),\r\n\t\t\tcombineLatest(this.userId$),\r\n\t\t\tswitchMap(([ config, userId ]) => {\r\n\t\t\t\tdebugger;\r\n\t\t\t\treturn this.http.get(stringTemplate(config.endpoints.get, { _id }), {\r\n\t\t\t\t\tparams: {\r\n\t\t\t\t\t\tuserId: userId\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}),\r\n\t\t\tmap((response: UpsertGridApiModel.Response) => response.Result)\r\n\t\t);\r\n\t}\r\n\r\n\tgetGrids(): Observable<GridModel[]> {\r\n\t\treturn this.configurationService.config$.pipe(\r\n\t\t\tfilter((config) => config.endpoints.find != \"\"),\r\n\t\t\tswitchMap((config) => this.http.get(config.endpoints.find)),\r\n\t\t\tmap((response: GetGridsApiModel.Response) => response.Result)\r\n\t\t);\r\n\t}\r\n\tupsert(grid: UpsertGridApiModel.Request): Observable<GridModel> {\r\n\t\tconst model = new UpsertGridApiModel.Request(grid);\r\n\t\treturn this.configurationService.config$.pipe(\r\n\t\t\tfilter((config) => config.endpoints.upsert != \"\"),\r\n\t\t\ttake(1),\r\n\t\t\tcombineLatest(this.userId$),\r\n\t\t\tswitchMap(([ config, userId ]) => {\r\n\t\t\t\treturn this.http.post(config.endpoints.upsert, model.getRequestBody(), {\r\n\t\t\t\t\tparams: {\r\n\t\t\t\t\t\tuserId: userId\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}),\r\n\t\t\tmap((response: UpsertGridApiModel.Response) => response.Result)\r\n\t\t);\r\n\t}\r\n\t// delete(_id: string) {\r\n\t// \treturn this.configurationService.config$\r\n\t// \t\t.filter((config) => config.endpoints.deleteForm != \"\")\r\n\t// \t\t.switchMap((config) => this.http.get(config.endpoints.deleteForm));\r\n\t// }\r\n\tselectById(_id: string): Observable<GridModel> {\r\n\t\tconst subject = new BehaviorSubject<GridModel>(undefined);\r\n\t\tthis.store\r\n\t\t\t.select((state) => state.grids.db.data)\r\n\t\t\t.pipe(\r\n\t\t\t\tfilter((grids) => grids != null),\r\n\t\t\t\tmap((grids) => grids.find((grid) => grid._id == _id)),\r\n\t\t\t\ttap((grid) => {\r\n\t\t\t\t\tif (grid == null) {\r\n\t\t\t\t\t\tthis.store.dispatch(new GetGridStartAction(_id));\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t\t.subscribe((FormSchemaModel) => subject.next(FormSchemaModel));\r\n\t\treturn subject.asObservable();\r\n\t}\r\n\tselectByOid(_id: string): Observable<GridModel> {\r\n\t\tconst subject = new BehaviorSubject<GridModel>(undefined);\r\n\t\tthis.store\r\n\t\t\t.select((state) => state.grids.db.data)\r\n\t\t\t.pipe(\r\n\t\t\t\tfilter((grids) => grids != null),\r\n\t\t\t\tmap((grids) => grids.find((grid) => grid._id == _id)),\r\n\t\t\t\ttap((grid) => {\r\n\t\t\t\t\tif (grid == null) {\r\n\t\t\t\t\t\tthis.store.dispatch(new GetGridStartAction(_id));\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t\t.subscribe((FormSchemaModel) => subject.next(FormSchemaModel));\r\n\t\treturn subject.asObservable();\r\n\t}\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\nimport { of } from \"rxjs\";\r\n\r\nimport { GridService } from \"../../grid.service\";\r\nimport { GET_GRID_ACTION_TYPES, GetGridActions, GetGridSucceedAction, GetGridFailedAction } from \"./get-grid.actions\";\r\n\r\n@Injectable()\r\nexport class GetGridApiEffects {\r\n\tconstructor(private actions$: Actions<GetGridActions>, private service: GridService) {}\r\n\r\n\t@Effect()\r\n\tstart$ = this.actions$\r\n\t\t.ofType(GET_GRID_ACTION_TYPES.START)\r\n\t\t.pipe(\r\n\t\t\tmap((action) => action.payload),\r\n\t\t\tswitchMap((payload) => this.service.get(payload)),\r\n\t\t\tmap((res) => new GetGridSucceedAction(res)),\r\n\t\t\tcatchError((err) => of(new GetGridFailedAction(err)))\r\n\t\t);\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { UpsertGridApiModel } from \"./upsert-grid.model\";\r\nimport { GridModel } from \"../../../models/grid.model\";\r\n\r\nexport const enum UPSERT_GRID_ACTION_TYPES {\r\n\tSTART = \"[UPSERT_GRID][API][UpsertGrid] start\",\r\n\tSUCCEED = \"[UPSERT_GRID][API][UpsertGrid] succeed\",\r\n\tFAILED = \"[UPSERT_GRID][API][UpsertGrid] failed\"\r\n}\r\n\r\nexport class UpsertGridStartAction implements Action {\r\n\treadonly type = UPSERT_GRID_ACTION_TYPES.START;\r\n\tconstructor(public payload: GridModel) {}\r\n}\r\nexport class UpsertGridSucceedAction implements Action {\r\n\treadonly type = UPSERT_GRID_ACTION_TYPES.SUCCEED;\r\n\tconstructor(public payload: GridModel) {}\r\n}\r\nexport class UpsertGridFailedAction implements Action {\r\n\treadonly type = UPSERT_GRID_ACTION_TYPES.FAILED;\r\n\tconstructor(public payload: any) {}\r\n}\r\n\r\nexport type UpsertGridActions = UpsertGridStartAction | UpsertGridSucceedAction | UpsertGridFailedAction;\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\n\r\nimport { GridService } from \"../../grid.service\";\r\nimport {\r\n\tUPSERT_GRID_ACTION_TYPES,\r\n\tUpsertGridActions,\r\n\tUpsertGridSucceedAction,\r\n\tUpsertGridFailedAction\r\n} from \"./upsert-grid.actions\";\r\nimport { of } from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class UpsertGridApiEffects {\r\n\tconstructor(private actions$: Actions<UpsertGridActions>, private service: GridService) {}\r\n\r\n\t@Effect()\r\n\tstart$ = this.actions$\r\n\t\t.ofType(UPSERT_GRID_ACTION_TYPES.START)\r\n\t\t.pipe(\r\n\t\t\tmap((action) => action.payload),\r\n\t\t\tswitchMap((payload) => this.service.upsert(payload)),\r\n\t\t\tmap((res) => new UpsertGridSucceedAction(res)),\r\n\t\t\tcatchError((err) => of(new UpsertGridFailedAction(err)))\r\n\t\t);\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { GetGridsApiModel } from \"./get-grids.model\";\r\nimport { GridModel } from \"../../../models/grid.model\";\r\n\r\nexport const enum GET_GRIDS_ACTION_TYPES {\r\n\tSTART = \"[GET_GRIDS][API][GetGrids] start\",\r\n\tSUCCEED = \"[GET_GRIDS][API][GetGrids] succeed\",\r\n\tFAILED = \"[GET_GRIDS][API][GetGrids] failed\"\r\n}\r\n\r\nexport class GetGridsStartAction implements Action {\r\n\treadonly type = GET_GRIDS_ACTION_TYPES.START;\r\n}\r\nexport class GetGridsSucceedAction implements Action {\r\n\treadonly type = GET_GRIDS_ACTION_TYPES.SUCCEED;\r\n\tconstructor(public payload: GridModel[]) {}\r\n}\r\nexport class GetGridsFailedAction implements Action {\r\n\treadonly type = GET_GRIDS_ACTION_TYPES.FAILED;\r\n\tconstructor(public payload: any) {}\r\n}\r\n\r\nexport type GetGridsActions = GetGridsStartAction | GetGridsSucceedAction | GetGridsFailedAction;\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\nimport { of } from \"rxjs\";\r\n\r\nimport { GridService } from \"../../grid.service\";\r\nimport {\r\n\tGET_GRIDS_ACTION_TYPES,\r\n\tGetGridsActions,\r\n\tGetGridsSucceedAction,\r\n\tGetGridsFailedAction\r\n} from \"./get-grids.actions\";\r\n\r\n@Injectable()\r\nexport class GetGridsApiEffects {\r\n\tconstructor(private actions$: Actions<GetGridsActions>, private service: GridService) {}\r\n\r\n\t@Effect()\r\n\tstart$ = this.actions$\r\n\t\t.ofType(GET_GRIDS_ACTION_TYPES.START)\r\n\t\t.pipe(\r\n\t\t\tswitchMap(() =>\r\n\t\t\t\tthis.service\r\n\t\t\t\t\t.getGrids()\r\n\t\t\t\t\t.pipe(\r\n\t\t\t\t\t\tmap((res) => new GetGridsSucceedAction(res)),\r\n\t\t\t\t\t\tcatchError((err) => of(new GetGridsFailedAction(err)))\r\n\t\t\t\t\t)\r\n\t\t\t)\r\n\t\t);\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { GridModel } from \"../models\";\r\n\r\nexport enum GridsActionTypes {\r\n\tUPSERT = \"[GRID][DB] UPSERT\",\r\n\tDELETE = \"[GRID][DB] DELETE\"\r\n}\r\n\r\nexport class UpsertGridAction implements Action {\r\n\treadonly type = GridsActionTypes.UPSERT;\r\n\tconstructor(public payload: GridModel[]) {}\r\n}\r\nexport class DeleteGridAction implements Action {\r\n\treadonly type = GridsActionTypes.DELETE;\r\n\tconstructor(public payload: GridModel) {}\r\n}\r\n\r\nexport type GridsActions = UpsertGridAction | DeleteGridAction;\r\n","import { GridModel } from \"../models\";\r\nimport { GridsActionTypes, GridsActions } from \"./widget.actions\";\r\n\r\nexport interface State {\r\n\tdata: GridModel[];\r\n}\r\n\r\nconst initialState: State = {\r\n\tdata: []\r\n};\r\n\r\nexport function Reducer(state = initialState, action: GridsActions): State {\r\n\tlet _data: GridModel[];\r\n\tswitch (action.type) {\r\n\t\tcase GridsActionTypes.UPSERT:\r\n\t\t\t_data = state.data.concat();\r\n\t\t\tconst newGrids = action.payload;\r\n\r\n\t\t\tnewGrids.forEach((newGrid) => {\r\n\t\t\t\tconst existedGridIndex = _data.findIndex((w) => w._id == newGrid._id);\r\n\t\t\t\tif (existedGridIndex > -1) {\r\n\t\t\t\t\t_data.splice(existedGridIndex, 1, newGrid);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t_data.push(newGrid);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: _data\r\n\t\t\t};\r\n\r\n\t\tcase GridsActionTypes.DELETE:\r\n\t\t\t_data = Object.assign({}, state.data);\r\n\r\n\t\t\tconst gridIndex = state.data.findIndex((w) => w._id == action.payload._id);\r\n\t\t\t_data.splice(gridIndex, 1);\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: _data\r\n\t\t\t};\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport const getGrids = (state: State) => state.data;\r\n","import * as fromRoot from \"./root/grids.reducers\";\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface GridState {\r\n\tdb: fromRoot.State;\r\n}\r\n\r\nexport const GridReducer = {\r\n\tdb: fromRoot.Reducer\r\n};\r\n\r\nexport interface AppState {\r\n\tgrids: GridState;\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { map, pluck } from \"rxjs/operators\";\r\nimport { Observable } from \"rxjs\";\r\n\r\nimport { GridModel } from \"../models\";\r\nimport { UpsertGridAction } from \"./widget.actions\";\r\nimport { GET_GRID_ACTION_TYPES } from \"../services/api/get-grid/get-grid.actions\";\r\nimport { GET_GRIDS_ACTION_TYPES } from \"../services/api/get-grids/get-grids.actions\";\r\nimport { UPSERT_GRID_ACTION_TYPES } from \"../services/api/upsert-grid/upsert-grid.actions\";\r\n\r\n@Injectable()\r\nexport class GridDbEffects {\r\n\tconstructor(private actions$: Actions<any>) {}\r\n\r\n\t@Effect()\r\n\tUpsert$ = this.actions$\r\n\t\t.ofType(GET_GRID_ACTION_TYPES.SUCCEED, UPSERT_GRID_ACTION_TYPES.SUCCEED)\r\n\t\t.pipe(pluck(\"payload\"), map((grid: GridModel) => new UpsertGridAction([ grid ])));\r\n\r\n\t@Effect()\r\n\tUpsertMany$ = this.actions$\r\n\t\t.ofType(GET_GRIDS_ACTION_TYPES.SUCCEED)\r\n\t\t.pipe(pluck(\"payload\"), map((grids: GridModel[]) => new UpsertGridAction(grids)));\r\n}\r\n","import {\r\n\tComponent,\r\n\tOnInit,\r\n\tComponentRef,\r\n\tComponentFactoryResolver,\r\n\tViewContainerRef,\r\n\tDirective,\r\n\tInput,\r\n\tViewChild,\r\n\tInject\r\n} from \"@angular/core\";\r\nimport { GridConfigurationService } from \"../services/grid-configuration.service\";\r\nimport { MAT_BOTTOM_SHEET_DATA } from \"@angular/material\";\r\n\r\n@Directive({\r\n\tselector: \"[ngsDynamicGridItemConfig]\"\r\n})\r\nexport class DynamicGridItremConfigDirective implements OnInit {\r\n\t@Input()\r\n\tset type(type: string) {\r\n\t\tif (!type) return;\r\n\t\tthis._resolve_correct_component_base_on_widget_type(type);\r\n\t}\r\n\tget valid() {\r\n\t\treturn this.component.instance.valid;\r\n\t}\r\n\tget config() {\r\n\t\treturn this.component.instance.config;\r\n\t}\r\n\tcomponent: ComponentRef<any>;\r\n\tmapTypeToComponent: any;\r\n\tconstructor(\r\n\t\tprivate configurationService: GridConfigurationService,\r\n\t\tprivate resolver: ComponentFactoryResolver,\r\n\t\tprivate container: ViewContainerRef\r\n\t) {\r\n\t\tthis.mapTypeToComponent = this.configurationService.config$.getValue().types;\r\n\t}\r\n\tngOnInit() {}\r\n\t_resolve_correct_component_base_on_widget_type(type) {\r\n\t\tif (!this.mapTypeToComponent[type]) {\r\n\t\t\tconst supportedTypes = Object.keys(this.mapTypeToComponent).join(\", \");\r\n\t\t\tthrow new Error(\r\n\t\t\t\t`Trying to use an unsupported type (${type}).\r\n\t\t  \t\t Supported types: ${supportedTypes}`\r\n\t\t\t);\r\n\t\t}\r\n\t\tconst component = this.resolver.resolveComponentFactory<any>(this.mapTypeToComponent[type].configComponent);\r\n\t\tthis.component = this.container.createComponent(component);\r\n\t\t// this.widget$.subscribe((w) => (this.component.instance.widget = w));\r\n\t}\r\n}\r\n\r\n@Component({\r\n\ttemplate: `\r\n\t<div ngsDynamicGridItemConfig [type]=\"data.type\"></div>\r\n\t`\r\n})\r\nexport class DynamicGridItemConfigComponent {\r\n\t@ViewChild(DynamicGridItremConfigDirective) DynamicWidgetRef: DynamicGridItremConfigDirective;\r\n\tconstructor(@Inject(MAT_BOTTOM_SHEET_DATA) public data: any) {}\r\n\tget config() {\r\n\t\treturn this.DynamicWidgetRef.config;\r\n\t}\r\n\tget valid() {\r\n\t\treturn this.DynamicWidgetRef.valid;\r\n\t}\r\n}\r\n","import { Component, Injector, Inject } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { AppState } from \"../grid.reducer\";\r\nimport { GridModel } from \"../models\";\r\nimport { MAT_BOTTOM_SHEET_DATA } from \"@angular/material\";\r\nimport { FormGroup, FormControl } from \"@angular/forms\";\r\n\r\nimport { UpsertGridStartAction } from \"../services/api/upsert-grid/upsert-grid.actions\";\r\n\r\n@Component({\r\n\ttemplate: `<div fxLayout=\"row wrap\" fxLayoutAlign=\"center center\">\r\n    <div fxFlex=\"100\" [formGroup]=\"gridFormGroup\">\r\n        <mat-form-field>\r\n            <input matInput placeholder=\"name\" formControlName=\"name\">\r\n        </mat-form-field>\r\n    </div>\r\n\r\n    <div  fxFlex=\"100\" [formGroup]=\"configFormGroup\">\r\n        <div fxFlex=\"100\" fxLayout=\"row wrap\" fxLayoutGap=\"25px\">\r\n            <mat-form-field>\r\n                <mat-select placeholder=\"Grid Type\" formControlName=\"gridType\">\r\n                    <mat-option *ngFor=\"let item of gridTypes\" [value]=\"item\">\r\n                        {{item}}\r\n                    </mat-option>\r\n                </mat-select>\r\n            </mat-form-field>\r\n            <mat-form-field>\r\n                <mat-select placeholder=\"Compact Type\" formControlName=\"compactType\">\r\n                    <mat-option *ngFor=\"let item of compactType\" [value]=\"item\">\r\n                        {{item}}\r\n                    </mat-option>\r\n                </mat-select>\r\n            </mat-form-field>\r\n            <mat-form-field>\r\n                <mat-select placeholder=\"Display Grid\" formControlName=\"displayGrid\">\r\n                    <mat-option *ngFor=\"let item of displayGridTypes\" [value]=\"item\">\r\n                        {{item}}\r\n                    </mat-option>\r\n                </mat-select>\r\n            </mat-form-field>\r\n        </div>\r\n        <div fxFlex=\"100\" fxLayout=\"row wrap\" fxLayoutGap=\"25px\">\r\n            <div>\r\n                <mat-checkbox formControlName=\"enableEmptyCellDrag\">enableEmptyCellDrag</mat-checkbox>\r\n                <!-- <mat-checkbox formControlName=\"enableEmptyCellClick\">enableEmptyCellClick</mat-checkbox> -->\r\n            </div>\r\n            <div [formGroup]=\"configFormGroup.get('draggable')\">\r\n                <mat-checkbox formControlName=\"enabled\">enable draggable</mat-checkbox>\r\n            </div>\r\n            <div [formGroup]=\"configFormGroup.get('resizable')\">\r\n                <mat-checkbox formControlName=\"enabled\">enable resizable</mat-checkbox>\r\n            </div>\r\n        </div>\r\n        <!-- Margins -->\r\n        <div fxFlex=\"100\" fxLayout=\"row wrap\" fxLayoutGap=\"25px\">\r\n            <h3 fxFlex=\"100\">Ø­Ø§Ø´ÛÙ</h3>\r\n            <div fxFlex=\"100\">\r\n                <mat-checkbox fxFlex formControlName=\"outerMargin\">outerMargin</mat-checkbox>\r\n            </div>\r\n            <div fxFlex=\"100\" fxLayout=\"row wrap\" fxLayoutGap=\"25px\">\r\n                <mat-form-field fxFlex>\r\n                    <input matInput type=\"number\" placeholder=\"margin\" formControlName=\"margin\" />\r\n                </mat-form-field>\r\n                <mat-form-field fxFlex>\r\n                    <input matInput type=\"number\" placeholder=\"outerMarginTop\" formControlName=\"outerMarginTop\" />\r\n                </mat-form-field>\r\n                <mat-form-field fxFlex>\r\n                    <input matInput type=\"number\" placeholder=\"outerMarginRight\" formControlName=\"outerMarginRight\" />\r\n                </mat-form-field>\r\n                <mat-form-field fxFlex>\r\n                    <input matInput type=\"number\" placeholder=\"outerMarginBottom\" formControlName=\"outerMarginBottom\" />\r\n                </mat-form-field>\r\n                <mat-form-field fxFlex>\r\n                    <input matInput type=\"number\" placeholder=\"outerMarginLeft\" formControlName=\"outerMarginLeft\" />\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Grid Size -->\r\n        <div fxFlex=\"100\" fxLayout=\"row wrap\" fxLayoutGap=\"25px\">\r\n            <h3 fxFlex=\"100\">Ú¯Ø±ÛØ¯</h3>\r\n            <mat-form-field fxFlex>\r\n                <input matInput type=\"number\" placeholder=\"minCols\" formControlName=\"minCols\" />\r\n            </mat-form-field>\r\n            <mat-form-field fxFlex>\r\n                <input matInput type=\"number\" placeholder=\"maxCols\" formControlName=\"maxCols\" />\r\n            </mat-form-field>\r\n        </div>\r\n        <button fxFlex=\"100\" color=\"primary\" mat-raised-button (click)=\"save()\">Save</button>\r\n    </div>\r\n</div>`\r\n})\r\nexport class GridConfigComponent {\r\n\tgridTypes: any[];\r\n\tcompactType: any[];\r\n\tdisplayGridTypes: any[];\r\n\tgrid: GridModel;\r\n\toid: string;\r\n\tconfigFormGroup: FormGroup;\r\n\tgridFormGroup: FormGroup;\r\n\tconstructor(private store: Store<AppState>, @Inject(MAT_BOTTOM_SHEET_DATA) private data: any) {\r\n\t\tthis.grid = this.data.grid;\r\n\t\tthis.oid = this.data.oid;\r\n\t\tthis._init_properties();\r\n\t\tthis._init_form_group();\r\n\t}\r\n\tsave() {\r\n\t\tconst grid = {\r\n\t\t\t...this.grid,\r\n\t\t\t...this.gridFormGroup.value,\r\n\t\t\tconfig: { ...this.configFormGroup.value }\r\n\t\t};\r\n\t\tthis.store.dispatch(new UpsertGridStartAction(grid));\r\n\t}\r\n\t_init_form_group() {\r\n\t\tthis.configFormGroup = new FormGroup({\r\n\t\t\tgridType: new FormControl(\"fit\"),\r\n\t\t\tcompactType: new FormControl(\"none\"),\r\n\t\t\tdisplayGrid: new FormControl(\"onDrag&Resize\"),\r\n\t\t\t// empty cell\r\n\t\t\tenableEmptyCellDrag: new FormControl(true),\r\n\t\t\tenableEmptyCellClick: new FormControl(false),\r\n\t\t\tenableEmptyCellContextMenu: new FormControl(false),\r\n\t\t\t//\r\n\t\t\tscrollToNewItems: new FormControl(true),\r\n\t\t\t// margins\r\n\t\t\tmargin: new FormControl(\"10\"),\r\n\t\t\touterMargin: new FormControl(true),\r\n\t\t\touterMarginTop: new FormControl(\"10\"),\r\n\t\t\touterMarginRight: new FormControl(\"10\"),\r\n\t\t\touterMarginBottom: new FormControl(\"10\"),\r\n\t\t\touterMarginLeft: new FormControl(\"10\"),\r\n\t\t\t// grid size\r\n\t\t\tminCols: new FormControl(3),\r\n\t\t\tmaxCols: new FormControl(3),\r\n\t\t\t//\r\n\t\t\tdraggable: new FormGroup({\r\n\t\t\t\tenabled: new FormControl(),\r\n\t\t\t\tdelayStart: new FormControl(333)\r\n\t\t\t\t// ignoreContent: new FormControl(\"false\")\r\n\t\t\t}),\r\n\t\t\tresizable: new FormGroup({\r\n\t\t\t\tenabled: new FormControl()\r\n\t\t\t})\r\n\t\t});\r\n\t\tthis.gridFormGroup = new FormGroup({\r\n\t\t\toid: new FormControl(this.oid),\r\n\t\t\tname: new FormControl(\"\")\r\n\t\t});\r\n\t\tthis.gridFormGroup.patchValue(this.grid);\r\n\t\tthis.configFormGroup.patchValue(this.grid.config);\r\n\t}\r\n\t_init_properties() {\r\n\t\tthis.gridTypes = [ \"fit\", \"scrollVertical\", \"scrollHorizontal\", \"fixed\", \"verticalFixed\", \"horizontalFixed\" ];\r\n\t\tthis.compactType = [ \"none\", \"compactUp\", \"compactLeft\", \"compactUp&Left\", \"compactLeft&Up\" ];\r\n\t\tthis.displayGridTypes = [ \"always\", \"onDrag&Resize\", \"none\" ];\r\n\t}\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\r\nimport { GridsterConfig, GridsterItem } from \"angular-gridster2\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { filter } from \"rxjs/operators\";\r\nimport { MatBottomSheet } from \"@angular/material\";\r\nimport { Observable } from \"rxjs\";\r\n\r\nimport { getFrontendAuthenticationState } from \"@soushians/frontend-authentication\";\r\n\r\nimport { AppState } from \"../grid.reducer\";\r\nimport { GridModel } from \"../models\";\r\nimport { GridService } from \"../services/grid.service\";\r\nimport { GridConfigurationService } from \"../services/grid-configuration.service\";\r\nimport { DynamicGridItemConfigComponent } from \"../grid-item/dynamic-grid-item-config.directive\";\r\nimport { GridConfigComponent } from \"../grid-config/grid-config.component\";\r\nimport { IGridItemModel } from \"../models/gird-item.model\";\r\nimport { UpsertGridStartAction } from \"../services/api/upsert-grid/upsert-grid.actions\";\r\n\r\n@Component({\r\n\tselector: \"ngs-grid\",\r\n\ttemplate: `<gridster [options]=\"options\">\r\n    <div class=\"actions\">\r\n        <button mat-mini-fab (click)=\"addItem($event)\">\r\n            <mat-icon>add</mat-icon>\r\n        </button>\r\n        <button mat-mini-fab (click)=\"openConfig($event)\" *ngIf=\"havePermission$ | async\">\r\n            <mat-icon>dashboard</mat-icon>\r\n        </button>\r\n        <button mat-mini-fab (click)=\"saveConfig($event)\">\r\n            <mat-icon>done</mat-icon>\r\n        </button>\r\n    </div>\r\n    <gridster-item [item]=\"item\" *ngFor=\"let item of grid.items\">\r\n        <div class=\"initializer\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n            <div fxFlex=\"nogrow\">\r\n                <button mat-icon-button (click)=\"removeItem(item)\">\r\n                    <mat-icon>delete</mat-icon>\r\n                </button>\r\n                <button *ngIf=\"item.type\" mat-icon-button (click)=\"showConfig(item)\">\r\n                    <mat-icon>settings</mat-icon>\r\n                </button>\r\n            </div>\r\n        </div>\r\n        <mat-form-field *ngIf=\"!item.valid\"  fxFlex=\"100\">\r\n            <mat-select placeholder=\"Grid Item Type\" [(ngModel)]=\"item.type\" (selectionChange)=\"gridItemTypeChanged(item)\">\r\n                <mat-option *ngFor=\"let item of gridItemTypes\" [value]=\"item\">\r\n                    {{item}}\r\n                </mat-option>\r\n            </mat-select>\r\n        </mat-form-field>\r\n        <div *ngIf=\"item.valid\" [ngsDynamicGridItemView]=\"item\"></div>\r\n    </gridster-item>\r\n</gridster>`,\r\n\tstyles: [`:host{width:100%;height:100vh;display:block;direction:ltr}.initializer{padding:25px}.actions{position:absolute;top:25px;right:25px;z-index:5}.actions button{margin-left:10px}`]\r\n})\r\nexport class GridComponent implements OnInit {\r\n\t@Output() itemValidateCallback = new EventEmitter();\r\n\t@Output() itemRemovedCallback = new EventEmitter();\r\n\t@Output() itemInitCallback = new EventEmitter();\r\n\t@Output() itemResizeCallback = new EventEmitter();\r\n\t@Output() itemChangeCallback = new EventEmitter();\r\n\t@Output() gridSizeChangedCallback = new EventEmitter();\r\n\t@Output() destroyCallback = new EventEmitter();\r\n\t@Output() initCallback = new EventEmitter();\r\n\r\n\t@Input() oid: string;\r\n\thavePermission$: Observable<boolean>;\r\n\toptions: GridsterConfig;\r\n\tgrid: GridModel;\r\n\tready = false;\r\n\tgridItemTypes: any[string];\r\n\tconstructor(\r\n\t\tprivate store: Store<AppState>,\r\n\t\tprivate service: GridService,\r\n\t\tprivate configurationService: GridConfigurationService,\r\n\t\tprivate bottomSheet: MatBottomSheet\r\n\t) {\r\n\t\tthis.options = {};\r\n\t\tthis.gridItemTypes = Object.keys(this.configurationService.config$.getValue().types);\r\n\t\tthis.havePermission$ = this.store.select(getFrontendAuthenticationState);\r\n\t}\r\n\r\n\tstatic itemChange(item, itemComponent) {\r\n\t\tconsole.log(\"itemChanged\", item, itemComponent);\r\n\t}\r\n\r\n\tstatic itemResize(item, itemComponent) {\r\n\t\tconsole.log(\"itemResized\", item, itemComponent);\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\t// this.items = [ { cols: 2, rows: 1, y: 0, x: 0 }, { cols: 2, rows: 2, y: 0, x: 2 } ];\r\n\r\n\t\tthis.grid = new GridModel({\r\n\t\t\toid: this.oid,\r\n\t\t\tconfig: {}\r\n\t\t});\r\n\t\tthis._get_grid_by_oid_and_update_component();\r\n\t}\r\n\r\n\t_initCallback(item) {\r\n\t\tthis.initCallback.emit(item);\r\n\t}\r\n\r\n\tremoveItem(item) {\r\n\t\tthis.grid.items.splice(this.grid.items.indexOf(item), 1);\r\n\t}\r\n\r\n\taddItem(e) {\r\n\t\te.stopPropagation();\r\n\t\tthis.grid.items.push({} as IGridItemModel<any>);\r\n\t}\r\n\temptyCellClick(event: MouseEvent, item: GridsterItem) {\r\n\t\tconsole.log(\"empty cell click\", event, item);\r\n\t\tthis.grid.items.push(item as any);\r\n\t}\r\n\topenConfig(e) {\r\n\t\te.stopPropagation();\r\n\t\te.preventDefault();\r\n\t\tthis.bottomSheet.open(GridConfigComponent, {\r\n\t\t\tdata: {\r\n\t\t\t\tgrid: this.grid\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\tsaveConfig(e) {\r\n\t\te.stopPropagation();\r\n\t\te.stopImmediatePropagation();\r\n\t\te.preventDefault();\r\n\r\n\t\t/**\r\n\t\t * TODO: \r\n\t\t * Ø§Ø­Ø²Ø§Ø± ÙÙÛØª Ø¯Ø± Ø³ÙØª ÙÙØ¯ Ø§ØªØ­Ø§Ù Ø´ÙØ¯\r\n\t\t* Ú©Ø§ÙÙÛÚ¯ Ø¨Ø±Ø§Û Ú¯Ø±ÙØªÙ Ø´ÙØ§Ø³Ù Ú©Ø§Ø±Ø¨Ø±\r\n\t\t */\r\n\t\tthis.store.dispatch(new UpsertGridStartAction(this.grid));\r\n\t}\r\n\tgridItemTypeChanged(item: IGridItemModel<any>) {\r\n\t\tconst bs = this.bottomSheet.open(DynamicGridItemConfigComponent, {\r\n\t\t\tdata: {\r\n\t\t\t\ttype: item.type\r\n\t\t\t}\r\n\t\t});\r\n\t\tbs.afterDismissed().subscribe((data) => {\r\n\t\t\titem.config = bs.instance.config;\r\n\t\t\titem.valid = bs.instance.valid;\r\n\t\t});\r\n\t}\r\n\tshowConfig(item: IGridItemModel<any>) {\r\n\t\tconst bs = this.bottomSheet.open(DynamicGridItemConfigComponent, {\r\n\t\t\tdata: {\r\n\t\t\t\ttype: item.type\r\n\t\t\t}\r\n\t\t});\r\n\t\tbs.afterDismissed().subscribe((data) => {\r\n\t\t\titem.config = bs.instance.config;\r\n\t\t\titem.valid = bs.instance.valid;\r\n\t\t});\r\n\t}\r\n\t_get_grid_by_oid_and_update_component() {\r\n\t\tthis.service.selectById(this.oid).pipe(filter((data) => data != undefined)).subscribe((data) => {\r\n\t\t\tthis.grid = data;\r\n\t\t\tthis.options = { ...this.options, ...data.config };\r\n\t\t\t// this.options.draggable = {\r\n\t\t\t// \tenabled: true\r\n\t\t\t// };\r\n\t\t\t// this.options.emptyCellContextMenuCallback = this.emptyCellClick.bind(this);\r\n\t\t\t// this.options.emptyCellDropCallback = this.emptyCellClick.bind(this);\r\n\t\t\tif (this.options.enableEmptyCellDrag) this.options.emptyCellDragCallback = this.emptyCellClick.bind(this);\r\n\t\t\t// if (this.options.enableEmptyCellClick) this.options.emptyCellClickCallback = this.emptyCellClick.bind(this);\r\n\t\t\tthis.ready = true;\r\n\t\t\t// this.options.api.optionsChanged();\r\n\t\t});\r\n\t}\r\n}\r\n","import {\r\n\tComponent,\r\n\tOnInit,\r\n\tComponentRef,\r\n\tComponentFactoryResolver,\r\n\tViewContainerRef,\r\n\tDirective,\r\n\tInput,\r\n\tInject,\r\n\tViewChild\r\n} from \"@angular/core\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { pluck, filter, switchMap, map, startWith } from \"rxjs/operators\";\r\nimport { GridConfigurationService } from \"../services/grid-configuration.service\";\r\nimport { MAT_BOTTOM_SHEET_DATA } from \"@angular/material\";\r\nimport { IGridItemModel } from \"../models/gird-item.model\";\r\n\r\n@Directive({\r\n\tselector: \"[ngsDynamicGridItemView]\"\r\n})\r\nexport class DynamicGridItemViewDirective implements OnInit {\r\n\t@Input(\"ngsDynamicGridItemView\")\r\n\tset item(item: IGridItemModel<any>) {\r\n\t\tif (!item) return;\r\n\t\tif (!item.valid) return;\r\n\t\tthis._resolve_correct_component_base_on_widget_type(item);\r\n\t}\r\n\tcomponent: ComponentRef<any>;\r\n\tmapTypeToComponent: any;\r\n\tconstructor(\r\n\t\tprivate configurationService: GridConfigurationService,\r\n\t\tprivate resolver: ComponentFactoryResolver,\r\n\t\tprivate container: ViewContainerRef\r\n\t) {\r\n\t\tthis.mapTypeToComponent = this.configurationService.config$.getValue().types;\r\n\t}\r\n\tngOnInit() {}\r\n\t_resolve_correct_component_base_on_widget_type(item: IGridItemModel<any>) {\r\n\t\tdebugger;\r\n\t\tif (!this.mapTypeToComponent[item.type]) {\r\n\t\t\tconst supportedTypes = Object.keys(this.mapTypeToComponent).join(\", \");\r\n\t\t\tthrow new Error(\r\n\t\t\t\t`Trying to use an unsupported type (${item.type}).\r\n\t\t  \t\t Supported types: ${supportedTypes}`\r\n\t\t\t);\r\n\t\t}\r\n\t\tconst component = this.resolver.resolveComponentFactory<any>(this.mapTypeToComponent[item.type].viewComponent);\r\n\t\tthis.component = this.container.createComponent(component);\r\n\t\tObject.keys(item.config || {}).forEach((key) => {\r\n\t\t\tthis.component.instance[key] = item.config[key];\r\n\t\t});\r\n\t}\r\n}\r\n","import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { StoreDevtoolsModule } from \"@ngrx/store-devtools\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { StoreModule } from \"@ngrx/store\";\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport {\r\n\tMatExpansionModule,\r\n\tMatSnackBarModule,\r\n\tMatIconModule,\r\n\tMatButtonModule,\r\n\tMatCardModule,\r\n\tMatSelectModule,\r\n\tMatInputModule,\r\n\tMatFormFieldModule,\r\n\tMatTabsModule,\r\n\tMatRadioModule,\r\n\tMatSlideToggleModule,\r\n\tMatDividerModule,\r\n\tMatCheckboxModule,\r\n\tMatTableModule,\r\n\tMatBottomSheetModule\r\n} from \"@angular/material\";\r\nimport { EffectsModule } from \"@ngrx/effects\";\r\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\r\nimport { GridsterModule } from \"angular-gridster2\";\r\n\r\nimport { GridModuleConfig, MODULE_CONFIG_TOKEN } from \"./grid.config\";\r\nimport { GridRoutingModule } from \"./grid-routing.module\";\r\nimport { GetGridApiEffects } from \"./services/api/get-grid/get-grid.effects\";\r\nimport { UpsertGridApiEffects } from \"./services/api/upsert-grid/upsert-grid.effects\";\r\nimport { GetGridsApiEffects } from \"./services/api/get-grids/get-grids.effects\";\r\nimport { GridReducer } from \"./grid.reducer\";\r\nimport { GridDbEffects } from \"./root/grids.effects\";\r\nimport { RootComponent } from \"./root/root.component\";\r\nimport { GridService } from \"./services/grid.service\";\r\nimport { GridConfigurationService } from \"./services/grid-configuration.service\";\r\nimport { GridComponent } from \"./grid/grid.component\";\r\nimport { GridConfigComponent } from \"./grid-config/grid-config.component\";\r\nimport {\r\n\tDynamicGridItremConfigDirective,\r\n\tDynamicGridItemConfigComponent\r\n} from \"./grid-item/dynamic-grid-item-config.directive\";\r\nimport { DynamicGridItemViewDirective } from \"./grid-item/dynamic-grid-item-view.directive\";\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n\t\tRouterModule,\r\n\t\tMatExpansionModule,\r\n\t\tMatSnackBarModule,\r\n\t\tMatIconModule,\r\n\t\tMatButtonModule,\r\n\t\tMatCardModule,\r\n\t\tMatSelectModule,\r\n\t\tMatInputModule,\r\n\t\tMatFormFieldModule,\r\n\t\tMatTabsModule,\r\n\t\tMatBottomSheetModule,\r\n\t\tMatRadioModule,\r\n\t\tFlexLayoutModule,\r\n\t\tFormsModule,\r\n\t\tReactiveFormsModule,\r\n\t\tMatSlideToggleModule,\r\n\t\tMatDividerModule,\r\n\t\tMatCheckboxModule,\r\n\t\tMatTableModule,\r\n\t\tGridsterModule\r\n\t],\r\n\tdeclarations: [\r\n\t\tRootComponent,\r\n\t\tGridComponent,\r\n\t\tGridConfigComponent,\r\n\t\tDynamicGridItremConfigDirective,\r\n\t\tDynamicGridItemConfigComponent,\r\n\t\tDynamicGridItemViewDirective\r\n\t],\r\n\tentryComponents: [ GridConfigComponent, DynamicGridItemConfigComponent ],\r\n\texports: [ GridComponent ]\r\n})\r\nexport class NgsGridModule {\r\n\tstatic forRoot(config?: GridModuleConfig): ModuleWithProviders {\r\n\t\treturn {\r\n\t\t\tngModule: NgsGridRootModule,\r\n\t\t\tproviders: [ { provide: MODULE_CONFIG_TOKEN, useValue: config }, GridConfigurationService, GridService ]\r\n\t\t};\r\n\t}\r\n}\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tNgsGridModule,\r\n\t\tGridRoutingModule,\r\n\t\tStoreModule.forFeature(\"grids\", GridReducer),\r\n\t\tEffectsModule.forFeature([ GridDbEffects, GetGridApiEffects, GetGridsApiEffects, UpsertGridApiEffects ])\r\n\t],\r\n\texports: [ NgsGridModule ]\r\n})\r\nexport class NgsGridRootModule {}\r\n"],"names":["UpsertGridApiModel","fromRoot.Reducer"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,qBAoBa,qBAAqB,GAAqB;IACtD,eAAe,EAAE,uBAAuB;IACxC,cAAc,EAAE,EAAE;IAClB,GAAG,EAAE;QACJ,UAAU,EAAE,KAAK;KACjB;IACD,SAAS,EAAE;QACV,MAAM,EAAE,gCAAgC;QACxC,IAAI,EAAE,gCAAgC;QACtC,GAAG,EAAE,6CAA6C;KAClD;IACD,KAAK,EAAE,EAAE;CACT,CAAC;AACF,qBAAa,mBAAmB,GAAG,IAAI,cAAc,CAAmB,kBAAkB,CAAC;;;;;;ACjC3F;;;;gBAEC,SAAS,SAAC;oBACV,QAAQ,EAAE,eAAe;oBACzB,QAAQ,EAAE,iCAAiC;iBAC3C;;wBALD;;;;;;;ACCA,AAGA,qBAAM,MAAM,GAAW;IACtB;QACC,IAAI,EAAE,MAAM;QACZ,SAAS,EAAE,aAAa;QACxB,QAAQ,EAAE,EAAE;KACZ;CACD,CAAC;AAEF,qBAAa,iBAAiB,GAAwB,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;;;;;;ACZnF;IAcC,kCAAyC,UAAU,EAAU,KAAsB;QAAtB,UAAK,GAAL,KAAK,CAAiB;uBADzE,IAAI,eAAe,CAAC,qBAAqB,CAAC;QAEnD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,qBAAqB,EAAE,UAAU,CAAC,CAAC;QACpE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;;;;;;;;KAQhC;IAdD,sBAAI,4CAAM;;;;QAAV;YACC,OAAO,IAAI,CAAC,OAAO,CAAC;SACpB;;;OAAA;;gBALD,UAAU;;;;gDAOG,MAAM,SAAC,mBAAmB;gBAZ/B,KAAK;;mCAFd;;;;;;;ACKA,IAAiB,kBAAkB;AAAnC,WAAiB,kBAAkB;IAClC,IAAA;QAEC,iBAAY,SAAmD;YAAnD,0BAAA,EAAA,cAAmD;YAA/D,iBAEC;YADA,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG,IAAK,QAAC,KAAI,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,IAAC,CAAC,CAAC;SACtE;;;;QAED,gCAAc;;;QAAd;YACC,OAAO,IAAI,CAAC,IAAI,CAAC;SACjB;sBAdH;QAeE,CAAA;IATY,0BAAO;IAWpB,IAAA;QAEC;SAAgB;uBAnBlB;QAoBE,CAAA;IAHY,2BAAQ;GAZL,kBAAkB,KAAlB,kBAAkB,QAgBlC;;;;;;AClBD,IAAA;IAOC,mBACC,EAUC;YAVD;;;cAUC,EATA,YAAG,EACH,YAAG,EACH,cAAI,EACJ,cAAI,EACJ,kBAAM,EACN,gBAAK;QAMN,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;KACnB;oBA7BF;IA8BC;;;;;;;;;;;AC9BD,IAEiBA,oBAAkB;AAAnC,WAAiBA,qBAAkB;IAClC,IAAA;QAEC,iBAAY,IAAS;YAAT,qBAAA,EAAA,SAAS;YACpB,SAAS;YACT,IAAI,CAAC,IAAI,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC;SAChC;;;;QAED,gCAAc;;;QAAd;YACC,OAAO,IAAI,CAAC,IAAI,CAAC;SACjB;sBAZH;QAaE,CAAA;IAVYA,6BAAO;IAYpB,IAAA;QAEC;SAAgB;uBAjBlB;QAkBE,CAAA;IAHYA,8BAAQ;GAbLA,oBAAkB,KAAlBA,oBAAkB,QAiBlC;;;;;;ACRD,IAAA;IAEC,4BAAmB,OAAe;QAAf,YAAO,GAAP,OAAO,CAAQ;;KAAI;6BAbvC;IAcC,CAAA;AAHD,AAIA,IAAA;IAEC,8BAAmB,OAAkB;QAAlB,YAAO,GAAP,OAAO,CAAW;;KAAI;+BAjB1C;IAkBC,CAAA;AAHD,AAIA,IAAA;IAEC,6BAAmB,OAAY;QAAZ,YAAO,GAAP,OAAO,CAAK;;KAAI;8BArBpC;IAsBC,CAAA;;;;;;;ICAA,qBACS,MACA,OACA,mBACA;QAHA,SAAI,GAAJ,IAAI;QACJ,UAAK,GAAL,KAAK;QACL,sBAAiB,GAAjB,iBAAiB;QACjB,yBAAoB,GAApB,oBAAoB;QAE5B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,IAAI,SAAS,GAAA,CAAC,CAAC;KACrF;;;;;IAED,yBAAG;;;;IAAH,UAAI,GAAW;QAAf,iBAeC;QAdA,OAAO,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAC5C,MAAM,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,SAAS,CAAC,GAAG,KAAK,EAAE,GAAA,CAAC,EAC/C,IAAI,CAAC,CAAC,CAAC,EACP,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,EAC3B,SAAS,CAAC,UAAC,EAAkB;gBAAlB,kBAAkB,EAAhB,cAAM,EAAE,cAAM;YAC1B,SAAS;YACT,OAAO,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,EAAE,GAAG,KAAA,EAAE,CAAC,EAAE;gBACnE,MAAM,EAAE;oBACP,MAAM,EAAE,MAAM;iBACd;aACD,CAAC,CAAC;SACH,CAAC,EACF,GAAG,CAAC,UAAC,QAAqC,IAAK,OAAA,QAAQ,CAAC,MAAM,GAAA,CAAC,CAC/D,CAAC;KACF;;;;IAED,8BAAQ;;;IAAR;QAAA,iBAMC;QALA,OAAO,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAC5C,MAAM,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,SAAS,CAAC,IAAI,IAAI,EAAE,GAAA,CAAC,EAC/C,SAAS,CAAC,UAAC,MAAM,IAAK,OAAA,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,GAAA,CAAC,EAC3D,GAAG,CAAC,UAAC,QAAmC,IAAK,OAAA,QAAQ,CAAC,MAAM,GAAA,CAAC,CAC7D,CAAC;KACF;;;;;IACD,4BAAM;;;;IAAN,UAAO,IAAgC;QAAvC,iBAeC;QAdA,qBAAM,KAAK,GAAG,IAAIA,oBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACnD,OAAO,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAC5C,MAAM,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,SAAS,CAAC,MAAM,IAAI,EAAE,GAAA,CAAC,EACjD,IAAI,CAAC,CAAC,CAAC,EACP,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,EAC3B,SAAS,CAAC,UAAC,EAAkB;gBAAlB,kBAAkB,EAAhB,cAAM,EAAE,cAAM;YAC1B,OAAO,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,cAAc,EAAE,EAAE;gBACtE,MAAM,EAAE;oBACP,MAAM,EAAE,MAAM;iBACd;aACD,CAAC,CAAC;SACH,CAAC,EACF,GAAG,CAAC,UAAC,QAAqC,IAAK,OAAA,QAAQ,CAAC,MAAM,GAAA,CAAC,CAC/D,CAAC;KACF;;;;;;;;;;IAMD,gCAAU;;;;IAAV,UAAW,GAAW;QAAtB,iBAeC;QAdA,qBAAM,OAAO,GAAG,IAAI,eAAe,CAAY,SAAS,CAAC,CAAC;QAC1D,IAAI,CAAC,KAAK;aACR,MAAM,CAAC,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,GAAA,CAAC;aACtC,IAAI,CACJ,MAAM,CAAC,UAAC,KAAK,IAAK,OAAA,KAAK,IAAI,IAAI,GAAA,CAAC,EAChC,GAAG,CAAC,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,IAAI,CAAC,UAAC,IAAI,IAAK,OAAA,IAAI,CAAC,GAAG,IAAI,GAAG,GAAA,CAAC,GAAA,CAAC,EACrD,GAAG,CAAC,UAAC,IAAI;YACR,IAAI,IAAI,IAAI,IAAI,EAAE;gBACjB,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC;aACjD;SACD,CAAC,CACF;aACA,SAAS,CAAC,UAAC,eAAe,IAAK,OAAA,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,GAAA,CAAC,CAAC;QAChE,OAAO,OAAO,CAAC,YAAY,EAAE,CAAC;KAC9B;;;;;IACD,iCAAW;;;;IAAX,UAAY,GAAW;QAAvB,iBAeC;QAdA,qBAAM,OAAO,GAAG,IAAI,eAAe,CAAY,SAAS,CAAC,CAAC;QAC1D,IAAI,CAAC,KAAK;aACR,MAAM,CAAC,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,GAAA,CAAC;aACtC,IAAI,CACJ,MAAM,CAAC,UAAC,KAAK,IAAK,OAAA,KAAK,IAAI,IAAI,GAAA,CAAC,EAChC,GAAG,CAAC,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,IAAI,CAAC,UAAC,IAAI,IAAK,OAAA,IAAI,CAAC,GAAG,IAAI,GAAG,GAAA,CAAC,GAAA,CAAC,EACrD,GAAG,CAAC,UAAC,IAAI;YACR,IAAI,IAAI,IAAI,IAAI,EAAE;gBACjB,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC;aACjD;SACD,CAAC,CACF;aACA,SAAS,CAAC,UAAC,eAAe,IAAK,OAAA,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,GAAA,CAAC,CAAC;QAChE,OAAO,OAAO,CAAC,YAAY,EAAE,CAAC;KAC9B;;gBA1FD,UAAU,SAAC;oBACX,UAAU,EAAE,MAAM;iBAClB;;;;gBAfQ,UAAU;gBADV,KAAK;gBAIL,iBAAiB;gBAGjB,wBAAwB;;;sBAVjC;;;;;;;;ICWC,2BAAoB,QAAiC,EAAU,OAAoB;QAAnF,iBAAuF;QAAnE,aAAQ,GAAR,QAAQ,CAAyB;QAAU,YAAO,GAAP,OAAO,CAAa;sBAG1E,IAAI,CAAC,QAAQ;aACpB,MAAM,0CAA6B;aACnC,IAAI,CACJ,GAAG,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,OAAO,GAAA,CAAC,EAC/B,SAAS,CAAC,UAAC,OAAO,IAAK,OAAA,KAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,GAAA,CAAC,EACjD,GAAG,CAAC,UAAC,GAAG,IAAK,OAAA,IAAI,oBAAoB,CAAC,GAAG,CAAC,GAAA,CAAC,EAC3C,UAAU,CAAC,UAAC,GAAG,IAAK,OAAA,EAAE,CAAC,IAAI,mBAAmB,CAAC,GAAG,CAAC,CAAC,GAAA,CAAC,CACrD;KAVqF;;gBAFvF,UAAU;;;;gBAPF,OAAO;gBAIP,WAAW;;;QAOlB,MAAM,EAAE;;;4BAbV;;;;;;;ACWA,IAAA;IAEC,+BAAmB,OAAkB;QAAlB,YAAO,GAAP,OAAO,CAAW;;KAAI;gCAb1C;IAcC,CAAA;AAHD,AAIA,IAAA;IAEC,iCAAmB,OAAkB;QAAlB,YAAO,GAAP,OAAO,CAAW;;KAAI;kCAjB1C;IAkBC,CAAA;AAHD,AAIA,IAAA;IAEC,gCAAmB,OAAY;QAAZ,YAAO,GAAP,OAAO,CAAK;;KAAI;iCArBpC;IAsBC,CAAA;;;;;;;ICNA,8BAAoB,QAAoC,EAAU,OAAoB;QAAtF,iBAA0F;QAAtE,aAAQ,GAAR,QAAQ,CAA4B;QAAU,YAAO,GAAP,OAAO,CAAa;sBAG7E,IAAI,CAAC,QAAQ;aACpB,MAAM,oDAAgC;aACtC,IAAI,CACJ,GAAG,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,OAAO,GAAA,CAAC,EAC/B,SAAS,CAAC,UAAC,OAAO,IAAK,OAAA,KAAI,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,GAAA,CAAC,EACpD,GAAG,CAAC,UAAC,GAAG,IAAK,OAAA,IAAI,uBAAuB,CAAC,GAAG,CAAC,GAAA,CAAC,EAC9C,UAAU,CAAC,UAAC,GAAG,IAAK,OAAA,EAAE,CAAC,IAAI,sBAAsB,CAAC,GAAG,CAAC,CAAC,GAAA,CAAC,CACxD;KAVwF;;gBAF1F,UAAU;;;;gBAZF,OAAO;gBAGP,WAAW;;;QAalB,MAAM,EAAE;;;+BAlBV;;;;;;;ACcA,IAAA;IAEC,+BAAmB,OAAoB;QAApB,YAAO,GAAP,OAAO,CAAa;;KAAI;gCAhB5C;IAiBC,CAAA;AAHD,AAIA,IAAA;IAEC,8BAAmB,OAAY;QAAZ,YAAO,GAAP,OAAO,CAAK;;KAAI;+BApBpC;IAqBC,CAAA;;;;;;;ICLA,4BAAoB,QAAkC,EAAU,OAAoB;QAApF,iBAAwF;QAApE,aAAQ,GAAR,QAAQ,CAA0B;QAAU,YAAO,GAAP,OAAO,CAAa;sBAG3E,IAAI,CAAC,QAAQ;aACpB,MAAM,gDAA8B;aACpC,IAAI,CACJ,SAAS,CAAC;YACT,OAAA,KAAI,CAAC,OAAO;iBACV,QAAQ,EAAE;iBACV,IAAI,CACJ,GAAG,CAAC,UAAC,GAAG,IAAK,OAAA,IAAI,qBAAqB,CAAC,GAAG,CAAC,GAAA,CAAC,EAC5C,UAAU,CAAC,UAAC,GAAG,IAAK,OAAA,EAAE,CAAC,IAAI,oBAAoB,CAAC,GAAG,CAAC,CAAC,GAAA,CAAC,CACtD;SAAA,CACF,CACD;KAdsF;;gBAFxF,UAAU;;;;gBAZF,OAAO;gBAIP,WAAW;;;QAYlB,MAAM,EAAE;;;6BAlBV;;;;;;;;;YCKU,mBAAmB;YACnB,mBAAmB;;AAG7B,IAAA;IAEC,0BAAmB,OAAoB;QAApB,YAAO,GAAP,OAAO,CAAa;oBADvB,gBAAgB,CAAC,MAAM;KACI;2BAX5C;IAYC,CAAA;;;;;;SCJM,EAAE;AADT,qBAAM,YAAY,GAAU;IAC3B,IAAI,IAAI;CACR,CAAC;;;;;;AAEF,iBAAwB,KAAoB,EAAE,MAAoB;IAA1C,sBAAA,EAAA,oBAAoB;IAC3C,qBAAI,KAAkB,CAAC;IACvB,QAAQ,MAAM,CAAC,IAAI;QAClB,KAAK,gBAAgB,CAAC,MAAM;YAC3B,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;YAC5B,qBAAM,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC;YAEhC,QAAQ,CAAC,OAAO,CAAC,UAAC,OAAO;gBACxB,qBAAM,gBAAgB,GAAG,KAAK,CAAC,SAAS,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,GAAG,IAAI,OAAO,CAAC,GAAG,GAAA,CAAC,CAAC;gBACtE,IAAI,gBAAgB,GAAG,CAAC,CAAC,EAAE;oBAC1B,KAAK,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;iBAC3C;qBAAM;oBACN,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBACpB;aACD,CAAC,CAAC;YAEH,oBACI,KAAK,IACR,IAAI,EAAE,KAAK,IACV;QAEH,KAAK,gBAAgB,CAAC,MAAM;YAC3B,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;YAEtC,qBAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,GAAA,CAAC,CAAC;YAC3E,KAAK,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;YAE3B,oBACI,KAAK,IACR,IAAI,EAAE,KAAK,IACV;QAEH;YACC,OAAO,KAAK,CAAC;KACd;CACD;;;;;;AC9CD,qBAOa,WAAW,GAAG;IAC1B,EAAE,EAAEC,OAAgB;CACpB;;;;;;;ICIA,uBAAoB,QAAsB;QAAtB,aAAQ,GAAR,QAAQ,CAAc;uBAGhC,IAAI,CAAC,QAAQ;aACrB,MAAM,sGAAiE;aACvE,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,GAAG,CAAC,UAAC,IAAe,IAAK,OAAA,IAAI,gBAAgB,CAAC,CAAE,IAAI,CAAE,CAAC,GAAA,CAAC,CAAC;2BAGpE,IAAI,CAAC,QAAQ;aACzB,MAAM,oDAAgC;aACtC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,GAAG,CAAC,UAAC,KAAkB,IAAK,OAAA,IAAI,gBAAgB,CAAC,KAAK,CAAC,GAAA,CAAC,CAAC;KAVpC;;gBAF9C,UAAU;;;;gBAVF,OAAO;;;QAcd,MAAM,EAAE;;;;QAKR,MAAM,EAAE;;;wBApBV;;;;;;;ACAA;IA+BC,yCACS,sBACA,UACA;QAFA,yBAAoB,GAApB,oBAAoB;QACpB,aAAQ,GAAR,QAAQ;QACR,cAAS,GAAT,SAAS;QAEjB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC;KAC7E;IAnBD,sBACI,iDAAI;;;;;QADR,UACS,IAAY;YACpB,IAAI,CAAC,IAAI;gBAAE,OAAO;YAClB,IAAI,CAAC,8CAA8C,CAAC,IAAI,CAAC,CAAC;SAC1D;;;OAAA;IACD,sBAAI,kDAAK;;;;QAAT;YACC,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC;SACrC;;;OAAA;IACD,sBAAI,mDAAM;;;;QAAV;YACC,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC;SACtC;;;OAAA;;;;IAUD,kDAAQ;;;IAAR,eAAa;;;;;IACb,wFAA8C;;;;IAA9C,UAA+C,IAAI;QAClD,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE;YACnC,qBAAM,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACvE,MAAM,IAAI,KAAK,CACd,wCAAsC,IAAI,wCACpB,cAAgB,CACtC,CAAC;SACF;QACD,qBAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,uBAAuB,CAAM,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,CAAC;QAC5G,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;;KAE3D;;gBApCD,SAAS,SAAC;oBACV,QAAQ,EAAE,4BAA4B;iBACtC;;;;gBALQ,wBAAwB;gBAPhC,wBAAwB;gBACxB,gBAAgB;;;uBAaf,KAAK;;0CAlBP;;;IA4DC,wCAAkD,IAAS;QAAT,SAAI,GAAJ,IAAI,CAAK;KAAI;IAC/D,sBAAI,kDAAM;;;;QAAV;YACC,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC;SACpC;;;OAAA;IACD,sBAAI,iDAAK;;;;QAAT;YACC,OAAO,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC;SACnC;;;OAAA;;gBAbD,SAAS,SAAC;oBACV,QAAQ,EAAE,mEAET;iBACD;;;;gDAGa,MAAM,SAAC,qBAAqB;;;mCADxC,SAAS,SAAC,+BAA+B;;yCA3D3C;;;;;;;;ICoGC,6BAAoB,KAAsB,EAAyC,IAAS;QAAxE,UAAK,GAAL,KAAK,CAAiB;QAAyC,SAAI,GAAJ,IAAI,CAAK;QAC3F,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;QAC3B,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;QACzB,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,gBAAgB,EAAE,CAAC;KACxB;;;;IACD,kCAAI;;;IAAJ;QACC,qBAAM,IAAI,gBACN,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,aAAa,CAAC,KAAK,IAC3B,MAAM,eAAO,IAAI,CAAC,eAAe,CAAC,KAAK,IACvC,CAAC;QACF,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC;KACrD;;;;IACD,8CAAgB;;;IAAhB;QACC,IAAI,CAAC,eAAe,GAAG,IAAI,SAAS,CAAC;YACpC,QAAQ,EAAE,IAAI,WAAW,CAAC,KAAK,CAAC;YAChC,WAAW,EAAE,IAAI,WAAW,CAAC,MAAM,CAAC;YACpC,WAAW,EAAE,IAAI,WAAW,CAAC,eAAe,CAAC;;YAE7C,mBAAmB,EAAE,IAAI,WAAW,CAAC,IAAI,CAAC;YAC1C,oBAAoB,EAAE,IAAI,WAAW,CAAC,KAAK,CAAC;YAC5C,0BAA0B,EAAE,IAAI,WAAW,CAAC,KAAK,CAAC;;YAElD,gBAAgB,EAAE,IAAI,WAAW,CAAC,IAAI,CAAC;;YAEvC,MAAM,EAAE,IAAI,WAAW,CAAC,IAAI,CAAC;YAC7B,WAAW,EAAE,IAAI,WAAW,CAAC,IAAI,CAAC;YAClC,cAAc,EAAE,IAAI,WAAW,CAAC,IAAI,CAAC;YACrC,gBAAgB,EAAE,IAAI,WAAW,CAAC,IAAI,CAAC;YACvC,iBAAiB,EAAE,IAAI,WAAW,CAAC,IAAI,CAAC;YACxC,eAAe,EAAE,IAAI,WAAW,CAAC,IAAI,CAAC;;YAEtC,OAAO,EAAE,IAAI,WAAW,CAAC,CAAC,CAAC;YAC3B,OAAO,EAAE,IAAI,WAAW,CAAC,CAAC,CAAC;;YAE3B,SAAS,EAAE,IAAI,SAAS,CAAC;gBACxB,OAAO,EAAE,IAAI,WAAW,EAAE;gBAC1B,UAAU,EAAE,IAAI,WAAW,CAAC,GAAG,CAAC;aAEhC,CAAC;YACF,SAAS,EAAE,IAAI,SAAS,CAAC;gBACxB,OAAO,EAAE,IAAI,WAAW,EAAE;aAC1B,CAAC;SACF,CAAC,CAAC;QACH,IAAI,CAAC,aAAa,GAAG,IAAI,SAAS,CAAC;YAClC,GAAG,EAAE,IAAI,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC;YAC9B,IAAI,EAAE,IAAI,WAAW,CAAC,EAAE,CAAC;SACzB,CAAC,CAAC;QACH,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzC,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAClD;;;;IACD,8CAAgB;;;IAAhB;QACC,IAAI,CAAC,SAAS,GAAG,CAAE,KAAK,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,OAAO,EAAE,eAAe,EAAE,iBAAiB,CAAE,CAAC;QAC9G,IAAI,CAAC,WAAW,GAAG,CAAE,MAAM,EAAE,WAAW,EAAE,aAAa,EAAE,gBAAgB,EAAE,gBAAgB,CAAE,CAAC;QAC9F,IAAI,CAAC,gBAAgB,GAAG,CAAE,QAAQ,EAAE,eAAe,EAAE,MAAM,CAAE,CAAC;KAC9D;;gBAnJD,SAAS,SAAC;oBACV,QAAQ,EAAE,+lIAgFJ;iBACN;;;;gBA1FQ,KAAK;gDAmGgC,MAAM,SAAC,qBAAqB;;8BApG1E;;;;;;;;ICuEC,uBACS,OACA,SACA,sBACA;QAHA,UAAK,GAAL,KAAK;QACL,YAAO,GAAP,OAAO;QACP,yBAAoB,GAApB,oBAAoB;QACpB,gBAAW,GAAX,WAAW;oCAnBa,IAAI,YAAY,EAAE;mCACnB,IAAI,YAAY,EAAE;gCACrB,IAAI,YAAY,EAAE;kCAChB,IAAI,YAAY,EAAE;kCAClB,IAAI,YAAY,EAAE;uCACb,IAAI,YAAY,EAAE;+BAC1B,IAAI,YAAY,EAAE;4BACrB,IAAI,YAAY,EAAE;qBAMnC,KAAK;QAQZ,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,CAAC;QACrF,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,8BAA8B,CAAC,CAAC;KACzE;;;;;;IAEM,wBAAU;;;;;IAAjB,UAAkB,IAAI,EAAE,aAAa;QACpC,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;KAChD;;;;;;IAEM,wBAAU;;;;;IAAjB,UAAkB,IAAI,EAAE,aAAa;QACpC,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;KAChD;;;;IAED,gCAAQ;;;IAAR;;QAGC,IAAI,CAAC,IAAI,GAAG,IAAI,SAAS,CAAC;YACzB,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,MAAM,EAAE,EAAE;SACV,CAAC,CAAC;QACH,IAAI,CAAC,qCAAqC,EAAE,CAAC;KAC7C;;;;;IAED,qCAAa;;;;IAAb,UAAc,IAAI;QACjB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC7B;;;;;IAED,kCAAU;;;;IAAV,UAAW,IAAI;QACd,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;KACzD;;;;;IAED,+BAAO;;;;IAAP,UAAQ,CAAC;QACR,CAAC,CAAC,eAAe,EAAE,CAAC;QACpB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,mBAAC,EAAyB,EAAC,CAAC;KAChD;;;;;;IACD,sCAAc;;;;;IAAd,UAAe,KAAiB,EAAE,IAAkB;QACnD,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;QAC7C,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,mBAAC,IAAW,EAAC,CAAC;KAClC;;;;;IACD,kCAAU;;;;IAAV,UAAW,CAAC;QACX,CAAC,CAAC,eAAe,EAAE,CAAC;QACpB,CAAC,CAAC,cAAc,EAAE,CAAC;QACnB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,mBAAmB,EAAE;YAC1C,IAAI,EAAE;gBACL,IAAI,EAAE,IAAI,CAAC,IAAI;aACf;SACD,CAAC,CAAC;KACH;;;;;IACD,kCAAU;;;;IAAV,UAAW,CAAC;QACX,CAAC,CAAC,eAAe,EAAE,CAAC;QACpB,CAAC,CAAC,wBAAwB,EAAE,CAAC;QAC7B,CAAC,CAAC,cAAc,EAAE,CAAC;;;;;;QAOnB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;KAC1D;;;;;IACD,2CAAmB;;;;IAAnB,UAAoB,IAAyB;QAC5C,qBAAM,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,8BAA8B,EAAE;YAChE,IAAI,EAAE;gBACL,IAAI,EAAE,IAAI,CAAC,IAAI;aACf;SACD,CAAC,CAAC;QACH,EAAE,CAAC,cAAc,EAAE,CAAC,SAAS,CAAC,UAAC,IAAI;YAClC,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC;YACjC,IAAI,YAAS,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC;SAC/B,CAAC,CAAC;KACH;;;;;IACD,kCAAU;;;;IAAV,UAAW,IAAyB;QACnC,qBAAM,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,8BAA8B,EAAE;YAChE,IAAI,EAAE;gBACL,IAAI,EAAE,IAAI,CAAC,IAAI;aACf;SACD,CAAC,CAAC;QACH,EAAE,CAAC,cAAc,EAAE,CAAC,SAAS,CAAC,UAAC,IAAI;YAClC,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC;YACjC,IAAI,YAAS,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC;SAC/B,CAAC,CAAC;KACH;;;;IACD,6DAAqC;;;IAArC;QAAA,iBAcC;QAbA,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAC,IAAI,IAAK,OAAA,IAAI,IAAI,SAAS,GAAA,CAAC,CAAC,CAAC,SAAS,CAAC,UAAC,IAAI;YAC1F,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACjB,KAAI,CAAC,OAAO,gBAAQ,KAAI,CAAC,OAAO,EAAK,IAAI,CAAC,MAAM,CAAE,CAAC;;;;;;YAMnD,IAAI,KAAI,CAAC,OAAO,CAAC,mBAAmB;gBAAE,KAAI,CAAC,OAAO,CAAC,qBAAqB,GAAG,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;;YAE1G,KAAI,CAAC,KAAK,GAAG,IAAI,CAAC;;SAElB,CAAC,CAAC;KACH;;gBA3JD,SAAS,SAAC;oBACV,QAAQ,EAAE,UAAU;oBACpB,QAAQ,EAAE,w/CAgCC;oBACX,MAAM,EAAE,CAAC,gLAAgL,CAAC;iBAC1L;;;;gBApDQ,KAAK;gBASL,WAAW;gBACX,wBAAwB;gBARxB,cAAc;;;uCAoDrB,MAAM;sCACN,MAAM;mCACN,MAAM;qCACN,MAAM;qCACN,MAAM;0CACN,MAAM;kCACN,MAAM;+BACN,MAAM;sBAEN,KAAK;;wBAjEP;;;;;;;ACAA;IA+BC,sCACS,sBACA,UACA;QAFA,yBAAoB,GAApB,oBAAoB;QACpB,aAAQ,GAAR,QAAQ;QACR,cAAS,GAAT,SAAS;QAEjB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC;KAC7E;IAdD,sBACI,8CAAI;;;;;QADR,UACS,IAAyB;YACjC,IAAI,CAAC,IAAI;gBAAE,OAAO;YAClB,IAAI,CAAC,IAAI,SAAM;gBAAE,OAAO;YACxB,IAAI,CAAC,8CAA8C,CAAC,IAAI,CAAC,CAAC;SAC1D;;;OAAA;;;;IAUD,+CAAQ;;;IAAR,eAAa;;;;;IACb,qFAA8C;;;;IAA9C,UAA+C,IAAyB;QAAxE,iBAcC;QAbA,SAAS;QACT,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACxC,qBAAM,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACvE,MAAM,IAAI,KAAK,CACd,wCAAsC,IAAI,CAAC,IAAI,wCACzB,cAAgB,CACtC,CAAC;SACF;QACD,qBAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,uBAAuB,CAAM,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC,CAAC;QAC/G,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QAC3D,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG;YAC1C,KAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SAChD,CAAC,CAAC;KACH;;gBAlCD,SAAS,SAAC;oBACV,QAAQ,EAAE,0BAA0B;iBACpC;;;;gBANQ,wBAAwB;gBAXhC,wBAAwB;gBACxB,gBAAgB;;;uBAkBf,KAAK,SAAC,wBAAwB;;uCAvBhC;;;;;;;ACAA;;;;;;;IAiFQ,qBAAO;;;;IAAd,UAAe,MAAyB;QACvC,OAAO;YACN,QAAQ,EAAE,iBAAiB;YAC3B,SAAS,EAAE,CAAE,EAAE,OAAO,EAAE,mBAAmB,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,wBAAwB,EAAE,WAAW,CAAE;SACxG,CAAC;KACF;;gBAzCD,QAAQ,SAAC;oBACT,OAAO,EAAE;wBACR,YAAY;wBACZ,YAAY;wBACZ,kBAAkB;wBAClB,iBAAiB;wBACjB,aAAa;wBACb,eAAe;wBACf,aAAa;wBACb,eAAe;wBACf,cAAc;wBACd,kBAAkB;wBAClB,aAAa;wBACb,oBAAoB;wBACpB,cAAc;wBACd,gBAAgB;wBAChB,WAAW;wBACX,mBAAmB;wBACnB,oBAAoB;wBACpB,gBAAgB;wBAChB,iBAAiB;wBACjB,cAAc;wBACd,cAAc;qBACd;oBACD,YAAY,EAAE;wBACb,aAAa;wBACb,aAAa;wBACb,mBAAmB;wBACnB,+BAA+B;wBAC/B,8BAA8B;wBAC9B,4BAA4B;qBAC5B;oBACD,eAAe,EAAE,CAAE,mBAAmB,EAAE,8BAA8B,CAAE;oBACxE,OAAO,EAAE,CAAE,aAAa,CAAE;iBAC1B;;wBA/ED;;;;;;gBAyFC,QAAQ,SAAC;oBACT,OAAO,EAAE;wBACR,aAAa;wBACb,iBAAiB;wBACjB,WAAW,CAAC,UAAU,CAAC,OAAO,EAAE,WAAW,CAAC;wBAC5C,aAAa,CAAC,UAAU,CAAC,CAAE,aAAa,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,oBAAoB,CAAE,CAAC;qBACxG;oBACD,OAAO,EAAE,CAAE,aAAa,CAAE;iBAC1B;;4BAjGD;;;;;;;;;;;;;;;"}
