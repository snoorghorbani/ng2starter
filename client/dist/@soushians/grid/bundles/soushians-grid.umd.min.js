!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("@angular/router"),require("rxjs"),require("@ngrx/store"),require("rxjs/operators"),require("@angular/common/http"),require("@soushians/frontend-authentication"),require("@soushians/user"),require("@soushians/shared"),require("@ngrx/effects"),require("@angular/material"),require("@angular/forms"),require("@angular/common"),require("@angular/flex-layout"),require("angular-gridster2")):"function"==typeof define&&define.amd?define("@soushians/grid",["exports","@angular/core","@angular/router","rxjs","@ngrx/store","rxjs/operators","@angular/common/http","@soushians/frontend-authentication","@soushians/user","@soushians/shared","@ngrx/effects","@angular/material","@angular/forms","@angular/common","@angular/flex-layout","angular-gridster2"],e):e((t.soushians=t.soushians||{},t.soushians.grid={}),t.ng.core,t.ng.router,t.rxjs,null,t.rxjs.operators,t.ng.common.http,null,null,null,null,t.ng.material,t.ng.forms,t.ng.common,t.ng["flex-layout"],null)}(this,function(t,a,e,i,n,c,o,s,r,p,u,l,f,d,m,g){"use strict";var h,y={env:{production:!1,frontend_server:""},endpoints:{upsert:"/api/grid",find:"/api/grid",get:"/api/grid/${model._id}",update_item:"/api/grid/item",update_item_access:"/api/grid/item/access"},types:{}},v=new a.InjectionToken("GridModuleConfig"),b=function(){function t(){}return t.decorators=[{type:a.Component,args:[{selector:"ngs-grid-root",template:"<router-outlet></router-outlet>"}]}],t}(),x=[{path:"grid",component:b,children:[]}],C=e.RouterModule.forChild(x),_=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t};function w(t,e,n,o){var i,r=arguments.length,a=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,n,o);else for(var c=t.length-1;0<=c;c--)(i=t[c])&&(a=(r<3?i(a):3<r?i(e,n,a):i(e,n))||a);return 3<r&&a&&Object.defineProperty(e,n,a),a}function F(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}!function(t){var e=function(){function t(e){void 0===e&&(e={});var n=this;Object.keys(e).forEach(function(t){return n[t]=e[t]})}return t.prototype.getRequestBody=function(){return this.grid},t}();t.Request=e;var n=function(){};t.Response=n}(h||(h={}));var I,G=function(t){var e=void 0===t?{config:{},items:[]}:t,n=e._id,o=e.oid,i=e.name,r=e.type,a=e.config,c=e.items;this._id=n,this.oid=o,this.name=i,this.type=r,this.config=a,this.items=c};!function(t){var e=function(){function t(t){void 0===t&&(t={}),this.grid=new G(t)}return t.prototype.getRequestBody=function(){return this.grid},t}();t.Request=e;var n=function(){};t.Response=n}(I||(I={}));var M=function(){function t(t,e){this.store=e,this.config$=new i.BehaviorSubject(y),this._config=Object.assign({},y,t),this.config$.next(this._config)}return Object.defineProperty(t.prototype,"config",{get:function(){return this._config},enumerable:!0,configurable:!0}),t.decorators=[{type:a.Injectable}],t.ctorParameters=function(){return[{type:undefined,decorators:[{type:a.Inject,args:[v]}]},{type:n.Store}]},t}(),T=function(t){this.payload=t,this.type="[GRID][API][GetGrid] start"},k=function(t){this.payload=t,this.type="[GRID][API][GetGrid] succeed"},R=function(t){this.payload=t,this.type="[GRID][API][GetGrid] failed"},E=function(){function t(t,e,n,o){this.http=t,this.store=e,this.userFacadeService=n,this.configurationService=o}return t.prototype.get=function(e){var n=this;return this.configurationService.config$.pipe(c.filter(function(t){return""!==t.endpoints.get}),c.take(1),c.skipUntil(this.store.select(s.getFrontendUser)),c.switchMap(function(t){return n.http.get(p.stringTemplate(t.env.frontend_server+t.endpoints.get,{_id:e}),{}).pipe(c.map(function(t){return t.Result}))}))},t.prototype.getGrids=function(){var e=this;return this.configurationService.config$.pipe(c.filter(function(t){return""!=t.endpoints.find}),c.switchMap(function(t){return e.http.get(t.env.frontend_server+t.endpoints.find)}),c.map(function(t){return t.Result}))},t.prototype.update_item=function(e){var n=this;return this.configurationService.config$.pipe(c.filter(function(t){return""!=t.endpoints.update_item}),c.switchMap(function(t){return n.http.patch(t.env.frontend_server+t.endpoints.update_item,e)}),c.map(function(t){return t.Result}))},t.prototype.update_item_access=function(e){var n=this;return this.configurationService.config$.pipe(c.filter(function(t){return""!=t.endpoints.update_item_access}),c.switchMap(function(t){return n.http.patch(t.env.frontend_server+t.endpoints.update_item_access,e)}),c.map(function(t){return t.Result}))},t.prototype.upsert=function(t){var e=this,n=new I.Request(t);return this.configurationService.config$.pipe(c.filter(function(t){return""!=t.endpoints.upsert}),c.take(1),c.switchMap(function(t){return e.http.post(t.env.frontend_server+t.endpoints.upsert,n.getRequestBody(),{})}),c.map(function(t){return t.Result}))},t.prototype.selectById=function(e){var n=this,o=new i.BehaviorSubject(undefined);return this.store.select(function(t){return t.grids.db.data}).pipe(c.filter(function(t){return null!=t}),c.map(function(t){return t.find(function(t){return t._id==e})}),c.tap(function(t){null==t&&n.store.dispatch(new T(e))})).subscribe(function(t){return o.next(t)}),o.asObservable()},t.prototype.selectByOid=function(e){var n=this,o=new i.BehaviorSubject(undefined);return this.store.select(function(t){return t.grids.db.data}).pipe(c.filter(function(t){return null!=t}),c.map(function(t){return t.find(function(t){return t._id==e})}),c.tap(function(t){null==t&&n.store.dispatch(new T(e))})).subscribe(function(t){return o.next(t)}),o.asObservable()},t.decorators=[{type:a.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[{type:o.HttpClient},{type:n.Store},{type:r.UserFacadeService},{type:M}]},t.ngInjectableDef=a.defineInjectable({factory:function(){return new t(a.inject(o.HttpClient),a.inject(n.Store),a.inject(r.UserFacadeService),a.inject(M))},token:t,providedIn:"root"}),t}(),S=function(){function t(t,e){var n=this;this.actions$=t,this.service=e,this.start$=this.actions$.ofType("[GRID][API][GetGrid] start").pipe(c.map(function(t){return t.payload}),c.switchMap(function(t){return n.service.get(t)}),c.map(function(t){return new k(t)}),c.catchError(function(t){return i.of(new R(t))}))}return t.decorators=[{type:a.Injectable}],t.ctorParameters=function(){return[{type:u.Actions},{type:E}]},w([u.Effect(),F("design:type",Object)],t.prototype,"start$",void 0),t}(),j=function(t){this.payload=t,this.type="[UPSERT_GRID][API][UpsertGrid] start"},D=function(t){this.payload=t,this.type="[UPSERT_GRID][API][UpsertGrid] succeed"},O=function(t){this.payload=t,this.type="[UPSERT_GRID][API][UpsertGrid] failed"},P=function(){function t(t,e){var n=this;this.actions$=t,this.service=e,this.start$=this.actions$.ofType("[UPSERT_GRID][API][UpsertGrid] start").pipe(c.map(function(t){return t.payload}),c.switchMap(function(t){return n.service.upsert(t)}),c.map(function(t){return new D(t)}),c.catchError(function(t){return i.of(new O(t))}))}return t.decorators=[{type:a.Injectable}],t.ctorParameters=function(){return[{type:u.Actions},{type:E}]},w([u.Effect(),F("design:type",Object)],t.prototype,"start$",void 0),t}(),$=function(t){this.payload=t,this.type="[GET_GRIDS][API][GetGrids] succeed"},L=function(t){this.payload=t,this.type="[GET_GRIDS][API][GetGrids] failed"},A=function(){function t(t,e){var n=this;this.actions$=t,this.service=e,this.start$=this.actions$.ofType("[GET_GRIDS][API][GetGrids] start").pipe(c.switchMap(function(){return n.service.getGrids().pipe(c.map(function(t){return new $(t)}),c.catchError(function(t){return i.of(new L(t))}))}))}return t.decorators=[{type:a.Injectable}],t.ctorParameters=function(){return[{type:u.Actions},{type:E}]},w([u.Effect(),F("design:type",Object)],t.prototype,"start$",void 0),t}(),U="[GRID][DB] UPSERT",N="[GRID][DB] DELETE",q=function(t){this.payload=t,this.type=U},B={data:[]};function z(t,e){var n;switch(void 0===t&&(t=B),e.type){case U:return n=t.data.concat(),e.payload.forEach(function(e){var t=n.findIndex(function(t){return t._id==e._id});-1<t?n.splice(t,1,e):n.push(e)}),_({},t,{data:n});case N:n=Object.assign({},t.data);var o=t.data.findIndex(function(t){return t._id==e.payload._id});return n.splice(o,1),_({},t,{data:n});default:return t}}var V={db:z},H=function(){function t(t){this.actions$=t,this.Upsert$=this.actions$.ofType("[GRID][API][GetGrid] succeed","[UPSERT_GRID][API][UpsertGrid] succeed").pipe(c.pluck("payload"),c.map(function(t){return new q([t])})),this.UpsertMany$=this.actions$.ofType("[GET_GRIDS][API][GetGrids] succeed").pipe(c.pluck("payload"),c.map(function(t){return new q(t)}))}return t.decorators=[{type:a.Injectable}],t.ctorParameters=function(){return[{type:u.Actions}]},w([u.Effect(),F("design:type",Object)],t.prototype,"Upsert$",void 0),w([u.Effect(),F("design:type",Object)],t.prototype,"UpsertMany$",void 0),t}(),W=function(){function t(t,e,n){this.configurationService=t,this.resolver=e,this.container=n,this.mapTypeToComponent=this.configurationService.config$.getValue().types}return Object.defineProperty(t.prototype,"type",{set:function(t){t&&this._resolve_correct_component_base_on_widget_type(t)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"valid",{get:function(){return this.component.instance.valid},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"config",{get:function(){return this.component.instance.config},enumerable:!0,configurable:!0}),t.prototype.ngOnInit=function(){},t.prototype._resolve_correct_component_base_on_widget_type=function(t){if(!this.mapTypeToComponent[t]){var e=Object.keys(this.mapTypeToComponent).join(", ");throw new Error("Trying to use an unsupported type ("+t+").\n\t\t  \t\t Supported types: "+e)}var n=this.resolver.resolveComponentFactory(this.mapTypeToComponent[t].configComponent);this.component=this.container.createComponent(n)},t.decorators=[{type:a.Directive,args:[{selector:"[ngsDynamicGridItemConfig]"}]}],t.ctorParameters=function(){return[{type:M},{type:a.ComponentFactoryResolver},{type:a.ViewContainerRef}]},t.propDecorators={type:[{type:a.Input}]},t}(),K=function(){function t(t){this.data=t}return Object.defineProperty(t.prototype,"config",{get:function(){return this.DynamicWidgetRef.config},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"valid",{get:function(){return this.DynamicWidgetRef.valid},enumerable:!0,configurable:!0}),t.decorators=[{type:a.Component,args:[{template:'\n\t<div ngsDynamicGridItemConfig [type]="data.type"></div>\n\t'}]}],t.ctorParameters=function(){return[{type:undefined,decorators:[{type:a.Inject,args:[l.MAT_BOTTOM_SHEET_DATA]}]}]},t.propDecorators={DynamicWidgetRef:[{type:a.ViewChild,args:[W]}]},t}(),J=function(){function t(t,e){this.store=t,this.data=e,this.grid=this.data.grid,this.oid=this.data.oid,this._init_properties(),this._init_form_group()}return t.prototype.save=function(){var t=_({},this.grid,this.gridFormGroup.value,{config:_({},this.configFormGroup.value)});this.store.dispatch(new j(t))},t.prototype._init_form_group=function(){this.configFormGroup=new f.FormGroup({gridType:new f.FormControl("fit"),compactType:new f.FormControl("none"),displayGrid:new f.FormControl("onDrag&Resize"),enableEmptyCellDrag:new f.FormControl(!0),enableEmptyCellClick:new f.FormControl(!1),enableEmptyCellContextMenu:new f.FormControl(!1),scrollToNewItems:new f.FormControl(!0),margin:new f.FormControl(10),outerMargin:new f.FormControl(!0),outerMarginTop:new f.FormControl(10),outerMarginRight:new f.FormControl(10),outerMarginBottom:new f.FormControl(10),outerMarginLeft:new f.FormControl(10),minCols:new f.FormControl(3),maxCols:new f.FormControl(3),draggable:new f.FormGroup({enabled:new f.FormControl,delayStart:new f.FormControl(333)}),resizable:new f.FormGroup({enabled:new f.FormControl})}),this.gridFormGroup=new f.FormGroup({oid:new f.FormControl(this.oid),name:new f.FormControl("")}),this.gridFormGroup.patchValue(this.grid),this.configFormGroup.patchValue(this.grid.config)},t.prototype._init_properties=function(){this.gridTypes=["fit","scrollVertical","scrollHorizontal","fixed","verticalFixed","horizontalFixed"],this.compactType=["none","compactUp","compactLeft","compactUp&Left","compactLeft&Up"],this.displayGridTypes=["always","onDrag&Resize","none"]},t.decorators=[{type:a.Component,args:[{template:'<h4> تنظیمات داشبورد</h4>\n<div fxLayout="column wrap" fxLayoutGap="15px">\n    <div fxFlex="100" fxLayout="row wrap" [formGroup]="gridFormGroup">\n        <mat-form-field fxFlex="20">\n            <input matInput placeholder="نام" formControlName="name">\n        </mat-form-field>\n    </div>\n    <div fxLayout="column wrap" fxLayoutGap="15px"  fxFlex="100" [formGroup]="configFormGroup">\n        <div fxLayout="row wrap" fxLayoutGap="25px">\n            <mat-form-field fxFlex="20">\n                <mat-select placeholder="نوع قرارگیری گریدها در صفحه" formControlName="gridType">\n                    <mat-option *ngFor="let item of gridTypes" [value]="item">\n                        {{item}}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <mat-form-field fxFlex="20">\n                <mat-select placeholder="نوع فشرده شدن گریدها در صفحه" formControlName="compactType">\n                    <mat-option *ngFor="let item of compactType" [value]="item">\n                        {{item}}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <mat-form-field fxFlex="20">\n                <mat-select placeholder="نشان دادن سلول‌های گرید" formControlName="displayGrid">\n                    <mat-option *ngFor="let item of displayGridTypes" [value]="item">\n                        {{item}}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n        <div fxFlex="100" fxLayout="row wrap" fxLayoutGap="25px">\n            <div fxFlex="20">\n                <mat-checkbox formControlName="enableEmptyCellDrag">ایجاد گرید با درگ کردن</mat-checkbox>\n                \x3c!-- <mat-checkbox formControlName="enableEmptyCellClick">enableEmptyCellClick</mat-checkbox> --\x3e\n            </div>\n            <div fxFlex="20" [formGroup]="configFormGroup.get(\'draggable\')">\n                <mat-checkbox formControlName="enabled">قابلیت جابجایی گریدها</mat-checkbox>\n            </div>\n            <div fxFlex="20" [formGroup]="configFormGroup.get(\'resizable\')">\n                <mat-checkbox formControlName="enabled">قابلیت تغییر سایز گریدها</mat-checkbox>\n            </div>\n        </div>\n        \x3c!-- Margins --\x3e\n        <div fxFlex="100" fxLayout="column wrap" fxLayoutGap="25px">\n            <h4 fxFlex="100">حاشیه:</h4>\n            <div fxFlex fxLayout="column" fxLayoutGap="25px">\n                <mat-checkbox fxFlex formControlName="outerMargin">امکان تنظیم فاصله گریدها</mat-checkbox>\n            </div>\n            <div fxFlex="100"  fxLayout="row wrap" fxLayoutGap="25px">\n                <mat-form-field fxFlex>\n                    <input matInput type="number" placeholder="فاصله گریدها از هم" formControlName="margin" />\n                </mat-form-field>\n                <mat-form-field fxFlex>\n                    <input matInput type="number" placeholder="فاصله گریدها ار بالا داشبورد" formControlName="outerMarginTop" />\n                </mat-form-field>\n                <mat-form-field fxFlex>\n                    <input matInput type="number" placeholder="فاصله گریدها از راست داشبورد" formControlName="outerMarginRight" />\n                </mat-form-field>\n                <mat-form-field fxFlex>\n                    <input matInput type="number" placeholder="فاصله گریدها از پایین داشبورد" formControlName="outerMarginBottom" />\n                </mat-form-field>\n                <mat-form-field fxFlex>\n                    <input matInput type="number" placeholder="فاصله گریدها از چپ داشبورد" formControlName="outerMarginLeft" />\n                </mat-form-field>\n            </div>\n        </div>\n        \x3c!-- Grid Size --\x3e\n        <div fxFlex="100" fxLayout="row wrap" fxLayoutGap="25px">\n            <h4 fxFlex="100">تعداد ستون‌ها:</h4>\n            <mat-form-field fxFlex="18">\n                <input matInput type="number" placeholder="کمترین ستون" formControlName="minCols" />\n            </mat-form-field>\n            <mat-form-field fxFlex="18">\n                <input matInput type="number" placeholder="بیشترین ستون" formControlName="maxCols" />\n            </mat-form-field>\n        </div> \n        <div fxFlex="20" fxLayoutAlign="flex-end center" fxLayout="row wrap" fxLayoutGap="25px">\n         <button color="primary" mat-raised-button (click)="save()">ذخیره</button>\n    </div>\n</div>\n</div>'}]}],t.ctorParameters=function(){return[{type:n.Store},{type:undefined,decorators:[{type:a.Inject,args:[l.MAT_BOTTOM_SHEET_DATA]}]}]},t}(),Q=function(){function t(t,e,n,o,i){var r=this;this.store=t,this.service=e,this.userFacadeService=n,this.configurationService=o,this.bottomSheet=i,this.itemValidateCallback=new a.EventEmitter,this.itemRemovedCallback=new a.EventEmitter,this.itemInitCallback=new a.EventEmitter,this.itemResizeCallback=new a.EventEmitter,this.itemChangeCallback=new a.EventEmitter,this.gridSizeChangedCallback=new a.EventEmitter,this.destroyCallback=new a.EventEmitter,this.initCallback=new a.EventEmitter,this.ready=!1,this.options={},this.userFacadeService.getInfo().pipe(c.filter(function(t){return t.CurrentSession!=undefined}),c.map(function(t){return t.CurrentSession.Username})).subscribe(function(t){r.username=t}),this.gridItemTypes=Object.keys(this.configurationService.config$.getValue().types),this.havePermission$=this.store.select(s.getFrontendAuthenticationState)}return t.itemChange=function(t,e){console.log("itemChanged",t,e)},t.itemResize=function(t,e){console.log("itemResized",t,e)},t.prototype.ngOnInit=function(){this.grid=new G({oid:this.oid,config:{}}),this._get_grid_by_oid_and_update_component()},t.prototype._initCallback=function(t){this.initCallback.emit(t)},t.prototype.removeItem=function(t){this.grid.items.splice(this.grid.items.indexOf(t),1)},t.prototype.make_public=function(t,e){t.access=e.checked?"public":"private",this.service.update_item_access(t).subscribe(function(t){})},t.prototype.addItem=function(t){t.stopPropagation(),this.grid.items.push({})},t.prototype.emptyCellClick=function(t,e){console.log("empty cell click",t,e),this.grid.items.push(e)},t.prototype.openConfig=function(t){t.stopPropagation(),t.preventDefault(),this.bottomSheet.open(J,{data:{grid:this.grid}})},t.prototype.saveConfig=function(t){t.stopPropagation(),t.stopImmediatePropagation(),t.preventDefault(),this.store.dispatch(new j(this.grid))},t.prototype.gridItemTypeChanged=function(e){var n=this.bottomSheet.open(K,{data:{type:e.type}});n.afterDismissed().subscribe(function(t){e.config=n.instance.config,e.valid=n.instance.valid})},t.prototype.showConfig=function(e){var n=this.bottomSheet.open(K,{data:{type:e.type}});n.afterDismissed().subscribe(function(t){e.config=n.instance.config,e.valid=n.instance.valid})},t.prototype._get_grid_by_oid_and_update_component=function(){var e=this;this.service.selectById(this.oid).pipe(c.filter(function(t){return t!=undefined})).subscribe(function(t){e.grid=t,e.options=_({},e.options,t.config),e.options.enableEmptyCellDrag&&(e.options.emptyCellDragCallback=e.emptyCellClick.bind(e)),e.ready=!0})},t.decorators=[{type:a.Component,args:[{selector:"ngs-grid",template:'<gridster [options]="options">\n    <div class="actions">\n        <button mat-mini-fab (click)="addItem($event)">\n            <mat-icon>add</mat-icon>\n        </button>\n        <button mat-mini-fab (click)="openConfig($event)" *ngIf="havePermission$ | async">\n            <mat-icon>dashboard</mat-icon>\n        </button>\n        <button mat-mini-fab (click)="saveConfig($event)">\n            <mat-icon>done</mat-icon>\n        </button>\n    </div>\n    <gridster-item [item]="item" *ngFor="let item of grid.items">\n        <div class="initializer" fxLayout="row" fxLayoutAlign="space-between center">\n            <div fxFlex="nogrow"> \n                <button mat-icon-button [matMenuTriggerFor]="menu">\n                    <mat-icon>more_horiz</mat-icon>\n                </button>\n                <mat-menu #menu="matMenu">\n                    <mat-checkbox *ngIf="grid.owner == username" labelPosition="before" [checked]="item.access==\'public\'" (change)="make_public(item,$event)">عمومی</mat-checkbox>\n                    <button mat-menu-item (click)="showConfig(item)">\n                        <mat-icon>settings</mat-icon>\n                        <span>تنظیمات</span>\n                    </button>\n                    <button mat-menu-item  *ngIf="item.type" (click)="removeItem(item)">\n                        <mat-icon>delete</mat-icon>\n                        <span>حذف</span>\n                    </button>\n                </mat-menu>\n            </div>\n        </div>\n        <div class="widget-content">\n            <div *ngIf="!item.valid" fxFlex="100" class="form-container">\n                <h4>تنظیمات</h4>\n                <mat-form-field fxFlex="grow">\n                    <mat-select placeholder="Grid Item Type" [(ngModel)]="item.type" (selectionChange)="gridItemTypeChanged(item)">\n                        <mat-option *ngFor="let item of gridItemTypes" [value]="item">\n                            {{item}}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n        <div *ngIf="item.valid" [ngsDynamicGridItemView]="item"></div>\n    </div>\n    </gridster-item>\n</gridster>\n\n            \x3c!-- \n                <button mat-icon-button (click)="removeItem(item)">\n                    <mat-icon>delete</mat-icon>\n                </button>\n                <button *ngIf="item.type" mat-icon-button (click)="showConfig(item)">\n                    <mat-icon>settings</mat-icon>\n                </button>\n            </div> --\x3e\n',styles:[":host{width:100%;height:100vh;display:block;direction:ltr}.initializer{position:absolute;z-index:10;top:5px;left:5px;height:25px}.actions{position:absolute;top:25px;right:25px;z-index:5}.actions button{margin-left:10px}.widget-content{position:relative;height:100%}.form-container{padding:25px;width:100%;direction:rtl}.form-container mat-form-field{width:100%}"]}]}],t.ctorParameters=function(){return[{type:n.Store},{type:E},{type:r.UserFacadeService},{type:M},{type:l.MatBottomSheet}]},t.propDecorators={itemValidateCallback:[{type:a.Output}],itemRemovedCallback:[{type:a.Output}],itemInitCallback:[{type:a.Output}],itemResizeCallback:[{type:a.Output}],itemChangeCallback:[{type:a.Output}],gridSizeChangedCallback:[{type:a.Output}],destroyCallback:[{type:a.Output}],initCallback:[{type:a.Output}],oid:[{type:a.Input}]},t}(),X=function(){function t(t,e,n){this.configurationService=t,this.resolver=e,this.container=n,this.mapTypeToComponent=this.configurationService.config$.getValue().types}return Object.defineProperty(t.prototype,"item",{set:function(t){t&&t.valid&&this._resolve_correct_component_base_on_widget_type(t)},enumerable:!0,configurable:!0}),t.prototype.ngOnInit=function(){},t.prototype._resolve_correct_component_base_on_widget_type=function(e){var n=this;if(!this.mapTypeToComponent[e.type]){var t=Object.keys(this.mapTypeToComponent).join(", ");throw new Error("Trying to use an unsupported type ("+e.type+").\n\t\t  \t\t Supported types: "+t)}var o=this.resolver.resolveComponentFactory(this.mapTypeToComponent[e.type].viewComponent);this.component=this.container.createComponent(o),Object.keys(e.config||{}).forEach(function(t){n.component.instance[t]=e.config[t]})},t.decorators=[{type:a.Directive,args:[{selector:"[ngsDynamicGridItemView]"}]}],t.ctorParameters=function(){return[{type:M},{type:a.ComponentFactoryResolver},{type:a.ViewContainerRef}]},t.propDecorators={item:[{type:a.Input,args:["ngsDynamicGridItemView"]}]},t}(),Y=function(){function t(){}return t.forRoot=function(t){return{ngModule:Z,providers:[{provide:v,useValue:t},M,E]}},t.decorators=[{type:a.NgModule,args:[{imports:[d.CommonModule,e.RouterModule,l.MatExpansionModule,l.MatSnackBarModule,l.MatIconModule,l.MatButtonModule,l.MatCardModule,l.MatSelectModule,l.MatInputModule,l.MatFormFieldModule,l.MatTabsModule,l.MatBottomSheetModule,l.MatRadioModule,m.FlexLayoutModule,l.MatMenuModule,l.MatToolbarModule,f.FormsModule,f.ReactiveFormsModule,l.MatSlideToggleModule,l.MatDividerModule,l.MatCheckboxModule,l.MatTableModule,g.GridsterModule],declarations:[b,Q,J,W,K,X],entryComponents:[J,K],exports:[Q]}]}],t}(),Z=function(){function t(){}return t.decorators=[{type:a.NgModule,args:[{imports:[Y,C,n.StoreModule.forFeature("grids",V),u.EffectsModule.forFeature([H,S,A,P])],exports:[Y]}]}],t}();t.GridModel=G,t.NgsGridModule=Y,t.NgsGridRootModule=Z,t.MODULE_DEFAULT_CONFIG=y,t.MODULE_CONFIG_TOKEN=v,t.ɵg=J,t.ɵi=K,t.ɵh=W,t.ɵj=X,t.ɵk=C,t.ɵc=V,t.ɵb=Q,t.ɵm=H,t.ɵl=z,t.ɵa=b,t.ɵn=S,t.ɵp=A,t.ɵr=P,t.ɵf=M,t.ɵe=E,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=soushians-grid.umd.min.js.map