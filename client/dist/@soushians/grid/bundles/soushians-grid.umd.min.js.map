{"version":3,"sources":["ng://@soushians/grid/lib/grid.config.ts","ng://@soushians/grid/lib/root/root.component.ts","ng://@soushians/grid/lib/grid-routing.module.ts","null","ng://@soushians/grid/lib/services/grid-configuration.service.ts","ng://@soushians/grid/lib/models/upsert-grid.api-model.ts","ng://@soushians/grid/lib/models/grid.model.ts","ng://@soushians/grid/lib/services/api/upsert-grid/upsert-grid.model.ts","ng://@soushians/grid/lib/services/api/get-grid/get-grid.actions.ts","ng://@soushians/grid/lib/services/grid.service.ts","ng://@soushians/grid/lib/services/api/get-grid/get-grid.effects.ts","ng://@soushians/grid/lib/services/api/upsert-grid/upsert-grid.actions.ts","ng://@soushians/grid/lib/services/api/upsert-grid/upsert-grid.effects.ts","ng://@soushians/grid/lib/services/api/get-grids/get-grids.actions.ts","ng://@soushians/grid/lib/services/api/get-grids/get-grids.effects.ts","ng://@soushians/grid/lib/root/widget.actions.ts","ng://@soushians/grid/lib/root/grids.reducers.ts","ng://@soushians/grid/lib/grid.reducer.ts","ng://@soushians/grid/lib/root/grids.effects.ts","ng://@soushians/grid/lib/grid-item/dynamic-grid-item-config.directive.ts","ng://@soushians/grid/lib/grid-config/grid-config.component.ts","ng://@soushians/grid/lib/grid/grid.component.ts","ng://@soushians/grid/lib/grid-item/dynamic-grid-item-view.directive.ts","ng://@soushians/grid/lib/grid.module.ts"],"names":["MODULE_DEFAULT_CONFIG","development_uri","production_uri","env","production","endpoints","upsert","find","get","types","MODULE_CONFIG_TOKEN","InjectionToken","RootComponent","Component","args","selector","template","routes","path","component","children","GridRoutingModule","RouterModule","forChild","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","__decorate","decorators","target","key","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","UpsertGridApiModel","GridConfigurationService","configFile","store","this","BehaviorSubject","_config","config$","next","Injectable","Inject","Store","Request","initValue","_this","keys","forEach","getRequestBody","grid","Response","GridModel","_a","_b","_id","oid","name","type","config","items","GetGridStartAction","payload","GetGridSucceedAction","GetGridFailedAction","GridService","http","configurationService","pipe","filter","take","switchMap","stringTemplate","map","response","Result","getGrids","model","post","selectById","subject","undefined","select","state","grids","db","data","tap","dispatch","subscribe","FormSchemaModel","asObservable","selectByOid","providedIn","HttpClient","GetGridApiEffects","actions$","service","ofType","action","res","catchError","err","of","Actions","Effect","UpsertGridStartAction","UpsertGridSucceedAction","UpsertGridFailedAction","UpsertGridApiEffects","GetGridsSucceedAction","GetGridsFailedAction","GetGridsApiEffects","UpsertGridAction","GridsActionTypes","initialState","Reducer","_data","concat","newGrid","existedGridIndex","findIndex","w","splice","push","gridIndex","GridReducer","fromRoot.Reducer","GridDbEffects","pluck","DynamicGridItremConfigDirective","resolver","container","mapTypeToComponent","getValue","_resolve_correct_component_base_on_widget_type","instance","valid","ngOnInit","supportedTypes","join","Error","resolveComponentFactory","configComponent","createComponent","Directive","ComponentFactoryResolver","ViewContainerRef","Input","DynamicGridItemConfigComponent","DynamicWidgetRef","MAT_BOTTOM_SHEET_DATA","ViewChild","GridConfigComponent","_init_properties","_init_form_group","save","gridFormGroup","value","configFormGroup","FormGroup","gridType","FormControl","compactType","displayGrid","enableEmptyCellDrag","scrollToNewItems","margin","outerMargin","outerMarginTop","outerMarginRight","outerMarginBottom","outerMarginLeft","minCols","maxCols","draggable","enabled","delayStart","resizable","patchValue","gridTypes","displayGridTypes","GridComponent","bottomSheet","EventEmitter","options","gridItemTypes","itemChange","item","itemComponent","console","log","itemResize","_get_grid_by_oid_and_update_component","_initCallback","initCallback","emit","removeItem","indexOf","addItem","emptyCellClick","event","openConfig","open","gridItemTypeChanged","bs","afterDismissed","showConfig","emptyCellDragCallback","bind","ready","styles","MatBottomSheet","Output","DynamicGridItemViewDirective","viewComponent","NgsGridModule","forRoot","ngModule","NgsGridRootModule","providers","provide","useValue","NgModule","imports","CommonModule","MatExpansionModule","MatSnackBarModule","MatIconModule","MatButtonModule","MatCardModule","MatSelectModule","MatInputModule","MatFormFieldModule","MatTabsModule","MatBottomSheetModule","MatRadioModule","FlexLayoutModule","FormsModule","ReactiveFormsModule","MatSlideToggleModule","MatDividerModule","MatCheckboxModule","MatTableModule","GridsterModule","declarations","entryComponents","exports","StoreModule","forFeature","EffectsModule"],"mappings":"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","sourcesContent":["import { InjectionToken } from \"@angular/core\";\r\nexport interface IGridType {\r\n\tupsertComponet?: any;\r\n\tconfigComponent?: any;\r\n\ttype?: \"simple\" | \"complex\";\r\n\tviewComponent: any;\r\n}\r\nexport interface GridModuleConfig {\r\n\tdevelopment_uri?: string;\r\n\tproduction_uri?: string;\r\n\tenv?: {\r\n\t\tproduction: boolean;\r\n\t};\r\n\tendpoints?: {\r\n\t\tget: string;\r\n\t\tfind: string;\r\n\t\tupsert: string;\r\n\t};\r\n\ttypes?: { [key: string]: IGridType };\r\n}\r\nexport const MODULE_DEFAULT_CONFIG: GridModuleConfig = {\r\n\tdevelopment_uri: \"http://localhost:3000\",\r\n\tproduction_uri: \"\",\r\n\tenv: {\r\n\t\tproduction: false\r\n\t},\r\n\tendpoints: {\r\n\t\tupsert: \"http://localhost:3000/api/grid\",\r\n\t\tfind: \"http://localhost:3000/api/grid\",\r\n\t\tget: \"http://localhost:3000/api/grid/${model._id}\"\r\n\t},\r\n\ttypes: {}\r\n};\r\nexport const MODULE_CONFIG_TOKEN = new InjectionToken<GridModuleConfig>(\"GridModuleConfig\");\r\n","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n\tselector: \"ngs-grid-root\",\r\n\ttemplate: \"<router-outlet></router-outlet>\"\r\n})\r\nexport class RootComponent {}\r\n","import { ModuleWithProviders } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\nimport { RootComponent } from \"./root/root.component\";\r\n\r\nconst routes: Routes = [\r\n\t{\r\n\t\tpath: \"grid\",\r\n\t\tcomponent: RootComponent,\r\n\t\tchildren: []\r\n\t}\r\n];\r\n\r\nexport const GridRoutingModule: ModuleWithProviders = RouterModule.forChild(routes);\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { BehaviorSubject } from \"rxjs\";\r\nimport { Inject, Injectable } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { GridModuleConfig, MODULE_DEFAULT_CONFIG, MODULE_CONFIG_TOKEN } from \"../grid.config\";\r\nimport { AppState } from \"../grid.reducer\";\r\n\r\n@Injectable()\r\nexport class GridConfigurationService {\r\n\tprivate _config: GridModuleConfig;\r\n\tget config() {\r\n\t\treturn this._config;\r\n\t}\r\n\tconfig$ = new BehaviorSubject(MODULE_DEFAULT_CONFIG);\r\n\tconstructor(@Inject(MODULE_CONFIG_TOKEN) configFile, private store: Store<AppState>) {\r\n\t\tthis._config = Object.assign({}, MODULE_DEFAULT_CONFIG, configFile);\r\n\t\tthis.config$.next(this._config);\r\n\t\t// this.store.select(getGridModuleConfig).subscribe((gridConfig) => {\r\n\t\t// \tif (!gridConfig) {\r\n\t\t// \t\treturn;\r\n\t\t// \t}\r\n\t\t// \tthis._config = Object.assign({}, this._config, gridConfig.Config);\r\n\t\t// \tthis.config$.next(this._config);\r\n\t\t// });\r\n\t}\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { GridModel } from \"./grid.model\";\r\n\r\nexport namespace UpsertGridApiModel {\r\n\texport class Request {\r\n\t\tgrid: GridModel;\r\n\t\tconstructor(initValue: Partial<UpsertGridApiModel.Request> = {}) {\r\n\t\t\tObject.keys(initValue).forEach((key) => (this[key] = initValue[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn this.grid;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: GridModel;\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","import { GridsterConfig } from \"angular-gridster2\";\r\nimport { IGridItemModel } from \"./gird-item.model\";\r\n\r\nexport class GridModel {\r\n\t_id: string;\r\n\toid: string;\r\n\tname: string;\r\n\ttype: string;\r\n\tconfig: GridsterConfig;\r\n\titems: IGridItemModel<any>[];\r\n\tconstructor(\r\n\t\t{\r\n\t\t\t_id,\r\n\t\t\toid,\r\n\t\t\tname,\r\n\t\t\ttype,\r\n\t\t\tconfig,\r\n\t\t\titems\r\n\t\t}: { _id?: string; oid?: string; name?: string; type?: string; config?: GridsterConfig; items?: any[] } = {\r\n\t\t\tconfig: {},\r\n\t\t\titems: []\r\n\t\t}\r\n\t) {\r\n\t\tthis._id = _id;\r\n\t\tthis.oid = oid;\r\n\t\tthis.name = name;\r\n\t\tthis.type = type;\r\n\t\tthis.config = config;\r\n\t\tthis.items = items;\r\n\t}\r\n}\r\n","import { GridModel } from \"../../../models\";\r\n\r\nexport namespace UpsertGridApiModel {\r\n\texport class Request {\r\n\t\tgrid: GridModel;\r\n\t\tconstructor(grid = {}) {\r\n\t\t\tdebugger;\r\n\t\t\tthis.grid = new GridModel(grid);\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn this.grid;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: GridModel;\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { GetGridApiModel } from \"./get-grid.model\";\r\nimport { GridModel } from \"../../../models/grid.model\";\r\n\r\nexport const enum GET_GRID_ACTION_TYPES {\r\n\tSTART = \"[GRID][API][GetGrid] start\",\r\n\tSUCCEED = \"[GRID][API][GetGrid] succeed\",\r\n\tFAILED = \"[GRID][API][GetGrid] failed\"\r\n}\r\n\r\nexport class GetGridStartAction implements Action {\r\n\treadonly type = GET_GRID_ACTION_TYPES.START;\r\n\tconstructor(public payload: string) {}\r\n}\r\nexport class GetGridSucceedAction implements Action {\r\n\treadonly type = GET_GRID_ACTION_TYPES.SUCCEED;\r\n\tconstructor(public payload: GridModel) {}\r\n}\r\nexport class GetGridFailedAction implements Action {\r\n\treadonly type = GET_GRID_ACTION_TYPES.FAILED;\r\n\tconstructor(public payload: any) {}\r\n}\r\n\r\nexport type GetGridActions = GetGridStartAction | GetGridSucceedAction | GetGridFailedAction;\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable, BehaviorSubject } from \"rxjs\";\r\nimport { map, filter, tap, take, switchMap } from \"rxjs/operators\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\n\r\nimport { stringTemplate } from \"@soushians/shared\";\r\n\r\nimport { AppState } from \"../grid.reducer\";\r\nimport { GridConfigurationService } from \"./grid-configuration.service\";\r\nimport { GridModel } from \"../models\";\r\nimport { UpsertGridApiModel } from \"./api/upsert-grid/upsert-grid.model\";\r\nimport { GetGridsApiModel } from \"./api/get-grids/get-grids.model\";\r\nimport { GetGridStartAction } from \"./api/get-grid/get-grid.actions\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class GridService {\r\n\tconstructor(\r\n\t\tprivate http: HttpClient,\r\n\t\tprivate store: Store<AppState>,\r\n\t\tprivate configurationService: GridConfigurationService\r\n\t) {}\r\n\r\n\tget(_id: string): Observable<GridModel> {\r\n\t\treturn this.configurationService.config$.pipe(\r\n\t\t\tfilter((config) => config.endpoints.get !== \"\"),\r\n\t\t\ttake(1),\r\n\t\t\tswitchMap((config) => this.http.get(stringTemplate(config.endpoints.get, { _id }))),\r\n\t\t\tmap((response: UpsertGridApiModel.Response) => response.Result)\r\n\t\t);\r\n\t}\r\n\r\n\tgetGrids(): Observable<GridModel[]> {\r\n\t\treturn this.configurationService.config$.pipe(\r\n\t\t\tfilter((config) => config.endpoints.find != \"\"),\r\n\t\t\tswitchMap((config) => this.http.get(config.endpoints.find)),\r\n\t\t\tmap((response: GetGridsApiModel.Response) => response.Result)\r\n\t\t);\r\n\t}\r\n\tupsert(grid: UpsertGridApiModel.Request): Observable<GridModel> {\r\n\t\tconst model = new UpsertGridApiModel.Request(grid);\r\n\t\treturn this.configurationService.config$.pipe(\r\n\t\t\tfilter((config) => config.endpoints.upsert != \"\"),\r\n\t\t\ttake(1),\r\n\t\t\tswitchMap((config) => this.http.post(config.endpoints.upsert, model.getRequestBody())),\r\n\t\t\tmap((response: UpsertGridApiModel.Response) => response.Result)\r\n\t\t);\r\n\t}\r\n\t// delete(_id: string) {\r\n\t// \treturn this.configurationService.config$\r\n\t// \t\t.filter((config) => config.endpoints.deleteForm != \"\")\r\n\t// \t\t.switchMap((config) => this.http.get(config.endpoints.deleteForm));\r\n\t// }\r\n\tselectById(_id: string): Observable<GridModel> {\r\n\t\tconst subject = new BehaviorSubject<GridModel>(undefined);\r\n\t\tthis.store\r\n\t\t\t.select((state) => state.grids.db.data)\r\n\t\t\t.pipe(\r\n\t\t\t\tfilter((grids) => grids != null),\r\n\t\t\t\tmap((grids) => grids.find((grid) => grid._id == _id)),\r\n\t\t\t\ttap((grid) => {\r\n\t\t\t\t\tif (grid == null) {\r\n\t\t\t\t\t\tthis.store.dispatch(new GetGridStartAction(_id));\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t\t.subscribe((FormSchemaModel) => subject.next(FormSchemaModel));\r\n\t\treturn subject.asObservable();\r\n\t}\r\n\tselectByOid(_id: string): Observable<GridModel> {\r\n\t\tconst subject = new BehaviorSubject<GridModel>(undefined);\r\n\t\tthis.store\r\n\t\t\t.select((state) => state.grids.db.data)\r\n\t\t\t.pipe(\r\n\t\t\t\tfilter((grids) => grids != null),\r\n\t\t\t\tmap((grids) => grids.find((grid) => grid._id == _id)),\r\n\t\t\t\ttap((grid) => {\r\n\t\t\t\t\tif (grid == null) {\r\n\t\t\t\t\t\tthis.store.dispatch(new GetGridStartAction(_id));\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t\t.subscribe((FormSchemaModel) => subject.next(FormSchemaModel));\r\n\t\treturn subject.asObservable();\r\n\t}\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\nimport { of } from \"rxjs\";\r\n\r\nimport { GridService } from \"../../grid.service\";\r\nimport { GET_GRID_ACTION_TYPES, GetGridActions, GetGridSucceedAction, GetGridFailedAction } from \"./get-grid.actions\";\r\n\r\n@Injectable()\r\nexport class GetGridApiEffects {\r\n\tconstructor(private actions$: Actions<GetGridActions>, private service: GridService) {}\r\n\r\n\t@Effect()\r\n\tstart$ = this.actions$\r\n\t\t.ofType(GET_GRID_ACTION_TYPES.START)\r\n\t\t.pipe(\r\n\t\t\tmap((action) => action.payload),\r\n\t\t\tswitchMap((payload) => this.service.get(payload)),\r\n\t\t\tmap((res) => new GetGridSucceedAction(res)),\r\n\t\t\tcatchError((err) => of(new GetGridFailedAction(err)))\r\n\t\t);\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { UpsertGridApiModel } from \"./upsert-grid.model\";\r\nimport { GridModel } from \"../../../models/grid.model\";\r\n\r\nexport const enum UPSERT_GRID_ACTION_TYPES {\r\n\tSTART = \"[UPSERT_GRID][API][UpsertGrid] start\",\r\n\tSUCCEED = \"[UPSERT_GRID][API][UpsertGrid] succeed\",\r\n\tFAILED = \"[UPSERT_GRID][API][UpsertGrid] failed\"\r\n}\r\n\r\nexport class UpsertGridStartAction implements Action {\r\n\treadonly type = UPSERT_GRID_ACTION_TYPES.START;\r\n\tconstructor(public payload: GridModel) {}\r\n}\r\nexport class UpsertGridSucceedAction implements Action {\r\n\treadonly type = UPSERT_GRID_ACTION_TYPES.SUCCEED;\r\n\tconstructor(public payload: GridModel) {}\r\n}\r\nexport class UpsertGridFailedAction implements Action {\r\n\treadonly type = UPSERT_GRID_ACTION_TYPES.FAILED;\r\n\tconstructor(public payload: any) {}\r\n}\r\n\r\nexport type UpsertGridActions = UpsertGridStartAction | UpsertGridSucceedAction | UpsertGridFailedAction;\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\n\r\nimport { GridService } from \"../../grid.service\";\r\nimport {\r\n\tUPSERT_GRID_ACTION_TYPES,\r\n\tUpsertGridActions,\r\n\tUpsertGridSucceedAction,\r\n\tUpsertGridFailedAction\r\n} from \"./upsert-grid.actions\";\r\nimport { of } from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class UpsertGridApiEffects {\r\n\tconstructor(private actions$: Actions<UpsertGridActions>, private service: GridService) {}\r\n\r\n\t@Effect()\r\n\tstart$ = this.actions$\r\n\t\t.ofType(UPSERT_GRID_ACTION_TYPES.START)\r\n\t\t.pipe(\r\n\t\t\tmap((action) => action.payload),\r\n\t\t\tswitchMap((payload) => this.service.upsert(payload)),\r\n\t\t\tmap((res) => new UpsertGridSucceedAction(res)),\r\n\t\t\tcatchError((err) => of(new UpsertGridFailedAction(err)))\r\n\t\t);\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { GetGridsApiModel } from \"./get-grids.model\";\r\nimport { GridModel } from \"../../../models/grid.model\";\r\n\r\nexport const enum GET_GRIDS_ACTION_TYPES {\r\n\tSTART = \"[GET_GRIDS][API][GetGrids] start\",\r\n\tSUCCEED = \"[GET_GRIDS][API][GetGrids] succeed\",\r\n\tFAILED = \"[GET_GRIDS][API][GetGrids] failed\"\r\n}\r\n\r\nexport class GetGridsStartAction implements Action {\r\n\treadonly type = GET_GRIDS_ACTION_TYPES.START;\r\n}\r\nexport class GetGridsSucceedAction implements Action {\r\n\treadonly type = GET_GRIDS_ACTION_TYPES.SUCCEED;\r\n\tconstructor(public payload: GridModel[]) {}\r\n}\r\nexport class GetGridsFailedAction implements Action {\r\n\treadonly type = GET_GRIDS_ACTION_TYPES.FAILED;\r\n\tconstructor(public payload: any) {}\r\n}\r\n\r\nexport type GetGridsActions = GetGridsStartAction | GetGridsSucceedAction | GetGridsFailedAction;\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\nimport { of } from \"rxjs\";\r\n\r\nimport { GridService } from \"../../grid.service\";\r\nimport {\r\n\tGET_GRIDS_ACTION_TYPES,\r\n\tGetGridsActions,\r\n\tGetGridsSucceedAction,\r\n\tGetGridsFailedAction\r\n} from \"./get-grids.actions\";\r\n\r\n@Injectable()\r\nexport class GetGridsApiEffects {\r\n\tconstructor(private actions$: Actions<GetGridsActions>, private service: GridService) {}\r\n\r\n\t@Effect()\r\n\tstart$ = this.actions$\r\n\t\t.ofType(GET_GRIDS_ACTION_TYPES.START)\r\n\t\t.pipe(\r\n\t\t\tswitchMap(() =>\r\n\t\t\t\tthis.service\r\n\t\t\t\t\t.getGrids()\r\n\t\t\t\t\t.pipe(\r\n\t\t\t\t\t\tmap((res) => new GetGridsSucceedAction(res)),\r\n\t\t\t\t\t\tcatchError((err) => of(new GetGridsFailedAction(err)))\r\n\t\t\t\t\t)\r\n\t\t\t)\r\n\t\t);\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { GridModel } from \"../models\";\r\n\r\nexport enum GridsActionTypes {\r\n\tUPSERT = \"[GRID][DB] UPSERT\",\r\n\tDELETE = \"[GRID][DB] DELETE\"\r\n}\r\n\r\nexport class UpsertGridAction implements Action {\r\n\treadonly type = GridsActionTypes.UPSERT;\r\n\tconstructor(public payload: GridModel[]) {}\r\n}\r\nexport class DeleteGridAction implements Action {\r\n\treadonly type = GridsActionTypes.DELETE;\r\n\tconstructor(public payload: GridModel) {}\r\n}\r\n\r\nexport type GridsActions = UpsertGridAction | DeleteGridAction;\r\n","import { GridModel } from \"../models\";\r\nimport { GridsActionTypes, GridsActions } from \"./widget.actions\";\r\n\r\nexport interface State {\r\n\tdata: GridModel[];\r\n}\r\n\r\nconst initialState: State = {\r\n\tdata: []\r\n};\r\n\r\nexport function Reducer(state = initialState, action: GridsActions): State {\r\n\tlet _data: GridModel[];\r\n\tswitch (action.type) {\r\n\t\tcase GridsActionTypes.UPSERT:\r\n\t\t\t_data = state.data.concat();\r\n\t\t\tconst newGrids = action.payload;\r\n\r\n\t\t\tnewGrids.forEach((newGrid) => {\r\n\t\t\t\tconst existedGridIndex = _data.findIndex((w) => w._id == newGrid._id);\r\n\t\t\t\tif (existedGridIndex > -1) {\r\n\t\t\t\t\t_data.splice(existedGridIndex, 1, newGrid);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t_data.push(newGrid);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: _data\r\n\t\t\t};\r\n\r\n\t\tcase GridsActionTypes.DELETE:\r\n\t\t\t_data = Object.assign({}, state.data);\r\n\r\n\t\t\tconst gridIndex = state.data.findIndex((w) => w._id == action.payload._id);\r\n\t\t\t_data.splice(gridIndex, 1);\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: _data\r\n\t\t\t};\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport const getGrids = (state: State) => state.data;\r\n","import * as fromRoot from \"./root/grids.reducers\";\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface GridState {\r\n\tdb: fromRoot.State;\r\n}\r\n\r\nexport const GridReducer = {\r\n\tdb: fromRoot.Reducer\r\n};\r\n\r\nexport interface AppState {\r\n\tgrids: GridState;\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { map, pluck } from \"rxjs/operators\";\r\nimport { Observable } from \"rxjs\";\r\n\r\nimport { GridModel } from \"../models\";\r\nimport { UpsertGridAction } from \"./widget.actions\";\r\nimport { GET_GRID_ACTION_TYPES } from \"../services/api/get-grid/get-grid.actions\";\r\nimport { GET_GRIDS_ACTION_TYPES } from \"../services/api/get-grids/get-grids.actions\";\r\nimport { UPSERT_GRID_ACTION_TYPES } from \"../services/api/upsert-grid/upsert-grid.actions\";\r\n\r\n@Injectable()\r\nexport class GridDbEffects {\r\n\tconstructor(private actions$: Actions<any>) {}\r\n\r\n\t@Effect()\r\n\tUpsert$ = this.actions$\r\n\t\t.ofType(GET_GRID_ACTION_TYPES.SUCCEED, UPSERT_GRID_ACTION_TYPES.SUCCEED)\r\n\t\t.pipe(pluck(\"payload\"), map((grid: GridModel) => new UpsertGridAction([ grid ])));\r\n\r\n\t@Effect()\r\n\tUpsertMany$ = this.actions$\r\n\t\t.ofType(GET_GRIDS_ACTION_TYPES.SUCCEED)\r\n\t\t.pipe(pluck(\"payload\"), map((grids: GridModel[]) => new UpsertGridAction(grids)));\r\n}\r\n","import {\r\n\tComponent,\r\n\tOnInit,\r\n\tComponentRef,\r\n\tComponentFactoryResolver,\r\n\tViewContainerRef,\r\n\tDirective,\r\n\tInput,\r\n\tViewChild,\r\n\tInject\r\n} from \"@angular/core\";\r\nimport { GridConfigurationService } from \"../services/grid-configuration.service\";\r\nimport { MAT_BOTTOM_SHEET_DATA } from \"@angular/material\";\r\n\r\n@Directive({\r\n\tselector: \"[ngsDynamicGridItemConfig]\"\r\n})\r\nexport class DynamicGridItremConfigDirective implements OnInit {\r\n\t@Input()\r\n\tset type(type: string) {\r\n\t\tif (!type) return;\r\n\t\tthis._resolve_correct_component_base_on_widget_type(type);\r\n\t}\r\n\tget valid() {\r\n\t\treturn this.component.instance.valid;\r\n\t}\r\n\tget config() {\r\n\t\treturn this.component.instance.config;\r\n\t}\r\n\tcomponent: ComponentRef<any>;\r\n\tmapTypeToComponent: any;\r\n\tconstructor(\r\n\t\tprivate configurationService: GridConfigurationService,\r\n\t\tprivate resolver: ComponentFactoryResolver,\r\n\t\tprivate container: ViewContainerRef\r\n\t) {\r\n\t\tthis.mapTypeToComponent = this.configurationService.config$.getValue().types;\r\n\t}\r\n\tngOnInit() {}\r\n\t_resolve_correct_component_base_on_widget_type(type) {\r\n\t\tif (!this.mapTypeToComponent[type]) {\r\n\t\t\tconst supportedTypes = Object.keys(this.mapTypeToComponent).join(\", \");\r\n\t\t\tthrow new Error(\r\n\t\t\t\t`Trying to use an unsupported type (${type}).\r\n\t\t  \t\t Supported types: ${supportedTypes}`\r\n\t\t\t);\r\n\t\t}\r\n\t\tconst component = this.resolver.resolveComponentFactory<any>(this.mapTypeToComponent[type].configComponent);\r\n\t\tthis.component = this.container.createComponent(component);\r\n\t\t// this.widget$.subscribe((w) => (this.component.instance.widget = w));\r\n\t}\r\n}\r\n\r\n@Component({\r\n\ttemplate: `\r\n\t<div ngsDynamicGridItemConfig [type]=\"data.type\"></div>\r\n\t`\r\n})\r\nexport class DynamicGridItemConfigComponent {\r\n\t@ViewChild(DynamicGridItremConfigDirective) DynamicWidgetRef: DynamicGridItremConfigDirective;\r\n\tconstructor(@Inject(MAT_BOTTOM_SHEET_DATA) public data: any) {}\r\n\tget config() {\r\n\t\treturn this.DynamicWidgetRef.config;\r\n\t}\r\n\tget valid() {\r\n\t\treturn this.DynamicWidgetRef.valid;\r\n\t}\r\n}\r\n","import { Component, Injector, Inject } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { AppState } from \"../grid.reducer\";\r\nimport { GridModel } from \"../models\";\r\nimport { GridsterConfig } from \"angular-gridster2\";\r\nimport { MAT_BOTTOM_SHEET_DATA } from \"@angular/material\";\r\nimport { FormGroup, FormControl } from \"@angular/forms\";\r\nimport { UpsertGridStartAction } from \"../services/api/upsert-grid/upsert-grid.actions\";\r\n\r\n@Component({\r\n\ttemplate: `<div fxLayout=\"row wrap\" fxLayoutAlign=\"center center\">\r\n    <div fxFlex=\"100\" [formGroup]=\"gridFormGroup\">\r\n        <mat-form-field>\r\n            <input matInput placeholder=\"name\" formControlName=\"name\">\r\n        </mat-form-field>\r\n    </div>\r\n\r\n    <div  fxFlex=\"100\" [formGroup]=\"configFormGroup\">\r\n        <div fxFlex=\"100\" fxLayout=\"row wrap\" fxLayoutGap=\"25px\">\r\n            <mat-form-field>\r\n                <mat-select placeholder=\"Grid Type\" formControlName=\"gridType\">\r\n                    <mat-option *ngFor=\"let item of gridTypes\" [value]=\"item\">\r\n                        {{item}}\r\n                    </mat-option>\r\n                </mat-select>\r\n            </mat-form-field>\r\n            <mat-form-field>\r\n                <mat-select placeholder=\"Compact Type\" formControlName=\"compactType\">\r\n                    <mat-option *ngFor=\"let item of compactType\" [value]=\"item\">\r\n                        {{item}}\r\n                    </mat-option>\r\n                </mat-select>\r\n            </mat-form-field>\r\n            <mat-form-field>\r\n                <mat-select placeholder=\"Display Grid\" formControlName=\"displayGrid\">\r\n                    <mat-option *ngFor=\"let item of displayGridTypes\" [value]=\"item\">\r\n                        {{item}}\r\n                    </mat-option>\r\n                </mat-select>\r\n            </mat-form-field>\r\n        </div>\r\n        <div fxFlex=\"100\" fxLayout=\"row wrap\" fxLayoutGap=\"25px\">\r\n            <div>\r\n                <mat-checkbox formControlName=\"enableEmptyCellDrag\">enableEmptyCellDrag</mat-checkbox>\r\n                <!-- <mat-checkbox formControlName=\"enableEmptyCellClick\">enableEmptyCellClick</mat-checkbox> -->\r\n            </div>\r\n            <div [formGroup]=\"configFormGroup.get('draggable')\">\r\n                <mat-checkbox formControlName=\"enabled\">enable draggable</mat-checkbox>\r\n            </div>\r\n            <div [formGroup]=\"configFormGroup.get('resizable')\">\r\n                <mat-checkbox formControlName=\"enabled\">enable resizable</mat-checkbox>\r\n            </div>\r\n        </div>\r\n        <!-- Margins -->\r\n        <div fxFlex=\"100\" fxLayout=\"row wrap\" fxLayoutGap=\"25px\">\r\n            <h3 fxFlex=\"100\">Ø­Ø§Ø´ÛÙ</h3>\r\n            <div fxFlex=\"100\">\r\n                <mat-checkbox fxFlex formControlName=\"outerMargin\">outerMargin</mat-checkbox>\r\n            </div>\r\n            <div fxFlex=\"100\" fxLayout=\"row wrap\" fxLayoutGap=\"25px\">\r\n                <mat-form-field fxFlex>\r\n                    <input matInput type=\"number\" placeholder=\"margin\" formControlName=\"margin\" />\r\n                </mat-form-field>\r\n                <mat-form-field fxFlex>\r\n                    <input matInput type=\"number\" placeholder=\"outerMarginTop\" formControlName=\"outerMarginTop\" />\r\n                </mat-form-field>\r\n                <mat-form-field fxFlex>\r\n                    <input matInput type=\"number\" placeholder=\"outerMarginRight\" formControlName=\"outerMarginRight\" />\r\n                </mat-form-field>\r\n                <mat-form-field fxFlex>\r\n                    <input matInput type=\"number\" placeholder=\"outerMarginBottom\" formControlName=\"outerMarginBottom\" />\r\n                </mat-form-field>\r\n                <mat-form-field fxFlex>\r\n                    <input matInput type=\"number\" placeholder=\"outerMarginLeft\" formControlName=\"outerMarginLeft\" />\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Grid Size -->\r\n        <div fxFlex=\"100\" fxLayout=\"row wrap\" fxLayoutGap=\"25px\">\r\n            <h3 fxFlex=\"100\">Ú¯Ø±ÛØ¯</h3>\r\n            <mat-form-field fxFlex>\r\n                <input matInput type=\"number\" placeholder=\"minCols\" formControlName=\"minCols\" />\r\n            </mat-form-field>\r\n            <mat-form-field fxFlex>\r\n                <input matInput type=\"number\" placeholder=\"maxCols\" formControlName=\"maxCols\" />\r\n            </mat-form-field>\r\n        </div>\r\n        <button fxFlex=\"100\" color=\"primary\" mat-raised-button (click)=\"save()\">Save</button>\r\n    </div>\r\n</div>`\r\n})\r\nexport class GridConfigComponent {\r\n\tgridTypes: any[];\r\n\tcompactType: any[];\r\n\tdisplayGridTypes: any[];\r\n\tgrid: GridModel;\r\n\toid: string;\r\n\tconfigFormGroup: FormGroup;\r\n\tgridFormGroup: FormGroup;\r\n\tconstructor(private store: Store<AppState>, @Inject(MAT_BOTTOM_SHEET_DATA) private data: any) {\r\n\t\tthis.grid = this.data.grid;\r\n\t\tthis.oid = this.data.oid;\r\n\t\tthis._init_properties();\r\n\t\tthis._init_form_group();\r\n\t}\r\n\tsave() {\r\n\t\tconst grid = {\r\n\t\t\t...this.grid,\r\n\t\t\t...this.gridFormGroup.value,\r\n\t\t\tconfig: { ...this.configFormGroup.value }\r\n\t\t};\r\n\t\tthis.store.dispatch(new UpsertGridStartAction(grid));\r\n\t}\r\n\t_init_form_group() {\r\n\t\tthis.configFormGroup = new FormGroup({\r\n\t\t\tgridType: new FormControl(\"fit\"),\r\n\t\t\tcompactType: new FormControl(\"none\"),\r\n\t\t\tdisplayGrid: new FormControl(\"onDrag&Resize\"),\r\n\t\t\t// empty cell\r\n\t\t\tenableEmptyCellDrag: new FormControl(true),\r\n\t\t\t// enableEmptyCellClick: new FormControl(true),\r\n\t\t\t//\r\n\t\t\tscrollToNewItems: new FormControl(true),\r\n\t\t\t// margins\r\n\t\t\tmargin: new FormControl(\"10\"),\r\n\t\t\touterMargin: new FormControl(true),\r\n\t\t\touterMarginTop: new FormControl(\"10\"),\r\n\t\t\touterMarginRight: new FormControl(\"10\"),\r\n\t\t\touterMarginBottom: new FormControl(\"10\"),\r\n\t\t\touterMarginLeft: new FormControl(\"10\"),\r\n\t\t\t// grid size\r\n\t\t\tminCols: new FormControl(3),\r\n\t\t\tmaxCols: new FormControl(3),\r\n\t\t\t//\r\n\t\t\tdraggable: new FormGroup({\r\n\t\t\t\tenabled: new FormControl(),\r\n\t\t\t\tdelayStart: new FormControl(333)\r\n\t\t\t\t// ignoreContent: new FormControl(\"false\")\r\n\t\t\t}),\r\n\t\t\tresizable: new FormGroup({\r\n\t\t\t\tenabled: new FormControl()\r\n\t\t\t})\r\n\t\t});\r\n\t\tthis.gridFormGroup = new FormGroup({\r\n\t\t\toid: new FormControl(this.oid),\r\n\t\t\tname: new FormControl(\"\")\r\n\t\t});\r\n\t\tthis.gridFormGroup.patchValue(this.grid);\r\n\t\tthis.configFormGroup.patchValue(this.grid.config);\r\n\t}\r\n\t_init_properties() {\r\n\t\tthis.gridTypes = [ \"fit\", \"scrollVertical\", \"scrollHorizontal\", \"fixed\", \"verticalFixed\", \"horizontalFixed\" ];\r\n\t\tthis.compactType = [ \"none\", \"compactUp\", \"compactLeft\", \"compactUp&Left\", \"compactLeft&Up\" ];\r\n\t\tthis.displayGridTypes = [ \"always\", \"onDrag&Resize\", \"none\" ];\r\n\t}\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\r\nimport { GridsterConfig, GridsterItem } from \"angular-gridster2\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { filter } from \"rxjs/operators\";\r\nimport { MatBottomSheet } from \"@angular/material\";\r\n\r\nimport { AppState } from \"../grid.reducer\";\r\nimport { GridModel } from \"../models\";\r\nimport { GridService } from \"../services/grid.service\";\r\nimport { GridConfigurationService } from \"../services/grid-configuration.service\";\r\nimport { DynamicGridItemConfigComponent } from \"../grid-item/dynamic-grid-item-config.directive\";\r\nimport { GridConfigComponent } from \"../grid-config/grid-config.component\";\r\nimport { IGridItemModel } from \"../models/gird-item.model\";\r\n\r\n@Component({\r\n\tselector: \"ngs-grid\",\r\n\ttemplate: `<button mat-raised-button (click)=\"addItem()\">add</button>\r\n<button mat-raised-button (click)=\"openConfig()\">openConfig</button>\r\n\r\n<gridster [options]=\"options\">\r\n    <gridster-item [item]=\"item\" *ngFor=\"let item of grid.items\">\r\n        <div class=\"initializer\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n            <div fxFlex=\"nogrow\">\r\n                <button mat-icon-button (click)=\"removeItem(item)\">\r\n                    <mat-icon>delete</mat-icon>\r\n                </button>\r\n                <button mat-icon-button (click)=\"showConfig(item)\">\r\n                    <mat-icon>settings</mat-icon>\r\n                </button>\r\n            </div>\r\n        </div>\r\n        <mat-form-field *ngIf=\"!item.valid\"  fxFlex=\"100\">\r\n            <mat-select placeholder=\"Grid Item Type\" [(ngModel)]=\"item.type\" (selectionChange)=\"gridItemTypeChanged(item)\">\r\n                <mat-option *ngFor=\"let item of gridItemTypes\" [value]=\"item\">\r\n                    {{item}}\r\n                </mat-option>\r\n            </mat-select>\r\n        </mat-form-field>\r\n        <div *ngIf=\"item.valid\" [ngsDynamicGridItemView]=\"item\"></div>\r\n    </gridster-item>\r\n</gridster>`,\r\n\tstyles: [`:host{width:95vw;height:100vh;display:block;direction:ltr}.initializer{padding:25px}`]\r\n})\r\nexport class GridComponent implements OnInit {\r\n\t@Output() itemValidateCallback = new EventEmitter();\r\n\t@Output() itemRemovedCallback = new EventEmitter();\r\n\t@Output() itemInitCallback = new EventEmitter();\r\n\t@Output() itemResizeCallback = new EventEmitter();\r\n\t@Output() itemChangeCallback = new EventEmitter();\r\n\t@Output() gridSizeChangedCallback = new EventEmitter();\r\n\t@Output() destroyCallback = new EventEmitter();\r\n\t@Output() initCallback = new EventEmitter();\r\n\r\n\t@Input() oid: string;\r\n\toptions: GridsterConfig;\r\n\tgrid: GridModel;\r\n\tready = false;\r\n\tgridItemTypes: any[string];\r\n\tconstructor(\r\n\t\tprivate store: Store<AppState>,\r\n\t\tprivate service: GridService,\r\n\t\tprivate configurationService: GridConfigurationService,\r\n\t\tprivate bottomSheet: MatBottomSheet\r\n\t) {\r\n\t\tthis.options = {};\r\n\t\tthis.gridItemTypes = Object.keys(this.configurationService.config$.getValue().types);\r\n\t}\r\n\r\n\tstatic itemChange(item, itemComponent) {\r\n\t\tconsole.log(\"itemChanged\", item, itemComponent);\r\n\t}\r\n\r\n\tstatic itemResize(item, itemComponent) {\r\n\t\tconsole.log(\"itemResized\", item, itemComponent);\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\t// this.items = [ { cols: 2, rows: 1, y: 0, x: 0 }, { cols: 2, rows: 2, y: 0, x: 2 } ];\r\n\r\n\t\tthis.grid = new GridModel({\r\n\t\t\toid: this.oid,\r\n\t\t\tconfig: {}\r\n\t\t});\r\n\t\tthis._get_grid_by_oid_and_update_component();\r\n\t}\r\n\r\n\t_initCallback(item) {\r\n\t\tthis.initCallback.emit(item);\r\n\t}\r\n\r\n\tremoveItem(item) {\r\n\t\tthis.grid.items.splice(this.grid.items.indexOf(item), 1);\r\n\t}\r\n\r\n\taddItem() {\r\n\t\tthis.grid.items.push({} as IGridItemModel<any>);\r\n\t}\r\n\temptyCellClick(event: MouseEvent, item: GridsterItem) {\r\n\t\tconsole.log(\"empty cell click\", event, item);\r\n\t\tthis.grid.items.push(item as any);\r\n\t}\r\n\topenConfig() {\r\n\t\tthis.bottomSheet.open(GridConfigComponent, {\r\n\t\t\tdata: {\r\n\t\t\t\tgrid: this.grid\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\tgridItemTypeChanged(item: IGridItemModel<any>) {\r\n\t\tconst bs = this.bottomSheet.open(DynamicGridItemConfigComponent, {\r\n\t\t\tdata: {\r\n\t\t\t\ttype: item.type\r\n\t\t\t}\r\n\t\t});\r\n\t\tbs.afterDismissed().subscribe((data) => {\r\n\t\t\titem.config = bs.instance.config;\r\n\t\t\titem.valid = bs.instance.valid;\r\n\t\t});\r\n\t}\r\n\tshowConfig(item: IGridItemModel<any>) {\r\n\t\tconst bs = this.bottomSheet.open(DynamicGridItemConfigComponent, {\r\n\t\t\tdata: {\r\n\t\t\t\ttype: item.type\r\n\t\t\t}\r\n\t\t});\r\n\t\tbs.afterDismissed().subscribe((data) => {\r\n\t\t\titem.config = bs.instance.config;\r\n\t\t\titem.valid = bs.instance.valid;\r\n\t\t});\r\n\t}\r\n\t_get_grid_by_oid_and_update_component() {\r\n\t\tthis.service.selectById(this.oid).pipe(filter((data) => data != undefined)).subscribe((data) => {\r\n\t\t\tthis.grid = data;\r\n\t\t\tthis.options = { ...this.options, ...data.config };\r\n\t\t\t// this.options.draggable = {\r\n\t\t\t// \tenabled: true\r\n\t\t\t// };\r\n\t\t\t// this.options.emptyCellContextMenuCallback = this.emptyCellClick.bind(this);\r\n\t\t\t// this.options.emptyCellDropCallback = this.emptyCellClick.bind(this);\r\n\t\t\tif (this.options.enableEmptyCellDrag) this.options.emptyCellDragCallback = this.emptyCellClick.bind(this);\r\n\t\t\t// if (this.options.enableEmptyCellClick) this.options.emptyCellClickCallback = this.emptyCellClick.bind(this);\r\n\t\t\tthis.ready = true;\r\n\t\t\t// this.options.api.optionsChanged();\r\n\t\t});\r\n\t}\r\n}\r\n","import {\r\n\tComponent,\r\n\tOnInit,\r\n\tComponentRef,\r\n\tComponentFactoryResolver,\r\n\tViewContainerRef,\r\n\tDirective,\r\n\tInput,\r\n\tInject,\r\n\tViewChild\r\n} from \"@angular/core\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { pluck, filter, switchMap, map, startWith } from \"rxjs/operators\";\r\nimport { GridConfigurationService } from \"../services/grid-configuration.service\";\r\nimport { MAT_BOTTOM_SHEET_DATA } from \"@angular/material\";\r\nimport { IGridItemModel } from \"../models/gird-item.model\";\r\n\r\n@Directive({\r\n\tselector: \"[ngsDynamicGridItemView]\"\r\n})\r\nexport class DynamicGridItemViewDirective implements OnInit {\r\n\t@Input(\"ngsDynamicGridItemView\")\r\n\tset item(item: IGridItemModel<any>) {\r\n\t\tif (!item) return;\r\n\t\tif (!item.valid) return;\r\n\t\tthis._resolve_correct_component_base_on_widget_type(item);\r\n\t}\r\n\tcomponent: ComponentRef<any>;\r\n\tmapTypeToComponent: any;\r\n\tconstructor(\r\n\t\tprivate configurationService: GridConfigurationService,\r\n\t\tprivate resolver: ComponentFactoryResolver,\r\n\t\tprivate container: ViewContainerRef\r\n\t) {\r\n\t\tthis.mapTypeToComponent = this.configurationService.config$.getValue().types;\r\n\t}\r\n\tngOnInit() {}\r\n\t_resolve_correct_component_base_on_widget_type(item: IGridItemModel<any>) {\r\n\t\tdebugger;\r\n\t\tif (!this.mapTypeToComponent[item.type]) {\r\n\t\t\tconst supportedTypes = Object.keys(this.mapTypeToComponent).join(\", \");\r\n\t\t\tthrow new Error(\r\n\t\t\t\t`Trying to use an unsupported type (${item.type}).\r\n\t\t  \t\t Supported types: ${supportedTypes}`\r\n\t\t\t);\r\n\t\t}\r\n\t\tconst component = this.resolver.resolveComponentFactory<any>(this.mapTypeToComponent[item.type].viewComponent);\r\n\t\tthis.component = this.container.createComponent(component);\r\n\t\tObject.keys(item.config || {}).forEach((key) => {\r\n\t\t\tthis.component.instance[key] = item.config[key];\r\n\t\t});\r\n\t}\r\n}\r\n","import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { StoreDevtoolsModule } from \"@ngrx/store-devtools\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { StoreModule } from \"@ngrx/store\";\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport {\r\n\tMatExpansionModule,\r\n\tMatSnackBarModule,\r\n\tMatIconModule,\r\n\tMatButtonModule,\r\n\tMatCardModule,\r\n\tMatSelectModule,\r\n\tMatInputModule,\r\n\tMatFormFieldModule,\r\n\tMatTabsModule,\r\n\tMatRadioModule,\r\n\tMatSlideToggleModule,\r\n\tMatDividerModule,\r\n\tMatCheckboxModule,\r\n\tMatTableModule,\r\n\tMatBottomSheetModule\r\n} from \"@angular/material\";\r\nimport { EffectsModule } from \"@ngrx/effects\";\r\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\r\nimport { GridsterModule } from \"angular-gridster2\";\r\n\r\nimport { GridModuleConfig, MODULE_CONFIG_TOKEN } from \"./grid.config\";\r\nimport { GridRoutingModule } from \"./grid-routing.module\";\r\nimport { GetGridApiEffects } from \"./services/api/get-grid/get-grid.effects\";\r\nimport { UpsertGridApiEffects } from \"./services/api/upsert-grid/upsert-grid.effects\";\r\nimport { GetGridsApiEffects } from \"./services/api/get-grids/get-grids.effects\";\r\nimport { GridReducer } from \"./grid.reducer\";\r\nimport { GridDbEffects } from \"./root/grids.effects\";\r\nimport { RootComponent } from \"./root/root.component\";\r\nimport { GridService } from \"./services/grid.service\";\r\nimport { GridConfigurationService } from \"./services/grid-configuration.service\";\r\nimport { GridComponent } from \"./grid/grid.component\";\r\nimport { GridConfigComponent } from \"./grid-config/grid-config.component\";\r\nimport {\r\n\tDynamicGridItremConfigDirective,\r\n\tDynamicGridItemConfigComponent\r\n} from \"./grid-item/dynamic-grid-item-config.directive\";\r\nimport { DynamicGridItemViewDirective } from \"./grid-item/dynamic-grid-item-view.directive\";\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n\t\tRouterModule,\r\n\t\tMatExpansionModule,\r\n\t\tMatSnackBarModule,\r\n\t\tMatIconModule,\r\n\t\tMatButtonModule,\r\n\t\tMatCardModule,\r\n\t\tMatSelectModule,\r\n\t\tMatInputModule,\r\n\t\tMatFormFieldModule,\r\n\t\tMatTabsModule,\r\n\t\tMatBottomSheetModule,\r\n\t\tMatRadioModule,\r\n\t\tFlexLayoutModule,\r\n\t\tFormsModule,\r\n\t\tReactiveFormsModule,\r\n\t\tMatSlideToggleModule,\r\n\t\tMatDividerModule,\r\n\t\tMatCheckboxModule,\r\n\t\tMatTableModule,\r\n\t\tGridsterModule\r\n\t],\r\n\tdeclarations: [\r\n\t\tRootComponent,\r\n\t\tGridComponent,\r\n\t\tGridConfigComponent,\r\n\t\tDynamicGridItremConfigDirective,\r\n\t\tDynamicGridItemConfigComponent,\r\n\t\tDynamicGridItemViewDirective\r\n\t],\r\n\tentryComponents: [ GridConfigComponent, DynamicGridItemConfigComponent ],\r\n\texports: [ GridComponent ]\r\n})\r\nexport class NgsGridModule {\r\n\tstatic forRoot(config?: GridModuleConfig): ModuleWithProviders {\r\n\t\treturn {\r\n\t\t\tngModule: NgsGridRootModule,\r\n\t\t\tproviders: [ { provide: MODULE_CONFIG_TOKEN, useValue: config }, GridConfigurationService, GridService ]\r\n\t\t};\r\n\t}\r\n}\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tNgsGridModule,\r\n\t\tGridRoutingModule,\r\n\t\tStoreModule.forFeature(\"grids\", GridReducer),\r\n\t\tEffectsModule.forFeature([ GridDbEffects, GetGridApiEffects, GetGridsApiEffects, UpsertGridApiEffects ])\r\n\t],\r\n\texports: [ NgsGridModule ]\r\n})\r\nexport class NgsGridRootModule {}\r\n"]}