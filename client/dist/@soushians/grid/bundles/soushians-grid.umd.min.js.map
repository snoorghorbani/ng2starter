{"version":3,"sources":["ng://@soushians/grid/lib/grid.config.ts","ng://@soushians/grid/lib/root/root.component.ts","ng://@soushians/grid/lib/grid-routing.module.ts","dist/@soushians/grid/node_modules/tslib/tslib.es6.js","ng://@soushians/grid/lib/models/grid.model.ts","ng://@soushians/grid/lib/services/api/upsert-grid/upsert-grid.model.ts","ng://@soushians/grid/lib/services/grid-configuration.service.ts","ng://@soushians/grid/lib/services/api/get-grid/get-grid.actions.ts","ng://@soushians/grid/lib/services/grid.service.ts","ng://@soushians/grid/lib/services/api/get-grid/get-grid.effects.ts","ng://@soushians/grid/lib/services/api/upsert-grid/upsert-grid.actions.ts","ng://@soushians/grid/lib/services/api/upsert-grid/upsert-grid.effects.ts","ng://@soushians/grid/lib/services/api/get-grids/get-grids.actions.ts","ng://@soushians/grid/lib/services/api/get-grids/get-grids.effects.ts","ng://@soushians/grid/lib/root/widget.actions.ts","ng://@soushians/grid/lib/root/grids.reducers.ts","ng://@soushians/grid/lib/grid.reducer.ts","ng://@soushians/grid/lib/root/grids.effects.ts","ng://@soushians/grid/lib/grid-item/dynamic-grid-item-config.directive.ts","ng://@soushians/grid/lib/grid-config/grid-config.component.ts","ng://@soushians/grid/lib/grid/grid.component.ts","ng://@soushians/grid/lib/grid-item/dynamic-grid-item-view.directive.ts","ng://@soushians/grid/lib/grid.module.ts"],"names":["MODULE_DEFAULT_CONFIG","env","production","frontend_server","endpoints","upsert","find","get","update_item","update_item_access","types","MODULE_CONFIG_TOKEN","InjectionToken","RootComponent","Component","args","selector","template","routes","path","component","children","GridRoutingModule","RouterModule","forChild","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__decorate","decorators","target","key","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","UpsertGridApiModel","GridModel","_a","_b","_id","oid","name","type","config","items","Request","grid","getRequestBody","Response","GridConfigurationService","configFile","store","config$","BehaviorSubject","_config","next","Injectable","Inject","Store","GetGridStartAction","payload","GetGridSucceedAction","GetGridFailedAction","GridService","http","userFacadeService","configurationService","_this","pipe","filter","take","skipUntil","select","getFrontendUser","switchMap","stringTemplate","map","response","Result","getGrids","item","patch","model","post","selectById","subject","undefined","state","grids","db","data","tap","dispatch","subscribe","FormSchemaModel","asObservable","selectByOid","providedIn","HttpClient","UserFacadeService","GetGridApiEffects","actions$","service","start$","ofType","action","res","catchError","err","of","Actions","tslib_1.__decorate","Effect","UpsertGridStartAction","UpsertGridSucceedAction","UpsertGridFailedAction","UpsertGridApiEffects","pluck","GetGridsSucceedAction","GetGridsFailedAction","GetGridsApiEffects","UpsertGridAction","GridsActionTypes","initialState","Reducer","_data","concat","forEach","newGrid","existedGridIndex","findIndex","w","splice","push","gridIndex","GridReducer","fromRoot.Reducer","GridDbEffects","Upsert$","UpsertMany$","DynamicGridItremConfigDirective","resolver","container","mapTypeToComponent","getValue","_resolve_correct_component_base_on_widget_type","instance","valid","ngOnInit","supportedTypes","keys","join","Error","resolveComponentFactory","configComponent","createComponent","Directive","ComponentFactoryResolver","ViewContainerRef","Input","DynamicGridItemConfigComponent","DynamicWidgetRef","MAT_BOTTOM_SHEET_DATA","ViewChild","GridConfigComponent","_init_properties","_init_form_group","save","gridFormGroup","value","configFormGroup","FormGroup","gridType","FormControl","compactType","displayGrid","enableEmptyCellDrag","enableEmptyCellClick","enableEmptyCellContextMenu","scrollToNewItems","margin","outerMargin","outerMarginTop","outerMarginRight","outerMarginBottom","outerMarginLeft","minCols","maxCols","draggable","enabled","delayStart","resizable","patchValue","gridTypes","displayGridTypes","GridComponent","bottomSheet","itemValidateCallback","EventEmitter","itemRemovedCallback","itemInitCallback","itemResizeCallback","itemChangeCallback","gridSizeChangedCallback","destroyCallback","initCallback","ready","options","getInfo","user","CurrentSession","Username","username","gridItemTypes","havePermission$","getAccountInfo","owner","some","itemChange","itemComponent","console","log","itemResize","_get_grid_by_oid_and_update_component","_initCallback","emit","removeItem","indexOf","make_public","event","access","checked","addItem","e","stopPropagation","emptyCellClick","openConfig","preventDefault","open","saveConfig","stopImmediatePropagation","gridItemTypeChanged","bs","afterDismissed","showConfig","goToEdit","emptyCellDragCallback","bind","MatBottomSheet","Output","DynamicGridItemViewDirective","componentFactory","viewComponent","NgsGridModule","forRoot","ngModule","NgsGridRootModule","providers","provide","useValue","NgModule","imports","CommonModule","MatExpansionModule","MatSnackBarModule","MatIconModule","MatButtonModule","MatCardModule","MatSelectModule","MatInputModule","MatFormFieldModule","MatTabsModule","MatBottomSheetModule","MatRadioModule","FlexLayoutModule","MatMenuModule","MatToolbarModule","FormsModule","ReactiveFormsModule","MatSlideToggleModule","MatDividerModule","MatCheckboxModule","MatTableModule","GridsterModule","declarations","entryComponents","exports","StoreModule","forFeature","EffectsModule"],"mappings":"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","sourcesContent":["import { InjectionToken } from \"@angular/core\";\r\nexport interface IGridType {\r\n\tupsertComponet?: any;\r\n\tconfigComponent?: any;\r\n\ttype?: \"simple\" | \"complex\";\r\n\tviewComponent: any;\r\n}\r\nexport interface GridModuleConfig {\r\n\tenv?: {\r\n\t\tproduction: boolean;\r\n\t\tfrontend_server: string;\r\n\t};\r\n\tendpoints?: {\r\n\t\tget: string;\r\n\t\tfind: string;\r\n\t\tupsert: string;\r\n\t\tupdate_item: string;\r\n\t\tupdate_item_access: string;\r\n\t};\r\n\ttypes?: { [key: string]: IGridType };\r\n}\r\n\r\nexport const MODULE_DEFAULT_CONFIG: GridModuleConfig = {\r\n\tenv: {\r\n\t\tproduction: false,\r\n\t\tfrontend_server: \"\"\r\n\t},\r\n\tendpoints: {\r\n\t\tupsert: \"/api/grid\",\r\n\t\tfind: \"/api/grid\",\r\n\t\tget: \"/api/grid/${model._id}\",\r\n\t\tupdate_item: \"/api/grid/item\",\r\n\t\tupdate_item_access: \"/api/grid/item/access\"\r\n\t},\r\n\ttypes: {}\r\n};\r\n\r\nexport const MODULE_CONFIG_TOKEN = new InjectionToken<GridModuleConfig>(\"GridModuleConfig\");\r\n","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n\tselector: \"ngs-grid-root\",\r\n\ttemplate: \"<router-outlet></router-outlet>\"\r\n})\r\nexport class RootComponent {}\r\n","import { ModuleWithProviders } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\n\r\nimport { RootComponent } from \"./root/root.component\";\r\n\r\nconst routes: Routes = [\r\n\t{\r\n\t\tpath: \"grid\",\r\n\t\tcomponent: RootComponent,\r\n\t\tchildren: []\r\n\t}\r\n];\r\n\r\nexport const GridRoutingModule: ModuleWithProviders = RouterModule.forChild(routes);\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { GridsterConfig } from \"angular-gridster2\";\r\nimport { IGridItemModel } from \"./gird-item.model\";\r\n\r\nexport class GridModel {\r\n\t_id: string;\r\n\toid: string;\r\n\tname: string;\r\n\ttype: string;\r\n\towner: string;\r\n\tconfig: GridsterConfig;\r\n\titems: IGridItemModel<any>[];\r\n\tconstructor(\r\n\t\t{\r\n\t\t\t_id,\r\n\t\t\toid,\r\n\t\t\tname,\r\n\t\t\ttype,\r\n\t\t\tconfig,\r\n\t\t\titems\r\n\t\t}: { _id?: string; oid?: string; name?: string; type?: string; config?: GridsterConfig; items?: any[] } = {\r\n\t\t\tconfig: {},\r\n\t\t\titems: []\r\n\t\t}\r\n\t) {\r\n\t\tthis._id = _id;\r\n\t\tthis.oid = oid;\r\n\t\tthis.name = name;\r\n\t\tthis.type = type;\r\n\t\tthis.config = config;\r\n\t\tthis.items = items;\r\n\t}\r\n}\r\n","import { GridModel } from \"../../../models/grid.model\";\r\n\r\nexport namespace UpsertGridApiModel {\r\n\texport class Request {\r\n\t\tgrid: GridModel;\r\n\t\tconstructor(grid = {}) {\r\n\t\t\tdebugger;\r\n\t\t\tthis.grid = new GridModel(grid);\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn this.grid;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: GridModel;\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","import { BehaviorSubject } from \"rxjs\";\r\nimport { Inject, Injectable } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { GridModuleConfig, MODULE_DEFAULT_CONFIG, MODULE_CONFIG_TOKEN } from \"../grid.config\";\r\nimport { AppState } from \"../grid.reducer\";\r\n\r\n@Injectable()\r\nexport class GridConfigurationService {\r\n\tprivate _config: GridModuleConfig;\r\n\tget config() {\r\n\t\treturn this._config;\r\n\t}\r\n\tconfig$ = new BehaviorSubject(MODULE_DEFAULT_CONFIG);\r\n\tconstructor(@Inject(MODULE_CONFIG_TOKEN) configFile, private store: Store<AppState>) {\r\n\t\tthis._config = Object.assign({}, MODULE_DEFAULT_CONFIG, configFile);\r\n\t\tthis.config$.next(this._config);\r\n\t\t// this.store.select(getGridModuleConfig).subscribe((gridConfig) => {\r\n\t\t// \tif (!gridConfig) {\r\n\t\t// \t\treturn;\r\n\t\t// \t}\r\n\t\t// \tthis._config = Object.assign({}, this._config, gridConfig.Config);\r\n\t\t// \tthis.config$.next(this._config);\r\n\t\t// });\r\n\t}\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { GetGridApiModel } from \"./get-grid.model\";\r\nimport { GridModel } from \"../../../models/grid.model\";\r\n\r\nexport const enum GET_GRID_ACTION_TYPES {\r\n\tSTART = \"[GRID][API][GetGrid] start\",\r\n\tSUCCEED = \"[GRID][API][GetGrid] succeed\",\r\n\tFAILED = \"[GRID][API][GetGrid] failed\"\r\n}\r\n\r\nexport class GetGridStartAction implements Action {\r\n\treadonly type = GET_GRID_ACTION_TYPES.START;\r\n\tconstructor(public payload: string) {}\r\n}\r\nexport class GetGridSucceedAction implements Action {\r\n\treadonly type = GET_GRID_ACTION_TYPES.SUCCEED;\r\n\tconstructor(public payload: GridModel) {}\r\n}\r\nexport class GetGridFailedAction implements Action {\r\n\treadonly type = GET_GRID_ACTION_TYPES.FAILED;\r\n\tconstructor(public payload: any) {}\r\n}\r\n\r\nexport type GetGridActions = GetGridStartAction | GetGridSucceedAction | GetGridFailedAction;\r\n","import { map, filter, tap, take, switchMap, combineLatest, skipWhile, skipUntil } from \"rxjs/operators\";\r\nimport { Observable, BehaviorSubject } from \"rxjs\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { getFrontendUser } from \"@soushians/frontend-authentication\";\r\nimport { UserFacadeService } from \"@soushians/user\";\r\nimport { stringTemplate } from \"@soushians/shared\";\r\n\r\nimport { UpsertGridApiModel } from \"./api/upsert-grid/upsert-grid.model\";\r\nimport { GridConfigurationService } from \"./grid-configuration.service\";\r\nimport { GetGridStartAction } from \"./api/get-grid/get-grid.actions\";\r\nimport { GetGridsApiModel } from \"./api/get-grids/get-grids.model\";\r\nimport { GridModel } from \"../models/grid.model\";\r\nimport { IGridItemModel } from \"../models/gird-item.model\";\r\nimport { AppState } from \"../grid.reducer\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class GridService {\r\n\tconstructor(\r\n\t\tprivate http: HttpClient,\r\n\t\tprivate store: Store<AppState>,\r\n\t\tprivate userFacadeService: UserFacadeService,\r\n\t\tprivate configurationService: GridConfigurationService\r\n\t) {}\r\n\r\n\tget(_id: string): Observable<GridModel> {\r\n\t\treturn this.configurationService.config$.pipe(\r\n\t\t\tfilter(config => config.endpoints.get !== \"\"),\r\n\t\t\ttake(1),\r\n\t\t\tskipUntil(this.store.select(getFrontendUser)),\r\n\t\t\tswitchMap(config => {\r\n\t\t\t\treturn this.http\r\n\t\t\t\t\t.get(stringTemplate(config.env.frontend_server + config.endpoints.get, { _id }), {})\r\n\t\t\t\t\t.pipe(map((response: UpsertGridApiModel.Response) => response.Result));\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\tgetGrids(): Observable<GridModel[]> {\r\n\t\treturn this.configurationService.config$.pipe(\r\n\t\t\tfilter(config => config.endpoints.find != \"\"),\r\n\t\t\tswitchMap(config => this.http.get(config.env.frontend_server + config.endpoints.find)),\r\n\t\t\tmap((response: GetGridsApiModel.Response) => response.Result)\r\n\t\t);\r\n\t}\r\n\tupdate_item(item: IGridItemModel<any>): Observable<GridModel[]> {\r\n\t\treturn this.configurationService.config$.pipe(\r\n\t\t\tfilter(config => config.endpoints.update_item != \"\"),\r\n\t\t\tswitchMap(config => this.http.patch(config.env.frontend_server + config.endpoints.update_item, item)),\r\n\t\t\tmap((response: GetGridsApiModel.Response) => response.Result)\r\n\t\t);\r\n\t}\r\n\tupdate_item_access(item: IGridItemModel<any>): Observable<GridModel[]> {\r\n\t\treturn this.configurationService.config$.pipe(\r\n\t\t\tfilter(config => config.endpoints.update_item_access != \"\"),\r\n\t\t\tswitchMap(config =>\r\n\t\t\t\tthis.http.patch(config.env.frontend_server + config.endpoints.update_item_access, item)\r\n\t\t\t),\r\n\t\t\tmap((response: GetGridsApiModel.Response) => response.Result)\r\n\t\t);\r\n\t}\r\n\tupsert(grid: UpsertGridApiModel.Request): Observable<GridModel> {\r\n\t\tconst model = new UpsertGridApiModel.Request(grid);\r\n\t\treturn this.configurationService.config$.pipe(\r\n\t\t\tfilter(config => config.endpoints.upsert != \"\"),\r\n\t\t\ttake(1),\r\n\t\t\tswitchMap(config => {\r\n\t\t\t\treturn this.http.post(config.env.frontend_server + config.endpoints.upsert, model.getRequestBody(), {});\r\n\t\t\t}),\r\n\t\t\tmap((response: UpsertGridApiModel.Response) => response.Result)\r\n\t\t);\r\n\t}\r\n\t// delete(_id: string) {\r\n\t// \treturn this.configurationService.config$\r\n\t// \t\t.filter((config) => config.endpoints.deleteForm != \"\")\r\n\t// \t\t.switchMap((config) => this.http.get(config.endpoints.deleteForm));\r\n\t// }\r\n\tselectById(_id: string): Observable<GridModel> {\r\n\t\tconst subject = new BehaviorSubject<GridModel>(undefined);\r\n\t\tthis.store\r\n\t\t\t.select(state => state.grids.db.data)\r\n\t\t\t.pipe(\r\n\t\t\t\tfilter(grids => grids != null),\r\n\t\t\t\tmap(grids => grids.find(grid => grid._id == _id)),\r\n\t\t\t\ttap(grid => {\r\n\t\t\t\t\tif (grid == null) {\r\n\t\t\t\t\t\tthis.store.dispatch(new GetGridStartAction(_id));\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t\t.subscribe(FormSchemaModel => subject.next(FormSchemaModel));\r\n\t\treturn subject.asObservable();\r\n\t}\r\n\tselectByOid(_id: string): Observable<GridModel> {\r\n\t\tconst subject = new BehaviorSubject<GridModel>(undefined);\r\n\t\tthis.store\r\n\t\t\t.select(state => state.grids.db.data)\r\n\t\t\t.pipe(\r\n\t\t\t\tfilter(grids => grids != null),\r\n\t\t\t\tmap(grids => grids.find(grid => grid._id == _id)),\r\n\t\t\t\ttap(grid => {\r\n\t\t\t\t\tif (grid == null) {\r\n\t\t\t\t\t\tthis.store.dispatch(new GetGridStartAction(_id));\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t\t.subscribe(FormSchemaModel => subject.next(FormSchemaModel));\r\n\t\treturn subject.asObservable();\r\n\t}\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Actions, Effect, ofType } from \"@ngrx/effects\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\nimport { of } from \"rxjs\";\r\n\r\nimport { GridService } from \"../../grid.service\";\r\nimport { GET_GRID_ACTION_TYPES, GetGridActions, GetGridSucceedAction, GetGridFailedAction } from \"./get-grid.actions\";\r\n\r\n@Injectable()\r\nexport class GetGridApiEffects {\r\n\tconstructor(private actions$: Actions<GetGridActions>, private service: GridService) {}\r\n\r\n\t@Effect()\r\n\tstart$ = this.actions$.pipe(\r\n\t\tofType<any>(GET_GRID_ACTION_TYPES.START),\r\n\t\tmap(action => action.payload),\r\n\t\tswitchMap(payload => this.service.get(payload)),\r\n\t\tmap(res => new GetGridSucceedAction(res)),\r\n\t\tcatchError(err => of(new GetGridFailedAction(err)))\r\n\t);\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { UpsertGridApiModel } from \"./upsert-grid.model\";\r\nimport { GridModel } from \"../../../models/grid.model\";\r\n\r\nexport const enum UPSERT_GRID_ACTION_TYPES {\r\n\tSTART = \"[UPSERT_GRID][API][UpsertGrid] start\",\r\n\tSUCCEED = \"[UPSERT_GRID][API][UpsertGrid] succeed\",\r\n\tFAILED = \"[UPSERT_GRID][API][UpsertGrid] failed\"\r\n}\r\n\r\nexport class UpsertGridStartAction implements Action {\r\n\treadonly type = UPSERT_GRID_ACTION_TYPES.START;\r\n\tconstructor(public payload: GridModel) {}\r\n}\r\nexport class UpsertGridSucceedAction implements Action {\r\n\treadonly type = UPSERT_GRID_ACTION_TYPES.SUCCEED;\r\n\tconstructor(public payload: GridModel) {}\r\n}\r\nexport class UpsertGridFailedAction implements Action {\r\n\treadonly type = UPSERT_GRID_ACTION_TYPES.FAILED;\r\n\tconstructor(public payload: any) {}\r\n}\r\n\r\nexport type UpsertGridActions = UpsertGridStartAction | UpsertGridSucceedAction | UpsertGridFailedAction;\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Actions, Effect, ofType } from \"@ngrx/effects\";\r\nimport { map, switchMap, catchError, pluck } from \"rxjs/operators\";\r\n\r\nimport { GridService } from \"../../grid.service\";\r\nimport {\r\n\tUPSERT_GRID_ACTION_TYPES,\r\n\tUpsertGridActions,\r\n\tUpsertGridSucceedAction,\r\n\tUpsertGridFailedAction\r\n} from \"./upsert-grid.actions\";\r\nimport { of } from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class UpsertGridApiEffects {\r\n\tconstructor(private actions$: Actions<UpsertGridActions>, private service: GridService) {}\r\n\r\n\t@Effect()\r\n\tstart$ = this.actions$.pipe(\r\n\t\tofType(UPSERT_GRID_ACTION_TYPES.START),\r\n\t\tpluck(\"payload\"),\r\n\t\tswitchMap((payload: any) => this.service.upsert(payload)),\r\n\t\tmap(res => new UpsertGridSucceedAction(res)),\r\n\t\tcatchError(err => of(new UpsertGridFailedAction(err)))\r\n\t);\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { GetGridsApiModel } from \"./get-grids.model\";\r\nimport { GridModel } from \"../../../models/grid.model\";\r\n\r\nexport const enum GET_GRIDS_ACTION_TYPES {\r\n\tSTART = \"[GET_GRIDS][API][GetGrids] start\",\r\n\tSUCCEED = \"[GET_GRIDS][API][GetGrids] succeed\",\r\n\tFAILED = \"[GET_GRIDS][API][GetGrids] failed\"\r\n}\r\n\r\nexport class GetGridsStartAction implements Action {\r\n\treadonly type = GET_GRIDS_ACTION_TYPES.START;\r\n}\r\nexport class GetGridsSucceedAction implements Action {\r\n\treadonly type = GET_GRIDS_ACTION_TYPES.SUCCEED;\r\n\tconstructor(public payload: GridModel[]) {}\r\n}\r\nexport class GetGridsFailedAction implements Action {\r\n\treadonly type = GET_GRIDS_ACTION_TYPES.FAILED;\r\n\tconstructor(public payload: any) {}\r\n}\r\n\r\nexport type GetGridsActions = GetGridsStartAction | GetGridsSucceedAction | GetGridsFailedAction;\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Actions, Effect, ofType } from \"@ngrx/effects\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\nimport { of } from \"rxjs\";\r\n\r\nimport { GridService } from \"../../grid.service\";\r\nimport {\r\n\tGET_GRIDS_ACTION_TYPES,\r\n\tGetGridsActions,\r\n\tGetGridsSucceedAction,\r\n\tGetGridsFailedAction\r\n} from \"./get-grids.actions\";\r\n\r\n@Injectable()\r\nexport class GetGridsApiEffects {\r\n\tconstructor(private actions$: Actions<GetGridsActions>, private service: GridService) {}\r\n\r\n\t@Effect()\r\n\tstart$ = this.actions$.pipe(\r\n\t\tofType(GET_GRIDS_ACTION_TYPES.START),\r\n\t\tswitchMap(() =>\r\n\t\t\tthis.service\r\n\t\t\t\t.getGrids()\r\n\t\t\t\t.pipe(map(res => new GetGridsSucceedAction(res)), catchError(err => of(new GetGridsFailedAction(err))))\r\n\t\t)\r\n\t);\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { GridModel } from \"../models/grid.model\";\r\n\r\nexport enum GridsActionTypes {\r\n\tUPSERT = \"[GRID][DB] UPSERT\",\r\n\tDELETE = \"[GRID][DB] DELETE\"\r\n}\r\n\r\nexport class UpsertGridAction implements Action {\r\n\treadonly type = GridsActionTypes.UPSERT;\r\n\tconstructor(public payload: GridModel[]) {}\r\n}\r\nexport class DeleteGridAction implements Action {\r\n\treadonly type = GridsActionTypes.DELETE;\r\n\tconstructor(public payload: GridModel) {}\r\n}\r\n\r\nexport type GridsActions = UpsertGridAction | DeleteGridAction;\r\n","import { GridModel } from \"../models/grid.model\";\r\nimport { GridsActionTypes, GridsActions } from \"./widget.actions\";\r\n\r\nexport interface State {\r\n\tdata: GridModel[];\r\n}\r\n\r\nconst initialState: State = {\r\n\tdata: []\r\n};\r\n\r\nexport function Reducer(state = initialState, action: GridsActions): State {\r\n\tlet _data: GridModel[];\r\n\tswitch (action.type) {\r\n\t\tcase GridsActionTypes.UPSERT:\r\n\t\t\t_data = state.data.concat();\r\n\t\t\tconst newGrids = action.payload;\r\n\r\n\t\t\tnewGrids.forEach(newGrid => {\r\n\t\t\t\tconst existedGridIndex = _data.findIndex(w => w._id == newGrid._id);\r\n\t\t\t\tif (existedGridIndex > -1) {\r\n\t\t\t\t\t_data.splice(existedGridIndex, 1, newGrid);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t_data.push(newGrid);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: _data\r\n\t\t\t};\r\n\r\n\t\tcase GridsActionTypes.DELETE:\r\n\t\t\t_data = Object.assign({}, state.data);\r\n\r\n\t\t\tconst gridIndex = state.data.findIndex(w => w._id == action.payload._id);\r\n\t\t\t_data.splice(gridIndex, 1);\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: _data\r\n\t\t\t};\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport const getGrids = (state: State) => state.data;\r\n","import * as fromRoot from \"./root/grids.reducers\";\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface GridState {\r\n\tdb: fromRoot.State;\r\n}\r\n\r\nexport const GridReducer = {\r\n\tdb: fromRoot.Reducer\r\n};\r\n\r\nexport interface AppState {\r\n\tgrids: GridState;\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Actions, Effect, ofType } from \"@ngrx/effects\";\r\nimport { map, pluck } from \"rxjs/operators\";\r\nimport { Observable } from \"rxjs\";\r\n\r\nimport { GridModel } from \"../models/grid.model\";\r\nimport { UpsertGridAction } from \"./widget.actions\";\r\nimport { GET_GRID_ACTION_TYPES } from \"../services/api/get-grid/get-grid.actions\";\r\nimport { GET_GRIDS_ACTION_TYPES } from \"../services/api/get-grids/get-grids.actions\";\r\nimport { UPSERT_GRID_ACTION_TYPES } from \"../services/api/upsert-grid/upsert-grid.actions\";\r\n\r\n@Injectable()\r\nexport class GridDbEffects {\r\n\tconstructor(private actions$: Actions<any>) {}\r\n\r\n\t@Effect()\r\n\tUpsert$ = this.actions$.pipe(\r\n\t\tofType(GET_GRID_ACTION_TYPES.SUCCEED, UPSERT_GRID_ACTION_TYPES.SUCCEED),\r\n\t\tpluck(\"payload\"),\r\n\t\tmap((grid: GridModel) => new UpsertGridAction([ grid ]))\r\n\t);\r\n\r\n\t@Effect()\r\n\tUpsertMany$ = this.actions$.pipe(\r\n\t\tofType(GET_GRIDS_ACTION_TYPES.SUCCEED),\r\n\t\tpluck(\"payload\"),\r\n\t\tmap((grids: GridModel[]) => new UpsertGridAction(grids))\r\n\t);\r\n}\r\n","import {\r\n\tComponent,\r\n\tOnInit,\r\n\tComponentRef,\r\n\tComponentFactoryResolver,\r\n\tViewContainerRef,\r\n\tDirective,\r\n\tInput,\r\n\tViewChild,\r\n\tInject\r\n} from \"@angular/core\";\r\nimport { GridConfigurationService } from \"../services/grid-configuration.service\";\r\nimport { MAT_BOTTOM_SHEET_DATA } from \"@angular/material\";\r\n\r\n@Directive({\r\n\tselector: \"[ngsDynamicGridItemConfig]\"\r\n})\r\nexport class DynamicGridItremConfigDirective implements OnInit {\r\n\t@Input()\r\n\tset type(type: string) {\r\n\t\tif (!type) return;\r\n\t\tthis._resolve_correct_component_base_on_widget_type(type);\r\n\t}\r\n\tget valid() {\r\n\t\treturn this.component.instance.valid;\r\n\t}\r\n\tget config() {\r\n\t\treturn this.component.instance.config;\r\n\t}\r\n\tcomponent: ComponentRef<any>;\r\n\tmapTypeToComponent: any;\r\n\tconstructor(\r\n\t\tprivate configurationService: GridConfigurationService,\r\n\t\tprivate resolver: ComponentFactoryResolver,\r\n\t\tprivate container: ViewContainerRef\r\n\t) {\r\n\t\tthis.mapTypeToComponent = this.configurationService.config$.getValue().types;\r\n\t}\r\n\tngOnInit() {}\r\n\t_resolve_correct_component_base_on_widget_type(type) {\r\n\t\tif (!this.mapTypeToComponent[type]) {\r\n\t\t\tconst supportedTypes = Object.keys(this.mapTypeToComponent).join(\", \");\r\n\t\t\tthrow new Error(\r\n\t\t\t\t`Trying to use an unsupported type (${type}).\r\n\t\t  \t\t Supported types: ${supportedTypes}`\r\n\t\t\t);\r\n\t\t}\r\n\t\tconst component = this.resolver.resolveComponentFactory<any>(this.mapTypeToComponent[type].configComponent);\r\n\t\tthis.component = this.container.createComponent(component);\r\n\t\t// this.widget$.subscribe((w) => (this.component.instance.widget = w));\r\n\t}\r\n}\r\n\r\n@Component({\r\n\ttemplate: `\r\n\t<div ngsDynamicGridItemConfig [type]=\"data.type\"></div>\r\n\t`\r\n})\r\nexport class DynamicGridItemConfigComponent {\r\n\t@ViewChild(DynamicGridItremConfigDirective) DynamicWidgetRef: DynamicGridItremConfigDirective;\r\n\tconstructor(@Inject(MAT_BOTTOM_SHEET_DATA) public data: any) {}\r\n\tget config() {\r\n\t\treturn this.DynamicWidgetRef.config;\r\n\t}\r\n\tget valid() {\r\n\t\treturn this.DynamicWidgetRef.valid;\r\n\t}\r\n}\r\n","import { Component, Injector, Inject } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { MAT_BOTTOM_SHEET_DATA } from \"@angular/material\";\r\nimport { FormGroup, FormControl } from \"@angular/forms\";\r\n\r\nimport { AppState } from \"../grid.reducer\";\r\nimport { GridModel } from \"../models/grid.model\";\r\nimport { UpsertGridStartAction } from \"../services/api/upsert-grid/upsert-grid.actions\";\r\n\r\n@Component({\r\n\ttemplateUrl: \"./grid-config.component.html\"\r\n})\r\nexport class GridConfigComponent {\r\n\tgridTypes: any[];\r\n\tcompactType: any[];\r\n\tdisplayGridTypes: any[];\r\n\tgrid: GridModel;\r\n\toid: string;\r\n\tconfigFormGroup: FormGroup;\r\n\tgridFormGroup: FormGroup;\r\n\tconstructor(private store: Store<AppState>, @Inject(MAT_BOTTOM_SHEET_DATA) private data: any) {\r\n\t\tthis.grid = this.data.grid;\r\n\t\tthis.oid = this.data.oid;\r\n\t\tthis._init_properties();\r\n\t\tthis._init_form_group();\r\n\t}\r\n\tsave() {\r\n\t\tconst grid = {\r\n\t\t\t...this.grid,\r\n\t\t\t...this.gridFormGroup.value,\r\n\t\t\tconfig: { ...this.configFormGroup.value }\r\n\t\t};\r\n\t\tthis.store.dispatch(new UpsertGridStartAction(grid));\r\n\t}\r\n\t_init_form_group() {\r\n\t\tthis.configFormGroup = new FormGroup({\r\n\t\t\tgridType: new FormControl(\"fit\"),\r\n\t\t\tcompactType: new FormControl(\"none\"),\r\n\t\t\tdisplayGrid: new FormControl(\"onDrag&Resize\"),\r\n\t\t\t// empty cell\r\n\t\t\tenableEmptyCellDrag: new FormControl(true),\r\n\t\t\tenableEmptyCellClick: new FormControl(false),\r\n\t\t\tenableEmptyCellContextMenu: new FormControl(false),\r\n\t\t\t//\r\n\t\t\tscrollToNewItems: new FormControl(true),\r\n\t\t\t// margins\r\n\t\t\tmargin: new FormControl(10),\r\n\t\t\touterMargin: new FormControl(true),\r\n\t\t\touterMarginTop: new FormControl(10),\r\n\t\t\touterMarginRight: new FormControl(10),\r\n\t\t\touterMarginBottom: new FormControl(10),\r\n\t\t\touterMarginLeft: new FormControl(10),\r\n\t\t\t// grid size\r\n\t\t\tminCols: new FormControl(3),\r\n\t\t\tmaxCols: new FormControl(3),\r\n\t\t\t//\r\n\t\t\tdraggable: new FormGroup({\r\n\t\t\t\tenabled: new FormControl(),\r\n\t\t\t\tdelayStart: new FormControl(333)\r\n\t\t\t\t// ignoreContent: new FormControl(\"false\")\r\n\t\t\t}),\r\n\t\t\tresizable: new FormGroup({\r\n\t\t\t\tenabled: new FormControl()\r\n\t\t\t})\r\n\t\t});\r\n\t\tthis.gridFormGroup = new FormGroup({\r\n\t\t\toid: new FormControl(this.oid),\r\n\t\t\tname: new FormControl(\"\")\r\n\t\t});\r\n\t\tthis.gridFormGroup.patchValue(this.grid);\r\n\t\tthis.configFormGroup.patchValue(this.grid.config);\r\n\t}\r\n\t_init_properties() {\r\n\t\tthis.gridTypes = [ \"fit\", \"scrollVertical\", \"scrollHorizontal\", \"fixed\", \"verticalFixed\", \"horizontalFixed\" ];\r\n\t\tthis.compactType = [ \"none\", \"compactUp\", \"compactLeft\", \"compactUp&Left\", \"compactLeft&Up\" ];\r\n\t\tthis.displayGridTypes = [ \"always\", \"onDrag&Resize\", \"none\" ];\r\n\t}\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter, ViewChild } from \"@angular/core\";\r\nimport { GridsterConfig, GridsterItem } from \"angular-gridster2\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { filter, map } from \"rxjs/operators\";\r\nimport { MatBottomSheet, MatCheckboxChange } from \"@angular/material\";\r\nimport { Observable } from \"rxjs\";\r\n\r\nimport { getAccountInfo, UserFacadeService } from \"@soushians/user\";\r\n// import { WidgetModel } from \"@soushians/widget\";\r\n\r\nimport { AppState } from \"../grid.reducer\";\r\nimport { GridModel } from \"../models/grid.model\";\r\nimport { GridService } from \"../services/grid.service\";\r\nimport { GridConfigurationService } from \"../services/grid-configuration.service\";\r\nimport { DynamicGridItemConfigComponent } from \"../grid-item/dynamic-grid-item-config.directive\";\r\nimport { GridConfigComponent } from \"../grid-config/grid-config.component\";\r\nimport { IGridItemModel } from \"../models/gird-item.model\";\r\nimport { UpsertGridStartAction } from \"../services/api/upsert-grid/upsert-grid.actions\";\r\nimport { DynamicGridItemViewDirective } from \"../grid-item/dynamic-grid-item-view.directive\";\r\n\r\n@Component({\r\n\tselector: \"ngs-grid\",\r\n\ttemplateUrl: \"./grid.component.html\",\r\n\tstyleUrls: [ \"./grid.component.css\" ]\r\n})\r\nexport class GridComponent implements OnInit {\r\n\t@Output() itemValidateCallback = new EventEmitter();\r\n\t@Output() itemRemovedCallback = new EventEmitter();\r\n\t@Output() itemInitCallback = new EventEmitter();\r\n\t@Output() itemResizeCallback = new EventEmitter();\r\n\t@Output() itemChangeCallback = new EventEmitter();\r\n\t@Output() gridSizeChangedCallback = new EventEmitter();\r\n\t@Output() destroyCallback = new EventEmitter();\r\n\t@Output() initCallback = new EventEmitter();\r\n\r\n\t@Input() oid: string;\r\n\t// widget: WidgetModel<any>;\r\n\thavePermission$: Observable<boolean>;\r\n\tusername: string;\r\n\toptions: GridsterConfig;\r\n\tgrid: GridModel;\r\n\tready = false;\r\n\tgridItemTypes: any[string];\r\n\tconstructor(\r\n\t\tprivate store: Store<AppState>,\r\n\t\tprivate service: GridService,\r\n\t\tprivate userFacadeService: UserFacadeService,\r\n\t\tprivate configurationService: GridConfigurationService,\r\n\t\tprivate bottomSheet: MatBottomSheet\r\n\t) {\r\n\t\tthis.options = {};\r\n\t\tthis.userFacadeService\r\n\t\t\t.getInfo()\r\n\t\t\t.pipe(\r\n\t\t\t\tfilter((user: any) => user.CurrentSession != undefined),\r\n\t\t\t\tmap((user: any) => user.CurrentSession.Username)\r\n\t\t\t)\r\n\t\t\t.subscribe(username => {\r\n\t\t\t\tthis.username = username;\r\n\t\t\t});\r\n\t\tthis.gridItemTypes = Object.keys(this.configurationService.config$.getValue().types);\r\n\t\tthis.havePermission$ = this.store.select(getAccountInfo).pipe(\r\n\t\t\tmap(user => {\r\n\t\t\t\tconst criteria = [ user, user._id, this.grid, this.grid.owner ];\r\n\t\t\t\tif (criteria.some(i => !i)) return false;\r\n\r\n\t\t\t\treturn user._id == this.grid.owner;\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\tstatic itemChange(item, itemComponent) {\r\n\t\tconsole.log(\"itemChanged\", item, itemComponent);\r\n\t}\r\n\r\n\tstatic itemResize(item, itemComponent) {\r\n\t\tconsole.log(\"itemResized\", item, itemComponent);\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\t// this.items = [ { cols: 2, rows: 1, y: 0, x: 0 }, { cols: 2, rows: 2, y: 0, x: 2 } ];\r\n\r\n\t\tthis.grid = new GridModel({\r\n\t\t\toid: this.oid,\r\n\t\t\tconfig: {}\r\n\t\t});\r\n\t\tthis._get_grid_by_oid_and_update_component();\r\n\t}\r\n\r\n\t_initCallback(item) {\r\n\t\tthis.initCallback.emit(item);\r\n\t}\r\n\r\n\tremoveItem(item) {\r\n\t\tthis.grid.items.splice(this.grid.items.indexOf(item), 1);\r\n\t}\r\n\tmake_public(item: IGridItemModel<any>, event: MatCheckboxChange) {\r\n\t\tdebugger;\r\n\t\titem.access = event.checked ? \"public\" : \"private\";\r\n\t\tthis.service.update_item_access(item).subscribe(item => {\r\n\t\t\tdebugger;\r\n\t\t});\r\n\t}\r\n\taddItem(e) {\r\n\t\tdebugger;\r\n\t\te.stopPropagation();\r\n\t\tthis.grid.items.push({} as IGridItemModel<any>);\r\n\t}\r\n\temptyCellClick(event: MouseEvent, item: GridsterItem) {\r\n\t\tconsole.log(\"empty cell click\", event, item);\r\n\t\tthis.grid.items.push(item as any);\r\n\t}\r\n\topenConfig(e) {\r\n\t\tdebugger;\r\n\t\te.stopPropagation();\r\n\t\te.preventDefault();\r\n\t\tthis.bottomSheet.open(GridConfigComponent, {\r\n\t\t\tdata: {\r\n\t\t\t\tgrid: this.grid\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\tsaveConfig(e) {\r\n\t\tdebugger;\r\n\t\te.stopPropagation();\r\n\t\te.stopImmediatePropagation();\r\n\t\te.preventDefault();\r\n\r\n\t\t/**\r\n\t\t * TODO:\r\n\t\t * Ø§Ø­Ø²Ø§Ø± ÙÙÛØª Ø¯Ø± Ø³ÙØª ÙÙØ¯ Ø§ØªØ­Ø§Ù Ø´ÙØ¯\r\n\t\t* Ú©Ø§ÙÙÛÚ¯ Ø¨Ø±Ø§Û Ú¯Ø±ÙØªÙ Ø´ÙØ§Ø³Ù Ú©Ø§Ø±Ø¨Ø±\r\n\t\t */\r\n\t\tthis.store.dispatch(new UpsertGridStartAction(this.grid));\r\n\t}\r\n\tgridItemTypeChanged(item: IGridItemModel<any>) {\r\n\t\tconst bs = this.bottomSheet.open(DynamicGridItemConfigComponent, {\r\n\t\t\tdata: {\r\n\t\t\t\ttype: item.type\r\n\t\t\t}\r\n\t\t});\r\n\t\tbs.afterDismissed().subscribe(data => {\r\n\t\t\titem.config = bs.instance.config;\r\n\t\t\titem.valid = bs.instance.valid;\r\n\t\t});\r\n\t}\r\n\tshowConfig(item: IGridItemModel<any>) {\r\n\t\tconst bs = this.bottomSheet.open(DynamicGridItemConfigComponent, {\r\n\t\t\tdata: {\r\n\t\t\t\ttype: item.type\r\n\t\t\t}\r\n\t\t});\r\n\t\tbs.afterDismissed().subscribe(data => {\r\n\t\t\titem.config = bs.instance.config;\r\n\t\t\titem.valid = bs.instance.valid;\r\n\t\t});\r\n\t}\r\n\t// tslint:disable-next-line:member-ordering\r\n\t// @ViewChild(\"DiagramViewComponent\") _ngsDynamicGridItemView: DiagramViewComponent;\r\n\tgoToEdit() {\r\n\t\tdebugger;\r\n\t\t// tslint:disable-next-line:no-unused-expression\r\n\t\t// this._ngsDynamicGridItemView;\r\n\t}\r\n\t/**\r\n\t * private methods\r\n\t */\r\n\t_get_grid_by_oid_and_update_component() {\r\n\t\tthis.service.selectById(this.oid).pipe(filter(data => data != undefined)).subscribe(data => {\r\n\t\t\tthis.grid = data;\r\n\t\t\tdebugger;\r\n\t\t\tdata.config.outerMarginBottom = +data.config.outerMarginBottom;\r\n\t\t\tdata.config.outerMarginRight = +data.config.outerMarginRight;\r\n\t\t\tthis.options = { ...this.options, ...data.config };\r\n\t\t\t// this.options.draggable = {\r\n\t\t\t// \tenabled: true\r\n\t\t\t// };\r\n\t\t\t// this.options.emptyCellContextMenuCallback = this.emptyCellClick.bind(this);\r\n\t\t\t// this.options.emptyCellDropCallback = this.emptyCellClick.bind(this);\r\n\t\t\tif (this.options.enableEmptyCellDrag) this.options.emptyCellDragCallback = this.emptyCellClick.bind(this);\r\n\t\t\t// if (this.options.enableEmptyCellClick) this.options.emptyCellClickCallback = this.emptyCellClick.bind(this);\r\n\t\t\tthis.ready = true;\r\n\t\t\t// this.options.api.optionsChanged();\r\n\t\t});\r\n\t}\r\n}\r\n","import {\r\n\tComponent,\r\n\tOnInit,\r\n\tComponentRef,\r\n\tComponentFactoryResolver,\r\n\tViewContainerRef,\r\n\tDirective,\r\n\tInput,\r\n\tInject,\r\n\tViewChild\r\n} from \"@angular/core\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { pluck, filter, switchMap, map, startWith } from \"rxjs/operators\";\r\nimport { GridConfigurationService } from \"../services/grid-configuration.service\";\r\nimport { MAT_BOTTOM_SHEET_DATA } from \"@angular/material\";\r\nimport { IGridItemModel } from \"../models/gird-item.model\";\r\n\r\n@Directive({\r\n\tselector: \"[ngsDynamicGridItemView]\"\r\n})\r\nexport class DynamicGridItemViewDirective implements OnInit {\r\n\t@Input(\"ngsDynamicGridItemView\")\r\n\tset item(item: IGridItemModel<any>) {\r\n\t\tif (!item) return;\r\n\t\tif (!item.valid) return;\r\n\t\tthis._resolve_correct_component_base_on_widget_type(item);\r\n\t}\r\n\tcomponent: ComponentRef<any>;\r\n\tmapTypeToComponent: any;\r\n\tconstructor(\r\n\t\tprivate configurationService: GridConfigurationService,\r\n\t\tprivate resolver: ComponentFactoryResolver,\r\n\t\tprivate container: ViewContainerRef\r\n\t) {\r\n\t\tthis.mapTypeToComponent = this.configurationService.config$.getValue().types;\r\n\t}\r\n\tngOnInit() {}\r\n\t_resolve_correct_component_base_on_widget_type(item: IGridItemModel<any>) {\r\n\t\tdebugger;\r\n\t\tif (!this.mapTypeToComponent[item.type]) {\r\n\t\t\tconst supportedTypes = Object.keys(this.mapTypeToComponent).join(\", \");\r\n\t\t\tthrow new Error(\r\n\t\t\t\t`Trying to use an unsupported type (${item.type}).\r\n\t\t  \t\t Supported types: ${supportedTypes}`\r\n\t\t\t);\r\n\t\t}\r\n\t\tconst componentFactory = this.resolver.resolveComponentFactory<any>(\r\n\t\t\tthis.mapTypeToComponent[item.type].viewComponent\r\n\t\t);\r\n\t\tthis.component = this.container.createComponent(componentFactory);\r\n\t\tObject.keys(item.config || {}).forEach((key) => {\r\n\t\t\tthis.component.instance[key] = item.config[key];\r\n\t\t});\r\n\t}\r\n}\r\n","import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { StoreModule } from \"@ngrx/store\";\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport {\r\n\tMatExpansionModule,\r\n\tMatSnackBarModule,\r\n\tMatIconModule,\r\n\tMatButtonModule,\r\n\tMatCardModule,\r\n\tMatSelectModule,\r\n\tMatInputModule,\r\n\tMatFormFieldModule,\r\n\tMatTabsModule,\r\n\tMatRadioModule,\r\n\tMatSlideToggleModule,\r\n\tMatDividerModule,\r\n\tMatCheckboxModule,\r\n\tMatTableModule,\r\n\tMatBottomSheetModule,\r\n\tMatMenuModule,\r\n\tMatToolbarModule\r\n} from \"@angular/material\";\r\nimport { EffectsModule } from \"@ngrx/effects\";\r\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\r\nimport { GridsterModule } from \"angular-gridster2\";\r\n\r\nimport { GridModuleConfig, MODULE_CONFIG_TOKEN } from \"./grid.config\";\r\nimport { GridRoutingModule } from \"./grid-routing.module\";\r\nimport { GetGridApiEffects } from \"./services/api/get-grid/get-grid.effects\";\r\nimport { UpsertGridApiEffects } from \"./services/api/upsert-grid/upsert-grid.effects\";\r\nimport { GetGridsApiEffects } from \"./services/api/get-grids/get-grids.effects\";\r\nimport { GridReducer } from \"./grid.reducer\";\r\nimport { GridDbEffects } from \"./root/grids.effects\";\r\nimport { RootComponent } from \"./root/root.component\";\r\nimport { GridService } from \"./services/grid.service\";\r\nimport { GridConfigurationService } from \"./services/grid-configuration.service\";\r\nimport { GridComponent } from \"./grid/grid.component\";\r\nimport { GridConfigComponent } from \"./grid-config/grid-config.component\";\r\nimport {\r\n\tDynamicGridItremConfigDirective,\r\n\tDynamicGridItemConfigComponent\r\n} from \"./grid-item/dynamic-grid-item-config.directive\";\r\nimport { DynamicGridItemViewDirective } from \"./grid-item/dynamic-grid-item-view.directive\";\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n\t\tRouterModule,\r\n\t\tMatExpansionModule,\r\n\t\tMatSnackBarModule,\r\n\t\tMatIconModule,\r\n\t\tMatButtonModule,\r\n\t\tMatCardModule,\r\n\t\tMatSelectModule,\r\n\t\tMatInputModule,\r\n\t\tMatFormFieldModule,\r\n\t\tMatTabsModule,\r\n\t\tMatBottomSheetModule,\r\n\t\tMatRadioModule,\r\n\t\tFlexLayoutModule,\r\n\t\tMatMenuModule,\r\n\t\tMatToolbarModule,\r\n\t\tFormsModule,\r\n\t\tReactiveFormsModule,\r\n\t\tMatSlideToggleModule,\r\n\t\tMatDividerModule,\r\n\t\tMatCheckboxModule,\r\n\t\tMatTableModule,\r\n\t\tGridsterModule\r\n\t],\r\n\tdeclarations: [\r\n\t\tRootComponent,\r\n\t\tGridComponent,\r\n\t\tGridConfigComponent,\r\n\t\tDynamicGridItremConfigDirective,\r\n\t\tDynamicGridItemConfigComponent,\r\n\t\tDynamicGridItemViewDirective\r\n\t],\r\n\tentryComponents: [ GridConfigComponent, DynamicGridItemConfigComponent ],\r\n\texports: [ GridComponent ]\r\n})\r\nexport class NgsGridModule {\r\n\tstatic forRoot(config?: GridModuleConfig): ModuleWithProviders {\r\n\t\treturn {\r\n\t\t\tngModule: NgsGridRootModule,\r\n\t\t\tproviders: [ { provide: MODULE_CONFIG_TOKEN, useValue: config }, GridConfigurationService, GridService ]\r\n\t\t};\r\n\t}\r\n}\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tNgsGridModule,\r\n\t\tGridRoutingModule,\r\n\t\tStoreModule.forFeature(\"grids\", GridReducer),\r\n\t\tEffectsModule.forFeature([ GridDbEffects, GetGridApiEffects, GetGridsApiEffects, UpsertGridApiEffects ])\r\n\t],\r\n\texports: [ NgsGridModule ]\r\n})\r\nexport class NgsGridRootModule {}\r\n"]}