{"version":3,"sources":["ng://@soushians/grid/lib/grid.config.ts","ng://@soushians/grid/lib/root/root.component.ts","ng://@soushians/grid/lib/grid-routing.module.ts","null","ng://@soushians/grid/lib/services/grid-configuration.service.ts","ng://@soushians/grid/lib/models/upsert-grid.api-model.ts","ng://@soushians/grid/lib/models/grid.model.ts","ng://@soushians/grid/lib/services/api/upsert-grid/upsert-grid.model.ts","ng://@soushians/grid/lib/services/api/get-grid/get-grid.actions.ts","ng://@soushians/grid/lib/services/grid.service.ts","ng://@soushians/grid/lib/services/api/get-grid/get-grid.effects.ts","ng://@soushians/grid/lib/services/api/upsert-grid/upsert-grid.actions.ts","ng://@soushians/grid/lib/services/api/upsert-grid/upsert-grid.effects.ts","ng://@soushians/grid/lib/services/api/get-grids/get-grids.actions.ts","ng://@soushians/grid/lib/services/api/get-grids/get-grids.effects.ts","ng://@soushians/grid/lib/root/widget.actions.ts","ng://@soushians/grid/lib/root/grids.reducers.ts","ng://@soushians/grid/lib/grid.reducer.ts","ng://@soushians/grid/lib/root/grids.effects.ts","ng://@soushians/grid/lib/grid-item/dynamic-grid-item-config.directive.ts","ng://@soushians/grid/lib/grid-config/grid-config.component.ts","ng://@soushians/grid/lib/grid/grid.component.ts","ng://@soushians/grid/lib/grid-item/dynamic-grid-item-view.directive.ts","ng://@soushians/grid/lib/grid.module.ts"],"names":["MODULE_DEFAULT_CONFIG","env","production","frontend_server","endpoints","upsert","find","get","types","MODULE_CONFIG_TOKEN","InjectionToken","RootComponent","Component","args","selector","template","routes","path","component","children","GridRoutingModule","RouterModule","forChild","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","__decorate","decorators","target","key","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__read","o","m","Symbol","iterator","e","ar","next","done","push","value","error","UpsertGridApiModel","GridConfigurationService","configFile","store","this","BehaviorSubject","_config","config$","Injectable","Inject","Store","Request","initValue","_this","keys","forEach","getRequestBody","grid","Response","GridModel","_a","_b","_id","oid","name","type","config","items","GetGridStartAction","payload","GetGridSucceedAction","GetGridFailedAction","GridService","http","userFacadeService","configurationService","userId$","getDisplayName","filter","undefined","pipe","take","combineLatest","switchMap","userId","stringTemplate","params","map","response","Result","getGrids","model","post","selectById","subject","select","state","grids","db","data","tap","dispatch","subscribe","FormSchemaModel","asObservable","selectByOid","providedIn","HttpClient","UserFacadeService","GetGridApiEffects","actions$","service","ofType","action","res","catchError","err","of","Actions","Effect","UpsertGridStartAction","UpsertGridSucceedAction","UpsertGridFailedAction","UpsertGridApiEffects","GetGridsSucceedAction","GetGridsFailedAction","GetGridsApiEffects","UpsertGridAction","GridsActionTypes","initialState","Reducer","_data","concat","newGrid","existedGridIndex","findIndex","w","splice","gridIndex","GridReducer","fromRoot.Reducer","GridDbEffects","pluck","DynamicGridItremConfigDirective","resolver","container","mapTypeToComponent","getValue","_resolve_correct_component_base_on_widget_type","instance","valid","ngOnInit","supportedTypes","join","Error","resolveComponentFactory","configComponent","createComponent","Directive","ComponentFactoryResolver","ViewContainerRef","Input","DynamicGridItemConfigComponent","DynamicWidgetRef","MAT_BOTTOM_SHEET_DATA","ViewChild","GridConfigComponent","_init_properties","_init_form_group","save","gridFormGroup","configFormGroup","FormGroup","gridType","FormControl","compactType","displayGrid","enableEmptyCellDrag","enableEmptyCellClick","enableEmptyCellContextMenu","scrollToNewItems","margin","outerMargin","outerMarginTop","outerMarginRight","outerMarginBottom","outerMarginLeft","minCols","maxCols","draggable","enabled","delayStart","resizable","patchValue","gridTypes","displayGridTypes","GridComponent","bottomSheet","EventEmitter","options","gridItemTypes","havePermission$","getFrontendAuthenticationState","itemChange","item","itemComponent","console","log","itemResize","_get_grid_by_oid_and_update_component","_initCallback","initCallback","emit","removeItem","indexOf","addItem","stopPropagation","emptyCellClick","event","openConfig","preventDefault","open","saveConfig","stopImmediatePropagation","gridItemTypeChanged","bs","afterDismissed","showConfig","emptyCellDragCallback","bind","ready","styles","MatBottomSheet","Output","DynamicGridItemViewDirective","viewComponent","NgsGridModule","forRoot","ngModule","NgsGridRootModule","providers","provide","useValue","NgModule","imports","CommonModule","MatExpansionModule","MatSnackBarModule","MatIconModule","MatButtonModule","MatCardModule","MatSelectModule","MatInputModule","MatFormFieldModule","MatTabsModule","MatBottomSheetModule","MatRadioModule","FlexLayoutModule","FormsModule","ReactiveFormsModule","MatSlideToggleModule","MatDividerModule","MatCheckboxModule","MatTableModule","GridsterModule","declarations","entryComponents","exports","StoreModule","forFeature","EffectsModule"],"mappings":"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","sourcesContent":["import { InjectionToken } from \"@angular/core\";\r\nexport interface IGridType {\r\n\tupsertComponet?: any;\r\n\tconfigComponent?: any;\r\n\ttype?: \"simple\" | \"complex\";\r\n\tviewComponent: any;\r\n}\r\nexport interface GridModuleConfig {\r\n\tenv?: {\r\n\t\tproduction: boolean;\r\n\t\tfrontend_server: string;\r\n\t};\r\n\tendpoints?: {\r\n\t\tget: string;\r\n\t\tfind: string;\r\n\t\tupsert: string;\r\n\t};\r\n\ttypes?: { [key: string]: IGridType };\r\n}\r\n\r\nexport const MODULE_DEFAULT_CONFIG: GridModuleConfig = {\r\n\tenv: {\r\n\t\tproduction: false,\r\n\t\tfrontend_server: \"\"\r\n\t},\r\n\tendpoints: {\r\n\t\tupsert: \"/api/grid\",\r\n\t\tfind: \"/api/grid\",\r\n\t\tget: \"/api/grid/${model._id}\"\r\n\t},\r\n\ttypes: {}\r\n};\r\n\r\nexport const MODULE_CONFIG_TOKEN = new InjectionToken<GridModuleConfig>(\"GridModuleConfig\");\r\n","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n\tselector: \"ngs-grid-root\",\r\n\ttemplate: \"<router-outlet></router-outlet>\"\r\n})\r\nexport class RootComponent {}\r\n","import { ModuleWithProviders } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\nimport { RootComponent } from \"./root/root.component\";\r\n\r\nconst routes: Routes = [\r\n\t{\r\n\t\tpath: \"grid\",\r\n\t\tcomponent: RootComponent,\r\n\t\tchildren: []\r\n\t}\r\n];\r\n\r\nexport const GridRoutingModule: ModuleWithProviders = RouterModule.forChild(routes);\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { BehaviorSubject } from \"rxjs\";\r\nimport { Inject, Injectable } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { GridModuleConfig, MODULE_DEFAULT_CONFIG, MODULE_CONFIG_TOKEN } from \"../grid.config\";\r\nimport { AppState } from \"../grid.reducer\";\r\n\r\n@Injectable()\r\nexport class GridConfigurationService {\r\n\tprivate _config: GridModuleConfig;\r\n\tget config() {\r\n\t\treturn this._config;\r\n\t}\r\n\tconfig$ = new BehaviorSubject(MODULE_DEFAULT_CONFIG);\r\n\tconstructor(@Inject(MODULE_CONFIG_TOKEN) configFile, private store: Store<AppState>) {\r\n\t\tthis._config = Object.assign({}, MODULE_DEFAULT_CONFIG, configFile);\r\n\t\tthis.config$.next(this._config);\r\n\t\t// this.store.select(getGridModuleConfig).subscribe((gridConfig) => {\r\n\t\t// \tif (!gridConfig) {\r\n\t\t// \t\treturn;\r\n\t\t// \t}\r\n\t\t// \tthis._config = Object.assign({}, this._config, gridConfig.Config);\r\n\t\t// \tthis.config$.next(this._config);\r\n\t\t// });\r\n\t}\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { GridModel } from \"./grid.model\";\r\n\r\nexport namespace UpsertGridApiModel {\r\n\texport class Request {\r\n\t\tgrid: GridModel;\r\n\t\tconstructor(initValue: Partial<UpsertGridApiModel.Request> = {}) {\r\n\t\t\tObject.keys(initValue).forEach((key) => (this[key] = initValue[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn this.grid;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: GridModel;\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","import { GridsterConfig } from \"angular-gridster2\";\r\nimport { IGridItemModel } from \"./gird-item.model\";\r\n\r\nexport class GridModel {\r\n\t_id: string;\r\n\toid: string;\r\n\tname: string;\r\n\ttype: string;\r\n\tconfig: GridsterConfig;\r\n\titems: IGridItemModel<any>[];\r\n\tconstructor(\r\n\t\t{\r\n\t\t\t_id,\r\n\t\t\toid,\r\n\t\t\tname,\r\n\t\t\ttype,\r\n\t\t\tconfig,\r\n\t\t\titems\r\n\t\t}: { _id?: string; oid?: string; name?: string; type?: string; config?: GridsterConfig; items?: any[] } = {\r\n\t\t\tconfig: {},\r\n\t\t\titems: []\r\n\t\t}\r\n\t) {\r\n\t\tthis._id = _id;\r\n\t\tthis.oid = oid;\r\n\t\tthis.name = name;\r\n\t\tthis.type = type;\r\n\t\tthis.config = config;\r\n\t\tthis.items = items;\r\n\t}\r\n}\r\n","import { GridModel } from \"../../../models\";\r\n\r\nexport namespace UpsertGridApiModel {\r\n\texport class Request {\r\n\t\tgrid: GridModel;\r\n\t\tconstructor(grid = {}) {\r\n\t\t\tdebugger;\r\n\t\t\tthis.grid = new GridModel(grid);\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn this.grid;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: GridModel;\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { GetGridApiModel } from \"./get-grid.model\";\r\nimport { GridModel } from \"../../../models/grid.model\";\r\n\r\nexport const enum GET_GRID_ACTION_TYPES {\r\n\tSTART = \"[GRID][API][GetGrid] start\",\r\n\tSUCCEED = \"[GRID][API][GetGrid] succeed\",\r\n\tFAILED = \"[GRID][API][GetGrid] failed\"\r\n}\r\n\r\nexport class GetGridStartAction implements Action {\r\n\treadonly type = GET_GRID_ACTION_TYPES.START;\r\n\tconstructor(public payload: string) {}\r\n}\r\nexport class GetGridSucceedAction implements Action {\r\n\treadonly type = GET_GRID_ACTION_TYPES.SUCCEED;\r\n\tconstructor(public payload: GridModel) {}\r\n}\r\nexport class GetGridFailedAction implements Action {\r\n\treadonly type = GET_GRID_ACTION_TYPES.FAILED;\r\n\tconstructor(public payload: any) {}\r\n}\r\n\r\nexport type GetGridActions = GetGridStartAction | GetGridSucceedAction | GetGridFailedAction;\r\n","import { map, filter, tap, take, switchMap, combineLatest } from \"rxjs/operators\";\r\nimport { Observable, BehaviorSubject } from \"rxjs\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { stringTemplate } from \"@soushians/shared\";\r\nimport { UserFacadeService } from \"@soushians/user\";\r\n\r\nimport { GridConfigurationService } from \"./grid-configuration.service\";\r\nimport { UpsertGridApiModel } from \"./api/upsert-grid/upsert-grid.model\";\r\nimport { GetGridStartAction } from \"./api/get-grid/get-grid.actions\";\r\nimport { GetGridsApiModel } from \"./api/get-grids/get-grids.model\";\r\nimport { AppState } from \"../grid.reducer\";\r\nimport { GridModel } from \"../models\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class GridService {\r\n\tuserId$: Observable<string>;\r\n\tconstructor(\r\n\t\tprivate http: HttpClient,\r\n\t\tprivate store: Store<AppState>,\r\n\t\tprivate userFacadeService: UserFacadeService,\r\n\t\tprivate configurationService: GridConfigurationService\r\n\t) {\r\n\t\tthis.userId$ = this.userFacadeService.getDisplayName().filter(i => i != undefined);\r\n\t}\r\n\r\n\tget(_id: string): Observable<GridModel> {\r\n\t\treturn this.configurationService.config$.pipe(\r\n\t\t\tfilter(config => config.endpoints.get !== \"\"),\r\n\t\t\ttake(1),\r\n\t\t\tcombineLatest(this.userId$),\r\n\t\t\tswitchMap(([ config, userId ]) => {\r\n\t\t\t\tdebugger;\r\n\t\t\t\treturn this.http\r\n\t\t\t\t\t.get(stringTemplate(config.env.frontend_server + config.endpoints.get, { _id }), {\r\n\t\t\t\t\t\tparams: {\r\n\t\t\t\t\t\t\tuserId: userId\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.pipe(map((response: UpsertGridApiModel.Response) => response.Result));\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\tgetGrids(): Observable<GridModel[]> {\r\n\t\treturn this.configurationService.config$.pipe(\r\n\t\t\tfilter(config => config.endpoints.find != \"\"),\r\n\t\t\tswitchMap(config => this.http.get(config.env.frontend_server + config.endpoints.find)),\r\n\t\t\tmap((response: GetGridsApiModel.Response) => response.Result)\r\n\t\t);\r\n\t}\r\n\tupsert(grid: UpsertGridApiModel.Request): Observable<GridModel> {\r\n\t\tconst model = new UpsertGridApiModel.Request(grid);\r\n\t\treturn this.configurationService.config$.pipe(\r\n\t\t\tfilter(config => config.endpoints.upsert != \"\"),\r\n\t\t\ttake(1),\r\n\t\t\tcombineLatest(this.userId$),\r\n\t\t\tswitchMap(([ config, userId ]) => {\r\n\t\t\t\treturn this.http.post(config.env.frontend_server + config.endpoints.upsert, model.getRequestBody(), {\r\n\t\t\t\t\tparams: {\r\n\t\t\t\t\t\tuserId: userId\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}),\r\n\t\t\tmap((response: UpsertGridApiModel.Response) => response.Result)\r\n\t\t);\r\n\t}\r\n\t// delete(_id: string) {\r\n\t// \treturn this.configurationService.config$\r\n\t// \t\t.filter((config) => config.endpoints.deleteForm != \"\")\r\n\t// \t\t.switchMap((config) => this.http.get(config.endpoints.deleteForm));\r\n\t// }\r\n\tselectById(_id: string): Observable<GridModel> {\r\n\t\tconst subject = new BehaviorSubject<GridModel>(undefined);\r\n\t\tthis.store\r\n\t\t\t.select(state => state.grids.db.data)\r\n\t\t\t.pipe(\r\n\t\t\t\tfilter(grids => grids != null),\r\n\t\t\t\tmap(grids => grids.find(grid => grid._id == _id)),\r\n\t\t\t\ttap(grid => {\r\n\t\t\t\t\tif (grid == null) {\r\n\t\t\t\t\t\tthis.store.dispatch(new GetGridStartAction(_id));\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t\t.subscribe(FormSchemaModel => subject.next(FormSchemaModel));\r\n\t\treturn subject.asObservable();\r\n\t}\r\n\tselectByOid(_id: string): Observable<GridModel> {\r\n\t\tconst subject = new BehaviorSubject<GridModel>(undefined);\r\n\t\tthis.store\r\n\t\t\t.select(state => state.grids.db.data)\r\n\t\t\t.pipe(\r\n\t\t\t\tfilter(grids => grids != null),\r\n\t\t\t\tmap(grids => grids.find(grid => grid._id == _id)),\r\n\t\t\t\ttap(grid => {\r\n\t\t\t\t\tif (grid == null) {\r\n\t\t\t\t\t\tthis.store.dispatch(new GetGridStartAction(_id));\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t\t.subscribe(FormSchemaModel => subject.next(FormSchemaModel));\r\n\t\treturn subject.asObservable();\r\n\t}\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\nimport { of } from \"rxjs\";\r\n\r\nimport { GridService } from \"../../grid.service\";\r\nimport { GET_GRID_ACTION_TYPES, GetGridActions, GetGridSucceedAction, GetGridFailedAction } from \"./get-grid.actions\";\r\n\r\n@Injectable()\r\nexport class GetGridApiEffects {\r\n\tconstructor(private actions$: Actions<GetGridActions>, private service: GridService) {}\r\n\r\n\t@Effect()\r\n\tstart$ = this.actions$\r\n\t\t.ofType(GET_GRID_ACTION_TYPES.START)\r\n\t\t.pipe(\r\n\t\t\tmap((action) => action.payload),\r\n\t\t\tswitchMap((payload) => this.service.get(payload)),\r\n\t\t\tmap((res) => new GetGridSucceedAction(res)),\r\n\t\t\tcatchError((err) => of(new GetGridFailedAction(err)))\r\n\t\t);\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { UpsertGridApiModel } from \"./upsert-grid.model\";\r\nimport { GridModel } from \"../../../models/grid.model\";\r\n\r\nexport const enum UPSERT_GRID_ACTION_TYPES {\r\n\tSTART = \"[UPSERT_GRID][API][UpsertGrid] start\",\r\n\tSUCCEED = \"[UPSERT_GRID][API][UpsertGrid] succeed\",\r\n\tFAILED = \"[UPSERT_GRID][API][UpsertGrid] failed\"\r\n}\r\n\r\nexport class UpsertGridStartAction implements Action {\r\n\treadonly type = UPSERT_GRID_ACTION_TYPES.START;\r\n\tconstructor(public payload: GridModel) {}\r\n}\r\nexport class UpsertGridSucceedAction implements Action {\r\n\treadonly type = UPSERT_GRID_ACTION_TYPES.SUCCEED;\r\n\tconstructor(public payload: GridModel) {}\r\n}\r\nexport class UpsertGridFailedAction implements Action {\r\n\treadonly type = UPSERT_GRID_ACTION_TYPES.FAILED;\r\n\tconstructor(public payload: any) {}\r\n}\r\n\r\nexport type UpsertGridActions = UpsertGridStartAction | UpsertGridSucceedAction | UpsertGridFailedAction;\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\n\r\nimport { GridService } from \"../../grid.service\";\r\nimport {\r\n\tUPSERT_GRID_ACTION_TYPES,\r\n\tUpsertGridActions,\r\n\tUpsertGridSucceedAction,\r\n\tUpsertGridFailedAction\r\n} from \"./upsert-grid.actions\";\r\nimport { of } from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class UpsertGridApiEffects {\r\n\tconstructor(private actions$: Actions<UpsertGridActions>, private service: GridService) {}\r\n\r\n\t@Effect()\r\n\tstart$ = this.actions$\r\n\t\t.ofType(UPSERT_GRID_ACTION_TYPES.START)\r\n\t\t.pipe(\r\n\t\t\tmap((action) => action.payload),\r\n\t\t\tswitchMap((payload) => this.service.upsert(payload)),\r\n\t\t\tmap((res) => new UpsertGridSucceedAction(res)),\r\n\t\t\tcatchError((err) => of(new UpsertGridFailedAction(err)))\r\n\t\t);\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { GetGridsApiModel } from \"./get-grids.model\";\r\nimport { GridModel } from \"../../../models/grid.model\";\r\n\r\nexport const enum GET_GRIDS_ACTION_TYPES {\r\n\tSTART = \"[GET_GRIDS][API][GetGrids] start\",\r\n\tSUCCEED = \"[GET_GRIDS][API][GetGrids] succeed\",\r\n\tFAILED = \"[GET_GRIDS][API][GetGrids] failed\"\r\n}\r\n\r\nexport class GetGridsStartAction implements Action {\r\n\treadonly type = GET_GRIDS_ACTION_TYPES.START;\r\n}\r\nexport class GetGridsSucceedAction implements Action {\r\n\treadonly type = GET_GRIDS_ACTION_TYPES.SUCCEED;\r\n\tconstructor(public payload: GridModel[]) {}\r\n}\r\nexport class GetGridsFailedAction implements Action {\r\n\treadonly type = GET_GRIDS_ACTION_TYPES.FAILED;\r\n\tconstructor(public payload: any) {}\r\n}\r\n\r\nexport type GetGridsActions = GetGridsStartAction | GetGridsSucceedAction | GetGridsFailedAction;\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\nimport { of } from \"rxjs\";\r\n\r\nimport { GridService } from \"../../grid.service\";\r\nimport {\r\n\tGET_GRIDS_ACTION_TYPES,\r\n\tGetGridsActions,\r\n\tGetGridsSucceedAction,\r\n\tGetGridsFailedAction\r\n} from \"./get-grids.actions\";\r\n\r\n@Injectable()\r\nexport class GetGridsApiEffects {\r\n\tconstructor(private actions$: Actions<GetGridsActions>, private service: GridService) {}\r\n\r\n\t@Effect()\r\n\tstart$ = this.actions$\r\n\t\t.ofType(GET_GRIDS_ACTION_TYPES.START)\r\n\t\t.pipe(\r\n\t\t\tswitchMap(() =>\r\n\t\t\t\tthis.service\r\n\t\t\t\t\t.getGrids()\r\n\t\t\t\t\t.pipe(\r\n\t\t\t\t\t\tmap((res) => new GetGridsSucceedAction(res)),\r\n\t\t\t\t\t\tcatchError((err) => of(new GetGridsFailedAction(err)))\r\n\t\t\t\t\t)\r\n\t\t\t)\r\n\t\t);\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { GridModel } from \"../models\";\r\n\r\nexport enum GridsActionTypes {\r\n\tUPSERT = \"[GRID][DB] UPSERT\",\r\n\tDELETE = \"[GRID][DB] DELETE\"\r\n}\r\n\r\nexport class UpsertGridAction implements Action {\r\n\treadonly type = GridsActionTypes.UPSERT;\r\n\tconstructor(public payload: GridModel[]) {}\r\n}\r\nexport class DeleteGridAction implements Action {\r\n\treadonly type = GridsActionTypes.DELETE;\r\n\tconstructor(public payload: GridModel) {}\r\n}\r\n\r\nexport type GridsActions = UpsertGridAction | DeleteGridAction;\r\n","import { GridModel } from \"../models\";\r\nimport { GridsActionTypes, GridsActions } from \"./widget.actions\";\r\n\r\nexport interface State {\r\n\tdata: GridModel[];\r\n}\r\n\r\nconst initialState: State = {\r\n\tdata: []\r\n};\r\n\r\nexport function Reducer(state = initialState, action: GridsActions): State {\r\n\tlet _data: GridModel[];\r\n\tswitch (action.type) {\r\n\t\tcase GridsActionTypes.UPSERT:\r\n\t\t\t_data = state.data.concat();\r\n\t\t\tconst newGrids = action.payload;\r\n\r\n\t\t\tnewGrids.forEach((newGrid) => {\r\n\t\t\t\tconst existedGridIndex = _data.findIndex((w) => w._id == newGrid._id);\r\n\t\t\t\tif (existedGridIndex > -1) {\r\n\t\t\t\t\t_data.splice(existedGridIndex, 1, newGrid);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t_data.push(newGrid);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: _data\r\n\t\t\t};\r\n\r\n\t\tcase GridsActionTypes.DELETE:\r\n\t\t\t_data = Object.assign({}, state.data);\r\n\r\n\t\t\tconst gridIndex = state.data.findIndex((w) => w._id == action.payload._id);\r\n\t\t\t_data.splice(gridIndex, 1);\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: _data\r\n\t\t\t};\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport const getGrids = (state: State) => state.data;\r\n","import * as fromRoot from \"./root/grids.reducers\";\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface GridState {\r\n\tdb: fromRoot.State;\r\n}\r\n\r\nexport const GridReducer = {\r\n\tdb: fromRoot.Reducer\r\n};\r\n\r\nexport interface AppState {\r\n\tgrids: GridState;\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { map, pluck } from \"rxjs/operators\";\r\nimport { Observable } from \"rxjs\";\r\n\r\nimport { GridModel } from \"../models\";\r\nimport { UpsertGridAction } from \"./widget.actions\";\r\nimport { GET_GRID_ACTION_TYPES } from \"../services/api/get-grid/get-grid.actions\";\r\nimport { GET_GRIDS_ACTION_TYPES } from \"../services/api/get-grids/get-grids.actions\";\r\nimport { UPSERT_GRID_ACTION_TYPES } from \"../services/api/upsert-grid/upsert-grid.actions\";\r\n\r\n@Injectable()\r\nexport class GridDbEffects {\r\n\tconstructor(private actions$: Actions<any>) {}\r\n\r\n\t@Effect()\r\n\tUpsert$ = this.actions$\r\n\t\t.ofType(GET_GRID_ACTION_TYPES.SUCCEED, UPSERT_GRID_ACTION_TYPES.SUCCEED)\r\n\t\t.pipe(pluck(\"payload\"), map((grid: GridModel) => new UpsertGridAction([ grid ])));\r\n\r\n\t@Effect()\r\n\tUpsertMany$ = this.actions$\r\n\t\t.ofType(GET_GRIDS_ACTION_TYPES.SUCCEED)\r\n\t\t.pipe(pluck(\"payload\"), map((grids: GridModel[]) => new UpsertGridAction(grids)));\r\n}\r\n","import {\r\n\tComponent,\r\n\tOnInit,\r\n\tComponentRef,\r\n\tComponentFactoryResolver,\r\n\tViewContainerRef,\r\n\tDirective,\r\n\tInput,\r\n\tViewChild,\r\n\tInject\r\n} from \"@angular/core\";\r\nimport { GridConfigurationService } from \"../services/grid-configuration.service\";\r\nimport { MAT_BOTTOM_SHEET_DATA } from \"@angular/material\";\r\n\r\n@Directive({\r\n\tselector: \"[ngsDynamicGridItemConfig]\"\r\n})\r\nexport class DynamicGridItremConfigDirective implements OnInit {\r\n\t@Input()\r\n\tset type(type: string) {\r\n\t\tif (!type) return;\r\n\t\tthis._resolve_correct_component_base_on_widget_type(type);\r\n\t}\r\n\tget valid() {\r\n\t\treturn this.component.instance.valid;\r\n\t}\r\n\tget config() {\r\n\t\treturn this.component.instance.config;\r\n\t}\r\n\tcomponent: ComponentRef<any>;\r\n\tmapTypeToComponent: any;\r\n\tconstructor(\r\n\t\tprivate configurationService: GridConfigurationService,\r\n\t\tprivate resolver: ComponentFactoryResolver,\r\n\t\tprivate container: ViewContainerRef\r\n\t) {\r\n\t\tthis.mapTypeToComponent = this.configurationService.config$.getValue().types;\r\n\t}\r\n\tngOnInit() {}\r\n\t_resolve_correct_component_base_on_widget_type(type) {\r\n\t\tif (!this.mapTypeToComponent[type]) {\r\n\t\t\tconst supportedTypes = Object.keys(this.mapTypeToComponent).join(\", \");\r\n\t\t\tthrow new Error(\r\n\t\t\t\t`Trying to use an unsupported type (${type}).\r\n\t\t  \t\t Supported types: ${supportedTypes}`\r\n\t\t\t);\r\n\t\t}\r\n\t\tconst component = this.resolver.resolveComponentFactory<any>(this.mapTypeToComponent[type].configComponent);\r\n\t\tthis.component = this.container.createComponent(component);\r\n\t\t// this.widget$.subscribe((w) => (this.component.instance.widget = w));\r\n\t}\r\n}\r\n\r\n@Component({\r\n\ttemplate: `\r\n\t<div ngsDynamicGridItemConfig [type]=\"data.type\"></div>\r\n\t`\r\n})\r\nexport class DynamicGridItemConfigComponent {\r\n\t@ViewChild(DynamicGridItremConfigDirective) DynamicWidgetRef: DynamicGridItremConfigDirective;\r\n\tconstructor(@Inject(MAT_BOTTOM_SHEET_DATA) public data: any) {}\r\n\tget config() {\r\n\t\treturn this.DynamicWidgetRef.config;\r\n\t}\r\n\tget valid() {\r\n\t\treturn this.DynamicWidgetRef.valid;\r\n\t}\r\n}\r\n","import { Component, Injector, Inject } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { AppState } from \"../grid.reducer\";\r\nimport { GridModel } from \"../models\";\r\nimport { MAT_BOTTOM_SHEET_DATA } from \"@angular/material\";\r\nimport { FormGroup, FormControl } from \"@angular/forms\";\r\n\r\nimport { UpsertGridStartAction } from \"../services/api/upsert-grid/upsert-grid.actions\";\r\n\r\n@Component({\r\n\ttemplate: `<div fxLayout=\"row wrap\" fxLayoutAlign=\"center center\">\r\n    <div fxFlex=\"100\" [formGroup]=\"gridFormGroup\">\r\n        <mat-form-field>\r\n            <input matInput placeholder=\"name\" formControlName=\"name\">\r\n        </mat-form-field>\r\n    </div>\r\n\r\n    <div  fxFlex=\"100\" [formGroup]=\"configFormGroup\">\r\n        <div fxFlex=\"100\" fxLayout=\"row wrap\" fxLayoutGap=\"25px\">\r\n            <mat-form-field>\r\n                <mat-select placeholder=\"Grid Type\" formControlName=\"gridType\">\r\n                    <mat-option *ngFor=\"let item of gridTypes\" [value]=\"item\">\r\n                        {{item}}\r\n                    </mat-option>\r\n                </mat-select>\r\n            </mat-form-field>\r\n            <mat-form-field>\r\n                <mat-select placeholder=\"Compact Type\" formControlName=\"compactType\">\r\n                    <mat-option *ngFor=\"let item of compactType\" [value]=\"item\">\r\n                        {{item}}\r\n                    </mat-option>\r\n                </mat-select>\r\n            </mat-form-field>\r\n            <mat-form-field>\r\n                <mat-select placeholder=\"Display Grid\" formControlName=\"displayGrid\">\r\n                    <mat-option *ngFor=\"let item of displayGridTypes\" [value]=\"item\">\r\n                        {{item}}\r\n                    </mat-option>\r\n                </mat-select>\r\n            </mat-form-field>\r\n        </div>\r\n        <div fxFlex=\"100\" fxLayout=\"row wrap\" fxLayoutGap=\"25px\">\r\n            <div>\r\n                <mat-checkbox formControlName=\"enableEmptyCellDrag\">enableEmptyCellDrag</mat-checkbox>\r\n                <!-- <mat-checkbox formControlName=\"enableEmptyCellClick\">enableEmptyCellClick</mat-checkbox> -->\r\n            </div>\r\n            <div [formGroup]=\"configFormGroup.get('draggable')\">\r\n                <mat-checkbox formControlName=\"enabled\">enable draggable</mat-checkbox>\r\n            </div>\r\n            <div [formGroup]=\"configFormGroup.get('resizable')\">\r\n                <mat-checkbox formControlName=\"enabled\">enable resizable</mat-checkbox>\r\n            </div>\r\n        </div>\r\n        <!-- Margins -->\r\n        <div fxFlex=\"100\" fxLayout=\"row wrap\" fxLayoutGap=\"25px\">\r\n            <h3 fxFlex=\"100\">Ø­Ø§Ø´ÛÙ</h3>\r\n            <div fxFlex=\"100\">\r\n                <mat-checkbox fxFlex formControlName=\"outerMargin\">outerMargin</mat-checkbox>\r\n            </div>\r\n            <div fxFlex=\"100\" fxLayout=\"row wrap\" fxLayoutGap=\"25px\">\r\n                <mat-form-field fxFlex>\r\n                    <input matInput type=\"number\" placeholder=\"margin\" formControlName=\"margin\" />\r\n                </mat-form-field>\r\n                <mat-form-field fxFlex>\r\n                    <input matInput type=\"number\" placeholder=\"outerMarginTop\" formControlName=\"outerMarginTop\" />\r\n                </mat-form-field>\r\n                <mat-form-field fxFlex>\r\n                    <input matInput type=\"number\" placeholder=\"outerMarginRight\" formControlName=\"outerMarginRight\" />\r\n                </mat-form-field>\r\n                <mat-form-field fxFlex>\r\n                    <input matInput type=\"number\" placeholder=\"outerMarginBottom\" formControlName=\"outerMarginBottom\" />\r\n                </mat-form-field>\r\n                <mat-form-field fxFlex>\r\n                    <input matInput type=\"number\" placeholder=\"outerMarginLeft\" formControlName=\"outerMarginLeft\" />\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Grid Size -->\r\n        <div fxFlex=\"100\" fxLayout=\"row wrap\" fxLayoutGap=\"25px\">\r\n            <h3 fxFlex=\"100\">Ú¯Ø±ÛØ¯</h3>\r\n            <mat-form-field fxFlex>\r\n                <input matInput type=\"number\" placeholder=\"minCols\" formControlName=\"minCols\" />\r\n            </mat-form-field>\r\n            <mat-form-field fxFlex>\r\n                <input matInput type=\"number\" placeholder=\"maxCols\" formControlName=\"maxCols\" />\r\n            </mat-form-field>\r\n        </div>\r\n        <button fxFlex=\"100\" color=\"primary\" mat-raised-button (click)=\"save()\">Save</button>\r\n    </div>\r\n</div>`\r\n})\r\nexport class GridConfigComponent {\r\n\tgridTypes: any[];\r\n\tcompactType: any[];\r\n\tdisplayGridTypes: any[];\r\n\tgrid: GridModel;\r\n\toid: string;\r\n\tconfigFormGroup: FormGroup;\r\n\tgridFormGroup: FormGroup;\r\n\tconstructor(private store: Store<AppState>, @Inject(MAT_BOTTOM_SHEET_DATA) private data: any) {\r\n\t\tthis.grid = this.data.grid;\r\n\t\tthis.oid = this.data.oid;\r\n\t\tthis._init_properties();\r\n\t\tthis._init_form_group();\r\n\t}\r\n\tsave() {\r\n\t\tconst grid = {\r\n\t\t\t...this.grid,\r\n\t\t\t...this.gridFormGroup.value,\r\n\t\t\tconfig: { ...this.configFormGroup.value }\r\n\t\t};\r\n\t\tthis.store.dispatch(new UpsertGridStartAction(grid));\r\n\t}\r\n\t_init_form_group() {\r\n\t\tthis.configFormGroup = new FormGroup({\r\n\t\t\tgridType: new FormControl(\"fit\"),\r\n\t\t\tcompactType: new FormControl(\"none\"),\r\n\t\t\tdisplayGrid: new FormControl(\"onDrag&Resize\"),\r\n\t\t\t// empty cell\r\n\t\t\tenableEmptyCellDrag: new FormControl(true),\r\n\t\t\tenableEmptyCellClick: new FormControl(false),\r\n\t\t\tenableEmptyCellContextMenu: new FormControl(false),\r\n\t\t\t//\r\n\t\t\tscrollToNewItems: new FormControl(true),\r\n\t\t\t// margins\r\n\t\t\tmargin: new FormControl(\"10\"),\r\n\t\t\touterMargin: new FormControl(true),\r\n\t\t\touterMarginTop: new FormControl(\"10\"),\r\n\t\t\touterMarginRight: new FormControl(\"10\"),\r\n\t\t\touterMarginBottom: new FormControl(\"10\"),\r\n\t\t\touterMarginLeft: new FormControl(\"10\"),\r\n\t\t\t// grid size\r\n\t\t\tminCols: new FormControl(3),\r\n\t\t\tmaxCols: new FormControl(3),\r\n\t\t\t//\r\n\t\t\tdraggable: new FormGroup({\r\n\t\t\t\tenabled: new FormControl(),\r\n\t\t\t\tdelayStart: new FormControl(333)\r\n\t\t\t\t// ignoreContent: new FormControl(\"false\")\r\n\t\t\t}),\r\n\t\t\tresizable: new FormGroup({\r\n\t\t\t\tenabled: new FormControl()\r\n\t\t\t})\r\n\t\t});\r\n\t\tthis.gridFormGroup = new FormGroup({\r\n\t\t\toid: new FormControl(this.oid),\r\n\t\t\tname: new FormControl(\"\")\r\n\t\t});\r\n\t\tthis.gridFormGroup.patchValue(this.grid);\r\n\t\tthis.configFormGroup.patchValue(this.grid.config);\r\n\t}\r\n\t_init_properties() {\r\n\t\tthis.gridTypes = [ \"fit\", \"scrollVertical\", \"scrollHorizontal\", \"fixed\", \"verticalFixed\", \"horizontalFixed\" ];\r\n\t\tthis.compactType = [ \"none\", \"compactUp\", \"compactLeft\", \"compactUp&Left\", \"compactLeft&Up\" ];\r\n\t\tthis.displayGridTypes = [ \"always\", \"onDrag&Resize\", \"none\" ];\r\n\t}\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\r\nimport { GridsterConfig, GridsterItem } from \"angular-gridster2\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { filter } from \"rxjs/operators\";\r\nimport { MatBottomSheet } from \"@angular/material\";\r\nimport { Observable } from \"rxjs\";\r\n\r\nimport { getFrontendAuthenticationState } from \"@soushians/frontend-authentication\";\r\n\r\nimport { AppState } from \"../grid.reducer\";\r\nimport { GridModel } from \"../models\";\r\nimport { GridService } from \"../services/grid.service\";\r\nimport { GridConfigurationService } from \"../services/grid-configuration.service\";\r\nimport { DynamicGridItemConfigComponent } from \"../grid-item/dynamic-grid-item-config.directive\";\r\nimport { GridConfigComponent } from \"../grid-config/grid-config.component\";\r\nimport { IGridItemModel } from \"../models/gird-item.model\";\r\nimport { UpsertGridStartAction } from \"../services/api/upsert-grid/upsert-grid.actions\";\r\n\r\n@Component({\r\n\tselector: \"ngs-grid\",\r\n\ttemplate: `<gridster [options]=\"options\">\r\n    <div class=\"actions\">\r\n        <button mat-mini-fab (click)=\"addItem($event)\">\r\n            <mat-icon>add</mat-icon>\r\n        </button>\r\n        <button mat-mini-fab (click)=\"openConfig($event)\" *ngIf=\"havePermission$ | async\">\r\n            <mat-icon>dashboard</mat-icon>\r\n        </button>\r\n        <button mat-mini-fab (click)=\"saveConfig($event)\">\r\n            <mat-icon>done</mat-icon>\r\n        </button>\r\n    </div>\r\n    <gridster-item [item]=\"item\" *ngFor=\"let item of grid.items\">\r\n        <div class=\"initializer\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n            <div fxFlex=\"nogrow\">\r\n                <button mat-icon-button (click)=\"removeItem(item)\">\r\n                    <mat-icon>delete</mat-icon>\r\n                </button>\r\n                <button *ngIf=\"item.type\" mat-icon-button (click)=\"showConfig(item)\">\r\n                    <mat-icon>settings</mat-icon>\r\n                </button>\r\n            </div>\r\n        </div>\r\n        <mat-form-field *ngIf=\"!item.valid\"  fxFlex=\"100\">\r\n            <mat-select placeholder=\"Grid Item Type\" [(ngModel)]=\"item.type\" (selectionChange)=\"gridItemTypeChanged(item)\">\r\n                <mat-option *ngFor=\"let item of gridItemTypes\" [value]=\"item\">\r\n                    {{item}}\r\n                </mat-option>\r\n            </mat-select>\r\n        </mat-form-field>\r\n        <div *ngIf=\"item.valid\" [ngsDynamicGridItemView]=\"item\"></div>\r\n    </gridster-item>\r\n</gridster>`,\r\n\tstyles: [`:host{width:100%;height:100vh;display:block;direction:ltr}.initializer{padding:25px}.actions{position:absolute;top:25px;right:25px;z-index:5}.actions button{margin-left:10px}`]\r\n})\r\nexport class GridComponent implements OnInit {\r\n\t@Output() itemValidateCallback = new EventEmitter();\r\n\t@Output() itemRemovedCallback = new EventEmitter();\r\n\t@Output() itemInitCallback = new EventEmitter();\r\n\t@Output() itemResizeCallback = new EventEmitter();\r\n\t@Output() itemChangeCallback = new EventEmitter();\r\n\t@Output() gridSizeChangedCallback = new EventEmitter();\r\n\t@Output() destroyCallback = new EventEmitter();\r\n\t@Output() initCallback = new EventEmitter();\r\n\r\n\t@Input() oid: string;\r\n\thavePermission$: Observable<boolean>;\r\n\toptions: GridsterConfig;\r\n\tgrid: GridModel;\r\n\tready = false;\r\n\tgridItemTypes: any[string];\r\n\tconstructor(\r\n\t\tprivate store: Store<AppState>,\r\n\t\tprivate service: GridService,\r\n\t\tprivate configurationService: GridConfigurationService,\r\n\t\tprivate bottomSheet: MatBottomSheet\r\n\t) {\r\n\t\tthis.options = {};\r\n\t\tthis.gridItemTypes = Object.keys(this.configurationService.config$.getValue().types);\r\n\t\tthis.havePermission$ = this.store.select(getFrontendAuthenticationState);\r\n\t}\r\n\r\n\tstatic itemChange(item, itemComponent) {\r\n\t\tconsole.log(\"itemChanged\", item, itemComponent);\r\n\t}\r\n\r\n\tstatic itemResize(item, itemComponent) {\r\n\t\tconsole.log(\"itemResized\", item, itemComponent);\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\t// this.items = [ { cols: 2, rows: 1, y: 0, x: 0 }, { cols: 2, rows: 2, y: 0, x: 2 } ];\r\n\r\n\t\tthis.grid = new GridModel({\r\n\t\t\toid: this.oid,\r\n\t\t\tconfig: {}\r\n\t\t});\r\n\t\tthis._get_grid_by_oid_and_update_component();\r\n\t}\r\n\r\n\t_initCallback(item) {\r\n\t\tthis.initCallback.emit(item);\r\n\t}\r\n\r\n\tremoveItem(item) {\r\n\t\tthis.grid.items.splice(this.grid.items.indexOf(item), 1);\r\n\t}\r\n\r\n\taddItem(e) {\r\n\t\te.stopPropagation();\r\n\t\tthis.grid.items.push({} as IGridItemModel<any>);\r\n\t}\r\n\temptyCellClick(event: MouseEvent, item: GridsterItem) {\r\n\t\tconsole.log(\"empty cell click\", event, item);\r\n\t\tthis.grid.items.push(item as any);\r\n\t}\r\n\topenConfig(e) {\r\n\t\te.stopPropagation();\r\n\t\te.preventDefault();\r\n\t\tthis.bottomSheet.open(GridConfigComponent, {\r\n\t\t\tdata: {\r\n\t\t\t\tgrid: this.grid\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\tsaveConfig(e) {\r\n\t\te.stopPropagation();\r\n\t\te.stopImmediatePropagation();\r\n\t\te.preventDefault();\r\n\r\n\t\t/**\r\n\t\t * TODO: \r\n\t\t * Ø§Ø­Ø²Ø§Ø± ÙÙÛØª Ø¯Ø± Ø³ÙØª ÙÙØ¯ Ø§ØªØ­Ø§Ù Ø´ÙØ¯\r\n\t\t* Ú©Ø§ÙÙÛÚ¯ Ø¨Ø±Ø§Û Ú¯Ø±ÙØªÙ Ø´ÙØ§Ø³Ù Ú©Ø§Ø±Ø¨Ø±\r\n\t\t */\r\n\t\tthis.store.dispatch(new UpsertGridStartAction(this.grid));\r\n\t}\r\n\tgridItemTypeChanged(item: IGridItemModel<any>) {\r\n\t\tconst bs = this.bottomSheet.open(DynamicGridItemConfigComponent, {\r\n\t\t\tdata: {\r\n\t\t\t\ttype: item.type\r\n\t\t\t}\r\n\t\t});\r\n\t\tbs.afterDismissed().subscribe((data) => {\r\n\t\t\titem.config = bs.instance.config;\r\n\t\t\titem.valid = bs.instance.valid;\r\n\t\t});\r\n\t}\r\n\tshowConfig(item: IGridItemModel<any>) {\r\n\t\tconst bs = this.bottomSheet.open(DynamicGridItemConfigComponent, {\r\n\t\t\tdata: {\r\n\t\t\t\ttype: item.type\r\n\t\t\t}\r\n\t\t});\r\n\t\tbs.afterDismissed().subscribe((data) => {\r\n\t\t\titem.config = bs.instance.config;\r\n\t\t\titem.valid = bs.instance.valid;\r\n\t\t});\r\n\t}\r\n\t_get_grid_by_oid_and_update_component() {\r\n\t\tthis.service.selectById(this.oid).pipe(filter((data) => data != undefined)).subscribe((data) => {\r\n\t\t\tthis.grid = data;\r\n\t\t\tthis.options = { ...this.options, ...data.config };\r\n\t\t\t// this.options.draggable = {\r\n\t\t\t// \tenabled: true\r\n\t\t\t// };\r\n\t\t\t// this.options.emptyCellContextMenuCallback = this.emptyCellClick.bind(this);\r\n\t\t\t// this.options.emptyCellDropCallback = this.emptyCellClick.bind(this);\r\n\t\t\tif (this.options.enableEmptyCellDrag) this.options.emptyCellDragCallback = this.emptyCellClick.bind(this);\r\n\t\t\t// if (this.options.enableEmptyCellClick) this.options.emptyCellClickCallback = this.emptyCellClick.bind(this);\r\n\t\t\tthis.ready = true;\r\n\t\t\t// this.options.api.optionsChanged();\r\n\t\t});\r\n\t}\r\n}\r\n","import {\r\n\tComponent,\r\n\tOnInit,\r\n\tComponentRef,\r\n\tComponentFactoryResolver,\r\n\tViewContainerRef,\r\n\tDirective,\r\n\tInput,\r\n\tInject,\r\n\tViewChild\r\n} from \"@angular/core\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { pluck, filter, switchMap, map, startWith } from \"rxjs/operators\";\r\nimport { GridConfigurationService } from \"../services/grid-configuration.service\";\r\nimport { MAT_BOTTOM_SHEET_DATA } from \"@angular/material\";\r\nimport { IGridItemModel } from \"../models/gird-item.model\";\r\n\r\n@Directive({\r\n\tselector: \"[ngsDynamicGridItemView]\"\r\n})\r\nexport class DynamicGridItemViewDirective implements OnInit {\r\n\t@Input(\"ngsDynamicGridItemView\")\r\n\tset item(item: IGridItemModel<any>) {\r\n\t\tif (!item) return;\r\n\t\tif (!item.valid) return;\r\n\t\tthis._resolve_correct_component_base_on_widget_type(item);\r\n\t}\r\n\tcomponent: ComponentRef<any>;\r\n\tmapTypeToComponent: any;\r\n\tconstructor(\r\n\t\tprivate configurationService: GridConfigurationService,\r\n\t\tprivate resolver: ComponentFactoryResolver,\r\n\t\tprivate container: ViewContainerRef\r\n\t) {\r\n\t\tthis.mapTypeToComponent = this.configurationService.config$.getValue().types;\r\n\t}\r\n\tngOnInit() {}\r\n\t_resolve_correct_component_base_on_widget_type(item: IGridItemModel<any>) {\r\n\t\tdebugger;\r\n\t\tif (!this.mapTypeToComponent[item.type]) {\r\n\t\t\tconst supportedTypes = Object.keys(this.mapTypeToComponent).join(\", \");\r\n\t\t\tthrow new Error(\r\n\t\t\t\t`Trying to use an unsupported type (${item.type}).\r\n\t\t  \t\t Supported types: ${supportedTypes}`\r\n\t\t\t);\r\n\t\t}\r\n\t\tconst component = this.resolver.resolveComponentFactory<any>(this.mapTypeToComponent[item.type].viewComponent);\r\n\t\tthis.component = this.container.createComponent(component);\r\n\t\tObject.keys(item.config || {}).forEach((key) => {\r\n\t\t\tthis.component.instance[key] = item.config[key];\r\n\t\t});\r\n\t}\r\n}\r\n","import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { StoreDevtoolsModule } from \"@ngrx/store-devtools\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { StoreModule } from \"@ngrx/store\";\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport {\r\n\tMatExpansionModule,\r\n\tMatSnackBarModule,\r\n\tMatIconModule,\r\n\tMatButtonModule,\r\n\tMatCardModule,\r\n\tMatSelectModule,\r\n\tMatInputModule,\r\n\tMatFormFieldModule,\r\n\tMatTabsModule,\r\n\tMatRadioModule,\r\n\tMatSlideToggleModule,\r\n\tMatDividerModule,\r\n\tMatCheckboxModule,\r\n\tMatTableModule,\r\n\tMatBottomSheetModule\r\n} from \"@angular/material\";\r\nimport { EffectsModule } from \"@ngrx/effects\";\r\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\r\nimport { GridsterModule } from \"angular-gridster2\";\r\n\r\nimport { GridModuleConfig, MODULE_CONFIG_TOKEN } from \"./grid.config\";\r\nimport { GridRoutingModule } from \"./grid-routing.module\";\r\nimport { GetGridApiEffects } from \"./services/api/get-grid/get-grid.effects\";\r\nimport { UpsertGridApiEffects } from \"./services/api/upsert-grid/upsert-grid.effects\";\r\nimport { GetGridsApiEffects } from \"./services/api/get-grids/get-grids.effects\";\r\nimport { GridReducer } from \"./grid.reducer\";\r\nimport { GridDbEffects } from \"./root/grids.effects\";\r\nimport { RootComponent } from \"./root/root.component\";\r\nimport { GridService } from \"./services/grid.service\";\r\nimport { GridConfigurationService } from \"./services/grid-configuration.service\";\r\nimport { GridComponent } from \"./grid/grid.component\";\r\nimport { GridConfigComponent } from \"./grid-config/grid-config.component\";\r\nimport {\r\n\tDynamicGridItremConfigDirective,\r\n\tDynamicGridItemConfigComponent\r\n} from \"./grid-item/dynamic-grid-item-config.directive\";\r\nimport { DynamicGridItemViewDirective } from \"./grid-item/dynamic-grid-item-view.directive\";\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n\t\tRouterModule,\r\n\t\tMatExpansionModule,\r\n\t\tMatSnackBarModule,\r\n\t\tMatIconModule,\r\n\t\tMatButtonModule,\r\n\t\tMatCardModule,\r\n\t\tMatSelectModule,\r\n\t\tMatInputModule,\r\n\t\tMatFormFieldModule,\r\n\t\tMatTabsModule,\r\n\t\tMatBottomSheetModule,\r\n\t\tMatRadioModule,\r\n\t\tFlexLayoutModule,\r\n\t\tFormsModule,\r\n\t\tReactiveFormsModule,\r\n\t\tMatSlideToggleModule,\r\n\t\tMatDividerModule,\r\n\t\tMatCheckboxModule,\r\n\t\tMatTableModule,\r\n\t\tGridsterModule\r\n\t],\r\n\tdeclarations: [\r\n\t\tRootComponent,\r\n\t\tGridComponent,\r\n\t\tGridConfigComponent,\r\n\t\tDynamicGridItremConfigDirective,\r\n\t\tDynamicGridItemConfigComponent,\r\n\t\tDynamicGridItemViewDirective\r\n\t],\r\n\tentryComponents: [ GridConfigComponent, DynamicGridItemConfigComponent ],\r\n\texports: [ GridComponent ]\r\n})\r\nexport class NgsGridModule {\r\n\tstatic forRoot(config?: GridModuleConfig): ModuleWithProviders {\r\n\t\treturn {\r\n\t\t\tngModule: NgsGridRootModule,\r\n\t\t\tproviders: [ { provide: MODULE_CONFIG_TOKEN, useValue: config }, GridConfigurationService, GridService ]\r\n\t\t};\r\n\t}\r\n}\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tNgsGridModule,\r\n\t\tGridRoutingModule,\r\n\t\tStoreModule.forFeature(\"grids\", GridReducer),\r\n\t\tEffectsModule.forFeature([ GridDbEffects, GetGridApiEffects, GetGridsApiEffects, UpsertGridApiEffects ])\r\n\t],\r\n\texports: [ NgsGridModule ]\r\n})\r\nexport class NgsGridRootModule {}\r\n"]}