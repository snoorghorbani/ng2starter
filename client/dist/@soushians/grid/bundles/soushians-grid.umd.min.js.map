{"version":3,"sources":["ng://@soushians/grid/lib/grid.config.ts","ng://@soushians/grid/lib/models/upsert-grid.api-model.ts","ng://@soushians/grid/lib/root/root.component.ts","ng://@soushians/grid/lib/grid-routing.module.ts","null","ng://@soushians/grid/lib/models/grid.model.ts","ng://@soushians/grid/lib/services/api/upsert-grid/upsert-grid.model.ts","ng://@soushians/grid/lib/services/grid-configuration.service.ts","ng://@soushians/grid/lib/services/api/get-grid/get-grid.actions.ts","ng://@soushians/grid/lib/services/grid.service.ts","ng://@soushians/grid/lib/services/api/get-grid/get-grid.effects.ts","ng://@soushians/grid/lib/services/api/upsert-grid/upsert-grid.actions.ts","ng://@soushians/grid/lib/services/api/upsert-grid/upsert-grid.effects.ts","ng://@soushians/grid/lib/services/api/get-grids/get-grids.actions.ts","ng://@soushians/grid/lib/services/api/get-grids/get-grids.effects.ts","ng://@soushians/grid/lib/root/widget.actions.ts","ng://@soushians/grid/lib/root/grids.reducers.ts","ng://@soushians/grid/lib/grid.reducer.ts","ng://@soushians/grid/lib/root/grids.effects.ts","ng://@soushians/grid/lib/grid-item/dynamic-grid-item-config.directive.ts","ng://@soushians/grid/lib/grid-config/grid-config.component.ts","ng://@soushians/grid/lib/grid/grid.component.ts","ng://@soushians/grid/lib/grid-item/dynamic-grid-item-view.directive.ts","ng://@soushians/grid/lib/grid.module.ts"],"names":["UpsertGridApiModel","MODULE_DEFAULT_CONFIG","env","production","frontend_server","endpoints","upsert","find","get","update_item","update_item_access","types","MODULE_CONFIG_TOKEN","InjectionToken","RootComponent","Component","args","selector","template","routes","path","component","children","GridRoutingModule","RouterModule","forChild","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__decorate","decorators","target","key","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","Request","initValue","_this","keys","forEach","getRequestBody","grid","Response","GridModel","_a","_b","_id","oid","name","type","config","items","GridConfigurationService","configFile","store","BehaviorSubject","_config","config$","next","Injectable","Inject","Store","GetGridStartAction","payload","GetGridSucceedAction","GetGridFailedAction","GridService","http","userFacadeService","configurationService","pipe","filter","take","skipUntil","select","getFrontendUser","switchMap","stringTemplate","map","response","Result","getGrids","item","patch","model","post","selectById","subject","undefined","state","grids","db","data","tap","dispatch","subscribe","FormSchemaModel","asObservable","selectByOid","providedIn","HttpClient","UserFacadeService","GetGridApiEffects","actions$","service","ofType","action","res","catchError","err","of","Actions","Effect","UpsertGridStartAction","UpsertGridSucceedAction","UpsertGridFailedAction","UpsertGridApiEffects","GetGridsSucceedAction","GetGridsFailedAction","GetGridsApiEffects","UpsertGridAction","GridsActionTypes","initialState","Reducer","_data","concat","newGrid","existedGridIndex","findIndex","w","splice","push","gridIndex","GridReducer","fromRoot.Reducer","GridDbEffects","pluck","DynamicGridItremConfigDirective","resolver","container","mapTypeToComponent","getValue","_resolve_correct_component_base_on_widget_type","instance","valid","ngOnInit","supportedTypes","join","Error","resolveComponentFactory","configComponent","createComponent","Directive","ComponentFactoryResolver","ViewContainerRef","Input","DynamicGridItemConfigComponent","DynamicWidgetRef","MAT_BOTTOM_SHEET_DATA","ViewChild","GridConfigComponent","_init_properties","_init_form_group","save","gridFormGroup","value","configFormGroup","FormGroup","gridType","FormControl","compactType","displayGrid","enableEmptyCellDrag","enableEmptyCellClick","enableEmptyCellContextMenu","scrollToNewItems","margin","outerMargin","outerMarginTop","outerMarginRight","outerMarginBottom","outerMarginLeft","minCols","maxCols","draggable","enabled","delayStart","resizable","patchValue","gridTypes","displayGridTypes","GridComponent","bottomSheet","EventEmitter","options","getInfo","user","CurrentSession","Username","username","gridItemTypes","havePermission$","getAccountInfo","owner","some","itemChange","itemComponent","console","log","itemResize","_get_grid_by_oid_and_update_component","_initCallback","initCallback","emit","removeItem","indexOf","make_public","event","access","checked","addItem","e","stopPropagation","emptyCellClick","openConfig","preventDefault","open","saveConfig","stopImmediatePropagation","gridItemTypeChanged","bs","afterDismissed","showConfig","goToEdit","emptyCellDragCallback","bind","ready","styles","MatBottomSheet","Output","DynamicGridItemViewDirective","componentFactory","viewComponent","NgsGridModule","forRoot","ngModule","NgsGridRootModule","providers","provide","useValue","NgModule","imports","CommonModule","MatExpansionModule","MatSnackBarModule","MatIconModule","MatButtonModule","MatCardModule","MatSelectModule","MatInputModule","MatFormFieldModule","MatTabsModule","MatBottomSheetModule","MatRadioModule","FlexLayoutModule","MatMenuModule","MatToolbarModule","FormsModule","ReactiveFormsModule","MatSlideToggleModule","MatDividerModule","MatCheckboxModule","MatTableModule","GridsterModule","declarations","entryComponents","exports","StoreModule","forFeature","EffectsModule"],"mappings":"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","sourcesContent":["import { InjectionToken } from \"@angular/core\";\r\nexport interface IGridType {\r\n\tupsertComponet?: any;\r\n\tconfigComponent?: any;\r\n\ttype?: \"simple\" | \"complex\";\r\n\tviewComponent: any;\r\n}\r\nexport interface GridModuleConfig {\r\n\tenv?: {\r\n\t\tproduction: boolean;\r\n\t\tfrontend_server: string;\r\n\t};\r\n\tendpoints?: {\r\n\t\tget: string;\r\n\t\tfind: string;\r\n\t\tupsert: string;\r\n\t\tupdate_item: string;\r\n\t\tupdate_item_access: string;\r\n\t};\r\n\ttypes?: { [key: string]: IGridType };\r\n}\r\n\r\nexport const MODULE_DEFAULT_CONFIG: GridModuleConfig = {\r\n\tenv: {\r\n\t\tproduction: false,\r\n\t\tfrontend_server: \"\"\r\n\t},\r\n\tendpoints: {\r\n\t\tupsert: \"/api/grid\",\r\n\t\tfind: \"/api/grid\",\r\n\t\tget: \"/api/grid/${model._id}\",\r\n\t\tupdate_item: \"/api/grid/item\",\r\n\t\tupdate_item_access: \"/api/grid/item/access\"\r\n\t},\r\n\ttypes: {}\r\n};\r\n\r\nexport const MODULE_CONFIG_TOKEN = new InjectionToken<GridModuleConfig>(\"GridModuleConfig\");\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { GridModel } from \"./grid.model\";\r\n\r\nexport namespace UpsertGridApiModel {\r\n\texport class Request {\r\n\t\tgrid: GridModel;\r\n\t\tconstructor(initValue: Partial<UpsertGridApiModel.Request> = {}) {\r\n\t\t\tObject.keys(initValue).forEach((key) => (this[key] = initValue[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn this.grid;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: GridModel;\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n\tselector: \"ngs-grid-root\",\r\n\ttemplate: \"<router-outlet></router-outlet>\"\r\n})\r\nexport class RootComponent {}\r\n","import { ModuleWithProviders } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\nimport { RootComponent } from \"./root/root.component\";\r\n\r\nconst routes: Routes = [\r\n\t{\r\n\t\tpath: \"grid\",\r\n\t\tcomponent: RootComponent,\r\n\t\tchildren: []\r\n\t}\r\n];\r\n\r\nexport const GridRoutingModule: ModuleWithProviders = RouterModule.forChild(routes);\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { GridsterConfig } from \"angular-gridster2\";\r\nimport { IGridItemModel } from \"./gird-item.model\";\r\n\r\nexport class GridModel {\r\n\t_id: string;\r\n\toid: string;\r\n\tname: string;\r\n\ttype: string;\r\n\towner: string;\r\n\tconfig: GridsterConfig;\r\n\titems: IGridItemModel<any>[];\r\n\tconstructor(\r\n\t\t{\r\n\t\t\t_id,\r\n\t\t\toid,\r\n\t\t\tname,\r\n\t\t\ttype,\r\n\t\t\tconfig,\r\n\t\t\titems\r\n\t\t}: { _id?: string; oid?: string; name?: string; type?: string; config?: GridsterConfig; items?: any[] } = {\r\n\t\t\tconfig: {},\r\n\t\t\titems: []\r\n\t\t}\r\n\t) {\r\n\t\tthis._id = _id;\r\n\t\tthis.oid = oid;\r\n\t\tthis.name = name;\r\n\t\tthis.type = type;\r\n\t\tthis.config = config;\r\n\t\tthis.items = items;\r\n\t}\r\n}\r\n","import { GridModel } from \"../../../models\";\r\n\r\nexport namespace UpsertGridApiModel {\r\n\texport class Request {\r\n\t\tgrid: GridModel;\r\n\t\tconstructor(grid = {}) {\r\n\t\t\tdebugger;\r\n\t\t\tthis.grid = new GridModel(grid);\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn this.grid;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: GridModel;\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","import { BehaviorSubject } from \"rxjs\";\r\nimport { Inject, Injectable } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { GridModuleConfig, MODULE_DEFAULT_CONFIG, MODULE_CONFIG_TOKEN } from \"../grid.config\";\r\nimport { AppState } from \"../grid.reducer\";\r\n\r\n@Injectable()\r\nexport class GridConfigurationService {\r\n\tprivate _config: GridModuleConfig;\r\n\tget config() {\r\n\t\treturn this._config;\r\n\t}\r\n\tconfig$ = new BehaviorSubject(MODULE_DEFAULT_CONFIG);\r\n\tconstructor(@Inject(MODULE_CONFIG_TOKEN) configFile, private store: Store<AppState>) {\r\n\t\tthis._config = Object.assign({}, MODULE_DEFAULT_CONFIG, configFile);\r\n\t\tthis.config$.next(this._config);\r\n\t\t// this.store.select(getGridModuleConfig).subscribe((gridConfig) => {\r\n\t\t// \tif (!gridConfig) {\r\n\t\t// \t\treturn;\r\n\t\t// \t}\r\n\t\t// \tthis._config = Object.assign({}, this._config, gridConfig.Config);\r\n\t\t// \tthis.config$.next(this._config);\r\n\t\t// });\r\n\t}\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { GetGridApiModel } from \"./get-grid.model\";\r\nimport { GridModel } from \"../../../models/grid.model\";\r\n\r\nexport const enum GET_GRID_ACTION_TYPES {\r\n\tSTART = \"[GRID][API][GetGrid] start\",\r\n\tSUCCEED = \"[GRID][API][GetGrid] succeed\",\r\n\tFAILED = \"[GRID][API][GetGrid] failed\"\r\n}\r\n\r\nexport class GetGridStartAction implements Action {\r\n\treadonly type = GET_GRID_ACTION_TYPES.START;\r\n\tconstructor(public payload: string) {}\r\n}\r\nexport class GetGridSucceedAction implements Action {\r\n\treadonly type = GET_GRID_ACTION_TYPES.SUCCEED;\r\n\tconstructor(public payload: GridModel) {}\r\n}\r\nexport class GetGridFailedAction implements Action {\r\n\treadonly type = GET_GRID_ACTION_TYPES.FAILED;\r\n\tconstructor(public payload: any) {}\r\n}\r\n\r\nexport type GetGridActions = GetGridStartAction | GetGridSucceedAction | GetGridFailedAction;\r\n","import { map, filter, tap, take, switchMap, combineLatest, skipWhile, skipUntil } from \"rxjs/operators\";\r\nimport { Observable, BehaviorSubject } from \"rxjs\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { getFrontendUser } from \"@soushians/frontend-authentication\";\r\nimport { UserFacadeService } from \"@soushians/user\";\r\nimport { stringTemplate } from \"@soushians/shared\";\r\n\r\nimport { UpsertGridApiModel } from \"./api/upsert-grid/upsert-grid.model\";\r\nimport { GridConfigurationService } from \"./grid-configuration.service\";\r\nimport { GetGridStartAction } from \"./api/get-grid/get-grid.actions\";\r\nimport { GetGridsApiModel } from \"./api/get-grids/get-grids.model\";\r\nimport { GridModel, IGridItemModel } from \"../models\";\r\nimport { AppState } from \"../grid.reducer\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class GridService {\r\n\tconstructor(\r\n\t\tprivate http: HttpClient,\r\n\t\tprivate store: Store<AppState>,\r\n\t\tprivate userFacadeService: UserFacadeService,\r\n\t\tprivate configurationService: GridConfigurationService\r\n\t) {}\r\n\r\n\tget(_id: string): Observable<GridModel> {\r\n\t\treturn this.configurationService.config$.pipe(\r\n\t\t\tfilter(config => config.endpoints.get !== \"\"),\r\n\t\t\ttake(1),\r\n\t\t\tskipUntil(this.store.select(getFrontendUser)),\r\n\t\t\tswitchMap(config => {\r\n\t\t\t\treturn this.http\r\n\t\t\t\t\t.get(stringTemplate(config.env.frontend_server + config.endpoints.get, { _id }), {})\r\n\t\t\t\t\t.pipe(map((response: UpsertGridApiModel.Response) => response.Result));\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\tgetGrids(): Observable<GridModel[]> {\r\n\t\treturn this.configurationService.config$.pipe(\r\n\t\t\tfilter(config => config.endpoints.find != \"\"),\r\n\t\t\tswitchMap(config => this.http.get(config.env.frontend_server + config.endpoints.find)),\r\n\t\t\tmap((response: GetGridsApiModel.Response) => response.Result)\r\n\t\t);\r\n\t}\r\n\tupdate_item(item: IGridItemModel<any>): Observable<GridModel[]> {\r\n\t\treturn this.configurationService.config$.pipe(\r\n\t\t\tfilter(config => config.endpoints.update_item != \"\"),\r\n\t\t\tswitchMap(config => this.http.patch(config.env.frontend_server + config.endpoints.update_item, item)),\r\n\t\t\tmap((response: GetGridsApiModel.Response) => response.Result)\r\n\t\t);\r\n\t}\r\n\tupdate_item_access(item: IGridItemModel<any>): Observable<GridModel[]> {\r\n\t\treturn this.configurationService.config$.pipe(\r\n\t\t\tfilter(config => config.endpoints.update_item_access != \"\"),\r\n\t\t\tswitchMap(config =>\r\n\t\t\t\tthis.http.patch(config.env.frontend_server + config.endpoints.update_item_access, item)\r\n\t\t\t),\r\n\t\t\tmap((response: GetGridsApiModel.Response) => response.Result)\r\n\t\t);\r\n\t}\r\n\tupsert(grid: UpsertGridApiModel.Request): Observable<GridModel> {\r\n\t\tconst model = new UpsertGridApiModel.Request(grid);\r\n\t\treturn this.configurationService.config$.pipe(\r\n\t\t\tfilter(config => config.endpoints.upsert != \"\"),\r\n\t\t\ttake(1),\r\n\t\t\tswitchMap(config => {\r\n\t\t\t\treturn this.http.post(config.env.frontend_server + config.endpoints.upsert, model.getRequestBody(), {});\r\n\t\t\t}),\r\n\t\t\tmap((response: UpsertGridApiModel.Response) => response.Result)\r\n\t\t);\r\n\t}\r\n\t// delete(_id: string) {\r\n\t// \treturn this.configurationService.config$\r\n\t// \t\t.filter((config) => config.endpoints.deleteForm != \"\")\r\n\t// \t\t.switchMap((config) => this.http.get(config.endpoints.deleteForm));\r\n\t// }\r\n\tselectById(_id: string): Observable<GridModel> {\r\n\t\tconst subject = new BehaviorSubject<GridModel>(undefined);\r\n\t\tthis.store\r\n\t\t\t.select(state => state.grids.db.data)\r\n\t\t\t.pipe(\r\n\t\t\t\tfilter(grids => grids != null),\r\n\t\t\t\tmap(grids => grids.find(grid => grid._id == _id)),\r\n\t\t\t\ttap(grid => {\r\n\t\t\t\t\tif (grid == null) {\r\n\t\t\t\t\t\tthis.store.dispatch(new GetGridStartAction(_id));\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t\t.subscribe(FormSchemaModel => subject.next(FormSchemaModel));\r\n\t\treturn subject.asObservable();\r\n\t}\r\n\tselectByOid(_id: string): Observable<GridModel> {\r\n\t\tconst subject = new BehaviorSubject<GridModel>(undefined);\r\n\t\tthis.store\r\n\t\t\t.select(state => state.grids.db.data)\r\n\t\t\t.pipe(\r\n\t\t\t\tfilter(grids => grids != null),\r\n\t\t\t\tmap(grids => grids.find(grid => grid._id == _id)),\r\n\t\t\t\ttap(grid => {\r\n\t\t\t\t\tif (grid == null) {\r\n\t\t\t\t\t\tthis.store.dispatch(new GetGridStartAction(_id));\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t\t.subscribe(FormSchemaModel => subject.next(FormSchemaModel));\r\n\t\treturn subject.asObservable();\r\n\t}\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\nimport { of } from \"rxjs\";\r\n\r\nimport { GridService } from \"../../grid.service\";\r\nimport { GET_GRID_ACTION_TYPES, GetGridActions, GetGridSucceedAction, GetGridFailedAction } from \"./get-grid.actions\";\r\n\r\n@Injectable()\r\nexport class GetGridApiEffects {\r\n\tconstructor(private actions$: Actions<GetGridActions>, private service: GridService) {}\r\n\r\n\t@Effect()\r\n\tstart$ = this.actions$\r\n\t\t.ofType(GET_GRID_ACTION_TYPES.START)\r\n\t\t.pipe(\r\n\t\t\tmap((action) => action.payload),\r\n\t\t\tswitchMap((payload) => this.service.get(payload)),\r\n\t\t\tmap((res) => new GetGridSucceedAction(res)),\r\n\t\t\tcatchError((err) => of(new GetGridFailedAction(err)))\r\n\t\t);\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { UpsertGridApiModel } from \"./upsert-grid.model\";\r\nimport { GridModel } from \"../../../models/grid.model\";\r\n\r\nexport const enum UPSERT_GRID_ACTION_TYPES {\r\n\tSTART = \"[UPSERT_GRID][API][UpsertGrid] start\",\r\n\tSUCCEED = \"[UPSERT_GRID][API][UpsertGrid] succeed\",\r\n\tFAILED = \"[UPSERT_GRID][API][UpsertGrid] failed\"\r\n}\r\n\r\nexport class UpsertGridStartAction implements Action {\r\n\treadonly type = UPSERT_GRID_ACTION_TYPES.START;\r\n\tconstructor(public payload: GridModel) {}\r\n}\r\nexport class UpsertGridSucceedAction implements Action {\r\n\treadonly type = UPSERT_GRID_ACTION_TYPES.SUCCEED;\r\n\tconstructor(public payload: GridModel) {}\r\n}\r\nexport class UpsertGridFailedAction implements Action {\r\n\treadonly type = UPSERT_GRID_ACTION_TYPES.FAILED;\r\n\tconstructor(public payload: any) {}\r\n}\r\n\r\nexport type UpsertGridActions = UpsertGridStartAction | UpsertGridSucceedAction | UpsertGridFailedAction;\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\n\r\nimport { GridService } from \"../../grid.service\";\r\nimport {\r\n\tUPSERT_GRID_ACTION_TYPES,\r\n\tUpsertGridActions,\r\n\tUpsertGridSucceedAction,\r\n\tUpsertGridFailedAction\r\n} from \"./upsert-grid.actions\";\r\nimport { of } from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class UpsertGridApiEffects {\r\n\tconstructor(private actions$: Actions<UpsertGridActions>, private service: GridService) {}\r\n\r\n\t@Effect()\r\n\tstart$ = this.actions$\r\n\t\t.ofType(UPSERT_GRID_ACTION_TYPES.START)\r\n\t\t.pipe(\r\n\t\t\tmap((action) => action.payload),\r\n\t\t\tswitchMap((payload) => this.service.upsert(payload)),\r\n\t\t\tmap((res) => new UpsertGridSucceedAction(res)),\r\n\t\t\tcatchError((err) => of(new UpsertGridFailedAction(err)))\r\n\t\t);\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { GetGridsApiModel } from \"./get-grids.model\";\r\nimport { GridModel } from \"../../../models/grid.model\";\r\n\r\nexport const enum GET_GRIDS_ACTION_TYPES {\r\n\tSTART = \"[GET_GRIDS][API][GetGrids] start\",\r\n\tSUCCEED = \"[GET_GRIDS][API][GetGrids] succeed\",\r\n\tFAILED = \"[GET_GRIDS][API][GetGrids] failed\"\r\n}\r\n\r\nexport class GetGridsStartAction implements Action {\r\n\treadonly type = GET_GRIDS_ACTION_TYPES.START;\r\n}\r\nexport class GetGridsSucceedAction implements Action {\r\n\treadonly type = GET_GRIDS_ACTION_TYPES.SUCCEED;\r\n\tconstructor(public payload: GridModel[]) {}\r\n}\r\nexport class GetGridsFailedAction implements Action {\r\n\treadonly type = GET_GRIDS_ACTION_TYPES.FAILED;\r\n\tconstructor(public payload: any) {}\r\n}\r\n\r\nexport type GetGridsActions = GetGridsStartAction | GetGridsSucceedAction | GetGridsFailedAction;\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\nimport { of } from \"rxjs\";\r\n\r\nimport { GridService } from \"../../grid.service\";\r\nimport {\r\n\tGET_GRIDS_ACTION_TYPES,\r\n\tGetGridsActions,\r\n\tGetGridsSucceedAction,\r\n\tGetGridsFailedAction\r\n} from \"./get-grids.actions\";\r\n\r\n@Injectable()\r\nexport class GetGridsApiEffects {\r\n\tconstructor(private actions$: Actions<GetGridsActions>, private service: GridService) {}\r\n\r\n\t@Effect()\r\n\tstart$ = this.actions$\r\n\t\t.ofType(GET_GRIDS_ACTION_TYPES.START)\r\n\t\t.pipe(\r\n\t\t\tswitchMap(() =>\r\n\t\t\t\tthis.service\r\n\t\t\t\t\t.getGrids()\r\n\t\t\t\t\t.pipe(\r\n\t\t\t\t\t\tmap((res) => new GetGridsSucceedAction(res)),\r\n\t\t\t\t\t\tcatchError((err) => of(new GetGridsFailedAction(err)))\r\n\t\t\t\t\t)\r\n\t\t\t)\r\n\t\t);\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { GridModel } from \"../models\";\r\n\r\nexport enum GridsActionTypes {\r\n\tUPSERT = \"[GRID][DB] UPSERT\",\r\n\tDELETE = \"[GRID][DB] DELETE\"\r\n}\r\n\r\nexport class UpsertGridAction implements Action {\r\n\treadonly type = GridsActionTypes.UPSERT;\r\n\tconstructor(public payload: GridModel[]) {}\r\n}\r\nexport class DeleteGridAction implements Action {\r\n\treadonly type = GridsActionTypes.DELETE;\r\n\tconstructor(public payload: GridModel) {}\r\n}\r\n\r\nexport type GridsActions = UpsertGridAction | DeleteGridAction;\r\n","import { GridModel } from \"../models\";\r\nimport { GridsActionTypes, GridsActions } from \"./widget.actions\";\r\n\r\nexport interface State {\r\n\tdata: GridModel[];\r\n}\r\n\r\nconst initialState: State = {\r\n\tdata: []\r\n};\r\n\r\nexport function Reducer(state = initialState, action: GridsActions): State {\r\n\tlet _data: GridModel[];\r\n\tswitch (action.type) {\r\n\t\tcase GridsActionTypes.UPSERT:\r\n\t\t\t_data = state.data.concat();\r\n\t\t\tconst newGrids = action.payload;\r\n\r\n\t\t\tnewGrids.forEach((newGrid) => {\r\n\t\t\t\tconst existedGridIndex = _data.findIndex((w) => w._id == newGrid._id);\r\n\t\t\t\tif (existedGridIndex > -1) {\r\n\t\t\t\t\t_data.splice(existedGridIndex, 1, newGrid);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t_data.push(newGrid);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: _data\r\n\t\t\t};\r\n\r\n\t\tcase GridsActionTypes.DELETE:\r\n\t\t\t_data = Object.assign({}, state.data);\r\n\r\n\t\t\tconst gridIndex = state.data.findIndex((w) => w._id == action.payload._id);\r\n\t\t\t_data.splice(gridIndex, 1);\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: _data\r\n\t\t\t};\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport const getGrids = (state: State) => state.data;\r\n","import * as fromRoot from \"./root/grids.reducers\";\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface GridState {\r\n\tdb: fromRoot.State;\r\n}\r\n\r\nexport const GridReducer = {\r\n\tdb: fromRoot.Reducer\r\n};\r\n\r\nexport interface AppState {\r\n\tgrids: GridState;\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { map, pluck } from \"rxjs/operators\";\r\nimport { Observable } from \"rxjs\";\r\n\r\nimport { GridModel } from \"../models\";\r\nimport { UpsertGridAction } from \"./widget.actions\";\r\nimport { GET_GRID_ACTION_TYPES } from \"../services/api/get-grid/get-grid.actions\";\r\nimport { GET_GRIDS_ACTION_TYPES } from \"../services/api/get-grids/get-grids.actions\";\r\nimport { UPSERT_GRID_ACTION_TYPES } from \"../services/api/upsert-grid/upsert-grid.actions\";\r\n\r\n@Injectable()\r\nexport class GridDbEffects {\r\n\tconstructor(private actions$: Actions<any>) {}\r\n\r\n\t@Effect()\r\n\tUpsert$ = this.actions$\r\n\t\t.ofType(GET_GRID_ACTION_TYPES.SUCCEED, UPSERT_GRID_ACTION_TYPES.SUCCEED)\r\n\t\t.pipe(pluck(\"payload\"), map((grid: GridModel) => new UpsertGridAction([ grid ])));\r\n\r\n\t@Effect()\r\n\tUpsertMany$ = this.actions$\r\n\t\t.ofType(GET_GRIDS_ACTION_TYPES.SUCCEED)\r\n\t\t.pipe(pluck(\"payload\"), map((grids: GridModel[]) => new UpsertGridAction(grids)));\r\n}\r\n","import {\r\n\tComponent,\r\n\tOnInit,\r\n\tComponentRef,\r\n\tComponentFactoryResolver,\r\n\tViewContainerRef,\r\n\tDirective,\r\n\tInput,\r\n\tViewChild,\r\n\tInject\r\n} from \"@angular/core\";\r\nimport { GridConfigurationService } from \"../services/grid-configuration.service\";\r\nimport { MAT_BOTTOM_SHEET_DATA } from \"@angular/material\";\r\n\r\n@Directive({\r\n\tselector: \"[ngsDynamicGridItemConfig]\"\r\n})\r\nexport class DynamicGridItremConfigDirective implements OnInit {\r\n\t@Input()\r\n\tset type(type: string) {\r\n\t\tif (!type) return;\r\n\t\tthis._resolve_correct_component_base_on_widget_type(type);\r\n\t}\r\n\tget valid() {\r\n\t\treturn this.component.instance.valid;\r\n\t}\r\n\tget config() {\r\n\t\treturn this.component.instance.config;\r\n\t}\r\n\tcomponent: ComponentRef<any>;\r\n\tmapTypeToComponent: any;\r\n\tconstructor(\r\n\t\tprivate configurationService: GridConfigurationService,\r\n\t\tprivate resolver: ComponentFactoryResolver,\r\n\t\tprivate container: ViewContainerRef\r\n\t) {\r\n\t\tthis.mapTypeToComponent = this.configurationService.config$.getValue().types;\r\n\t}\r\n\tngOnInit() {}\r\n\t_resolve_correct_component_base_on_widget_type(type) {\r\n\t\tif (!this.mapTypeToComponent[type]) {\r\n\t\t\tconst supportedTypes = Object.keys(this.mapTypeToComponent).join(\", \");\r\n\t\t\tthrow new Error(\r\n\t\t\t\t`Trying to use an unsupported type (${type}).\r\n\t\t  \t\t Supported types: ${supportedTypes}`\r\n\t\t\t);\r\n\t\t}\r\n\t\tconst component = this.resolver.resolveComponentFactory<any>(this.mapTypeToComponent[type].configComponent);\r\n\t\tthis.component = this.container.createComponent(component);\r\n\t\t// this.widget$.subscribe((w) => (this.component.instance.widget = w));\r\n\t}\r\n}\r\n\r\n@Component({\r\n\ttemplate: `\r\n\t<div ngsDynamicGridItemConfig [type]=\"data.type\"></div>\r\n\t`\r\n})\r\nexport class DynamicGridItemConfigComponent {\r\n\t@ViewChild(DynamicGridItremConfigDirective) DynamicWidgetRef: DynamicGridItremConfigDirective;\r\n\tconstructor(@Inject(MAT_BOTTOM_SHEET_DATA) public data: any) {}\r\n\tget config() {\r\n\t\treturn this.DynamicWidgetRef.config;\r\n\t}\r\n\tget valid() {\r\n\t\treturn this.DynamicWidgetRef.valid;\r\n\t}\r\n}\r\n","import { Component, Injector, Inject } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { MAT_BOTTOM_SHEET_DATA } from \"@angular/material\";\r\nimport { FormGroup, FormControl } from \"@angular/forms\";\r\n\r\nimport { AppState } from \"../grid.reducer\";\r\nimport { GridModel } from \"../models\";\r\nimport { UpsertGridStartAction } from \"../services/api/upsert-grid/upsert-grid.actions\";\r\n\r\n@Component({\r\n\ttemplate: `<h4> ØªÙØ¸ÛÙØ§Øª Ø¯Ø§Ø´Ø¨ÙØ±Ø¯</h4>\r\n<div fxLayout=\"column wrap\" fxLayoutGap=\"15px\">\r\n    <div fxFlex=\"100\" fxLayout=\"row wrap\" [formGroup]=\"gridFormGroup\">\r\n        <mat-form-field fxFlex=\"20\">\r\n            <input matInput placeholder=\"ÙØ§Ù\" formControlName=\"name\">\r\n        </mat-form-field>\r\n    </div>\r\n    <div fxLayout=\"column wrap\" fxLayoutGap=\"15px\"  fxFlex=\"100\" [formGroup]=\"configFormGroup\">\r\n        <div fxLayout=\"row wrap\" fxLayoutGap=\"25px\">\r\n            <mat-form-field fxFlex=\"20\">\r\n                <mat-select placeholder=\"ÙÙØ¹ ÙØ±Ø§Ø±Ú¯ÛØ±Û Ú¯Ø±ÛØ¯ÙØ§ Ø¯Ø± ØµÙØ­Ù\" formControlName=\"gridType\">\r\n                    <mat-option *ngFor=\"let item of gridTypes\" [value]=\"item\">\r\n                        {{item}}\r\n                    </mat-option>\r\n                </mat-select>\r\n            </mat-form-field>\r\n            <mat-form-field fxFlex=\"20\">\r\n                <mat-select placeholder=\"ÙÙØ¹ ÙØ´Ø±Ø¯Ù Ø´Ø¯Ù Ú¯Ø±ÛØ¯ÙØ§ Ø¯Ø± ØµÙØ­Ù\" formControlName=\"compactType\">\r\n                    <mat-option *ngFor=\"let item of compactType\" [value]=\"item\">\r\n                        {{item}}\r\n                    </mat-option>\r\n                </mat-select>\r\n            </mat-form-field>\r\n            <mat-form-field fxFlex=\"20\">\r\n                <mat-select placeholder=\"ÙØ´Ø§Ù Ø¯Ø§Ø¯Ù Ø³ÙÙÙâÙØ§Û Ú¯Ø±ÛØ¯\" formControlName=\"displayGrid\">\r\n                    <mat-option *ngFor=\"let item of displayGridTypes\" [value]=\"item\">\r\n                        {{item}}\r\n                    </mat-option>\r\n                </mat-select>\r\n            </mat-form-field>\r\n        </div>\r\n        <div fxFlex=\"100\" fxLayout=\"row wrap\" fxLayoutGap=\"25px\">\r\n            <div fxFlex=\"20\">\r\n                <mat-checkbox formControlName=\"enableEmptyCellDrag\">Ø§ÛØ¬Ø§Ø¯ Ú¯Ø±ÛØ¯ Ø¨Ø§ Ø¯Ø±Ú¯ Ú©Ø±Ø¯Ù</mat-checkbox>\r\n                <!-- <mat-checkbox formControlName=\"enableEmptyCellClick\">enableEmptyCellClick</mat-checkbox> -->\r\n            </div>\r\n            <div fxFlex=\"20\" [formGroup]=\"configFormGroup.get('draggable')\">\r\n                <mat-checkbox formControlName=\"enabled\">ÙØ§Ø¨ÙÛØª Ø¬Ø§Ø¨Ø¬Ø§ÛÛ Ú¯Ø±ÛØ¯ÙØ§</mat-checkbox>\r\n            </div>\r\n            <div fxFlex=\"20\" [formGroup]=\"configFormGroup.get('resizable')\">\r\n                <mat-checkbox formControlName=\"enabled\">ÙØ§Ø¨ÙÛØª ØªØºÛÛØ± Ø³Ø§ÛØ² Ú¯Ø±ÛØ¯ÙØ§</mat-checkbox>\r\n            </div>\r\n        </div>\r\n        <!-- Margins -->\r\n        <div fxFlex=\"100\" fxLayout=\"column wrap\" fxLayoutGap=\"25px\">\r\n            <h4 fxFlex=\"100\">Ø­Ø§Ø´ÛÙ:</h4>\r\n            <div fxFlex fxLayout=\"column\" fxLayoutGap=\"25px\">\r\n                <mat-checkbox fxFlex formControlName=\"outerMargin\">Ø§ÙÚ©Ø§Ù ØªÙØ¸ÛÙ ÙØ§ØµÙÙ Ú¯Ø±ÛØ¯ÙØ§</mat-checkbox>\r\n            </div>\r\n            <div fxFlex=\"100\"  fxLayout=\"row wrap\" fxLayoutGap=\"25px\">\r\n                <mat-form-field fxFlex>\r\n                    <input matInput type=\"number\" placeholder=\"ÙØ§ØµÙÙ Ú¯Ø±ÛØ¯ÙØ§ Ø§Ø² ÙÙ\" formControlName=\"margin\" />\r\n                </mat-form-field>\r\n                <mat-form-field fxFlex>\r\n                    <input matInput type=\"number\" placeholder=\"ÙØ§ØµÙÙ Ú¯Ø±ÛØ¯ÙØ§ Ø§Ø± Ø¨Ø§ÙØ§ Ø¯Ø§Ø´Ø¨ÙØ±Ø¯\" formControlName=\"outerMarginTop\" />\r\n                </mat-form-field>\r\n                <mat-form-field fxFlex>\r\n                    <input matInput type=\"number\" placeholder=\"ÙØ§ØµÙÙ Ú¯Ø±ÛØ¯ÙØ§ Ø§Ø² Ø±Ø§Ø³Øª Ø¯Ø§Ø´Ø¨ÙØ±Ø¯\" formControlName=\"outerMarginRight\" />\r\n                </mat-form-field>\r\n                <mat-form-field fxFlex>\r\n                    <input matInput type=\"number\" placeholder=\"ÙØ§ØµÙÙ Ú¯Ø±ÛØ¯ÙØ§ Ø§Ø² Ù¾Ø§ÛÛÙ Ø¯Ø§Ø´Ø¨ÙØ±Ø¯\" formControlName=\"outerMarginBottom\" />\r\n                </mat-form-field>\r\n                <mat-form-field fxFlex>\r\n                    <input matInput type=\"number\" placeholder=\"ÙØ§ØµÙÙ Ú¯Ø±ÛØ¯ÙØ§ Ø§Ø² ÚÙ¾ Ø¯Ø§Ø´Ø¨ÙØ±Ø¯\" formControlName=\"outerMarginLeft\" />\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n        <!-- Grid Size -->\r\n        <div fxFlex=\"100\" fxLayout=\"row wrap\" fxLayoutGap=\"25px\">\r\n            <h4 fxFlex=\"100\">ØªØ¹Ø¯Ø§Ø¯ Ø³ØªÙÙâÙØ§:</h4>\r\n            <mat-form-field fxFlex=\"18\">\r\n                <input matInput type=\"number\" placeholder=\"Ú©ÙØªØ±ÛÙ Ø³ØªÙÙ\" formControlName=\"minCols\" />\r\n            </mat-form-field>\r\n            <mat-form-field fxFlex=\"18\">\r\n                <input matInput type=\"number\" placeholder=\"Ø¨ÛØ´ØªØ±ÛÙ Ø³ØªÙÙ\" formControlName=\"maxCols\" />\r\n            </mat-form-field>\r\n        </div> \r\n        <div fxFlex=\"20\" fxLayoutAlign=\"flex-end center\" fxLayout=\"row wrap\" fxLayoutGap=\"25px\">\r\n         <button color=\"primary\" mat-raised-button (click)=\"save()\">Ø°Ø®ÛØ±Ù</button>\r\n    </div>\r\n</div>\r\n</div>`\r\n})\r\nexport class GridConfigComponent {\r\n\tgridTypes: any[];\r\n\tcompactType: any[];\r\n\tdisplayGridTypes: any[];\r\n\tgrid: GridModel;\r\n\toid: string;\r\n\tconfigFormGroup: FormGroup;\r\n\tgridFormGroup: FormGroup;\r\n\tconstructor(private store: Store<AppState>, @Inject(MAT_BOTTOM_SHEET_DATA) private data: any) {\r\n\t\tthis.grid = this.data.grid;\r\n\t\tthis.oid = this.data.oid;\r\n\t\tthis._init_properties();\r\n\t\tthis._init_form_group();\r\n\t}\r\n\tsave() {\r\n\t\tconst grid = {\r\n\t\t\t...this.grid,\r\n\t\t\t...this.gridFormGroup.value,\r\n\t\t\tconfig: { ...this.configFormGroup.value }\r\n\t\t};\r\n\t\tthis.store.dispatch(new UpsertGridStartAction(grid));\r\n\t}\r\n\t_init_form_group() {\r\n\t\tthis.configFormGroup = new FormGroup({\r\n\t\t\tgridType: new FormControl(\"fit\"),\r\n\t\t\tcompactType: new FormControl(\"none\"),\r\n\t\t\tdisplayGrid: new FormControl(\"onDrag&Resize\"),\r\n\t\t\t// empty cell\r\n\t\t\tenableEmptyCellDrag: new FormControl(true),\r\n\t\t\tenableEmptyCellClick: new FormControl(false),\r\n\t\t\tenableEmptyCellContextMenu: new FormControl(false),\r\n\t\t\t//\r\n\t\t\tscrollToNewItems: new FormControl(true),\r\n\t\t\t// margins\r\n\t\t\tmargin: new FormControl(10),\r\n\t\t\touterMargin: new FormControl(true),\r\n\t\t\touterMarginTop: new FormControl(10),\r\n\t\t\touterMarginRight: new FormControl(10),\r\n\t\t\touterMarginBottom: new FormControl(10),\r\n\t\t\touterMarginLeft: new FormControl(10),\r\n\t\t\t// grid size\r\n\t\t\tminCols: new FormControl(3),\r\n\t\t\tmaxCols: new FormControl(3),\r\n\t\t\t//\r\n\t\t\tdraggable: new FormGroup({\r\n\t\t\t\tenabled: new FormControl(),\r\n\t\t\t\tdelayStart: new FormControl(333)\r\n\t\t\t\t// ignoreContent: new FormControl(\"false\")\r\n\t\t\t}),\r\n\t\t\tresizable: new FormGroup({\r\n\t\t\t\tenabled: new FormControl()\r\n\t\t\t})\r\n\t\t});\r\n\t\tthis.gridFormGroup = new FormGroup({\r\n\t\t\toid: new FormControl(this.oid),\r\n\t\t\tname: new FormControl(\"\")\r\n\t\t});\r\n\t\tthis.gridFormGroup.patchValue(this.grid);\r\n\t\tthis.configFormGroup.patchValue(this.grid.config);\r\n\t}\r\n\t_init_properties() {\r\n\t\tthis.gridTypes = [ \"fit\", \"scrollVertical\", \"scrollHorizontal\", \"fixed\", \"verticalFixed\", \"horizontalFixed\" ];\r\n\t\tthis.compactType = [ \"none\", \"compactUp\", \"compactLeft\", \"compactUp&Left\", \"compactLeft&Up\" ];\r\n\t\tthis.displayGridTypes = [ \"always\", \"onDrag&Resize\", \"none\" ];\r\n\t}\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter, ViewChild } from \"@angular/core\";\r\nimport { GridsterConfig, GridsterItem } from \"angular-gridster2\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { filter, map } from \"rxjs/operators\";\r\nimport { MatBottomSheet, MatCheckboxChange } from \"@angular/material\";\r\nimport { Observable } from \"rxjs\";\r\n\r\nimport { getAccountInfo } from \"@soushians/user\";\r\n\r\nimport { AppState } from \"../grid.reducer\";\r\nimport { GridModel } from \"../models\";\r\nimport { GridService } from \"../services/grid.service\";\r\nimport { GridConfigurationService } from \"../services/grid-configuration.service\";\r\nimport { DynamicGridItemConfigComponent } from \"../grid-item/dynamic-grid-item-config.directive\";\r\nimport { GridConfigComponent } from \"../grid-config/grid-config.component\";\r\nimport { IGridItemModel } from \"../models/gird-item.model\";\r\nimport { UpsertGridStartAction } from \"../services/api/upsert-grid/upsert-grid.actions\";\r\nimport { UserFacadeService } from \"@soushians/user\";\r\nimport { WidgetSelectorComponent, WidgetModel } from \"@soushians/widget\";\r\nimport { DynamicGridItemViewDirective } from \"../grid-item/dynamic-grid-item-view.directive\";\r\n\r\n@Component({\r\n\tselector: \"ngs-grid\",\r\n\ttemplate: `<gridster [options]=\"options\">\r\n    <div class=\"actions\">\r\n        <button mat-mini-fab (click)=\"addItem($event)\">\r\n            <mat-icon>add</mat-icon>\r\n        </button>\r\n        <button mat-mini-fab (click)=\"openConfig($event)\" *ngIf=\"havePermission$ | async\">\r\n            <mat-icon>dashboard</mat-icon>\r\n        </button>\r\n        <button mat-mini-fab (click)=\"saveConfig($event)\">\r\n            <mat-icon>done</mat-icon>\r\n        </button>\r\n    </div>\r\n    <gridster-item [item]=\"item\" *ngFor=\"let item of grid.items\">\r\n        <div class=\"initializer\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n            <div fxFlex=\"nogrow\">\r\n                <button mat-icon-button [matMenuTriggerFor]=\"menu\">\r\n                    <mat-icon>more_horiz</mat-icon>\r\n                </button>\r\n                <mat-menu #menu=\"matMenu\" class=\"rtl\">\r\n                    <mat-checkbox *ngIf=\"grid.owner == username\" labelPosition=\"before\" [checked]=\"item.access=='public'\"\r\n                        (change)=\"make_public(item,$event)\">Ø¹ÙÙÙÛ</mat-checkbox>\r\n                    <button mat-menu-item class=\"rtl\" (click)=\"goToEdit()\">\r\n                        <mat-icon>edit</mat-icon>\r\n                        <span>ÙÛØ±Ø§ÛØ´ Ø§ÙØ²ÙÙÙ</span>\r\n                    </button>\r\n                    <button mat-menu-item class=\"rtl\" (click)=\"showConfig(item)\">\r\n                        <mat-icon>settings</mat-icon>\r\n                        <span>ØªÙØ¸ÛÙØ§Øª</span>\r\n                    </button>\r\n                    <button mat-menu-item class=\"rtl\" (click)=\"removeItem(item)\">\r\n                        <mat-icon>delete</mat-icon>\r\n                        <span>Ø­Ø°Ù</span>\r\n                    </button>\r\n                </mat-menu>\r\n            </div>\r\n        </div>\r\n        <div class=\"widget-content\">\r\n            <div *ngIf=\"!item.valid\" fxFlex=\"100\" class=\"form-container\">\r\n                <h4>ØªÙØ¸ÛÙØ§Øª</h4>\r\n                <mat-form-field fxFlex=\"grow\">\r\n                    <mat-select placeholder=\"Grid Item Type\" [(ngModel)]=\"item.type\" (selectionChange)=\"gridItemTypeChanged(item)\">\r\n                        <mat-option *ngFor=\"let item of gridItemTypes\" [value]=\"item\">\r\n                            {{item}}\r\n                        </mat-option>\r\n                    </mat-select>\r\n                </mat-form-field>\r\n            </div>\r\n            <div *ngIf=\"item.valid\" #test [ngsDynamicGridItemView]=\"item\"></div>\r\n        </div>\r\n    </gridster-item>\r\n</gridster>`,\r\n\tstyles: [`:host{width:100%;height:100vh;display:block;direction:ltr}.initializer{position:absolute;z-index:10;top:5px;left:5px;height:25px}.actions{position:absolute;top:25px;right:25px;z-index:5}.actions button{margin-left:10px}.widget-content{position:relative;height:100%}.form-container{padding:25px;width:100%;direction:rtl}.form-container mat-form-field{width:100%}.rtl{direction:rtl}`]\r\n})\r\nexport class GridComponent implements OnInit {\r\n\t@Output() itemValidateCallback = new EventEmitter();\r\n\t@Output() itemRemovedCallback = new EventEmitter();\r\n\t@Output() itemInitCallback = new EventEmitter();\r\n\t@Output() itemResizeCallback = new EventEmitter();\r\n\t@Output() itemChangeCallback = new EventEmitter();\r\n\t@Output() gridSizeChangedCallback = new EventEmitter();\r\n\t@Output() destroyCallback = new EventEmitter();\r\n\t@Output() initCallback = new EventEmitter();\r\n\r\n\t@Input() oid: string;\r\n\twidget: WidgetModel<any>;\r\n\thavePermission$: Observable<boolean>;\r\n\tusername: string;\r\n\toptions: GridsterConfig;\r\n\tgrid: GridModel;\r\n\tready = false;\r\n\tgridItemTypes: any[string];\r\n\tconstructor(\r\n\t\tprivate store: Store<AppState>,\r\n\t\tprivate service: GridService,\r\n\t\tprivate userFacadeService: UserFacadeService,\r\n\t\tprivate configurationService: GridConfigurationService,\r\n\t\tprivate bottomSheet: MatBottomSheet\r\n\t) {\r\n\t\tthis.options = {};\r\n\t\tthis.userFacadeService\r\n\t\t\t.getInfo()\r\n\t\t\t.pipe(\r\n\t\t\t\tfilter((user: any) => user.CurrentSession != undefined),\r\n\t\t\t\tmap((user: any) => user.CurrentSession.Username)\r\n\t\t\t)\r\n\t\t\t.subscribe(username => {\r\n\t\t\t\tthis.username = username;\r\n\t\t\t});\r\n\t\tthis.gridItemTypes = Object.keys(this.configurationService.config$.getValue().types);\r\n\t\tthis.havePermission$ = this.store.select(getAccountInfo).pipe(\r\n\t\t\tmap(user => {\r\n\t\t\t\tconst criteria = [ user, user._id, this.grid, this.grid.owner ];\r\n\t\t\t\tif (criteria.some(i => !i)) return false;\r\n\r\n\t\t\t\treturn user._id == this.grid.owner;\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\tstatic itemChange(item, itemComponent) {\r\n\t\tconsole.log(\"itemChanged\", item, itemComponent);\r\n\t}\r\n\r\n\tstatic itemResize(item, itemComponent) {\r\n\t\tconsole.log(\"itemResized\", item, itemComponent);\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\t// this.items = [ { cols: 2, rows: 1, y: 0, x: 0 }, { cols: 2, rows: 2, y: 0, x: 2 } ];\r\n\r\n\t\tthis.grid = new GridModel({\r\n\t\t\toid: this.oid,\r\n\t\t\tconfig: {}\r\n\t\t});\r\n\t\tthis._get_grid_by_oid_and_update_component();\r\n\t}\r\n\r\n\t_initCallback(item) {\r\n\t\tthis.initCallback.emit(item);\r\n\t}\r\n\r\n\tremoveItem(item) {\r\n\t\tthis.grid.items.splice(this.grid.items.indexOf(item), 1);\r\n\t}\r\n\tmake_public(item: IGridItemModel<any>, event: MatCheckboxChange) {\r\n\t\tdebugger;\r\n\t\titem.access = event.checked ? \"public\" : \"private\";\r\n\t\tthis.service.update_item_access(item).subscribe(item => {\r\n\t\t\tdebugger;\r\n\t\t});\r\n\t}\r\n\taddItem(e) {\r\n\t\tdebugger;\r\n\t\te.stopPropagation();\r\n\t\tthis.grid.items.push({} as IGridItemModel<any>);\r\n\t}\r\n\temptyCellClick(event: MouseEvent, item: GridsterItem) {\r\n\t\tconsole.log(\"empty cell click\", event, item);\r\n\t\tthis.grid.items.push(item as any);\r\n\t}\r\n\topenConfig(e) {\r\n\t\tdebugger;\r\n\t\te.stopPropagation();\r\n\t\te.preventDefault();\r\n\t\tthis.bottomSheet.open(GridConfigComponent, {\r\n\t\t\tdata: {\r\n\t\t\t\tgrid: this.grid\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\tsaveConfig(e) {\r\n\t\tdebugger;\r\n\t\te.stopPropagation();\r\n\t\te.stopImmediatePropagation();\r\n\t\te.preventDefault();\r\n\r\n\t\t/**\r\n\t\t * TODO:\r\n\t\t * Ø§Ø­Ø²Ø§Ø± ÙÙÛØª Ø¯Ø± Ø³ÙØª ÙÙØ¯ Ø§ØªØ­Ø§Ù Ø´ÙØ¯\r\n\t\t* Ú©Ø§ÙÙÛÚ¯ Ø¨Ø±Ø§Û Ú¯Ø±ÙØªÙ Ø´ÙØ§Ø³Ù Ú©Ø§Ø±Ø¨Ø±\r\n\t\t */\r\n\t\tthis.store.dispatch(new UpsertGridStartAction(this.grid));\r\n\t}\r\n\tgridItemTypeChanged(item: IGridItemModel<any>) {\r\n\t\tconst bs = this.bottomSheet.open(DynamicGridItemConfigComponent, {\r\n\t\t\tdata: {\r\n\t\t\t\ttype: item.type\r\n\t\t\t}\r\n\t\t});\r\n\t\tbs.afterDismissed().subscribe(data => {\r\n\t\t\titem.config = bs.instance.config;\r\n\t\t\titem.valid = bs.instance.valid;\r\n\t\t});\r\n\t}\r\n\tshowConfig(item: IGridItemModel<any>) {\r\n\t\tconst bs = this.bottomSheet.open(DynamicGridItemConfigComponent, {\r\n\t\t\tdata: {\r\n\t\t\t\ttype: item.type\r\n\t\t\t}\r\n\t\t});\r\n\t\tbs.afterDismissed().subscribe(data => {\r\n\t\t\titem.config = bs.instance.config;\r\n\t\t\titem.valid = bs.instance.valid;\r\n\t\t});\r\n\t}\r\n\t// tslint:disable-next-line:member-ordering\r\n\t// @ViewChild(\"DiagramViewComponent\") _ngsDynamicGridItemView: DiagramViewComponent;\r\n\tgoToEdit() {\r\n\t\tdebugger;\r\n\t\t// tslint:disable-next-line:no-unused-expression\r\n\t\t// this._ngsDynamicGridItemView;\r\n\t}\r\n\t/**\r\n\t * private methods\r\n\t */\r\n\t_get_grid_by_oid_and_update_component() {\r\n\t\tthis.service.selectById(this.oid).pipe(filter(data => data != undefined)).subscribe(data => {\r\n\t\t\tthis.grid = data;\r\n\t\t\tthis.options = { ...this.options, ...data.config };\r\n\t\t\t// this.options.draggable = {\r\n\t\t\t// \tenabled: true\r\n\t\t\t// };\r\n\t\t\t// this.options.emptyCellContextMenuCallback = this.emptyCellClick.bind(this);\r\n\t\t\t// this.options.emptyCellDropCallback = this.emptyCellClick.bind(this);\r\n\t\t\tif (this.options.enableEmptyCellDrag) this.options.emptyCellDragCallback = this.emptyCellClick.bind(this);\r\n\t\t\t// if (this.options.enableEmptyCellClick) this.options.emptyCellClickCallback = this.emptyCellClick.bind(this);\r\n\t\t\tthis.ready = true;\r\n\t\t\t// this.options.api.optionsChanged();\r\n\t\t});\r\n\t}\r\n}\r\n","import {\r\n\tComponent,\r\n\tOnInit,\r\n\tComponentRef,\r\n\tComponentFactoryResolver,\r\n\tViewContainerRef,\r\n\tDirective,\r\n\tInput,\r\n\tInject,\r\n\tViewChild\r\n} from \"@angular/core\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { pluck, filter, switchMap, map, startWith } from \"rxjs/operators\";\r\nimport { GridConfigurationService } from \"../services/grid-configuration.service\";\r\nimport { MAT_BOTTOM_SHEET_DATA } from \"@angular/material\";\r\nimport { IGridItemModel } from \"../models/gird-item.model\";\r\n\r\n@Directive({\r\n\tselector: \"[ngsDynamicGridItemView]\"\r\n})\r\nexport class DynamicGridItemViewDirective implements OnInit {\r\n\t@Input(\"ngsDynamicGridItemView\")\r\n\tset item(item: IGridItemModel<any>) {\r\n\t\tif (!item) return;\r\n\t\tif (!item.valid) return;\r\n\t\tthis._resolve_correct_component_base_on_widget_type(item);\r\n\t}\r\n\tcomponent: ComponentRef<any>;\r\n\tmapTypeToComponent: any;\r\n\tconstructor(\r\n\t\tprivate configurationService: GridConfigurationService,\r\n\t\tprivate resolver: ComponentFactoryResolver,\r\n\t\tprivate container: ViewContainerRef\r\n\t) {\r\n\t\tthis.mapTypeToComponent = this.configurationService.config$.getValue().types;\r\n\t}\r\n\tngOnInit() {}\r\n\t_resolve_correct_component_base_on_widget_type(item: IGridItemModel<any>) {\r\n\t\tdebugger;\r\n\t\tif (!this.mapTypeToComponent[item.type]) {\r\n\t\t\tconst supportedTypes = Object.keys(this.mapTypeToComponent).join(\", \");\r\n\t\t\tthrow new Error(\r\n\t\t\t\t`Trying to use an unsupported type (${item.type}).\r\n\t\t  \t\t Supported types: ${supportedTypes}`\r\n\t\t\t);\r\n\t\t}\r\n\t\tconst componentFactory = this.resolver.resolveComponentFactory<any>(\r\n\t\t\tthis.mapTypeToComponent[item.type].viewComponent\r\n\t\t);\r\n\t\tthis.component = this.container.createComponent(componentFactory);\r\n\t\tObject.keys(item.config || {}).forEach((key) => {\r\n\t\t\tthis.component.instance[key] = item.config[key];\r\n\t\t});\r\n\t}\r\n}\r\n","import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { StoreDevtoolsModule } from \"@ngrx/store-devtools\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { StoreModule } from \"@ngrx/store\";\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport {\r\n\tMatExpansionModule,\r\n\tMatSnackBarModule,\r\n\tMatIconModule,\r\n\tMatButtonModule,\r\n\tMatCardModule,\r\n\tMatSelectModule,\r\n\tMatInputModule,\r\n\tMatFormFieldModule,\r\n\tMatTabsModule,\r\n\tMatRadioModule,\r\n\tMatSlideToggleModule,\r\n\tMatDividerModule,\r\n\tMatCheckboxModule,\r\n\tMatTableModule,\r\n\tMatBottomSheetModule,\r\n\tMatMenuModule,\r\n\tMatToolbarModule\r\n} from \"@angular/material\";\r\nimport { EffectsModule } from \"@ngrx/effects\";\r\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\r\nimport { GridsterModule } from \"angular-gridster2\";\r\n\r\nimport { GridModuleConfig, MODULE_CONFIG_TOKEN } from \"./grid.config\";\r\nimport { GridRoutingModule } from \"./grid-routing.module\";\r\nimport { GetGridApiEffects } from \"./services/api/get-grid/get-grid.effects\";\r\nimport { UpsertGridApiEffects } from \"./services/api/upsert-grid/upsert-grid.effects\";\r\nimport { GetGridsApiEffects } from \"./services/api/get-grids/get-grids.effects\";\r\nimport { GridReducer } from \"./grid.reducer\";\r\nimport { GridDbEffects } from \"./root/grids.effects\";\r\nimport { RootComponent } from \"./root/root.component\";\r\nimport { GridService } from \"./services/grid.service\";\r\nimport { GridConfigurationService } from \"./services/grid-configuration.service\";\r\nimport { GridComponent } from \"./grid/grid.component\";\r\nimport { GridConfigComponent } from \"./grid-config/grid-config.component\";\r\nimport {\r\n\tDynamicGridItremConfigDirective,\r\n\tDynamicGridItemConfigComponent\r\n} from \"./grid-item/dynamic-grid-item-config.directive\";\r\nimport { DynamicGridItemViewDirective } from \"./grid-item/dynamic-grid-item-view.directive\";\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n\t\tRouterModule,\r\n\t\tMatExpansionModule,\r\n\t\tMatSnackBarModule,\r\n\t\tMatIconModule,\r\n\t\tMatButtonModule,\r\n\t\tMatCardModule,\r\n\t\tMatSelectModule,\r\n\t\tMatInputModule,\r\n\t\tMatFormFieldModule,\r\n\t\tMatTabsModule,\r\n\t\tMatBottomSheetModule,\r\n\t\tMatRadioModule,\r\n\t\tFlexLayoutModule,\r\n\t\tMatMenuModule,\r\n\t\tMatToolbarModule,\r\n\t\tFormsModule,\r\n\t\tReactiveFormsModule,\r\n\t\tMatSlideToggleModule,\r\n\t\tMatDividerModule,\r\n\t\tMatCheckboxModule,\r\n\t\tMatTableModule,\r\n\t\tGridsterModule\r\n\t],\r\n\tdeclarations: [\r\n\t\tRootComponent,\r\n\t\tGridComponent,\r\n\t\tGridConfigComponent,\r\n\t\tDynamicGridItremConfigDirective,\r\n\t\tDynamicGridItemConfigComponent,\r\n\t\tDynamicGridItemViewDirective\r\n\t],\r\n\tentryComponents: [ GridConfigComponent, DynamicGridItemConfigComponent ],\r\n\texports: [ GridComponent ]\r\n})\r\nexport class NgsGridModule {\r\n\tstatic forRoot(config?: GridModuleConfig): ModuleWithProviders {\r\n\t\treturn {\r\n\t\t\tngModule: NgsGridRootModule,\r\n\t\t\tproviders: [ { provide: MODULE_CONFIG_TOKEN, useValue: config }, GridConfigurationService, GridService ]\r\n\t\t};\r\n\t}\r\n}\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tNgsGridModule,\r\n\t\tGridRoutingModule,\r\n\t\tStoreModule.forFeature(\"grids\", GridReducer),\r\n\t\tEffectsModule.forFeature([ GridDbEffects, GetGridApiEffects, GetGridsApiEffects, UpsertGridApiEffects ])\r\n\t],\r\n\texports: [ NgsGridModule ]\r\n})\r\nexport class NgsGridRootModule {}\r\n"]}