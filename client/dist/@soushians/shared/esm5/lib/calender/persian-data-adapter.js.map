{
  "version": 3,
  "file": "persian-data-adapter.js",
  "sources": [
    "ng://@soushians/shared/ng:/@soushians/shared/ng:/@soushians/shared/ng:/@soushians/shared/ng:/@soushians/shared/ng:/@soushians/shared/ng:/@soushians/shared/ng:/@soushians/shared/projects/soushians/shared/src/lib/calender/persian-data-adapter.ts"
  ],
  "sourcesContent": [
    "import * as moment from \"jalali-moment\";\r\nimport { DateAdapter, MAT_DATE_LOCALE } from \"@angular/material\";\r\nimport { Inject, Injectable, Optional } from \"@angular/core\";\r\n\r\n/** Creates an array and fills it with values. */\r\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\r\n\tconst valuesArray = Array(length);\r\n\tfor (let i = 0; i < length; i++) {\r\n\t\tvaluesArray[i] = valueFunction(i);\r\n\t}\r\n\treturn valuesArray;\r\n}\r\nexport class JalaliMomentDateAdapter extends DateAdapter<moment.Moment> {\r\n\tconstructor() {\r\n\t\t// @Optional() @Inject(MAT_DATE_LOCALE) dateLocale: string\r\n\t\tsuper();\r\n\t\t// this.setLocale(dateLocale || jmoment.locale(dateLocale));\r\n\t\tsuper.setLocale(\"fa\");\r\n\t}\r\n\r\n\t/**\r\n       * returns year in jalali calendar system.\r\n       */\r\n\tgetYear(date: moment.Moment): number {\r\n\t\treturn this.clone(date).jYear();\r\n\t}\r\n\r\n\t/**\r\n       * returns month in jalali calendar system.\r\n       */\r\n\tgetMonth(date: moment.Moment): number {\r\n\t\treturn this.clone(date).jMonth();\r\n\t}\r\n\r\n\t/**\r\n       * returns day in jalali calendar system.\r\n       */\r\n\tgetDate(date: moment.Moment): number {\r\n\t\treturn this.clone(date).jDate();\r\n\t}\r\n\r\n\t/**\r\n       * returns Day Of Week in jalali calendar system.\r\n       */\r\n\tgetDayOfWeek(date: moment.Moment): number {\r\n\t\treturn this.clone(date).day();\r\n\t}\r\n\r\n\t/**\r\n       * returns Month Names in jalali calendar system.\r\n       * most of the time we use long format. short or narrow format for month names is a little odd.\r\n       */\r\n\tgetMonthNames(style: \"long\" | \"short\" | \"narrow\"): string[] {\r\n\t\tswitch (style) {\r\n\t\t\tcase \"long\":\r\n\t\t\tcase \"short\":\r\n\t\t\t\treturn moment.localeData(\"fa\").jMonths().slice(0);\r\n\t\t\tcase \"narrow\":\r\n\t\t\t\treturn moment.localeData(\"fa\").jMonthsShort().slice(0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n       * borrowed from angular material code.\r\n       */\r\n\tgetDateNames(): string[] {\r\n\t\treturn range(31, i => String(i + 1));\r\n\t\t// return this._localeData.dates;\r\n\t}\r\n\r\n\t/**\r\n       * returns Day Of Week names in jalali calendar system.\r\n       */\r\n\tgetDayOfWeekNames(style: \"long\" | \"short\" | \"narrow\"): string[] {\r\n\t\tswitch (style) {\r\n\t\t\tcase \"long\":\r\n\t\t\t\treturn moment.localeData(\"fa\").weekdays().slice(0);\r\n\t\t\tcase \"short\":\r\n\t\t\t\treturn moment.localeData(\"fa\").weekdaysShort().slice(0);\r\n\t\t\tcase \"narrow\":\r\n\t\t\t\treturn [ \"ی\", \"د\", \"س\", \"چ\", \"پ\", \"ج\", \"ش\" ];\r\n\t\t\t// return jmoment.localeData('fa').weekdaysMin().slice(0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n       * returns year in jalali calendar system.\r\n       */\r\n\tgetYearName(date: moment.Moment): string {\r\n\t\treturn this.clone(date).jYear().toString();\r\n\t}\r\n\r\n\t/**\r\n       * returns first day of week in jalali calendar system.\r\n       * first day of week is saturday, شنبه\r\n       */\r\n\tgetFirstDayOfWeek(): number {\r\n\t\treturn moment.localeData(\"fa\").firstDayOfWeek();\r\n\t\t// return 6;\r\n\t}\r\n\r\n\t/**\r\n       * returns Number of Days In Month in jalali calendar system.\r\n       */\r\n\tgetNumDaysInMonth(date: moment.Moment): number {\r\n\t\treturn this.clone(date).jDaysInMonth();\r\n\t}\r\n\r\n\tclone(date: moment.Moment): moment.Moment {\r\n\t\treturn date.clone().locale(\"fa\");\r\n\t}\r\n\r\n\t/**\r\n       * Pass 3 number in jalali calendar system to this function and it returns a moment object\r\n       * @param year jalali year\r\n       * @param month zero indexed jalali month\r\n       * @param date jalali day\r\n       */\r\n\tcreateDate(year: number, month: number, date: number): moment.Moment {\r\n\t\tif (month < 0 || month > 11) {\r\n\t\t\tthrow Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\r\n\t\t}\r\n\t\tif (date < 1) {\r\n\t\t\tthrow Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\r\n\t\t}\r\n\t\tconst result = moment()\r\n\t\t\t.jYear(year)\r\n\t\t\t.jMonth(month)\r\n\t\t\t.jDate(date)\r\n\t\t\t.hours(0)\r\n\t\t\t.minutes(0)\r\n\t\t\t.seconds(0)\r\n\t\t\t.milliseconds(0)\r\n\t\t\t.locale(\"fa\");\r\n\t\t// Check that the date wasn't above the upper bound for the month, causing the month to overflow\r\n\t\tif (this.getMonth(result) !== month) {\r\n\t\t\tthrow Error(`Invalid date ${date} for month with index ${month}.`);\r\n\t\t}\r\n\t\tif (!result.isValid()) {\r\n\t\t\tthrow Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\ttoday(): moment.Moment {\r\n\t\treturn moment().locale(\"fa\");\r\n\t}\r\n\r\n\tparse(value: any, parseFormat: string | string[]): moment.Moment | null {\r\n\t\tif (value && typeof value === \"string\") {\r\n\t\t\tconst result = moment(value, parseFormat, \"fa\");\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\treturn value ? moment(value).locale(\"fa\") : null;\r\n\t}\r\n\r\n\tformat(date: moment.Moment, displayFormat: string): string {\r\n\t\tdate = this.clone(date);\r\n\t\tif (!this.isValid(date)) {\r\n\t\t\tthrow Error(\"JalaliMomentDateAdapter: Cannot format invalid date.\");\r\n\t\t}\r\n\t\treturn date.format(displayFormat);\r\n\t}\r\n\r\n\taddCalendarYears(date: moment.Moment, years: number): moment.Moment {\r\n\t\treturn this.clone(date).add(years, \"jYear\");\r\n\t}\r\n\r\n\taddCalendarMonths(date: moment.Moment, months: number): moment.Moment {\r\n\t\treturn this.clone(date).add(months, \"jmonth\");\r\n\t}\r\n\r\n\taddCalendarDays(date: moment.Moment, days: number): moment.Moment {\r\n\t\treturn this.clone(date).add(days, \"jDay\");\r\n\t}\r\n\r\n\t/**\r\n   *Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\r\n   * This method is used to generate date strings that are compatible with native HTML attributes\r\n   *such as the `min` or `max` attribute of an `<input>`.\r\n   *@param date The date to get the ISO date string for.\r\n   *@returns The ISO date string date string.\r\n   */\r\n\ttoIso8601(date: moment.Moment): string {\r\n\t\treturn this.clone(date).format();\r\n\t}\r\n\r\n\tisDateInstance(obj: any): boolean {\r\n\t\treturn moment.isMoment(obj);\r\n\t}\r\n\r\n\tisValid(date: moment.Moment): boolean {\r\n\t\treturn this.clone(date).isValid();\r\n\t\t// return date.isValid();\r\n\t}\r\n\r\n\tinvalid(): moment.Moment {\r\n\t\treturn moment.invalid();\r\n\t}\r\n\r\n\t/**\r\n   * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings\r\n   * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty\r\n   * string into null. Returns an invalid date for all other values.\r\n   */\r\n\r\n\t/**\r\n    * Attempts to deserialize a value to a valid date object. This is different from parsing in that\r\n    * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\r\n    * string). The default implementation does not allow any deserialization, it simply checks that\r\n    * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\r\n    * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\r\n    * support passing values from your backend directly to these properties by overriding this method\r\n    * to also deserialize the format used by your backend.\r\n    * @param value The value to be deserialized into a date object.\r\n    * @returns The deserialized date object, either a valid date, null if the value can be\r\n    *     deserialized into a null date (e.g. the empty string), or an invalid date.\r\n    */\r\n\tdeserialize(value: any): moment.Moment | null {\r\n\t\tlet date;\r\n\t\tif (value instanceof Date) {\r\n\t\t\tdate = moment(value);\r\n\t\t}\r\n\t\tif (typeof value === \"string\") {\r\n\t\t\tif (!value) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\t// date = jmoment(value, jmoment.ISO_8601).locale('fa');\r\n\t\t\tdate = moment(value).locale(\"fa\");\r\n\t\t}\r\n\t\tif (date && this.isValid(date)) {\r\n\t\t\treturn date;\r\n\t\t}\r\n\t\treturn super.deserialize(value);\r\n\t}\r\n}\r\n\r\nimport { InjectionToken } from \"@angular/core\";\r\nimport { MatDateFormats } from \"@angular/material\";\r\nexport const JALALI_MOMENT_FORMATS: MatDateFormats = {\r\n\tparse: {\r\n\t\tdateInput: \"jYYYY/jMM/jDD\"\r\n\t\t// dateInput: 'l',\r\n\t},\r\n\tdisplay: {\r\n\t\tdateInput: \"jYYYY/jMM/jDD\",\r\n\t\tmonthYearLabel: \"jYYYY jMMMM\",\r\n\t\tdateA11yLabel: \"jYYYY/jMM/jDD\",\r\n\t\tmonthYearA11yLabel: \"jYYYY jMMMM\"\r\n\t}\r\n};\r\n"
  ],
  "names": [],
  "mappings": "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"
}
