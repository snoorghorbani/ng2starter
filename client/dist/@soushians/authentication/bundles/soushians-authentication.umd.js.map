{
  "version": 3,
  "file": "soushians-authentication.umd.js",
  "sources": [
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/authentication.module.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/effects/authentication.effects.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/effects/signin.effects.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/services/signin.service.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/interceptors/unauthorized.interceptor.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/interceptors/with-credential.interceptor.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/dump-components/signin/signin.component.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/authentication-routing.module.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/smart-components/signin-container/signin-container.component.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/services/authentication-configuration.service.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/smart-components/authentication-container/authentication-container.component.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/routing-guards/signin.guard.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/routing-guards/user.guard.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/routing-guards/agent.guard.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/routing-guards/admin.guard.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/reducers/index.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/reducers/user.reducer.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/authentication.config.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/actions/signin.actions.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/actions/captcha.actions.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/actions/authentication.actions.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/models/signin.api-model.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/models/user.model.ts"
  ],
  "sourcesContent": [
    "import { NgModule, ModuleWithProviders, InjectionToken, Injectable, Inject } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from \"@angular/common/http\";\r\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\r\nimport {\r\n\tMatIconModule,\r\n\tMatButtonModule,\r\n\tMatCardModule,\r\n\tMatSnackBarModule,\r\n\tMatSidenavModule,\r\n\tMatExpansionModule,\r\n\tMatSelectModule,\r\n\tMatFormFieldModule,\r\n\tMatListModule,\r\n\tMatMenuModule,\r\n\tMatRadioModule,\r\n\tMatInputModule,\r\n\tMatToolbarModule,\r\n\tMatDatepickerModule,\r\n\tMatProgressBarModule\r\n} from \"@angular/material\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { StoreModule } from \"@ngrx/store\";\r\nimport { EffectsModule } from \"@ngrx/effects\";\r\n\r\nimport { NgsFormModule } from \"@soushians/form\";\r\n\r\nimport { AuthenticationModuleConfig, MODULE_CONFIG_TOKEN } from \"./authentication.config\";\r\nimport { AuthenticationRoutingModule } from \"./authentication-routing.module\";\r\nimport { SigninContainerComponent } from \"./smart-components/signin-container/signin-container.component\";\r\nimport { SigninComponent } from \"./dump-components/signin/signin.component\";\r\nimport { AuthenticationContainerComponent } from \"./smart-components/authentication-container/authentication-container.component\";\r\n\r\nimport { WithCredentialInterceptor } from \"./interceptors/with-credential.interceptor\";\r\nimport { UnauthorizedInterceptor } from \"./interceptors/unauthorized.interceptor\";\r\n\r\nimport { AuthenticationReducers } from \"./reducers\";\r\n\r\nimport { SigninEffects } from \"./effects/signin.effects\";\r\nimport { AuthenticationEffects } from \"./effects/authentication.effects\";\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n\t\tRouterModule,\r\n\t\tFormsModule,\r\n\t\tHttpClientModule,\r\n\t\tFlexLayoutModule,\r\n\t\tMatIconModule,\r\n\t\tMatButtonModule,\r\n\t\tMatCardModule,\r\n\t\tMatSnackBarModule,\r\n\t\tMatSidenavModule,\r\n\t\tMatExpansionModule,\r\n\t\tMatSelectModule,\r\n\t\tMatFormFieldModule,\r\n\t\tMatListModule,\r\n\t\tMatMenuModule,\r\n\t\tMatRadioModule,\r\n\t\tMatInputModule,\r\n\t\tMatToolbarModule,\r\n\t\tMatDatepickerModule,\r\n\t\tMatProgressBarModule,\r\n\t\tBrowserAnimationsModule,\r\n\t\tReactiveFormsModule,\r\n\t\tFormsModule,\r\n\t\tNgsFormModule\r\n\t],\r\n\tdeclarations: [ SigninContainerComponent, SigninComponent, AuthenticationContainerComponent ],\r\n\texports: []\r\n})\r\nexport class NgsAuthenticationModule {\r\n\tstatic forRoot(config: AuthenticationModuleConfig = <AuthenticationModuleConfig>{}): ModuleWithProviders {\r\n\t\treturn {\r\n\t\t\tngModule: RootNgsAuthenticationModule,\r\n\t\t\tproviders: [\r\n\t\t\t\t{ provide: MODULE_CONFIG_TOKEN, useValue: config },\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: HTTP_INTERCEPTORS,\r\n\t\t\t\t\tuseClass: UnauthorizedInterceptor,\r\n\t\t\t\t\tmulti: true\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: HTTP_INTERCEPTORS,\r\n\t\t\t\t\tuseClass: WithCredentialInterceptor,\r\n\t\t\t\t\tmulti: true\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t};\r\n\t}\r\n}\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tStoreModule.forFeature(\"authentication\", AuthenticationReducers),\r\n\t\tEffectsModule.forFeature([ SigninEffects, AuthenticationEffects ]),\r\n\t\tAuthenticationRoutingModule,\r\n\t\tNgsAuthenticationModule\r\n\t]\r\n})\r\nexport class RootNgsAuthenticationModule {}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { of } from \"rxjs/observable/of\";\r\nimport \"rxjs/add/operator/map\";\r\nimport \"rxjs/add/operator/mergeMap\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\n\r\nimport { SignInActionTypes, FailedHappened, ProgressingStarted, ProgressingFinished } from \"../actions\";\r\nimport { map } from \"rxjs/operators\";\r\n\r\n@Injectable()\r\nexport class AuthenticationEffects {\r\n\tconstructor(private actions$: Actions<any>, private router: Router) {}\r\n\r\n\t@Effect()\r\n\tdispachProgressingStarted$ = this.actions$\r\n\t\t.ofType(SignInActionTypes.SIGNIN)\r\n\t\t.pipe(map(() => new ProgressingStarted()));\r\n\r\n\t@Effect()\r\n\tdispachProgressingFinished$ = this.actions$\r\n\t\t.ofType(SignInActionTypes.SIGNIN_FAILURE, SignInActionTypes.SIGNIN_SUCCEED)\r\n\t\t.pipe(map(() => new ProgressingFinished()));\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport \"rxjs/add/operator/map\";\r\nimport \"rxjs/add/operator/mergeMap\";\r\nimport \"rxjs/add/operator/do\";\r\nimport \"rxjs/add/operator/catch\";\r\nimport \"rxjs/add/observable/empty\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { RouterAction } from \"@ngrx/router-store\";\r\nimport { switchMap, map, catchError, tap } from \"rxjs/operators\";\r\n\r\nimport { SignInActionTypes, SigninSecceed, SigninFailed, SigninRedirect, Signin } from \"../actions/signin.actions\";\r\n// import * as AuthActions from '../actions';\r\n\r\n//import {  } from '../reducers';\r\nimport { SigninService } from \"../services/signin.service\";\r\nimport { NewCaptcha } from \"../actions\";\r\nimport { Signin_ApiModel } from \"../models\";\r\n\r\n@Injectable()\r\nexport class SigninEffects {\r\n\tconstructor(private actions$: Actions, private router: Router, public signinService: SigninService) {}\r\n\r\n\t@Effect()\r\n\tpreSignUpStart$ = this.actions$\r\n\t\t.ofType(SignInActionTypes.SIGNIN)\r\n\t\t.pipe(\r\n\t\t\tswitchMap((action: Signin) => this.signinService.signin(action.payload)),\r\n\t\t\tmap(user => new SigninSecceed(user)),\r\n\t\t\tcatchError(error => Observable.of(new SigninFailed(error)))\r\n\t\t);\r\n\r\n\t@Effect({ dispatch: false })\r\n\tSigninSucceed$ = this.actions$\r\n\t\t.ofType(SignInActionTypes.SIGNIN_SUCCEED)\r\n\t\t.pipe(tap((data: any) => this.router.navigate([ \"/\" ])));\r\n\r\n\t@Effect() AfterSigninFiled$ = this.actions$.ofType(SignInActionTypes.SIGNIN_FAILURE).map(() => new NewCaptcha());\r\n\r\n\t@Effect({ dispatch: false })\r\n\tredirectToLoginPage$ = this.actions$\r\n\t\t.ofType(SignInActionTypes.SIGNIN_REDIRECT, SignInActionTypes.SIGNOUT)\r\n\t\t.pipe(tap(authed => this.router.navigate([ \"auth/signin\" ])));\r\n\r\n\t// TODO:\r\n\t// @Effect({ dispatch: false })\r\n\t// signout$ = this.actions$\r\n\t// \t.ofType(SignInActionTypes.SIGNOUT)\r\n\t// \t.map((data) => this.signinService.signout().subscribe((response) => null));\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs/Rx\";\r\nimport { MatSnackBar } from \"@angular/material\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\nimport { map, switchMap, take, filter, tap } from \"rxjs/operators\";\r\n\r\n// import { environment } from \"../../environments/environment\";\r\n\r\nimport { Signin_ApiModel, UserModel } from \"../models\";\r\nimport { AuthenticationConfigurationService } from \"./authentication-configuration.service\";\r\n\r\nconst SIGNIN_RESPONSE = \"[APP] SIGNIN_RESPONSE\";\r\n\r\n@Injectable()\r\nexport class SigninService {\r\n\t// SigninResponse = new BehaviorSubject<UserModel>(new UserModel());\r\n\tconstructor(\r\n\t\tprivate http: HttpClient,\r\n\t\tprivate configurationService: AuthenticationConfigurationService,\r\n\t\tprivate snackBar: MatSnackBar\r\n\t) {}\r\n\r\n\tsignin(model: any): Observable<UserModel> {\r\n\t\treturn this.configurationService.config$.pipe(\r\n\t\t\tfilter(config => config.endpoints.signIn != \"\"),\r\n\t\t\ttake(1),\r\n\t\t\tswitchMap(config =>\r\n\t\t\t\tthis.http.post<Signin_ApiModel.Response>(this.configurationService.config.endpoints.signIn, model)\r\n\t\t\t),\r\n\t\t\tmap(response => {\r\n\t\t\t\tconst userModel = new Signin_ApiModel.Response(response).extractData();\r\n\t\t\t\t// this.SigninResponse.next(userModel);\r\n\t\t\t\treturn userModel;\r\n\t\t\t})\r\n\t\t);\r\n\t\t// .catch(err => {\r\n\t\t// \tif (err.status == 400) {\r\n\t\t// \t\tthis.snackBar.open(\"کد امنیتی اشتباه است\", null, {\r\n\t\t// \t\t\tduration: 5000\r\n\t\t// \t\t});\r\n\t\t// \t} else if (err.status == 403) {\r\n\t\t// \t\tthis.snackBar.open(\" شماره موبایل و یا کلمه عبور اشتباه است\", null, {\r\n\t\t// \t\t\tduration: 5000\r\n\t\t// \t\t});\r\n\t\t// \t}\r\n\t\t// \treturn Observable.throw(err);\r\n\t\t// });\r\n\t}\r\n\r\n\tsignout(): Observable<any> {\r\n\t\tlocalStorage.removeItem(SIGNIN_RESPONSE);\r\n\t\treturn this.http\r\n\t\t\t.get(this.configurationService.config.endpoints.signOut, {\r\n\t\t\t\twithCredentials: true\r\n\t\t\t})\r\n\t\t\t.map(response => response);\r\n\t}\r\n}\r\n\r\nexport var SigninServiceStub = {};\r\n",
    "import \"rxjs/add/operator/do\";\r\nimport { HttpInterceptor } from \"@angular/common/http\";\r\nimport { HttpRequest } from \"@angular/common/http\";\r\nimport { HttpHandler } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { HttpEvent } from \"@angular/common/http\";\r\nimport { HttpResponse } from \"@angular/common/http\";\r\nimport { HttpErrorResponse } from \"@angular/common/http\";\r\n\r\nimport { Store } from \"@ngrx/store\";\r\nimport { SignoutAction } from \"../actions\";\r\nimport * as fromAuth from \"../reducers\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\n\r\n@Injectable()\r\nexport class UnauthorizedInterceptor implements HttpInterceptor {\r\n\tconstructor(\r\n\t\tprivate router: Router,\r\n\t\tprivate store: Store<fromAuth.FeatureState> // private signinService: SigninService\r\n\t) {}\r\n\tintercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\t\treturn next\r\n\t\t\t.handle(request)\r\n\t\t\t.map((event: HttpEvent<any>) => {\r\n\t\t\t\tif (event instanceof HttpResponse) return event;\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tif (!(err instanceof HttpErrorResponse)) return;\r\n\t\t\t\tif (err.status != 401) return;\r\n\t\t\t\tif (err.url.includes(\"logout\")) return;\r\n\r\n\t\t\t\tthis.store.dispatch(new SignoutAction());\r\n\r\n\t\t\t\treturn Observable.throw(\"Unauthorized\");\r\n\t\t\t});\r\n\t}\r\n}\r\n",
    "import \"rxjs/add/operator/do\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { HttpInterceptor } from \"@angular/common/http\";\r\nimport { HttpRequest } from \"@angular/common/http\";\r\nimport { HttpHandler } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { HttpEvent } from \"@angular/common/http\";\r\nimport { HttpResponse } from \"@angular/common/http\";\r\nimport { AuthenticationConfigurationService } from \"../services/authentication-configuration.service\";\r\n// import { environment } from \"../../../environments/environment\";\r\n\r\n@Injectable()\r\nexport class WithCredentialInterceptor implements HttpInterceptor {\r\n\tconstructor(private configurationService: AuthenticationConfigurationService) {}\r\n\tintercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\t\t// if (!this.configurationService.config.env.production)\r\n\t\t(request as any).withCredentials = true;\r\n\t\treturn next.handle(request);\r\n\t}\r\n}\r\n",
    "import { Component, Input, Output, EventEmitter } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { Observable } from \"rxjs/Rx\";\r\n\r\n@Component({\r\n\tselector: \"auth-signin\",\r\n\ttemplate: `<div fxLayout='row' fxLayoutAlign=\"center center\">\r\n    <ngs-form-view \r\n        [id]=\"formId\"\r\n        (accept)=\"signin($event)\"\r\n    ></ngs-form-view>\r\n</div>\r\n<!-- <div>\r\n    <a fxFlex=\"nogrow\" routerLink=\"/user/password/reset\" mat-raised-button fxFlexFill>کلمه عبور خود را فراموش کرده اید؟</a>\r\n</div> -->`,\r\n\tstyles: [``]\r\n})\r\nexport class SigninComponent {\r\n\t@Output() signedin = new EventEmitter();\r\n\r\n\t@Input() formId: string;\r\n\r\n\tsignin(formGroup: FormGroup) {\r\n\t\tif (!formGroup.valid) return;\r\n\t\tthis.signedin.emit(formGroup.value);\r\n\t}\r\n\r\n\tconstructor() {}\r\n}\r\n",
    "import { ModuleWithProviders } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\n\r\nimport { SigninGuard } from \"./routing-guards\";\r\nimport { AuthenticationContainerComponent } from \"./smart-components/authentication-container/authentication-container.component\";\r\nimport { SigninContainerComponent } from \"./smart-components/signin-container/signin-container.component\";\r\n\r\nconst routes: Routes = [\r\n\t{\r\n\t\tpath: \"auth\",\r\n\t\tcomponent: AuthenticationContainerComponent,\r\n\t\tchildren: [\r\n\t\t\t{\r\n\t\t\t\tpath: \"signin\",\r\n\t\t\t\tcanActivate: [ SigninGuard ],\r\n\t\t\t\tcomponent: SigninContainerComponent\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n];\r\n\r\nexport const AuthenticationRoutingModule: ModuleWithProviders = RouterModule.forChild(routes);\r\n",
    "import { Component, OnInit, OnDestroy } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { Signin } from \"../../actions\";\r\nimport { CaptchaModel } from \"../../models\";\r\nimport { AuthenticationConfigurationService } from \"../../services/authentication-configuration.service\";\r\nimport { FeatureState } from \"../../reducers\";\r\n\r\n@Component({\r\n\ttemplate: `\r\n        <auth-signin \r\n                [formId]='(formId$ | async)'\r\n                (signedin)=\"signIn($event)\"\r\n        ></auth-signin>\r\n  `\r\n})\r\nexport class SigninContainerComponent {\r\n\tformId$: Observable<string>;\r\n\tconstructor(private configurationService: AuthenticationConfigurationService, private store: Store<FeatureState>) {\r\n\t\tthis.formId$ = this.configurationService.config$.map(config => config.forms.signIn);\r\n\t}\r\n\r\n\tsignIn(formValue: any) {\r\n\t\tthis.store.dispatch(new Signin(formValue));\r\n\t}\r\n}\r\n",
    "import { Injectable, Inject } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\n\r\nimport { getAuthenticationModuleConfig } from \"@soushians/config\";\r\n\r\nimport { MODULE_CONFIG_TOKEN, AuthenticationModuleConfig, MODULE_DEFAULT_CONFIG } from \"../authentication.config\";\r\nimport { AuthenticationState } from \"../reducers\";\r\n\r\n@Injectable()\r\nexport class AuthenticationConfigurationService {\r\n\tprivate _config: AuthenticationModuleConfig;\r\n\tget config() {\r\n\t\treturn this._config;\r\n\t}\r\n\tconfig$ = new BehaviorSubject(this._config);\r\n\r\n\tconstructor(@Inject(MODULE_CONFIG_TOKEN) configFile: any, private store: Store<AuthenticationState>) {\r\n\t\tthis._config = Object.assign({}, MODULE_DEFAULT_CONFIG, configFile);\r\n\t\tthis.config$.next(this._config);\r\n\t\tthis.store.select(getAuthenticationModuleConfig).subscribe(storeConfig => {\r\n\t\t\tif (!storeConfig) return;\r\n\t\t\tthis._config = Object.assign({}, this._config, storeConfig.Config);\r\n\t\t\tthis.config$.next(this._config);\r\n\t\t});\r\n\t}\r\n}\r\n",
    "import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n\ttemplate: `\r\n          <router-outlet></router-outlet>\r\n        `\r\n})\r\nexport class AuthenticationContainerComponent {}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { CanActivate, RouterStateSnapshot, ActivatedRouteSnapshot } from \"@angular/router\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { FeatureState, getLoggedIn } from \"../reducers\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class SigninGuard implements CanActivate {\r\n\tconstructor(private store: Store<FeatureState>) {}\r\n\r\n\tcanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\r\n\t\treturn this.store.select(getLoggedIn).take(1).map(authed => !authed);\r\n\t}\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { CanActivate, RouterStateSnapshot, ActivatedRouteSnapshot } from \"@angular/router\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { FeatureState, getUser } from \"../reducers\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class UserGuard implements CanActivate {\r\n\tconstructor(private store: Store<FeatureState>) {}\r\n\r\n\tcanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\r\n\t\treturn this.store.select(getUser).take(1).map(user => (user.Roles as any).includes(\"User\"));\r\n\t}\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { CanActivate, RouterStateSnapshot, ActivatedRouteSnapshot } from \"@angular/router\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { FeatureState, getUser } from \"../reducers\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class AgentGuard implements CanActivate {\r\n\tconstructor(private store: Store<FeatureState>) {}\r\n\r\n\tcanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\r\n\t\treturn this.store.select(getUser).take(1).map(user => {\r\n\t\t\tvar res = (user.Roles as any).includes(\"Agent\");\r\n\t\t\t// !res && this.store.dispatch(new SigninRedirect());\r\n\t\t\treturn res;\r\n\t\t});\r\n\t}\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { CanActivate, RouterStateSnapshot, ActivatedRouteSnapshot } from \"@angular/router\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { FeatureState, getUser } from \"../reducers\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class AdminGuard implements CanActivate {\r\n\tconstructor(private store: Store<FeatureState>) {}\r\n\r\n\tcanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\r\n\t\treturn this.store.select(getUser).take(1).map(user => {\r\n\t\t\tvar res = (user.Roles as any).includes(\"Admin\");\r\n\t\t\t// !res && this.store.dispatch(new SigninRedirect());\r\n\t\t\treturn res;\r\n\t\t});\r\n\t}\r\n}\r\n",
    "import { createSelector, createFeatureSelector, MemoizedSelector } from \"@ngrx/store\";\r\n\r\nimport * as userReducer from \"./user.reducer\";\r\n// import * as captchaReducer from \"./captcha.reducer\";\r\n\r\nimport { UserModel } from \"../models/user.model\";\r\n\r\nexport interface AuthenticationState {\r\n\tuserStatus: userReducer.State;\r\n\t// captcha: captchaReducer.State;\r\n}\r\n\r\nexport interface FeatureState {\r\n\t\"authentication\": AuthenticationState;\r\n}\r\n\r\nexport const AuthenticationReducers = {\r\n\tuserStatus: userReducer.UserReducer\r\n\t// captcha: captchaReducer.CaptchaReducer\r\n};\r\n\r\n//#region selectors\r\n\r\nexport const selectAuthenticationState = createFeatureSelector<AuthenticationState>(\"authentication\");\r\n\r\nexport const selectAuthState = createSelector(\r\n\tselectAuthenticationState,\r\n\t(state: AuthenticationState) => state.userStatus\r\n);\r\n\r\nexport const getLoggedIn = createSelector(selectAuthState, userReducer.getLoggedIn);\r\nexport const getUser = createSelector(selectAuthState, userReducer.getUser);\r\n\r\n// export const selectCaptchaState = createSelector(selectAuthenticationState, (state: AuthenticationState) => {\r\n// \treturn state.captcha;\r\n// });\r\n\r\n// export const getCaptcha = createSelector(selectCaptchaState, captchaReducer.getCaptcha);\r\n",
    "import { SigninAction, SignInActionTypes } from \"../actions/signin.actions\";\r\nimport { UserModel } from \"../models/user.model\";\r\n\r\nexport interface State {\r\n\tloggedIn: boolean;\r\n\tuser: UserModel;\r\n}\r\n\r\nexport const initialState: State = {\r\n\tloggedIn: false,\r\n\tuser: new UserModel({ Id: 1 })\r\n};\r\n\r\nexport function UserReducer(state = initialState, action: SigninAction): State {\r\n\tswitch (action.type) {\r\n\t\tcase SignInActionTypes.SIGNIN_SUCCEED: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloggedIn: true,\r\n\t\t\t\tuser: action.payload\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase SignInActionTypes.SIGNOUT: {\r\n\t\t\treturn initialState;\r\n\t\t}\r\n\r\n\t\tdefault: {\r\n\t\t\treturn state;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n//#region  selectors\r\nexport const getLoggedIn = (state: State) => state.loggedIn;\r\nexport const getUser = (state: State) => state.user;\r\n//#endregion\r\n",
    "import { InjectionToken } from \"@angular/core\";\r\n\r\nexport interface AuthenticationModuleConfig {\r\n\tendpoints?: {\r\n\t\tsignOut?: string;\r\n\t\tsignIn?: string;\r\n\t\tuserInformation?: string;\r\n\t};\r\n\tforms?: {\r\n\t\tsignIn: string;\r\n\t};\r\n\tenv: {\r\n\t\tproduction: boolean;\r\n\t};\r\n}\r\n\r\nexport const MODULE_DEFAULT_CONFIG: AuthenticationModuleConfig = {\r\n\tendpoints: {\r\n\t\tsignOut: \"\",\r\n\t\tsignIn: \"\",\r\n\t\tuserInformation: \"\"\r\n\t},\r\n\tforms: {\r\n\t\tsignIn: \"\"\r\n\t},\r\n\tenv: {\r\n\t\tproduction: false\r\n\t}\r\n};\r\n\r\nexport const MODULE_CONFIG_TOKEN = new InjectionToken<AuthenticationModuleConfig>(\"ModuleConfig\");\r\n",
    "import { Action } from \"@ngrx/store\";\r\nimport { Signin_ApiModel } from \"../models\";\r\n\r\nexport enum SignInActionTypes {\r\n\tSIGNIN = \"[Auth] Signin\",\r\n\tSIGNOUT = \"[Auth] Signout\",\r\n\tSIGNIN_SUCCEED = \"[Auth] Signin Success\",\r\n\tSIGNIN_FAILURE = \"[Auth] Signin Failure\",\r\n\tSIGNIN_REDIRECT = \"[Auth] Signin Redirect\"\r\n}\r\n\r\nexport class Signin implements Action {\r\n\treadonly type = SignInActionTypes.SIGNIN;\r\n\tconstructor(public payload: Signin_ApiModel.Request) {}\r\n}\r\n\r\nexport class SigninSecceed implements Action {\r\n\treadonly type = SignInActionTypes.SIGNIN_SUCCEED;\r\n\tconstructor(public payload: any) {}\r\n}\r\n\r\nexport class SigninFailed implements Action {\r\n\treadonly type = SignInActionTypes.SIGNIN_FAILURE;\r\n\tconstructor(public payload: any) {}\r\n}\r\n\r\nexport class SigninRedirect implements Action {\r\n\treadonly type = SignInActionTypes.SIGNIN_REDIRECT;\r\n}\r\n\r\nexport class SignoutAction implements Action {\r\n\treadonly type = SignInActionTypes.SIGNOUT;\r\n}\r\n\r\nexport type SigninAction = Signin | SigninSecceed | SigninFailed | SigninRedirect | SignoutAction;\r\n",
    "import { Action } from '@ngrx/store';\r\n\r\nimport { TokenModel } from '../models';\r\n\r\nexport const NEW_CAPTCHA = '[captcha] new captcha';\r\nexport const TOKEN_REQUESTED = '[captcha] token_requested';\r\nexport const TOKEN_RECEIVED = '[captcha] token_received';\r\nexport const CAPTCHA_IMAGE_REQUESTED = '[captcha] captcha_image_requested';\r\nexport const CAPTCHA_IMAGE_LOADED = '[captcha] captcha_image_loaded';\r\nexport const CAPTCHA_ENTERED = '[captcha] CAPTCHA_ENTERED';\r\nexport const CLEAR_CAPTCHA = '[captcha] CLEAR_CAPTCHA';\r\n\r\nexport class NewCaptcha implements Action {\r\n        readonly type = NEW_CAPTCHA;\r\n}\r\nexport class TokenRequested implements Action {\r\n        readonly type = TOKEN_REQUESTED;\r\n}\r\nexport class TokenReceived implements Action {\r\n        readonly type = TOKEN_RECEIVED;\r\n        constructor(public payload: TokenModel) { }\r\n}\r\nexport class CaptchaImageRequested implements Action {\r\n        readonly type = CAPTCHA_IMAGE_REQUESTED;\r\n}\r\nexport class CaptchaImageLoaded implements Action {\r\n        readonly type = CAPTCHA_IMAGE_LOADED;\r\n}\r\nexport class CaptchaEntered implements Action {\r\n        readonly type = CAPTCHA_ENTERED;\r\n        constructor(public payload: string) { }\r\n}\r\nexport class ClearCaptcha implements Action {\r\n        readonly type = CLEAR_CAPTCHA;\r\n}\r\nexport type CaptchaAction =\r\n        | NewCaptcha\r\n        | TokenRequested\r\n        | TokenReceived\r\n        | CaptchaImageRequested\r\n        | CaptchaImageLoaded\r\n        | CaptchaEntered\r\n        | ClearCaptcha;",
    "import { Action } from '@ngrx/store';\r\n\r\nexport const enum AuthenticationActionTypes {\r\n\tPROGRESSING_STARTED = '[AUTHENTICATION] PROGRESSING_STARTED',\r\n\tPROGRESSING_FINISHED = '[AUTHENTICATION] PROGRESSING_FINISHED',\r\n\tFAILED_HAPPENED = '[AUTHENTICATION] FAILED_HAPPENED'\r\n}\r\n\r\nexport class ProgressingStarted implements Action {\r\n\treadonly type = AuthenticationActionTypes.PROGRESSING_STARTED;\r\n}\r\nexport class ProgressingFinished implements Action {\r\n\treadonly type = AuthenticationActionTypes.PROGRESSING_FINISHED;\r\n}\r\nexport class FailedHappened implements Action {\r\n\treadonly type = AuthenticationActionTypes.FAILED_HAPPENED;\r\n\tconstructor(public payload: any) {}\r\n}\r\n\r\nexport type AuthenticationAction = ProgressingStarted | ProgressingFinished | FailedHappened;\r\n",
    "import { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { HttpRequestBaseModel, HttpResponseBaseModel } from \"@soushians/shared\";\r\nimport { UserModel } from \"../models\";\r\nexport namespace Signin_ApiModel {\r\n\texport class Request implements HttpRequestBaseModel<Request> {}\r\n\r\n\texport class Response implements HttpResponseBaseModel<Response> {\r\n\t\tResult: {\r\n\t\t\tUser: UserModel;\r\n\t\t};\r\n\r\n\t\tconstructor(params: Response) {\r\n\t\t\tObject.keys(params).forEach(key => ((<any>this)[key] = (<any>params)[key]));\r\n\t\t}\r\n\t\textractData(): UserModel {\r\n\t\t\treturn this.Result.User;\r\n\t\t}\r\n\t}\r\n}\r\n",
    "export class UserModel {\r\n\t_id: string;\r\n\t// FirstName: string;\r\n\t// LastName: string;\r\n\tUsername: string;\r\n\t// MobileNumber: string;\r\n\t// Sex: string;\r\n\t// Birthdate: string;\r\n\tEmail: string;\r\n\t// IdentificationNo: string;\r\n\t// IdentifierType: string;\r\n\t// RegisterDate: string;\r\n\t// UserType: string;\r\n\tRoles: string[] = [];\r\n\r\n\tconstructor(params?: any) {\r\n\t\tparams &&\r\n\t\t\tObject.keys(params).forEach(key => {\r\n\t\t\t\tif (key in params) (this as any)[key] = params[key];\r\n\t\t\t});\r\n\t}\r\n}\r\n"
  ],
  "names": [
    "FormsModule",
    "ReactiveFormsModule",
    "BrowserAnimationsModule",
    "MatProgressBarModule",
    "MatDatepickerModule",
    "MatToolbarModule",
    "MatInputModule",
    "MatRadioModule",
    "MatMenuModule",
    "MatListModule",
    "MatFormFieldModule",
    "MatSelectModule",
    "MatExpansionModule",
    "MatSidenavModule",
    "MatSnackBarModule",
    "MatCardModule",
    "MatButtonModule",
    "MatIconModule",
    "FlexLayoutModule",
    "HttpClientModule",
    "RouterModule",
    "CommonModule",
    "NgModule",
    "HTTP_INTERCEPTORS",
    "config",
    "map",
    "router",
    "tslib_1.__metadata",
    "tap",
    "switchMap",
    "catchError",
    "Observable",
    "filter",
    "take",
    "http",
    "HttpErrorResponse",
    "HttpResponse",
    "store",
    "Input",
    "Output",
    "Component",
    "EventEmitter",
    "getAuthenticationModuleConfig",
    "BehaviorSubject",
    "Injectable",
    "getLoggedIn",
    "getUser",
    "createSelector",
    "userReducer.getUser",
    "userReducer.getLoggedIn",
    "createFeatureSelector",
    "userReducer.UserReducer",
    "InjectionToken"
  ],
  "mappings": "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"
}
