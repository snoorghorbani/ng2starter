{
  "version": 3,
  "file": "soushians-authentication.umd.min.js",
  "sources": [
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/models/user.model.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/models/signin.api-model.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/actions/authentication.actions.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/actions/captcha.actions.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/actions/signin.actions.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/authentication.config.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/reducers/user.reducer.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/reducers/index.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/routing-guards/admin.guard.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/routing-guards/agent.guard.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/routing-guards/user.guard.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/routing-guards/signin.guard.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/smart-components/authentication-container/authentication-container.component.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/services/authentication-configuration.service.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/smart-components/signin-container/signin-container.component.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/authentication-routing.module.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/dump-components/signin/signin.component.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/interceptors/with-credential.interceptor.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/interceptors/unauthorized.interceptor.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/services/signin.service.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/effects/signin.effects.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/effects/authentication.effects.ts",
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/authentication.module.ts"
  ],
  "sourcesContent": [
    "export class UserModel {\r\n\t_id: string;\r\n\t// FirstName: string;\r\n\t// LastName: string;\r\n\tUsername: string;\r\n\t// MobileNumber: string;\r\n\t// Sex: string;\r\n\t// Birthdate: string;\r\n\tEmail: string;\r\n\t// IdentificationNo: string;\r\n\t// IdentifierType: string;\r\n\t// RegisterDate: string;\r\n\t// UserType: string;\r\n\tRoles: string[] = [];\r\n\r\n\tconstructor(params?: any) {\r\n\t\tparams &&\r\n\t\t\tObject.keys(params).forEach(key => {\r\n\t\t\t\tif (key in params) (this as any)[key] = params[key];\r\n\t\t\t});\r\n\t}\r\n}\r\n",
    "import { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { HttpRequestBaseModel, HttpResponseBaseModel } from \"@soushians/shared\";\r\nimport { UserModel } from \"../models\";\r\nexport namespace Signin_ApiModel {\r\n\texport class Request implements HttpRequestBaseModel<Request> {}\r\n\r\n\texport class Response implements HttpResponseBaseModel<Response> {\r\n\t\tResult: {\r\n\t\t\tUser: UserModel;\r\n\t\t};\r\n\r\n\t\tconstructor(params: Response) {\r\n\t\t\tObject.keys(params).forEach(key => ((<any>this)[key] = (<any>params)[key]));\r\n\t\t}\r\n\t\textractData(): UserModel {\r\n\t\t\treturn this.Result.User;\r\n\t\t}\r\n\t}\r\n}\r\n",
    "import { Action } from '@ngrx/store';\r\n\r\nexport const enum AuthenticationActionTypes {\r\n\tPROGRESSING_STARTED = '[AUTHENTICATION] PROGRESSING_STARTED',\r\n\tPROGRESSING_FINISHED = '[AUTHENTICATION] PROGRESSING_FINISHED',\r\n\tFAILED_HAPPENED = '[AUTHENTICATION] FAILED_HAPPENED'\r\n}\r\n\r\nexport class ProgressingStarted implements Action {\r\n\treadonly type = AuthenticationActionTypes.PROGRESSING_STARTED;\r\n}\r\nexport class ProgressingFinished implements Action {\r\n\treadonly type = AuthenticationActionTypes.PROGRESSING_FINISHED;\r\n}\r\nexport class FailedHappened implements Action {\r\n\treadonly type = AuthenticationActionTypes.FAILED_HAPPENED;\r\n\tconstructor(public payload: any) {}\r\n}\r\n\r\nexport type AuthenticationAction = ProgressingStarted | ProgressingFinished | FailedHappened;\r\n",
    "import { Action } from '@ngrx/store';\r\n\r\nimport { TokenModel } from '../models';\r\n\r\nexport const NEW_CAPTCHA = '[captcha] new captcha';\r\nexport const TOKEN_REQUESTED = '[captcha] token_requested';\r\nexport const TOKEN_RECEIVED = '[captcha] token_received';\r\nexport const CAPTCHA_IMAGE_REQUESTED = '[captcha] captcha_image_requested';\r\nexport const CAPTCHA_IMAGE_LOADED = '[captcha] captcha_image_loaded';\r\nexport const CAPTCHA_ENTERED = '[captcha] CAPTCHA_ENTERED';\r\nexport const CLEAR_CAPTCHA = '[captcha] CLEAR_CAPTCHA';\r\n\r\nexport class NewCaptcha implements Action {\r\n        readonly type = NEW_CAPTCHA;\r\n}\r\nexport class TokenRequested implements Action {\r\n        readonly type = TOKEN_REQUESTED;\r\n}\r\nexport class TokenReceived implements Action {\r\n        readonly type = TOKEN_RECEIVED;\r\n        constructor(public payload: TokenModel) { }\r\n}\r\nexport class CaptchaImageRequested implements Action {\r\n        readonly type = CAPTCHA_IMAGE_REQUESTED;\r\n}\r\nexport class CaptchaImageLoaded implements Action {\r\n        readonly type = CAPTCHA_IMAGE_LOADED;\r\n}\r\nexport class CaptchaEntered implements Action {\r\n        readonly type = CAPTCHA_ENTERED;\r\n        constructor(public payload: string) { }\r\n}\r\nexport class ClearCaptcha implements Action {\r\n        readonly type = CLEAR_CAPTCHA;\r\n}\r\nexport type CaptchaAction =\r\n        | NewCaptcha\r\n        | TokenRequested\r\n        | TokenReceived\r\n        | CaptchaImageRequested\r\n        | CaptchaImageLoaded\r\n        | CaptchaEntered\r\n        | ClearCaptcha;",
    "import { Action } from \"@ngrx/store\";\r\nimport { Signin_ApiModel } from \"../models\";\r\n\r\nexport enum SignInActionTypes {\r\n\tSIGNIN = \"[Auth] Signin\",\r\n\tSIGNOUT = \"[Auth] Signout\",\r\n\tSIGNIN_SUCCEED = \"[Auth] Signin Success\",\r\n\tSIGNIN_FAILURE = \"[Auth] Signin Failure\",\r\n\tSIGNIN_REDIRECT = \"[Auth] Signin Redirect\"\r\n}\r\n\r\nexport class Signin implements Action {\r\n\treadonly type = SignInActionTypes.SIGNIN;\r\n\tconstructor(public payload: Signin_ApiModel.Request) {}\r\n}\r\n\r\nexport class SigninSecceed implements Action {\r\n\treadonly type = SignInActionTypes.SIGNIN_SUCCEED;\r\n\tconstructor(public payload: any) {}\r\n}\r\n\r\nexport class SigninFailed implements Action {\r\n\treadonly type = SignInActionTypes.SIGNIN_FAILURE;\r\n\tconstructor(public payload: any) {}\r\n}\r\n\r\nexport class SigninRedirect implements Action {\r\n\treadonly type = SignInActionTypes.SIGNIN_REDIRECT;\r\n}\r\n\r\nexport class SignoutAction implements Action {\r\n\treadonly type = SignInActionTypes.SIGNOUT;\r\n}\r\n\r\nexport type SigninAction = Signin | SigninSecceed | SigninFailed | SigninRedirect | SignoutAction;\r\n",
    "import { InjectionToken } from \"@angular/core\";\r\n\r\nexport interface AuthenticationModuleConfig {\r\n\tendpoints?: {\r\n\t\tsignOut?: string;\r\n\t\tsignIn?: string;\r\n\t\tuserInformation?: string;\r\n\t};\r\n\tforms?: {\r\n\t\tsignIn: string;\r\n\t};\r\n\tenv: {\r\n\t\tproduction: boolean;\r\n\t};\r\n}\r\n\r\nexport const MODULE_DEFAULT_CONFIG: AuthenticationModuleConfig = {\r\n\tendpoints: {\r\n\t\tsignOut: \"\",\r\n\t\tsignIn: \"\",\r\n\t\tuserInformation: \"\"\r\n\t},\r\n\tforms: {\r\n\t\tsignIn: \"\"\r\n\t},\r\n\tenv: {\r\n\t\tproduction: false\r\n\t}\r\n};\r\n\r\nexport const MODULE_CONFIG_TOKEN = new InjectionToken<AuthenticationModuleConfig>(\"ModuleConfig\");\r\n",
    "import { SigninAction, SignInActionTypes } from \"../actions/signin.actions\";\r\nimport { UserModel } from \"../models/user.model\";\r\n\r\nexport interface State {\r\n\tloggedIn: boolean;\r\n\tuser: UserModel;\r\n}\r\n\r\nexport const initialState: State = {\r\n\tloggedIn: false,\r\n\tuser: new UserModel({ Id: 1 })\r\n};\r\n\r\nexport function UserReducer(state = initialState, action: SigninAction): State {\r\n\tswitch (action.type) {\r\n\t\tcase SignInActionTypes.SIGNIN_SUCCEED: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloggedIn: true,\r\n\t\t\t\tuser: action.payload\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase SignInActionTypes.SIGNOUT: {\r\n\t\t\treturn initialState;\r\n\t\t}\r\n\r\n\t\tdefault: {\r\n\t\t\treturn state;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n//#region  selectors\r\nexport const getLoggedIn = (state: State) => state.loggedIn;\r\nexport const getUser = (state: State) => state.user;\r\n//#endregion\r\n",
    "import { createSelector, createFeatureSelector, MemoizedSelector } from \"@ngrx/store\";\r\n\r\nimport * as userReducer from \"./user.reducer\";\r\n// import * as captchaReducer from \"./captcha.reducer\";\r\n\r\nimport { UserModel } from \"../models/user.model\";\r\n\r\nexport interface AuthenticationState {\r\n\tuserStatus: userReducer.State;\r\n\t// captcha: captchaReducer.State;\r\n}\r\n\r\nexport interface FeatureState {\r\n\t\"authentication\": AuthenticationState;\r\n}\r\n\r\nexport const AuthenticationReducers = {\r\n\tuserStatus: userReducer.UserReducer\r\n\t// captcha: captchaReducer.CaptchaReducer\r\n};\r\n\r\n//#region selectors\r\n\r\nexport const selectAuthenticationState = createFeatureSelector<AuthenticationState>(\"authentication\");\r\n\r\nexport const selectAuthState = createSelector(\r\n\tselectAuthenticationState,\r\n\t(state: AuthenticationState) => state.userStatus\r\n);\r\n\r\nexport const getLoggedIn = createSelector(selectAuthState, userReducer.getLoggedIn);\r\nexport const getUser = createSelector(selectAuthState, userReducer.getUser);\r\n\r\n// export const selectCaptchaState = createSelector(selectAuthenticationState, (state: AuthenticationState) => {\r\n// \treturn state.captcha;\r\n// });\r\n\r\n// export const getCaptcha = createSelector(selectCaptchaState, captchaReducer.getCaptcha);\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { CanActivate, RouterStateSnapshot, ActivatedRouteSnapshot } from \"@angular/router\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { FeatureState, getUser } from \"../reducers\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class AdminGuard implements CanActivate {\r\n\tconstructor(private store: Store<FeatureState>) {}\r\n\r\n\tcanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\r\n\t\treturn this.store.select(getUser).take(1).map(user => {\r\n\t\t\tvar res = (user.Roles as any).includes(\"Admin\");\r\n\t\t\t// !res && this.store.dispatch(new SigninRedirect());\r\n\t\t\treturn res;\r\n\t\t});\r\n\t}\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { CanActivate, RouterStateSnapshot, ActivatedRouteSnapshot } from \"@angular/router\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { FeatureState, getUser } from \"../reducers\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class AgentGuard implements CanActivate {\r\n\tconstructor(private store: Store<FeatureState>) {}\r\n\r\n\tcanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\r\n\t\treturn this.store.select(getUser).take(1).map(user => {\r\n\t\t\tvar res = (user.Roles as any).includes(\"Agent\");\r\n\t\t\t// !res && this.store.dispatch(new SigninRedirect());\r\n\t\t\treturn res;\r\n\t\t});\r\n\t}\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { CanActivate, RouterStateSnapshot, ActivatedRouteSnapshot } from \"@angular/router\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { FeatureState, getUser } from \"../reducers\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class UserGuard implements CanActivate {\r\n\tconstructor(private store: Store<FeatureState>) {}\r\n\r\n\tcanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\r\n\t\treturn this.store.select(getUser).take(1).map(user => (user.Roles as any).includes(\"User\"));\r\n\t}\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { CanActivate, RouterStateSnapshot, ActivatedRouteSnapshot } from \"@angular/router\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { FeatureState, getLoggedIn } from \"../reducers\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class SigninGuard implements CanActivate {\r\n\tconstructor(private store: Store<FeatureState>) {}\r\n\r\n\tcanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\r\n\t\treturn this.store.select(getLoggedIn).take(1).map(authed => !authed);\r\n\t}\r\n}\r\n",
    "import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n\ttemplate: `\r\n          <router-outlet></router-outlet>\r\n        `\r\n})\r\nexport class AuthenticationContainerComponent {}\r\n",
    "import { Injectable, Inject } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\n\r\nimport { getAuthenticationModuleConfig } from \"@soushians/config\";\r\n\r\nimport { MODULE_CONFIG_TOKEN, AuthenticationModuleConfig, MODULE_DEFAULT_CONFIG } from \"../authentication.config\";\r\nimport { AuthenticationState } from \"../reducers\";\r\n\r\n@Injectable()\r\nexport class AuthenticationConfigurationService {\r\n\tprivate _config: AuthenticationModuleConfig;\r\n\tget config() {\r\n\t\treturn this._config;\r\n\t}\r\n\tconfig$ = new BehaviorSubject(this._config);\r\n\r\n\tconstructor(@Inject(MODULE_CONFIG_TOKEN) configFile: any, private store: Store<AuthenticationState>) {\r\n\t\tthis._config = Object.assign({}, MODULE_DEFAULT_CONFIG, configFile);\r\n\t\tthis.config$.next(this._config);\r\n\t\tthis.store.select(getAuthenticationModuleConfig).subscribe(storeConfig => {\r\n\t\t\tif (!storeConfig) return;\r\n\t\t\tthis._config = Object.assign({}, this._config, storeConfig.Config);\r\n\t\t\tthis.config$.next(this._config);\r\n\t\t});\r\n\t}\r\n}\r\n",
    "import { Component, OnInit, OnDestroy } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { Signin } from \"../../actions\";\r\nimport { CaptchaModel } from \"../../models\";\r\nimport { AuthenticationConfigurationService } from \"../../services/authentication-configuration.service\";\r\nimport { FeatureState } from \"../../reducers\";\r\n\r\n@Component({\r\n\ttemplate: `\r\n        <auth-signin \r\n                [formId]='(formId$ | async)'\r\n                (signedin)=\"signIn($event)\"\r\n        ></auth-signin>\r\n  `\r\n})\r\nexport class SigninContainerComponent {\r\n\tformId$: Observable<string>;\r\n\tconstructor(private configurationService: AuthenticationConfigurationService, private store: Store<FeatureState>) {\r\n\t\tthis.formId$ = this.configurationService.config$.map(config => config.forms.signIn);\r\n\t}\r\n\r\n\tsignIn(formValue: any) {\r\n\t\tthis.store.dispatch(new Signin(formValue));\r\n\t}\r\n}\r\n",
    "import { ModuleWithProviders } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\n\r\nimport { SigninGuard } from \"./routing-guards\";\r\nimport { AuthenticationContainerComponent } from \"./smart-components/authentication-container/authentication-container.component\";\r\nimport { SigninContainerComponent } from \"./smart-components/signin-container/signin-container.component\";\r\n\r\nconst routes: Routes = [\r\n\t{\r\n\t\tpath: \"auth\",\r\n\t\tcomponent: AuthenticationContainerComponent,\r\n\t\tchildren: [\r\n\t\t\t{\r\n\t\t\t\tpath: \"signin\",\r\n\t\t\t\tcanActivate: [ SigninGuard ],\r\n\t\t\t\tcomponent: SigninContainerComponent\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n];\r\n\r\nexport const AuthenticationRoutingModule: ModuleWithProviders = RouterModule.forChild(routes);\r\n",
    "import { Component, Input, Output, EventEmitter } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { Observable } from \"rxjs/Rx\";\r\n\r\n@Component({\r\n\tselector: \"auth-signin\",\r\n\ttemplate: `<div fxLayout='row' fxLayoutAlign=\"center center\">\r\n    <ngs-form-view \r\n        [id]=\"formId\"\r\n        (accept)=\"signin($event)\"\r\n    ></ngs-form-view>\r\n</div>\r\n<!-- <div>\r\n    <a fxFlex=\"nogrow\" routerLink=\"/user/password/reset\" mat-raised-button fxFlexFill>کلمه عبور خود را فراموش کرده اید؟</a>\r\n</div> -->`,\r\n\tstyles: [``]\r\n})\r\nexport class SigninComponent {\r\n\t@Output() signedin = new EventEmitter();\r\n\r\n\t@Input() formId: string;\r\n\r\n\tsignin(formGroup: FormGroup) {\r\n\t\tif (!formGroup.valid) return;\r\n\t\tthis.signedin.emit(formGroup.value);\r\n\t}\r\n\r\n\tconstructor() {}\r\n}\r\n",
    "import \"rxjs/add/operator/do\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { HttpInterceptor } from \"@angular/common/http\";\r\nimport { HttpRequest } from \"@angular/common/http\";\r\nimport { HttpHandler } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { HttpEvent } from \"@angular/common/http\";\r\nimport { HttpResponse } from \"@angular/common/http\";\r\nimport { AuthenticationConfigurationService } from \"../services/authentication-configuration.service\";\r\n// import { environment } from \"../../../environments/environment\";\r\n\r\n@Injectable()\r\nexport class WithCredentialInterceptor implements HttpInterceptor {\r\n\tconstructor(private configurationService: AuthenticationConfigurationService) {}\r\n\tintercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\t\t// if (!this.configurationService.config.env.production)\r\n\t\t(request as any).withCredentials = true;\r\n\t\treturn next.handle(request);\r\n\t}\r\n}\r\n",
    "import \"rxjs/add/operator/do\";\r\nimport { HttpInterceptor } from \"@angular/common/http\";\r\nimport { HttpRequest } from \"@angular/common/http\";\r\nimport { HttpHandler } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { HttpEvent } from \"@angular/common/http\";\r\nimport { HttpResponse } from \"@angular/common/http\";\r\nimport { HttpErrorResponse } from \"@angular/common/http\";\r\n\r\nimport { Store } from \"@ngrx/store\";\r\nimport { SignoutAction } from \"../actions\";\r\nimport * as fromAuth from \"../reducers\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\n\r\n@Injectable()\r\nexport class UnauthorizedInterceptor implements HttpInterceptor {\r\n\tconstructor(\r\n\t\tprivate router: Router,\r\n\t\tprivate store: Store<fromAuth.FeatureState> // private signinService: SigninService\r\n\t) {}\r\n\tintercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\t\treturn next\r\n\t\t\t.handle(request)\r\n\t\t\t.map((event: HttpEvent<any>) => {\r\n\t\t\t\tif (event instanceof HttpResponse) return event;\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tif (!(err instanceof HttpErrorResponse)) return;\r\n\t\t\t\tif (err.status != 401) return;\r\n\t\t\t\tif (err.url.includes(\"logout\")) return;\r\n\r\n\t\t\t\tthis.store.dispatch(new SignoutAction());\r\n\r\n\t\t\t\treturn Observable.throw(\"Unauthorized\");\r\n\t\t\t});\r\n\t}\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs/Rx\";\r\nimport { MatSnackBar } from \"@angular/material\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\nimport { map, switchMap, take, filter, tap } from \"rxjs/operators\";\r\n\r\n// import { environment } from \"../../environments/environment\";\r\n\r\nimport { Signin_ApiModel, UserModel } from \"../models\";\r\nimport { AuthenticationConfigurationService } from \"./authentication-configuration.service\";\r\n\r\nconst SIGNIN_RESPONSE = \"[APP] SIGNIN_RESPONSE\";\r\n\r\n@Injectable()\r\nexport class SigninService {\r\n\t// SigninResponse = new BehaviorSubject<UserModel>(new UserModel());\r\n\tconstructor(\r\n\t\tprivate http: HttpClient,\r\n\t\tprivate configurationService: AuthenticationConfigurationService,\r\n\t\tprivate snackBar: MatSnackBar\r\n\t) {}\r\n\r\n\tsignin(model: any): Observable<UserModel> {\r\n\t\treturn this.configurationService.config$.pipe(\r\n\t\t\tfilter(config => config.endpoints.signIn != \"\"),\r\n\t\t\ttake(1),\r\n\t\t\tswitchMap(config =>\r\n\t\t\t\tthis.http.post<Signin_ApiModel.Response>(this.configurationService.config.endpoints.signIn, model)\r\n\t\t\t),\r\n\t\t\tmap(response => {\r\n\t\t\t\tconst userModel = new Signin_ApiModel.Response(response).extractData();\r\n\t\t\t\t// this.SigninResponse.next(userModel);\r\n\t\t\t\treturn userModel;\r\n\t\t\t})\r\n\t\t);\r\n\t\t// .catch(err => {\r\n\t\t// \tif (err.status == 400) {\r\n\t\t// \t\tthis.snackBar.open(\"کد امنیتی اشتباه است\", null, {\r\n\t\t// \t\t\tduration: 5000\r\n\t\t// \t\t});\r\n\t\t// \t} else if (err.status == 403) {\r\n\t\t// \t\tthis.snackBar.open(\" شماره موبایل و یا کلمه عبور اشتباه است\", null, {\r\n\t\t// \t\t\tduration: 5000\r\n\t\t// \t\t});\r\n\t\t// \t}\r\n\t\t// \treturn Observable.throw(err);\r\n\t\t// });\r\n\t}\r\n\r\n\tsignout(): Observable<any> {\r\n\t\tlocalStorage.removeItem(SIGNIN_RESPONSE);\r\n\t\treturn this.http\r\n\t\t\t.get(this.configurationService.config.endpoints.signOut, {\r\n\t\t\t\twithCredentials: true\r\n\t\t\t})\r\n\t\t\t.map(response => response);\r\n\t}\r\n}\r\n\r\nexport var SigninServiceStub = {};\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport \"rxjs/add/operator/map\";\r\nimport \"rxjs/add/operator/mergeMap\";\r\nimport \"rxjs/add/operator/do\";\r\nimport \"rxjs/add/operator/catch\";\r\nimport \"rxjs/add/observable/empty\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { RouterAction } from \"@ngrx/router-store\";\r\nimport { switchMap, map, catchError, tap } from \"rxjs/operators\";\r\n\r\nimport { SignInActionTypes, SigninSecceed, SigninFailed, SigninRedirect, Signin } from \"../actions/signin.actions\";\r\n// import * as AuthActions from '../actions';\r\n\r\n//import {  } from '../reducers';\r\nimport { SigninService } from \"../services/signin.service\";\r\nimport { NewCaptcha } from \"../actions\";\r\nimport { Signin_ApiModel } from \"../models\";\r\n\r\n@Injectable()\r\nexport class SigninEffects {\r\n\tconstructor(private actions$: Actions, private router: Router, public signinService: SigninService) {}\r\n\r\n\t@Effect()\r\n\tpreSignUpStart$ = this.actions$\r\n\t\t.ofType(SignInActionTypes.SIGNIN)\r\n\t\t.pipe(\r\n\t\t\tswitchMap((action: Signin) => this.signinService.signin(action.payload)),\r\n\t\t\tmap(user => new SigninSecceed(user)),\r\n\t\t\tcatchError(error => Observable.of(new SigninFailed(error)))\r\n\t\t);\r\n\r\n\t@Effect({ dispatch: false })\r\n\tSigninSucceed$ = this.actions$\r\n\t\t.ofType(SignInActionTypes.SIGNIN_SUCCEED)\r\n\t\t.pipe(tap((data: any) => this.router.navigate([ \"/\" ])));\r\n\r\n\t@Effect() AfterSigninFiled$ = this.actions$.ofType(SignInActionTypes.SIGNIN_FAILURE).map(() => new NewCaptcha());\r\n\r\n\t@Effect({ dispatch: false })\r\n\tredirectToLoginPage$ = this.actions$\r\n\t\t.ofType(SignInActionTypes.SIGNIN_REDIRECT, SignInActionTypes.SIGNOUT)\r\n\t\t.pipe(tap(authed => this.router.navigate([ \"auth/signin\" ])));\r\n\r\n\t// TODO:\r\n\t// @Effect({ dispatch: false })\r\n\t// signout$ = this.actions$\r\n\t// \t.ofType(SignInActionTypes.SIGNOUT)\r\n\t// \t.map((data) => this.signinService.signout().subscribe((response) => null));\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { of } from \"rxjs/observable/of\";\r\nimport \"rxjs/add/operator/map\";\r\nimport \"rxjs/add/operator/mergeMap\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\n\r\nimport { SignInActionTypes, FailedHappened, ProgressingStarted, ProgressingFinished } from \"../actions\";\r\nimport { map } from \"rxjs/operators\";\r\n\r\n@Injectable()\r\nexport class AuthenticationEffects {\r\n\tconstructor(private actions$: Actions<any>, private router: Router) {}\r\n\r\n\t@Effect()\r\n\tdispachProgressingStarted$ = this.actions$\r\n\t\t.ofType(SignInActionTypes.SIGNIN)\r\n\t\t.pipe(map(() => new ProgressingStarted()));\r\n\r\n\t@Effect()\r\n\tdispachProgressingFinished$ = this.actions$\r\n\t\t.ofType(SignInActionTypes.SIGNIN_FAILURE, SignInActionTypes.SIGNIN_SUCCEED)\r\n\t\t.pipe(map(() => new ProgressingFinished()));\r\n}\r\n",
    "import { NgModule, ModuleWithProviders, InjectionToken, Injectable, Inject } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from \"@angular/common/http\";\r\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\r\nimport {\r\n\tMatIconModule,\r\n\tMatButtonModule,\r\n\tMatCardModule,\r\n\tMatSnackBarModule,\r\n\tMatSidenavModule,\r\n\tMatExpansionModule,\r\n\tMatSelectModule,\r\n\tMatFormFieldModule,\r\n\tMatListModule,\r\n\tMatMenuModule,\r\n\tMatRadioModule,\r\n\tMatInputModule,\r\n\tMatToolbarModule,\r\n\tMatDatepickerModule,\r\n\tMatProgressBarModule\r\n} from \"@angular/material\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { StoreModule } from \"@ngrx/store\";\r\nimport { EffectsModule } from \"@ngrx/effects\";\r\n\r\nimport { NgsFormModule } from \"@soushians/form\";\r\n\r\nimport { AuthenticationModuleConfig, MODULE_CONFIG_TOKEN } from \"./authentication.config\";\r\nimport { AuthenticationRoutingModule } from \"./authentication-routing.module\";\r\nimport { SigninContainerComponent } from \"./smart-components/signin-container/signin-container.component\";\r\nimport { SigninComponent } from \"./dump-components/signin/signin.component\";\r\nimport { AuthenticationContainerComponent } from \"./smart-components/authentication-container/authentication-container.component\";\r\n\r\nimport { WithCredentialInterceptor } from \"./interceptors/with-credential.interceptor\";\r\nimport { UnauthorizedInterceptor } from \"./interceptors/unauthorized.interceptor\";\r\n\r\nimport { AuthenticationReducers } from \"./reducers\";\r\n\r\nimport { SigninEffects } from \"./effects/signin.effects\";\r\nimport { AuthenticationEffects } from \"./effects/authentication.effects\";\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n\t\tRouterModule,\r\n\t\tFormsModule,\r\n\t\tHttpClientModule,\r\n\t\tFlexLayoutModule,\r\n\t\tMatIconModule,\r\n\t\tMatButtonModule,\r\n\t\tMatCardModule,\r\n\t\tMatSnackBarModule,\r\n\t\tMatSidenavModule,\r\n\t\tMatExpansionModule,\r\n\t\tMatSelectModule,\r\n\t\tMatFormFieldModule,\r\n\t\tMatListModule,\r\n\t\tMatMenuModule,\r\n\t\tMatRadioModule,\r\n\t\tMatInputModule,\r\n\t\tMatToolbarModule,\r\n\t\tMatDatepickerModule,\r\n\t\tMatProgressBarModule,\r\n\t\tBrowserAnimationsModule,\r\n\t\tReactiveFormsModule,\r\n\t\tFormsModule,\r\n\t\tNgsFormModule\r\n\t],\r\n\tdeclarations: [ SigninContainerComponent, SigninComponent, AuthenticationContainerComponent ],\r\n\texports: []\r\n})\r\nexport class NgsAuthenticationModule {\r\n\tstatic forRoot(config: AuthenticationModuleConfig = <AuthenticationModuleConfig>{}): ModuleWithProviders {\r\n\t\treturn {\r\n\t\t\tngModule: RootNgsAuthenticationModule,\r\n\t\t\tproviders: [\r\n\t\t\t\t{ provide: MODULE_CONFIG_TOKEN, useValue: config },\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: HTTP_INTERCEPTORS,\r\n\t\t\t\t\tuseClass: UnauthorizedInterceptor,\r\n\t\t\t\t\tmulti: true\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: HTTP_INTERCEPTORS,\r\n\t\t\t\t\tuseClass: WithCredentialInterceptor,\r\n\t\t\t\t\tmulti: true\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t};\r\n\t}\r\n}\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tStoreModule.forFeature(\"authentication\", AuthenticationReducers),\r\n\t\tEffectsModule.forFeature([ SigninEffects, AuthenticationEffects ]),\r\n\t\tAuthenticationRoutingModule,\r\n\t\tNgsAuthenticationModule\r\n\t]\r\n})\r\nexport class RootNgsAuthenticationModule {}\r\n"
  ],
  "names": [
    "Signin_ApiModel",
    "UserModel",
    "params",
    "this",
    "Roles",
    "Object",
    "keys",
    "forEach",
    "key",
    "Request",
    "Response",
    "prototype",
    "extractData",
    "ProgressingStarted",
    "type",
    "NewCaptcha",
    "SIGNIN",
    "SIGNOUT",
    "SIGNIN_SUCCEED",
    "SIGNIN_FAILURE",
    "SIGNIN_REDIRECT",
    "Signin",
    "payload",
    "SignInActionTypes",
    "SigninFailed",
    "MODULE_DEFAULT_CONFIG",
    "endpoints",
    "signOut",
    "signIn",
    "userInformation",
    "forms",
    "env",
    "production",
    "MODULE_CONFIG_TOKEN",
    "InjectionToken",
    "initialState",
    "loggedIn",
    "user",
    "Id",
    "AuthenticationReducers",
    "userStatus",
    "state",
    "action",
    "assign",
    "selectAuthenticationState",
    "createFeatureSelector",
    "selectAuthState",
    "createSelector",
    "getLoggedIn",
    "getUser",
    "AdminGuard",
    "store",
    "canActivate",
    "route",
    "select",
    "take",
    "map",
    "includes",
    "decorators",
    "Injectable",
    "args",
    "AgentGuard",
    "UserGuard",
    "SigninGuard",
    "authed",
    "AuthenticationContainerComponent",
    "Component",
    "AuthenticationConfigurationService",
    "configFile",
    "_this",
    "config$",
    "BehaviorSubject",
    "_config",
    "next",
    "getAuthenticationModuleConfig",
    "subscribe",
    "storeConfig",
    "Config",
    "get",
    "enumerable",
    "SigninContainerComponent",
    "configurationService",
    "formId$",
    "config",
    "formValue",
    "dispatch",
    "ctorParameters",
    "routes",
    "path",
    "component",
    "children",
    "AuthenticationRoutingModule",
    "RouterModule",
    "forChild",
    "SigninComponent",
    "signedin",
    "EventEmitter",
    "signin",
    "formGroup",
    "valid",
    "emit",
    "value",
    "propDecorators",
    "Output",
    "formId",
    "Input",
    "WithCredentialInterceptor",
    "intercept",
    "request",
    "withCredentials",
    "handle",
    "UnauthorizedInterceptor",
    "router",
    "event",
    "HttpResponse",
    "catch",
    "err",
    "HttpErrorResponse",
    "status",
    "url",
    "SignoutAction",
    "Observable",
    "throw",
    "SigninService",
    "http",
    "snackBar",
    "model",
    "pipe",
    "filter",
    "switchMap",
    "post",
    "response",
    "signout",
    "localStorage",
    "removeItem",
    "SigninEffects",
    "actions$",
    "signinService",
    "preSignUpStart$",
    "ofType",
    "SigninSecceed",
    "catchError",
    "error",
    "of",
    "SigninSucceed$",
    "tap",
    "data",
    "navigate",
    "AfterSigninFiled$",
    "redirectToLoginPage$",
    "tslib_1.__metadata",
    "AuthenticationEffects",
    "dispachProgressingStarted$",
    "dispachProgressingFinished$",
    "ProgressingFinished",
    "NgsAuthenticationModule",
    "forRoot",
    "ngModule",
    "RootNgsAuthenticationModule",
    "providers",
    "provide",
    "useValue",
    "HTTP_INTERCEPTORS",
    "useClass",
    "multi",
    "NgModule",
    "imports",
    "CommonModule",
    "FormsModule",
    "HttpClientModule",
    "FlexLayoutModule",
    "MatIconModule",
    "MatButtonModule",
    "MatCardModule",
    "MatSnackBarModule",
    "MatSidenavModule",
    "MatExpansionModule",
    "MatSelectModule",
    "MatFormFieldModule",
    "MatListModule",
    "MatMenuModule",
    "MatRadioModule",
    "MatInputModule",
    "MatToolbarModule",
    "MatDatepickerModule",
    "MatProgressBarModule",
    "BrowserAnimationsModule",
    "ReactiveFormsModule"
  ],
  "mappings": "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"
}
