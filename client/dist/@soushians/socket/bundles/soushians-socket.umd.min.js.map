{"version":3,"sources":["ng://@soushians/socket/lib/socket.config.ts","ng://@soushians/socket/lib/services/socket-configuration.service.ts","ng://@soushians/socket/lib/socket.actions.ts","ng://@soushians/socket/lib/services/socket.service.ts","ng://@soushians/socket/lib/socket.reducer.ts","ng://@soushians/socket/lib/socket.module.ts"],"names":["MODULE_DEFAULT_CONFIG","env","production","frontend_server","MODULE_CONFIG_TOKEN","InjectionToken","SocketConfigurationService","configFile","store","_this","this","BehaviorSubject","_config","Object","assign","config$","next","select","getSocketModuleConfig","subscribe","userConfig","Config","defineProperty","prototype","Injectable","Inject","args","Store","SocketRunSuccessfullyAction","SocketActionTypes","io","_io","SocketService","configService","pipe","map","config","uri","console","log","socket","dispatch","on","data","type","payload","message","Observable","observer","emit","providedIn","initialState","number","Reducer","state","action","SocketReducer","change","NgsSocketModule","forRoot","ngModule","NgsSocketRootModule","providers","provide","useValue","NgModule","imports","CommonModule","socketService","StoreModule","forFeature"],"mappings":"6lBAQO,IAAMA,EAA4C,CACxDC,IAAK,CACJC,YAAY,EACZC,gBAAiB,0BAGNC,EAAsB,IAAIC,EAAAA,eAAmC,sBCd1EC,EAAA,WAiBC,SAAAA,EAAyCC,EAAoBC,GAA7D,IAAAC,EAAAC,KAA6DA,KAAAF,MAAAA,eAFnD,IAAIG,EAAAA,gBAAgBX,GAG7BU,KAAKE,QAAUC,OAAOC,OAAO,GAAId,EAAuBO,GACxDG,KAAKK,QAAQC,KAAKN,KAAKE,SACvBF,KAAKF,MAAMS,OAAOC,EAAAA,uBAAuBC,UAAU,SAAAC,GAC7CA,IAGLX,EAAKG,QAAUC,OAAOC,OAAO,GAAIL,EAAKG,QAASQ,EAAWC,QAC1DZ,EAAKM,QAAQC,KAAKP,EAAKG,mBAbzBC,OAAAS,eAAIhB,EAAAiB,UAAA,SAAM,KAAV,WACC,OAAOb,KAAKE,6DAJbY,EAAAA,kFAQaC,EAAAA,OAAMC,KAAA,CAACtB,YAfZuB,EAAAA,WAFT,KCG2B,mCAI3BC,uBACiBC,GCHXC,EAAKC,EAIXC,EAAA,WASC,SAAAA,EAAoBC,EAAmDzB,GAAvE,IAAAC,EAAAC,KAAoBA,KAAAuB,cAAAA,EAAmDvB,KAAAF,MAAAA,EACtEE,KAAKuB,cAAclB,QACjBmB,KACAC,EAAAA,IAAI,SAAAC,GAAU,OAAAA,EAAOnC,IAAIE,kBACzBgC,EAAAA,IAAI,SAAAE,GAGH,OAFAC,QAAQC,IAAIF,EAAK5B,EAAKwB,cAAcG,QACpC3B,EAAK+B,OAASV,EAAGO,GACV5B,EAAKD,MAAMiC,SAAS,IAAIb,MAGhCT,UAAU,WACVV,EAAK+B,OAAOE,GAAG,kBAAmB,SAAAC,GACjClC,EAAKD,MAAMiC,SAAS,CACnBG,KAAMD,EAAKC,KACXC,QAASF,EAAKE,qBAWnBb,EAAAT,UAAAmB,GAAA,SAAMI,GAAN,IAAArC,EAAAC,KAMC,OALkB,IAAIqC,EAAAA,WAAc,SAAAC,GACnCvC,EAAK+B,OAAOE,GAAGI,EAAS,SAACH,GACxBK,EAAShC,KAAK2B,QAWjBX,EAAAT,UAAA0B,KAAA,SAAKH,EAAiBD,GACrBnC,KAAK8B,OAAOS,KAAKH,EAASD,wBA9C3BrB,EAAAA,WAAUE,KAAA,CAAC,CACXwB,WAAY,oDAJJ5C,SANAqB,EAAAA,6IAMT,GCJawB,EAAsB,CAClCC,OAAQ,GAGT,SAAAC,EAAwBC,EAAsBC,GAG3C,YAHqB,IAAAD,IAAAA,EAAAH,GACfI,EAAOX,KAENU,MASGE,EAAgB,CAC5BC,OAAQJ,GCtBTK,EAAA,gCAaQA,EAAAC,QAAP,SAAevB,GACd,MAAO,CACNwB,SAAUC,EACVC,UAAW,CAAE,CAAEC,QAAS3D,EAAqB4D,SAAU5B,GAAU9B,EAA4B0B,yBAP/FiC,EAAAA,SAAQvC,KAAA,CAAC,CACTwC,QAAS,CAAEC,EAAAA,oBAVZ,gBAyBC,SAAAN,EAAoBO,GAAA1D,KAAA0D,cAAAA,6BAJpBH,EAAAA,SAAQvC,KAAA,CAAC,CACTwC,QAAS,CAAER,EAAiBW,EAAAA,YAAYC,WAAW,SAAUd,iDAhBrDxB","sourcesContent":["import { InjectionToken } from \"@angular/core\";\r\n\r\nexport interface SocketModuleConfig {\r\n\tenv?: {\r\n\t\tproduction: boolean;\r\n\t\tfrontend_server: string;\r\n\t};\r\n}\r\nexport const MODULE_DEFAULT_CONFIG: SocketModuleConfig = {\r\n\tenv: {\r\n\t\tproduction: false,\r\n\t\tfrontend_server: \"http://localhost:3000\"\r\n\t}\r\n};\r\nexport const MODULE_CONFIG_TOKEN = new InjectionToken<SocketModuleConfig>(\"SocketModuleConfig\");\r\n","import { BehaviorSubject } from \"rxjs\";\r\nimport { Inject, Injectable } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { getSocketModuleConfig } from \"@soushians/config\";\r\n\r\nimport { SocketModuleConfig, MODULE_DEFAULT_CONFIG, MODULE_CONFIG_TOKEN } from \"../socket.config\";\r\nimport { AppState } from \"../socket.reducer\";\r\n\r\n@Injectable()\r\nexport class SocketConfigurationService {\r\n\tprivate _config: SocketModuleConfig;\r\n\tget config() {\r\n\t\treturn this._config;\r\n\t}\r\n\tconfig$ = new BehaviorSubject(MODULE_DEFAULT_CONFIG);\r\n\r\n\tconstructor(@Inject(MODULE_CONFIG_TOKEN) configFile, private store: Store<AppState>) {\r\n\t\tthis._config = Object.assign({}, MODULE_DEFAULT_CONFIG, configFile);\r\n\t\tthis.config$.next(this._config);\r\n\t\tthis.store.select(getSocketModuleConfig).subscribe(userConfig => {\r\n\t\t\tif (!userConfig) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis._config = Object.assign({}, this._config, userConfig.Config);\r\n\t\t\tthis.config$.next(this._config);\r\n\t\t});\r\n\t}\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nexport enum SocketActionTypes {\r\n\tSOCKET_RUN_SUCCESSFULLY = \"[SOCKET] SOCKET_RUN_SUCCESSFULLY\",\r\n\tSOCKET_INITIALAZATION_FAILD = \"[SOCKET] SOCKET_INITIALAZATION_FAILD\"\r\n}\r\n\r\nexport class SocketRunSuccessfullyAction implements Action {\r\n\treadonly type = SocketActionTypes.SOCKET_RUN_SUCCESSFULLY;\r\n}\r\nexport class SocketInitialazationFailedAction implements Action {\r\n\treadonly type = SocketActionTypes.SOCKET_INITIALAZATION_FAILD;\r\n}\r\n\r\nexport type SocketActions = SocketRunSuccessfullyAction | SocketInitialazationFailedAction;\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport * as _io from \"socket.io-client\";\r\nconst io = _io;\r\n\r\nimport { AppState } from \"../socket.reducer\";\r\n\r\nimport { SocketConfigurationService } from \"./socket-configuration.service\";\r\nimport { SocketRunSuccessfullyAction } from \"../socket.actions\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class SocketService {\r\n\tsocket: any;\r\n\turi: string;\r\n\tconstructor(private configService: SocketConfigurationService, private store: Store<AppState>) {\r\n\t\tthis.configService.config$\r\n\t\t\t.pipe(\r\n\t\t\t\tmap(config => config.env.frontend_server),\r\n\t\t\t\tmap(uri => {\r\n\t\t\t\t\tconsole.log(uri, this.configService.config);\r\n\t\t\t\t\tthis.socket = io(uri);\r\n\t\t\t\t\treturn this.store.dispatch(new SocketRunSuccessfullyAction());\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t\t.subscribe(() => {\r\n\t\t\t\tthis.socket.on(\"DISPATCH_ACTION\", data => {\r\n\t\t\t\t\tthis.store.dispatch({\r\n\t\t\t\t\t\ttype: data.type,\r\n\t\t\t\t\t\tpayload: data.payload\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t}\r\n\t/**\r\n\t * @example\r\n\t * this.socketService.on<number>(\"chnage-number\").subscribe(data=>{})\r\n\t * @returns\r\n\t * Observable<T>\r\n\t */\r\n\ton<T>(message): Observable<T> {\r\n\t\tconst observer$ = new Observable<T>(observer => {\r\n\t\t\tthis.socket.on(message, (data: T) => {\r\n\t\t\t\tobserver.next(data);\r\n\t\t\t});\r\n\t\t});\r\n\t\treturn observer$;\r\n\t}\r\n\t/**\r\n\t * @example\r\n\t * this.socketService.emit(\"chnage-number\",{number:2})\r\n\t * @returns\r\n\t * void\r\n\t */\r\n\temit(message: string, payload: any): void {\r\n\t\tthis.socket.emit(message, payload);\r\n\t}\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nexport interface State {\r\n\tnumber: number;\r\n}\r\nexport const initialState: State = {\r\n\tnumber: 0\r\n};\r\n\r\nexport function Reducer(state = initialState, action: Action): State {\r\n\tswitch (action.type) {\r\n\t\tdefault: {\r\n\t\t\treturn state;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport interface SocketState {\r\n\tchange: State;\r\n}\r\n\r\nexport const SocketReducer = {\r\n\tchange: Reducer\r\n};\r\n\r\nexport interface AppState {\r\n\tsocket: SocketState;\r\n}\r\n","import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { StoreModule } from \"@ngrx/store\";\r\n\r\nimport { SocketModuleConfig, MODULE_CONFIG_TOKEN } from \"./socket.config\";\r\nimport { SocketConfigurationService } from \"./services/socket-configuration.service\";\r\nimport { SocketService } from \"./services/socket.service\";\r\nimport { SocketReducer } from \"./socket.reducer\";\r\n\r\n@NgModule({\r\n\timports: [ CommonModule ]\r\n})\r\nexport class NgsSocketModule {\r\n\tstatic forRoot(config?: SocketModuleConfig): ModuleWithProviders {\r\n\t\treturn {\r\n\t\t\tngModule: NgsSocketRootModule,\r\n\t\t\tproviders: [ { provide: MODULE_CONFIG_TOKEN, useValue: config }, SocketConfigurationService, SocketService ]\r\n\t\t};\r\n\t}\r\n}\r\n\r\n@NgModule({\r\n\timports: [ NgsSocketModule, StoreModule.forFeature(\"socket\", SocketReducer) ]\r\n})\r\nexport class NgsSocketRootModule {\r\n\tconstructor(private socketService: SocketService) {}\r\n}\r\n"]}