{"version":3,"sources":["ng://@soushians/socket/lib/socket.config.ts","ng://@soushians/socket/lib/services/socket-configuration.service.ts","ng://@soushians/socket/lib/socket.actions.ts","ng://@soushians/socket/lib/services/socket.service.ts","ng://@soushians/socket/lib/socket.reducer.ts","ng://@soushians/socket/lib/socket.module.ts"],"names":["MODULE_DEFAULT_CONFIG","env","production","frontend_server","MODULE_CONFIG_TOKEN","InjectionToken","SocketConfigurationService","configFile","store","_this","this","config$","BehaviorSubject","_config","Object","assign","next","select","getSocketModuleConfig","subscribe","userConfig","Config","defineProperty","prototype","Injectable","Inject","args","Store","SOCKET_RUN_SUCCESSFULLY","SOCKET_INITIALAZATION_FAILD","SocketRunSuccessfullyAction","type","SocketActionTypes","io","_io","SocketService","configService","pipe","map","config","uri","socket","dispatch","on","data","payload","message","Observable","observer","emit","providedIn","initialState","number","Reducer","state","action","SocketReducer","change","NgsSocketModule","forRoot","ngModule","NgsSocketRootModule","providers","provide","useValue","NgModule","imports","CommonModule","socketService","___starter","StoreModule","forFeature"],"mappings":"gnBAQA,IAAaA,EAA4C,CACxDC,IAAK,CACJC,YAAY,EACZC,gBAAiB,gCAGNC,EAAsB,IAAIC,EAAAA,eAAmC,sBCd1EC,EAAA,WAiBC,SAAAA,EAAyCC,EAAoBC,GAA7D,IAAAC,EAAAC,KAA6DA,KAAAF,MAAAA,EAF7DE,KAAAC,QAAU,IAAIC,EAAAA,gBAAgBZ,GAG7BU,KAAKG,QAAUC,OAAOC,OAAO,GAAIf,EAAuBO,GACxDG,KAAKC,QAAQK,KAAKN,KAAKG,SACvBH,KAAKF,MAAMS,OAAOC,EAAAA,uBAAuBC,WAAS,SAACC,GAC7CA,IAGLX,EAAKI,QAAUC,OAAOC,OAAO,GAAIN,EAAKI,QAASO,EAAWC,QAC1DZ,EAAKE,QAAQK,KAAKP,EAAKI,aAG1B,OAhBCC,OAAAQ,eAAIhB,EAAAiB,UAAA,SAAM,KAAV,WACC,OAAOb,KAAKG,6DAJbW,EAAAA,+EAQaC,EAAAA,OAAMC,KAAA,CAACtB,YAfZuB,EAAAA,SA0BTrB,EA5BA,UCGCsB,wBAA0B,mCAC1BC,4BAA8B,wCAG/BC,EAAA,WACUpB,KAAAqB,KAAOC,EAAkBJ,6BCH7BK,EAAKC,EAIXC,EAAA,WASC,SAAAA,EAAoBC,EAAmD5B,GAAvE,IAAAC,EAAAC,KAAoBA,KAAA0B,cAAAA,EAAmD1B,KAAAF,MAAAA,EACtEE,KAAK0B,cAAczB,QACjB0B,KACAC,EAAAA,KAAG,SAACC,GAAU,OAAAA,EAAOtC,IAAIE,mBACzBmC,EAAAA,KAAG,SAACE,GAGH,OADA/B,EAAKgC,OAASR,EAAGO,GACV/B,EAAKD,MAAMkC,SAAS,IAAIZ,OAGhCX,WAAS,WACTV,EAAKgC,OAAOE,GAAG,mBAAiB,SAAEC,GACjCnC,EAAKD,MAAMkC,SAAS,CACnBX,KAAMa,EAAKb,KACXc,QAASD,EAAKC,uBAWnBV,EAAAZ,UAAAoB,GAAA,SAAMG,GAAN,IAAArC,EAAAC,KAMC,OALkB,IAAIqC,EAAAA,YAAU,SAAIC,GACnCvC,EAAKgC,OAAOE,GAAGG,GAAO,SAAGF,GACxBI,EAAShC,KAAK4B,UAWjBT,EAAAZ,UAAA0B,KAAA,SAAKH,EAAiBD,GACrBnC,KAAK+B,OAAOQ,KAAKH,EAASD,wBA9C3BrB,EAAAA,WAAUE,KAAA,CAAC,CACXwB,WAAY,oDAJJ5C,SANAqB,EAAAA,mJAMT,GCJA,IAAawB,EAAsB,CAClCC,OAAQ,GAGT,SAAgBC,EAAQC,EAAsBC,GAG3C,YAHqB,IAAAD,IAAAA,EAAAH,GACfI,EAAOxB,KAENuB,EASV,IAAaE,EAAgB,CAC5BC,OAAQJ,GCtBT,IAAAK,EAAA,WASA,SAAAA,KAUA,OANQA,EAAAC,QAAP,SAAepB,GACd,MAAO,CACNqB,SAAUC,EACVC,UAAW,CAAC,CAAEC,QAAS3D,EAAqB4D,SAAUzB,GAAUjC,EAA4B6B,yBAP9F8B,EAAAA,SAAQvC,KAAA,CAAC,CACTwC,QAAS,CAACC,EAAAA,kBASXT,EAnBA,gBAyBC,SAAAG,EAAoBO,GAAA1D,KAAA0D,cAAAA,EACnB,OAAcC,WAAa,OAAcA,YAAc,GACvD,OAAcA,WAAW5B,OAAS,SAEpC,2BARCwB,EAAAA,SAAQvC,KAAA,CAAC,CACTwC,QAAS,CAACR,EAAiBY,EAAAA,YAAYC,WAAW,SAAUf,iDAhBpDrB,KAuBT0B","sourcesContent":["import { InjectionToken } from \"@angular/core\";\r\n\r\nexport interface SocketModuleConfig {\r\n\tenv?: {\r\n\t\tproduction: boolean;\r\n\t\tfrontend_server: string;\r\n\t};\r\n}\r\nexport const MODULE_DEFAULT_CONFIG: SocketModuleConfig = {\r\n\tenv: {\r\n\t\tproduction: false,\r\n\t\tfrontend_server: \"frontend_server/did/not/set\"\r\n\t}\r\n};\r\nexport const MODULE_CONFIG_TOKEN = new InjectionToken<SocketModuleConfig>(\"SocketModuleConfig\");\r\n","import { BehaviorSubject } from \"rxjs\";\r\nimport { Inject, Injectable } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { getSocketModuleConfig } from \"@soushians/config\";\r\n\r\nimport { SocketModuleConfig, MODULE_DEFAULT_CONFIG, MODULE_CONFIG_TOKEN } from \"../socket.config\";\r\nimport { AppState } from \"../socket.reducer\";\r\n\r\n@Injectable()\r\nexport class SocketConfigurationService {\r\n\tprivate _config: SocketModuleConfig;\r\n\tget config() {\r\n\t\treturn this._config;\r\n\t}\r\n\tconfig$ = new BehaviorSubject(MODULE_DEFAULT_CONFIG);\r\n\r\n\tconstructor(@Inject(MODULE_CONFIG_TOKEN) configFile, private store: Store<AppState>) {\r\n\t\tthis._config = Object.assign({}, MODULE_DEFAULT_CONFIG, configFile);\r\n\t\tthis.config$.next(this._config);\r\n\t\tthis.store.select(getSocketModuleConfig).subscribe(userConfig => {\r\n\t\t\tif (!userConfig) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis._config = Object.assign({}, this._config, userConfig.Config);\r\n\t\t\tthis.config$.next(this._config);\r\n\t\t});\r\n\t}\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nexport enum SocketActionTypes {\r\n\tSOCKET_RUN_SUCCESSFULLY = \"[SOCKET] SOCKET_RUN_SUCCESSFULLY\",\r\n\tSOCKET_INITIALAZATION_FAILD = \"[SOCKET] SOCKET_INITIALAZATION_FAILD\"\r\n}\r\n\r\nexport class SocketRunSuccessfullyAction implements Action {\r\n\treadonly type = SocketActionTypes.SOCKET_RUN_SUCCESSFULLY;\r\n}\r\nexport class SocketInitialazationFailedAction implements Action {\r\n\treadonly type = SocketActionTypes.SOCKET_INITIALAZATION_FAILD;\r\n}\r\n\r\nexport type SocketActions = SocketRunSuccessfullyAction | SocketInitialazationFailedAction;\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport * as _io from \"socket.io-client\";\r\nconst io = _io;\r\n\r\nimport { AppState } from \"../socket.reducer\";\r\n\r\nimport { SocketConfigurationService } from \"./socket-configuration.service\";\r\nimport { SocketRunSuccessfullyAction } from \"../socket.actions\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class SocketService {\r\n\tsocket: any;\r\n\turi: string;\r\n\tconstructor(private configService: SocketConfigurationService, private store: Store<AppState>) {\r\n\t\tthis.configService.config$\r\n\t\t\t.pipe(\r\n\t\t\t\tmap(config => config.env.frontend_server),\r\n\t\t\t\tmap(uri => {\r\n\t\t\t\t\t// console.log(uri, this.configService.config);\r\n\t\t\t\t\tthis.socket = io(uri);\r\n\t\t\t\t\treturn this.store.dispatch(new SocketRunSuccessfullyAction());\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t\t.subscribe(() => {\r\n\t\t\t\tthis.socket.on(\"DISPATCH_ACTION\", data => {\r\n\t\t\t\t\tthis.store.dispatch({\r\n\t\t\t\t\t\ttype: data.type,\r\n\t\t\t\t\t\tpayload: data.payload\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t}\r\n\t/**\r\n\t * @example\r\n\t * this.socketService.on<number>(\"chnage-number\").subscribe(data=>{})\r\n\t * @returns\r\n\t * Observable<T>\r\n\t */\r\n\ton<T>(message): Observable<T> {\r\n\t\tconst observer$ = new Observable<T>(observer => {\r\n\t\t\tthis.socket.on(message, (data: T) => {\r\n\t\t\t\tobserver.next(data);\r\n\t\t\t});\r\n\t\t});\r\n\t\treturn observer$;\r\n\t}\r\n\t/**\r\n\t * @example\r\n\t * this.socketService.emit(\"chnage-number\",{number:2})\r\n\t * @returns\r\n\t * void\r\n\t */\r\n\temit(message: string, payload: any): void {\r\n\t\tthis.socket.emit(message, payload);\r\n\t}\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nexport interface State {\r\n\tnumber: number;\r\n}\r\nexport const initialState: State = {\r\n\tnumber: 0\r\n};\r\n\r\nexport function Reducer(state = initialState, action: Action): State {\r\n\tswitch (action.type) {\r\n\t\tdefault: {\r\n\t\t\treturn state;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport interface SocketState {\r\n\tchange: State;\r\n}\r\n\r\nexport const SocketReducer = {\r\n\tchange: Reducer\r\n};\r\n\r\nexport interface AppState {\r\n\tsocket: SocketState;\r\n}\r\n","import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { StoreModule } from \"@ngrx/store\";\r\n\r\nimport { SocketModuleConfig, MODULE_CONFIG_TOKEN } from \"./socket.config\";\r\nimport { SocketConfigurationService } from \"./services/socket-configuration.service\";\r\nimport { SocketService } from \"./services/socket.service\";\r\nimport { SocketReducer } from \"./socket.reducer\";\r\n\r\n@NgModule({\r\n\timports: [CommonModule]\r\n})\r\nexport class NgsSocketModule {\r\n\tstatic forRoot(config?: SocketModuleConfig): ModuleWithProviders {\r\n\t\treturn {\r\n\t\t\tngModule: NgsSocketRootModule,\r\n\t\t\tproviders: [{ provide: MODULE_CONFIG_TOKEN, useValue: config }, SocketConfigurationService, SocketService]\r\n\t\t};\r\n\t}\r\n}\r\n\r\n@NgModule({\r\n\timports: [NgsSocketModule, StoreModule.forFeature(\"socket\", SocketReducer)]\r\n})\r\nexport class NgsSocketRootModule {\r\n\tconstructor(private socketService: SocketService) {\r\n\t\t(<any>window).___starter = (<any>window).___starter || {};\r\n\t\t(<any>window).___starter.socket = \"8.0.10\";\r\n\t}\r\n}\r\n"]}