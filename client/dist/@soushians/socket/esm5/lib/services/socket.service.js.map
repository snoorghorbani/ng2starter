{
  "version": 3,
  "file": "socket.service.js",
  "sources": [
    "ng://@soushians/socket/projects/soushians/socket/src/lib/services/socket.service.ts"
  ],
  "sourcesContent": [
    "import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { Store } from \"@ngrx/store\";\r\n// import * as socketIo from \"socket.io-client\";\r\n// const socketIo = require(\"socket.io-client\");\r\n// tslint:disable-next-line:no-debugger\r\ndebugger;\r\nimport * as _io from \"socket.io-client\";\r\nconst io = _io;\r\nimport { AppState } from \"../socket.reducer\";\r\n\r\nimport { getSocketModuleConfig } from \"@soushians/config\";\r\n\r\nimport { SocketConfigurationService } from \"./socket-configuration.service\";\r\nimport { SocketRunSuccessfullyAction } from \"../socket.actions\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class SocketService {\r\n\tsocket: any;\r\n\turi: string;\r\n\tconstructor(private configService: SocketConfigurationService, private store: Store<AppState>) {\r\n\t\tthis.configService.config$\r\n\t\t\t.pipe(\r\n\t\t\t\tmap(config => (config.env.production ? config.production_uri : config.development_uri)),\r\n\t\t\t\tmap(uri => {\r\n\t\t\t\t\tthis.socket = io(uri);\r\n\t\t\t\t\treturn this.store.dispatch(new SocketRunSuccessfullyAction());\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t\t.subscribe(() => {\r\n\t\t\t\tthis.socket.on(\"DISPATCH_ACTION\", data => {\r\n\t\t\t\t\tthis.store.dispatch({\r\n\t\t\t\t\t\ttype: data.type,\r\n\t\t\t\t\t\tpayload: data.payload\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t}\r\n\t/**\r\n\t * @example\r\n\t * this.socketService.on<number>(\"chnage-number\").subscribe(data=>{})\r\n\t * @returns\r\n\t * Observable<T>\r\n\t */\r\n\ton<T>(message): Observable<T> {\r\n\t\tconst observer$ = new Observable<T>(observer => {\r\n\t\t\tthis.socket.on(message, (data: T) => {\r\n\t\t\t\tobserver.next(data);\r\n\t\t\t});\r\n\t\t});\r\n\t\treturn observer$;\r\n\t}\r\n\t/**\r\n\t * @example\r\n\t * this.socketService.emit(\"chnage-number\",{number:2})\r\n\t * @returns\r\n\t * void\r\n\t */\r\n\temit(message: string, payload: any): void {\r\n\t\tthis.socket.emit(message, payload);\r\n\t}\r\n}\r\n"
  ],
  "names": [],
  "mappings": ";;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAClC,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AACrC,OAAO,EAAE,KAAK,EAAE,MAAM,aAAa,CAAC;;;;;;;AAIpC,QAAQ,CAAC;AACT,OAAO,KAAK,GAAG,MAAM,kBAAkB,CAAC;AACxC,uBAAM,EAAE,GAAG,GAAG,CAAC;AAKf,OAAO,EAAE,0BAA0B,EAAE,MAAM,gCAAgC,CAAC;AAC5E,OAAO,EAAE,2BAA2B,EAAE,MAAM,mBAAmB,CAAC;AAKhE,MAAM;;;;;IAGL,YAAoB,aAAyC,EAAU,KAAsB;QAAzE,kBAAa,GAAb,aAAa,CAA4B;QAAU,UAAK,GAAL,KAAK,CAAiB;QAC5F,IAAI,CAAC,aAAa,CAAC,OAAO;aACxB,IAAI,CACJ,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,EACvF,GAAG,CAAC,GAAG,CAAC,EAAE;YACT,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;YACtB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,2BAA2B,EAAE,CAAC,CAAC;SAC9D,CAAC,CACF;aACA,SAAS,CAAC,GAAG,EAAE;YACf,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,iBAAiB,EAAE,IAAI,CAAC,EAAE;gBACxC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;oBACnB,IAAI,EAAE,IAAI,CAAC,IAAI;oBACf,OAAO,EAAE,IAAI,CAAC,OAAO;iBACrB,CAAC,CAAC;aACH,CAAC,CAAC;SACH,CAAC,CAAC;KACJ;;;;;;;;;IAOD,EAAE,CAAI,OAAO;QACZ,uBAAM,SAAS,GAAG,IAAI,UAAU,CAAI,QAAQ,CAAC,EAAE;YAC9C,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,IAAO,EAAE,EAAE;gBACnC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACpB,CAAC,CAAC;SACH,CAAC,CAAC;QACH,MAAM,CAAC,SAAS,CAAC;KACjB;;;;;;;;;IAOD,IAAI,CAAC,OAAe,EAAE,OAAY;QACjC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;KACnC;;;YA9CD,UAAU,SAAC;gBACX,UAAU,EAAE,MAAM;aAClB;;;;YALQ,0BAA0B;YAX1B,KAAK"
}
