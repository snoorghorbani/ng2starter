{"version":3,"sources":["ng://@soushians/user/lib/user.config.ts","ng://@soushians/user/lib/models/user.model.ts","ng://@soushians/user/lib/models/change-password.model.ts","ng://@soushians/user/lib/models/reset-password-request.model.ts","ng://@soushians/user/lib/models/reset-password.model.ts","ng://@soushians/user/lib/models/profile-edit.model.ts","null","ng://@soushians/user/lib/models/profile-view.model.ts","ng://@soushians/user/lib/models/failed-login-report.model.ts","ng://@soushians/user/lib/models/failed-login.model.ts","ng://@soushians/user/lib/services/user-configuration.service.ts","ng://@soushians/user/lib/profile-view/profile-view.actions.ts","ng://@soushians/user/lib/dashboard/user.actions.ts","ng://@soushians/user/lib/dashboard/account.reducer.ts","ng://@soushians/user/lib/services/user.service.ts","ng://@soushians/user/lib/profile-edit/edit-profile.actions.ts","ng://@soushians/user/lib/profile-edit/edit-profile.effects.ts","ng://@soushians/user/lib/profile-view/profile-view.effects.ts","ng://@soushians/user/lib/reset-password/reset-password-request.actions.ts","ng://@soushians/user/lib/reset-password/reset-password-request.reducer.ts","ng://@soushians/user/lib/change-password/change-password.actions.ts","ng://@soushians/user/lib/change-password/change-password.reducer.ts","ng://@soushians/user/lib/profile-edit/edit-profile.reducer.ts","ng://@soushians/user/lib/search-account/search.actions.ts","ng://@soushians/user/lib/search-account/search.reducer.ts","ng://@soushians/user/lib/user.reducers.ts","ng://@soushians/user/lib/dashboard/dashboard-container/dashboard.component.ts","ng://@soushians/user/lib/dashboard/dashboard-links/dashboard-links.component.ts","ng://@soushians/user/lib/feature/feature.effects.ts","ng://@soushians/user/lib/search-account/search/search.component.ts","ng://@soushians/user/lib/change-password/change-password/change-password.component.ts","ng://@soushians/user/lib/profile-edit/profile-edit/profile-edit.component.ts","ng://@soushians/user/lib/reset-password/reset-password-request/reset-password-request.component.ts","ng://@soushians/user/lib/feature/feature-container/feature-container.component.ts","ng://@soushians/user/lib/search-account/search.effects.ts","ng://@soushians/user/lib/change-password/change-password-container/change-password-container.component.ts","ng://@soushians/user/lib/profile-edit/profile-edit-container/profile-edit-container.component.ts","ng://@soushians/user/lib/profile-view/profile/profile.component.ts","ng://@soushians/user/lib/profile-view/profile-container/profile-container.component.ts","ng://@soushians/user/lib/user.module.ts","ng://@soushians/user/lib/services/password.service.ts","ng://@soushians/user/lib/user.routing-module.ts","ng://@soushians/user/lib/change-password/change-password.effects.ts","ng://@soushians/user/lib/services/user.facade-service.ts"],"names":["MODULE_DEFAULT_CONFIG","endpoints","changePassword","editProfile","getAccountInfo","profileInformation","forms","profile_edit","dashboardLinks","responseToUserInfo","user$","mapUserDisplayName","map","user","DisplayName","MODULE_CONFIG_TOKEN","InjectionToken","UserModel","this","Roles","Groups","ChangePasswordModel","Request","initValue","_this","Object","keys","forEach","key","prototype","getRequestBody","Password","defineProperty","FormGroup","FormControl","Validators","required","minLength","Confirm","MatchValidator","Response","ResetPasswordRequestModel","Username","Token","Captcha","Type","ResetPasswordModel","EditProfile_ApiModel","Email","extractData","Result","User","extendStatics","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","call","__decorate","decorators","target","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","__metadata","metadataKey","metadataValue","metadata","ProfileViewModel","_super","__","constructor","create","tslib_1.__extends","FailedLoginReportModel","FailedLoginModel","UserConfigurationService","configFile","store","BehaviorSubject","_config","config$","next","select","getUserModuleConfig","subscribe","userConfig","Config","Injectable","args","providedIn","Inject","Store","GetProfile","ProfileViewActionTypes","GetProfileStart","GetProfileSucceed","payload","GetProfileFailed","RefreshUserInfoAction","UserActionTypes","initialState","loaded","data","userReducer","state","action","type","UserService","http","configurationService","setTimeout","dispatch","filter","config","take","switchMap","get","let","pipe","response","Role","model","put","stringTemplate","getInfo","is_role","role","undefined","indexOf","HttpClient","EditProfile","EditProfileActionTypes","EditProfileStart","EditProfileSucceed","EditProfileFailed","EditProfileEffects","actions$","router","service","ofType","res","catchError","of","navigate","Actions","Router","Effect","ProfileViewEffects","userService","Observable","numberOfRequested","lastRequestedTime","disable","reducer","initialState$1","ResetPasswordRequestActionTypes","Date","now","toString","ChangePassword","ChangePasswordActionTypes","ChangePasswordStart","ChangePasswordSucceed","ChangePasswordFailed","status","reducer$1","initialState$2","reducer$2","initialState$3","Search","SearchActionTypes","SearchStartAction","SearchSucceed","SearchFailed","reducer$3","initialState$4","UserReducers","userReducer.userReducer","resetPasswordRequest","resetPasswordRequestReducer.reducer","changePassword.reducer","searchView","searchReducer.reducer","editProfileReducer.reducer","selectFeatureState","createFeatureSelector","getUserInforamtionStatus","createSelector","selectResetPasswordRequestState","getNumberOfRequeseted","selectUserInformaionState","userReducer.getAccountInfo","selectSearchState","getSearchStatus","DashboardContainerComponent","appReducer.getAccountInfo","ngOnInit","Component","selector","template","styles","DashboardLinksComponent","userConfigurationService","links$","links","title","route","description","icon","UserEffects","SignInActionTypes","SIGNIN_SUCCEED","SIGNOUT","SearchComponent","formGroup","FeatureReducer.getAccountInfo","userStatus$","FeatureReducer.getSearchStatus","value","userDataLoaded$","includes","search","valid","ChangePasswordComponent","EventEmitter","submit","submited","emit","Input","Output","ProfileEditComponent","ResetPasswordRequestComponent","snackBar","timer$","timer","takeWhile","isPending","enable","maximumResendingHappend$","submitted","message","getValue","open","duration","MatSnackBar","FeatureContainerComponent","SearchEffects","params","ActivatedRoute","ChangePasswordContainerComponent","userInfo","event","ProfileEditContainerComponent","configService","userInforamation$","roles$","getAppConfig","groups","patchValue","updateProfile","ProfileComponent","information","ProfileContainerComponent","data$","dataStatus$","FeatureReducer.getUserInforamtionStatus","NgsUserModule","forRoot","ngModule","RootNgsUserModule","providers","provide","useValue","NgModule","imports","HttpClientModule","FormsModule","RouterModule","CommonModule","MatExpansionModule","MatSnackBarModule","MatIconModule","MatButtonModule","MatCardModule","MatSelectModule","MatInputModule","MatFormFieldModule","MatTabsModule","FlexLayoutModule","MatRadioModule","ReactiveFormsModule","BrowserAnimationsModule","NgsFormModule","declarations","exports","StoreModule","forFeature","EffectsModule","PasswordService","numberOfRequeseted$","FeatureReducer.getNumberOfRequeseted","isValidResetPasswordRequest","count","isValidResetPasswordReset","withCredentials","requestResetPasswordLink","post","patch","resetPassword","routes","ChangePasswordEffects","passwordService","catch","path","component","children","NgsUserRoutingModule","forChild","UserFacadeService","getDisplayName","mapper"],"mappings":"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","sourcesContent":["import { InjectionToken } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { UserModel } from \"./models\";\r\n\r\nexport interface UserModuleConfig {\r\n\tendpoints?: {\r\n\t\t//resetPasswordRequest: string;\r\n\t\tchangePassword?: string;\r\n\t\teditProfile?: string;\r\n\t\tgetAccountInfo?: string;\r\n\t\tprofileInformation?: string;\r\n\t\t// resetPassword: string;\r\n\t};\r\n\tforms?: {\r\n\t\tprofile_edit: string;\r\n\t};\r\n\tdashboardLinks?: {\r\n\t\troute: string;\r\n\t\ticon: string;\r\n\t\ttitle: string;\r\n\t}[];\r\n\tresponseToUserInfo: { (user: Observable<any>): Observable<UserModel> };\r\n\tmapUserDisplayName: { (user: Observable<any>): Observable<string> };\r\n}\r\n\r\nexport const MODULE_DEFAULT_CONFIG: UserModuleConfig = {\r\n\tendpoints: {\r\n\t\t//resetPasswordRequest: '',\r\n\t\tchangePassword: \"\",\r\n\t\teditProfile: \"\",\r\n\t\tgetAccountInfo: \"\",\r\n\t\tprofileInformation: \"\"\r\n\t\t// resetPassword: '',\r\n\t},\r\n\tforms: {\r\n\t\tprofile_edit: \"\"\r\n\t},\r\n\tdashboardLinks: [],\r\n\tresponseToUserInfo: user$ => user$,\r\n\tmapUserDisplayName: user$ => user$.map(user => user.DisplayName)\r\n};\r\n\r\nexport const MODULE_CONFIG_TOKEN = new InjectionToken<UserModuleConfig>(\"UserModuleConfig\");\r\n","export class UserModel {\r\n\t_id: string;\r\n\t// FirstName: string;\r\n\t// LastName: string;\r\n\t// Username: string;\r\n\tDisplayName: string;\r\n\t// Username: string;\r\n\t// MobileNumber: string;\r\n\t// Sex: string;\r\n\t// Birthdate: string;\r\n\tEmail: string;\r\n\t// IdentificationNo: string;\r\n\t// IdentifierType: string;\r\n\t// RegisterDate: string;\r\n\t// UserType: string;\r\n\tRoles: string[];\r\n\tGroups: string[];\r\n\tconstructor() {\r\n\t\tthis.Roles = [];\r\n\t\tthis.Groups = [];\r\n\t}\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators, AbstractControl, ValidatorFn } from \"@angular/forms\";\r\nimport { MatchValidator } from \"@soushians/shared\";\r\n\r\nexport namespace ChangePasswordModel {\r\n\texport class Request implements HttpRequestBaseModel<Request> {\r\n\t\tUsername: string;\r\n\t\tPassword: string;\r\n\r\n\t\tconstructor(initValue: ChangePasswordModel.Request = {} as ChangePasswordModel.Request) {\r\n\t\t\tObject.keys(initValue).forEach(key => (this[key] = initValue[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {\r\n\t\t\t\tPassword: this.Password\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tstatic get formGroup() {\r\n\t\t\treturn new FormGroup({\r\n\t\t\t\tPassword: new FormControl(null, [ Validators.required, Validators.minLength(7) ]),\r\n\t\t\t\tConfirm: new FormControl(null, [ Validators.required, MatchValidator(\"Password\") ])\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\n\r\nexport module ResetPasswordRequestModel {\r\n\r\n    export class Request implements HttpRequestBaseModel<Request>{\r\n\r\n        Username: string;\r\n\r\n        //@RequestBody(\"pegah\")\r\n        Token: string;\r\n\r\n        //@UseIn('body')\r\n        Captcha: string;\r\n\r\n        //@UseIn('url')\r\n        //@Validators([Validators.required])\r\n        Type: 'sms' | 'email';\r\n\r\n        constructor(initValue?: ResetPasswordRequestModel.Request) {\r\n            Object.keys(initValue).forEach(key => this[key] = initValue[key]);\r\n        }\r\n\r\n        getRequestBody() {\r\n            return {\r\n                Username: this.Username,\r\n                Token: this.Token,\r\n                Captcha: this.Captcha\r\n            }\r\n        }\r\n\r\n        static get formGroup() {\r\n            return new FormGroup({\r\n                Username: new FormControl('', [Validators.minLength(8), Validators.required]),\r\n                Captcha: new FormControl(null, [Validators.required]),\r\n                Token: new FormControl(null, [Validators.required]),\r\n                Type: new FormControl('sms'),\r\n            })\r\n        }\r\n    }\r\n\r\n    export class Response {\r\n\r\n        constructor() {\r\n        }\r\n    }\r\n\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators, AbstractControl, ValidatorFn } from \"@angular/forms\";\r\nimport { MatchValidator } from \"@soushians/shared\";\r\n\r\nexport namespace ResetPasswordModel {\r\n\texport class Request implements HttpRequestBaseModel<Request> {\r\n\t\tPassword: string;\r\n\t\tToken: string;\r\n\r\n\t\tconstructor(initValue?: ResetPasswordModel.Request) {\r\n\t\t\tObject.keys(initValue).forEach(key => (this[key] = initValue[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {\r\n\t\t\t\tPassword: this.Password\r\n\t\t\t\t//Token: this.Token,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tstatic get formGroup() {\r\n\t\t\treturn new FormGroup({\r\n\t\t\t\tToken: new FormControl(null, [ Validators.required ]),\r\n\t\t\t\tPassword: new FormControl(\"\", [ Validators.minLength(8), Validators.required ]),\r\n\t\t\t\tConfirm: new FormControl(null, [ Validators.required, MatchValidator(\"Password\") ])\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\texport class Response {\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpRequestBaseModel, HttpResponseBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { UserModel } from \"./user.model\";\r\n\r\nexport namespace EditProfile_ApiModel {\r\n\texport class Request implements HttpRequestBaseModel<Request> {\r\n\t\tEmail: string;\r\n\t\tRoles: string[];\r\n\t\tGroups: string[];\r\n\r\n\t\tconstructor(initValue: Partial<Request> = {} as Request) {\r\n\t\t\tObject.keys(initValue).forEach(key => (this[key] = initValue[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tstatic get formGroup() {\r\n\t\t\treturn new FormGroup({\r\n\t\t\t\tEmail: new FormControl(null, [ Validators.required ]),\r\n\t\t\t\tRoles: new FormControl(null, [ Validators.required ]),\r\n\t\t\t\tGroups: new FormControl(null, [ Validators.required ])\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response implements HttpResponseBaseModel<Response> {\r\n\t\tResult: { User: UserModel };\r\n\t\tconstructor(initValue: Response = {} as Response) {\r\n\t\t\tObject.keys(initValue).forEach(key => (this[key] = initValue[key]));\r\n\t\t}\r\n\t\textractData() {\r\n\t\t\treturn this.Result.User;\r\n\t\t}\r\n\t}\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { UserModel } from \"./user.model\";\r\n\r\nexport namespace ProfileViewModel {\r\n\texport class Request implements HttpRequestBaseModel<Request> {\r\n\t\tEmail: string;\r\n\r\n\t\tconstructor(initValue?: ProfileViewModel.Request) {\r\n\t\t\tObject.keys(initValue).forEach(key => (this[key] = initValue[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {};\r\n\t\t}\r\n\r\n\t\tstatic get formGroup() {\r\n\t\t\treturn new FormGroup({\r\n\t\t\t\tUsername: new FormControl(\"\", [ Validators.minLength(8), Validators.required ])\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response extends UserModel {\r\n\t\tconstructor() {\r\n\t\t\tsuper();\r\n\t\t}\r\n\t}\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { FailedLoginModel } from './failed-login.model';\r\n\r\nexport module FailedLoginReportModel {\r\n    export class Request implements HttpRequestBaseModel<Request>{\r\n        Username: string;\r\n\r\n        constructor(initValue?: FailedLoginReportModel.Request) {\r\n            Object.keys(initValue).forEach(key => this[key] = initValue[key]);\r\n        }\r\n\r\n        getRequestBody() {\r\n            return {\r\n            }\r\n        }\r\n\r\n        static get formGroup() {\r\n            return \r\n        }\r\n    }\r\n\r\n    export class Response  {\r\n        data: FailedLoginModel[] = [];\r\n\r\n        constructor() {\r\n            \r\n        }\r\n    }\r\n}","export class FailedLoginModel {\r\n    Username: string;\r\n    Password: string;\r\n    TryDate: Date;\r\n    MacAddress: string;\r\n    IpAddress: string;\r\n    Reason: string;\r\n}","import { Injectable, Inject } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\n\r\nimport { getUserModuleConfig } from \"@soushians/config\";\r\n\r\nimport { UserModuleConfig, MODULE_CONFIG_TOKEN, MODULE_DEFAULT_CONFIG } from \"../user.config\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class UserConfigurationService {\r\n\tprivate _config: UserModuleConfig;\r\n\tget config() {\r\n\t\treturn this._config;\r\n\t}\r\n\tconfig$ = new BehaviorSubject(this._config);\r\n\r\n\tconstructor(@Inject(MODULE_CONFIG_TOKEN) configFile, private store: Store<any>) {\r\n\t\tthis._config = Object.assign({}, MODULE_DEFAULT_CONFIG, configFile);\r\n\t\tthis.config$.next(this._config);\r\n\t\tthis.store.select(getUserModuleConfig).subscribe(userConfig => {\r\n\t\t\tif (!userConfig) return;\r\n\t\t\tthis._config = Object.assign({}, this._config, userConfig.Config);\r\n\t\t\tthis.config$.next(this._config);\r\n\t\t});\r\n\t}\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { ChangePasswordModel } from \"../models\";\r\nimport { ProfileViewModel } from \"../models\";\r\n\r\nexport enum ProfileViewActionTypes {\r\n\tGET_PROFILE = \"[USER][PROFILE] GET_PROFILE\",\r\n\tGET_PROFILE_START = \"[USER][PROFILE] GET_PROFILE_START\",\r\n\tGET_PROFILE_SUCCEED = \"[USER][PROFILE] GET_PROFILE_SUCCEED\",\r\n\tGET_PROFILE_FAILED = \"[USER][PROFILE] GET_PROFILE_FAILED\"\r\n}\r\n\r\nexport class GetProfile implements Action {\r\n\treadonly type = ProfileViewActionTypes.GET_PROFILE;\r\n}\r\nexport class GetProfileStart implements Action {\r\n\treadonly type = ProfileViewActionTypes.GET_PROFILE_START;\r\n}\r\nexport class GetProfileSucceed implements Action {\r\n\treadonly type = ProfileViewActionTypes.GET_PROFILE_SUCCEED;\r\n\tconstructor(public payload: ProfileViewModel.Response) {}\r\n}\r\nexport class GetProfileFailed implements Action {\r\n\treadonly type = ProfileViewActionTypes.GET_PROFILE_FAILED;\r\n}\r\n\r\nexport type ProfileViewAction = GetProfile | GetProfileStart | GetProfileSucceed | GetProfileFailed;\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { UserModel } from \"../models\";\r\n\r\nexport enum UserActionTypes {\r\n\tUSER_SELECTED = \"[USER] USER_SELECTED\",\r\n\tREFRESH_USER_INFO = \"[USER] REFRESH_USER_INFO\"\r\n}\r\n\r\nexport class UserSelectedAction implements Action {\r\n\treadonly type = UserActionTypes.USER_SELECTED;\r\n\tconstructor(public payload: UserModel) {}\r\n}\r\n\r\nexport class RefreshUserInfoAction implements Action {\r\n\treadonly type = UserActionTypes.REFRESH_USER_INFO;\r\n\tconstructor(public payload: UserModel) {}\r\n}\r\n\r\nexport type UserAction = UserSelectedAction | RefreshUserInfoAction;\r\n","import { UserModel } from \"../models\";\r\nimport { UserAction, UserActionTypes } from \"./user.actions\";\r\n\r\nexport interface State {\r\n\tloaded: boolean;\r\n\tdata: UserModel;\r\n}\r\nexport const initialState: State = {\r\n\tloaded: false,\r\n\tdata: new UserModel()\r\n};\r\n\r\nexport function userReducer(state = initialState, action: UserAction): State {\r\n\tswitch (action.type) {\r\n\t\tcase UserActionTypes.USER_SELECTED: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloaded: true,\r\n\t\t\t\tdata: action.payload\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase UserActionTypes.REFRESH_USER_INFO: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloaded: true,\r\n\t\t\t\tdata: action.payload\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tdefault: {\r\n\t\t\treturn state;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const getAccountInfo = (state: State) => state.data;\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs/Rx\";\r\n\r\nimport { UserModel, EditProfile_ApiModel, ProfileViewModel, FailedLoginReportModel } from \"../models\";\r\nimport { UserConfigurationService } from \"./user-configuration.service\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { stringTemplate } from \"@soushians/shared\";\r\nimport { map } from \"rxjs/operators\";\r\n\r\nimport { GetProfile } from \"../profile-view/profile-view.actions\";\r\nimport { getAccountInfo } from \"../dashboard/account.reducer\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class UserService {\r\n\tconstructor(\r\n\t\tprivate http: HttpClient,\r\n\t\tprivate store: Store<any>,\r\n\t\tprivate configurationService: UserConfigurationService\r\n\t) {\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.store.dispatch(new GetProfile());\r\n\t\t}, 999);\r\n\t}\r\n\r\n\tgetAccountInfo(): Observable<ProfileViewModel.Response> {\r\n\t\treturn this.configurationService.config$\r\n\t\t\t.filter(config => config.endpoints.profileInformation != \"\")\r\n\t\t\t.take(1)\r\n\t\t\t.switchMap(config =>\r\n\t\t\t\tthis.http.get<any>(config.endpoints.profileInformation).let(config.responseToUserInfo).pipe(\r\n\t\t\t\t\tmap((response: UserModel) => {\r\n\t\t\t\t\t\tconst user: any = Object.assign({}, response);\r\n\t\t\t\t\t\tif (user.Role) {\r\n\t\t\t\t\t\t\tuser.Roles = [ user.Role ];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn user;\r\n\t\t\t\t\t})\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t}\r\n\teditProfile(data: EditProfile_ApiModel.Request): Observable<UserModel> {\r\n\t\tvar model = new EditProfile_ApiModel.Request(data);\r\n\t\treturn this.http\r\n\t\t\t.put<EditProfile_ApiModel.Response>(\r\n\t\t\t\tstringTemplate(this.configurationService.config.endpoints.editProfile, model),\r\n\t\t\t\tmodel.getRequestBody()\r\n\t\t\t)\r\n\t\t\t.map(response => new EditProfile_ApiModel.Response(response).extractData());\r\n\t}\r\n\tgetInfo(data: ProfileViewModel.Request): Observable<any> {\r\n\t\tconst model = new ProfileViewModel.Request(data);\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<ProfileViewModel.Response>(\r\n\t\t\t\tstringTemplate(this.configurationService.config.endpoints.getAccountInfo, model)\r\n\t\t\t)\r\n\t\t\t.map(response => response);\r\n\t}\r\n\r\n\tis_role(role: string): Observable<boolean> {\r\n\t\treturn this.store\r\n\t\t\t.select(getAccountInfo)\r\n\t\t\t.filter(user => user && user.Roles != undefined)\r\n\t\t\t.take(1)\r\n\t\t\t.map(user => user.Roles.indexOf(role) > -1);\r\n\t}\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { EditProfile_ApiModel, UserModel } from \"../models\";\r\n\r\nexport enum EditProfileActionTypes {\r\n\tEDIT_PROFILE = \"[USER][PASSWORD] EDIT_PROFILE\",\r\n\tEDIT_PROFILE_START = \"[USER][PASSWORD] EDIT_PROFILE_START\",\r\n\tEDIT_PROFILE_SUCCEED = \"[USER][PASSWORD] EDIT_PROFILE_SUCCEED\",\r\n\tEDIT_PROFILE_FAILED = \"[USER][PASSWORD] EDIT_PROFILE_FAILED\"\r\n}\r\n\r\nexport class EditProfile implements Action {\r\n\treadonly type = EditProfileActionTypes.EDIT_PROFILE;\r\n\tconstructor(public payload: EditProfile_ApiModel.Request) { }\r\n}\r\nexport class EditProfileStart implements Action {\r\n\treadonly type = EditProfileActionTypes.EDIT_PROFILE_START;\r\n\tconstructor(public payload: EditProfile_ApiModel.Request) { }\r\n}\r\nexport class EditProfileSucceed implements Action {\r\n\treadonly type = EditProfileActionTypes.EDIT_PROFILE_SUCCEED;\r\n\tconstructor(public payload: UserModel) { }\r\n}\r\nexport class EditProfileFailed implements Action {\r\n\treadonly type = EditProfileActionTypes.EDIT_PROFILE_FAILED;\r\n}\r\n\r\nexport type EditProfileAction =\r\n\t| EditProfile\r\n\t| EditProfileStart\r\n\t| EditProfileSucceed\r\n\t| EditProfileFailed;\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { of } from \"rxjs/observable/of\";\r\nimport { map, catchError, switchMap } from \"rxjs/operators\";\r\n\r\nimport { UserService } from \"../services/user.service\";\r\nimport { EditProfile_ApiModel } from \"../models\";\r\nimport {\r\n\tEditProfileActionTypes,\r\n\tEditProfileStart,\r\n\tEditProfileSucceed,\r\n\tEditProfileFailed\r\n} from \"./edit-profile.actions\";\r\nimport { GetProfile } from \"../profile-view/profile-view.actions\";\r\n\r\n@Injectable()\r\nexport class EditProfileEffects {\r\n\tconstructor(private actions$: Actions<any>, private router: Router, private service: UserService) {}\r\n\r\n\t@Effect()\r\n\tEditProfileRequest$ = this.actions$\r\n\t\t.ofType(EditProfileActionTypes.EDIT_PROFILE)\r\n\t\t.pipe(map(action => action.payload), map(data => new EditProfileStart(data)));\r\n\r\n\t@Effect()\r\n\tRequestEditProfileLink$ = this.actions$\r\n\t\t.ofType(EditProfileActionTypes.EDIT_PROFILE_START)\r\n\t\t.pipe(\r\n\t\t\tmap(action => action.payload),\r\n\t\t\tswitchMap((data: EditProfile_ApiModel.Request) => this.service.editProfile(data)),\r\n\t\t\tmap(res => new EditProfileSucceed(res)),\r\n\t\t\tcatchError(() => of(new EditProfileFailed()))\r\n\t\t);\r\n\t// .switchMap((data: EditProfile_ApiModel.Request) => {\r\n\t// \treturn this.service\r\n\t// \t\t.editProfile(data)\r\n\t// \t\t.map((res) => new EditProfileSucceed(res))\r\n\t// \t\t.catch(() => Observable.of(new EditProfileFailed()));\r\n\t// });\r\n\r\n\t@Effect()\r\n\tgoToView$ = this.actions$.ofType(EditProfileActionTypes.EDIT_PROFILE_SUCCEED).pipe(\r\n\t\tmap(() => {\r\n\t\t\tthis.router.navigate([ \"/user/profile\" ]);\r\n\t\t\treturn new GetProfile();\r\n\t\t})\r\n\t);\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { of } from \"rxjs/observable/of\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\n\r\nimport { UserService } from \"../services/user.service\";\r\nimport { EditProfile_ApiModel } from \"../models\";\r\nimport { ProfileViewActionTypes, GetProfileStart, GetProfileSucceed, GetProfileFailed } from \"./profile-view.actions\";\r\nimport { RefreshUserInfoAction } from \"../dashboard/user.actions\";\r\n\r\n@Injectable()\r\nexport class ProfileViewEffects {\r\n\tconstructor(private actions$: Actions<any>, private userService: UserService) {}\r\n\r\n\t@Effect()\r\n\tProfileRequest$ = this.actions$\r\n\t\t.ofType(ProfileViewActionTypes.GET_PROFILE)\r\n\t\t.pipe(map(action => action.payload), map(data => new GetProfileStart()));\r\n\r\n\t@Effect()\r\n\tgetProfile$ = this.actions$\r\n\t\t.ofType(ProfileViewActionTypes.GET_PROFILE_START)\r\n\t\t.pipe(\r\n\t\t\tmap(action => action.payload),\r\n\t\t\tswitchMap((data: EditProfile_ApiModel.Request) =>\r\n\t\t\t\tthis.userService\r\n\t\t\t\t\t.getAccountInfo()\r\n\t\t\t\t\t.pipe(\r\n\t\t\t\t\t\tmap(res => new GetProfileSucceed(res)),\r\n\t\t\t\t\t\tcatchError(() => Observable.of(new GetProfileFailed()))\r\n\t\t\t\t\t)\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t@Effect()\r\n\trefreshUserInfo$ = this.actions$\r\n\t\t.ofType(ProfileViewActionTypes.GET_PROFILE_SUCCEED)\r\n\t\t.pipe(map(action => action.payload), map(data => new RefreshUserInfoAction(data)));\r\n}\r\n","import { Action } from '@ngrx/store';\r\n\r\nimport { ResetPasswordRequestModel } from '../models';\r\n\r\nexport enum ResetPasswordRequestActionTypes {\r\n        GET_RESET_PASSWORD_LINK             = '[USER][PASSWORD] GET_RESET_PASSWORD_LINK',\r\n        RESET_PASSWORD_LINK_REQUEST_START   = '[USER][PASSWORD] RESET_PASSWORD_LINK_REQUEST_START',\r\n        RESET_PASSWORD_LINK_REQUEST_SUCCEED = '[USER][PASSWORD] RESET_PASSWORD_LINK_REQUEST_SUCCEED',\r\n        RESET_PASSWORD_LINK_REQUEST_FAILED  = '[USER][PASSWORD] RESET_PASSWORD_LINK_REQUEST_FAILED',\r\n        DISABLE_GET_LINK                    = '[USER][PASSWORD] DISABLE_GET_LINK',\r\n        ENABLE_GET_LINK                     = '[USER][PASSWORD] ENABLE_GET_LINK',\r\n        MAXIMUM_TRY_HAPPEND                 = '[USER][PASSWORD] MAXIMUM_TRY_HAPPEND',\r\n        PASSWORD_CHANGED_SUCCEED            = '[USER][PASSWORD] PASSWORD_CHANGED_SUCCEED',\r\n        PASSWORD_CHANGED_FAILED             = '[USER][PASSWORD] PASSWORD_CHANGED_FAILED',\r\n}\r\n\r\nexport class GetResetPasswordLink implements Action {\r\n        readonly type = ResetPasswordRequestActionTypes.GET_RESET_PASSWORD_LINK;\r\n        constructor(public payload: ResetPasswordRequestModel.Request) { }\r\n}\r\nexport class ResetPasswordLinkRequestStart implements Action {\r\n        readonly type = ResetPasswordRequestActionTypes.RESET_PASSWORD_LINK_REQUEST_START;\r\n        constructor(public payload: ResetPasswordRequestModel.Request) { }\r\n}\r\nexport class ResetPasswordLinkRequestSucceed implements Action {\r\n        readonly type = ResetPasswordRequestActionTypes.RESET_PASSWORD_LINK_REQUEST_SUCCEED;\r\n        constructor() { }\r\n}\r\nexport class ResetPasswordLinkRequestFailed implements Action {\r\n        readonly type = ResetPasswordRequestActionTypes.RESET_PASSWORD_LINK_REQUEST_FAILED;\r\n        constructor() { }\r\n}\r\nexport class DisableGetLink implements Action {\r\n        readonly type = ResetPasswordRequestActionTypes.DISABLE_GET_LINK;\r\n}\r\nexport class EnableGetLink implements Action {\r\n        readonly type = ResetPasswordRequestActionTypes.ENABLE_GET_LINK;\r\n}\r\nexport class MaximumTryHappend implements Action {\r\n        readonly type = ResetPasswordRequestActionTypes.MAXIMUM_TRY_HAPPEND;\r\n}\r\nexport class PasswordChangedSucceed implements Action {\r\n        readonly type = ResetPasswordRequestActionTypes.PASSWORD_CHANGED_SUCCEED;\r\n}\r\nexport class PasswordChangedFailed implements Action {\r\n        readonly type = ResetPasswordRequestActionTypes.PASSWORD_CHANGED_FAILED;\r\n        constructor(public payload: string) { }\r\n}\r\n\r\n\r\nexport type ResetPasswordRequestAction =\r\n        GetResetPasswordLink\r\n        | ResetPasswordLinkRequestStart\r\n        | ResetPasswordLinkRequestFailed\r\n        | DisableGetLink\r\n        | ResetPasswordLinkRequestSucceed\r\n        | EnableGetLink\r\n        | MaximumTryHappend\r\n        | PasswordChangedSucceed\r\n        | PasswordChangedFailed;\r\n","import { ResetPasswordRequestAction, ResetPasswordRequestActionTypes } from \"./reset-password-request.actions\";\r\n\r\nexport interface State {\r\n\tnumberOfRequested: number;\r\n\tlastRequestedTime: string;\r\n\tdisable: boolean;\r\n}\r\nexport const initialState: State = {\r\n\tnumberOfRequested: 0,\r\n\tlastRequestedTime: null,\r\n\tdisable: false\r\n};\r\nexport function reducer(state = initialState, action: ResetPasswordRequestAction): State {\r\n\tswitch (action.type) {\r\n\t\tcase ResetPasswordRequestActionTypes.GET_RESET_PASSWORD_LINK: {\r\n\t\t\treturn {\r\n\t\t\t\t...state\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase ResetPasswordRequestActionTypes.RESET_PASSWORD_LINK_REQUEST_START: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tnumberOfRequested: state.numberOfRequested + 1,\r\n\t\t\t\tlastRequestedTime: Date.now().toString()\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase ResetPasswordRequestActionTypes.RESET_PASSWORD_LINK_REQUEST_SUCCEED: {\r\n\t\t\treturn {\r\n\t\t\t\t...state\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase ResetPasswordRequestActionTypes.DISABLE_GET_LINK: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdisable: true\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase ResetPasswordRequestActionTypes.ENABLE_GET_LINK: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdisable: false\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tdefault: {\r\n\t\t\treturn state;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport var getNumberOfRequeseted = (state: State) => state.numberOfRequested;\r\nexport var getStatus = (state: State) => state.disable;\r\n","import { Action } from '@ngrx/store';\r\nimport { ChangePasswordModel } from '../models';\r\n\r\nexport enum ChangePasswordActionTypes {\r\n        CHANGE_PASSWORD          = '[USER][PASSWORD] CHANGE_PASSWORD',\r\n        PASSWORD_CHANGED_START   = '[USER][PASSWORD] PASSWORD_CHANGED_START',\r\n        PASSWORD_CHANGED_SUCCEED = '[USER][PASSWORD] PASSWORD_CHANGED_SUCCEED',\r\n        PASSWORD_CHANGED_FAILED  = '[USER][PASSWORD] PASSWORD_CHANGED_FAILED'\r\n}\r\n\r\nexport class ChangePassword implements Action {\r\n        readonly type = ChangePasswordActionTypes.CHANGE_PASSWORD;\r\n        constructor(public payload: ChangePasswordModel.Request) { }\r\n}\r\nexport class ChangePasswordStart implements Action {\r\n        readonly type = ChangePasswordActionTypes.PASSWORD_CHANGED_START;\r\n        constructor(public payload: ChangePasswordModel.Request) { }\r\n}\r\nexport class ChangePasswordSucceed implements Action {\r\n        readonly type = ChangePasswordActionTypes.PASSWORD_CHANGED_SUCCEED;\r\n        constructor(public payload: ChangePasswordModel.Response) { }\r\n}\r\nexport class ChangePasswordFailed implements Action {\r\n        readonly type = ChangePasswordActionTypes.PASSWORD_CHANGED_FAILED;\r\n}\r\n\r\nexport type ChangePasswordAction =\r\n            ChangePassword\r\n          | ChangePasswordStart\r\n          | ChangePasswordSucceed\r\n          | ChangePasswordFailed;\r\n","import { responseStatusTypes } from \"@soushians/shared\";\r\nimport { ChangePasswordAction, ChangePasswordActionTypes } from \"./change-password.actions\";\r\n\r\nexport interface State {\r\n\tstatus: responseStatusTypes;\r\n}\r\nexport const initialState: State = {\r\n\tstatus: \"pristine\"\r\n};\r\nexport function reducer(state = initialState, action: ChangePasswordAction): State {\r\n\tswitch (action.type) {\r\n\t\tcase ChangePasswordActionTypes.CHANGE_PASSWORD: {\r\n\t\t\treturn {\r\n\t\t\t\tstatus: \"dirty\"\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase ChangePasswordActionTypes.PASSWORD_CHANGED_START: {\r\n\t\t\treturn {\r\n\t\t\t\tstatus: \"pending\"\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase ChangePasswordActionTypes.PASSWORD_CHANGED_SUCCEED: {\r\n\t\t\treturn {\r\n\t\t\t\tstatus: \"succeed\"\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase ChangePasswordActionTypes.PASSWORD_CHANGED_FAILED: {\r\n\t\t\treturn {\r\n\t\t\t\tstatus: \"failed\"\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tdefault: {\r\n\t\t\treturn initialState;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport var getStatus = (state: State) => state.status;\r\n","import { responseStatusTypes } from '@soushians/shared';\r\nimport { EditProfileAction, EditProfileActionTypes } from './edit-profile.actions';\r\n\r\nexport interface State {\r\n\tstatus: responseStatusTypes;\r\n}\r\nexport const initialState: State = {\r\n\tstatus: 'pristine'\r\n};\r\nexport function reducer(state = initialState, action: EditProfileAction): State {\r\n\tswitch (action.type) {\r\n\t\tcase EditProfileActionTypes.EDIT_PROFILE: {\r\n\t\t\treturn {\r\n\t\t\t\tstatus: 'dirty'\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase EditProfileActionTypes.EDIT_PROFILE_START: {\r\n\t\t\treturn {\r\n\t\t\t\tstatus: 'pending'\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase EditProfileActionTypes.EDIT_PROFILE_SUCCEED: {\r\n\t\t\treturn {\r\n\t\t\t\tstatus: 'succeed'\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase EditProfileActionTypes.EDIT_PROFILE_FAILED: {\r\n\t\t\treturn {\r\n\t\t\t\tstatus: 'failed'\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tdefault: {\r\n\t\t\treturn state;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport var getStatus = (state: State) => state.status;\r\n","import { Action } from '@ngrx/store';\r\n\r\nimport { ProfileViewModel } from '../models';\r\n\r\nexport enum SearchActionTypes {\r\n    SEARCH = '[USER][SEARCH] SEARCH',\r\n    SEARCH_START = '[USER][SEARCH] SEARCH_START',\r\n    SEARCH_SUCCEED = '[USER][SEARCH] SEARCH_SUCCEED',\r\n    SEARCH_FAILED = '[USER][SEARCH] SEARCH_FAILED',\r\n    CLEAR_SEARCHED_USER = '[USER][SEARCH] CLEAR_SEARCHED_USER'\r\n}\r\n\r\nexport class Search implements Action {\r\n    readonly type = SearchActionTypes.SEARCH;\r\n    constructor(public payload: ProfileViewModel.Request) { }\r\n}\r\nexport class SearchStartAction implements Action {\r\n    readonly type = SearchActionTypes.SEARCH_START;\r\n    constructor(public payload: ProfileViewModel.Request) { }\r\n}\r\nexport class SearchSucceed implements Action {\r\n    readonly type = SearchActionTypes.SEARCH_SUCCEED;\r\n    constructor(public payload: ProfileViewModel.Response) { }\r\n}\r\nexport class SearchFailed implements Action {\r\n    readonly type = SearchActionTypes.SEARCH_FAILED;\r\n}\r\nexport class ClearSearchedUser implements Action {\r\n    readonly type = SearchActionTypes.CLEAR_SEARCHED_USER;\r\n}\r\n\r\n\r\nexport type SearchAction =\r\n    Search\r\n    | SearchStartAction\r\n    | SearchSucceed\r\n    | SearchFailed\r\n    | ClearSearchedUser;","import { responseStatusTypes } from \"@soushians/shared\";\r\nimport { ProfileViewModel } from \"../models\";\r\nimport { SearchActionTypes, SearchAction } from \"./search.actions\";\r\n\r\nexport interface State {\r\n\tstatus: responseStatusTypes;\r\n\tdata: ProfileViewModel.Response;\r\n}\r\nexport const initialState: State = {\r\n\tstatus: \"pristine\",\r\n\tdata: {} as ProfileViewModel.Response\r\n};\r\nexport function reducer(state = initialState, action: SearchAction): State {\r\n\tswitch (action.type) {\r\n\t\tcase SearchActionTypes.SEARCH: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tstatus: \"dirty\",\r\n\t\t\t\tdata: new ProfileViewModel.Response()\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase SearchActionTypes.SEARCH_START: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tstatus: \"pending\"\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase SearchActionTypes.SEARCH_SUCCEED: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tstatus: \"succeed\",\r\n\t\t\t\tdata: action.payload\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase SearchActionTypes.SEARCH_FAILED: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tstatus: \"failed\"\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase SearchActionTypes.CLEAR_SEARCHED_USER: {\r\n\t\t\treturn initialState;\r\n\t\t}\r\n\r\n\t\tdefault: {\r\n\t\t\treturn state;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport var getStatus = (state: State) => state.status;\r\nexport var getAccountInfo = (state: State) => state.data;\r\n","import { createSelector, createFeatureSelector, MemoizedSelector } from \"@ngrx/store\";\r\nimport * as userReducer from \"./dashboard/account.reducer\";\r\nimport * as resetPasswordRequestReducer from \"./reset-password/reset-password-request.reducer\";\r\nimport * as changePassword from \"./change-password/change-password.reducer\";\r\nimport * as editProfileReducer from \"./profile-edit/edit-profile.reducer\";\r\nimport * as searchReducer from \"./search-account/search.reducer\";\r\nimport { UserModel } from \"./models\";\r\n\r\nexport interface UserState {\r\n\tuser: userReducer.State;\r\n\tresetPasswordRequest: resetPasswordRequestReducer.State;\r\n\tsearchView: searchReducer.State;\r\n\tchangePassword: changePassword.State;\r\n\teditProfile: editProfileReducer.State;\r\n}\r\n\r\nexport const UserReducers = {\r\n\tuser: userReducer.userReducer,\r\n\tresetPasswordRequest: resetPasswordRequestReducer.reducer,\r\n\tchangePassword: changePassword.reducer,\r\n\tsearchView: searchReducer.reducer,\r\n\teditProfile: editProfileReducer.reducer\r\n};\r\n\r\nexport interface AppState {\r\n\t\"user\": UserState;\r\n}\r\n\r\n//#region selectors\r\n\r\nexport const selectFeatureState = createFeatureSelector<UserState>(\"user\");\r\n\r\nexport const getUserInforamtionStatus = createSelector(selectFeatureState, (state: UserState) => state.user.loaded);\r\nexport const isSignedIn = createSelector(selectFeatureState, (state: UserState) => state.user.loaded);\r\n\r\nexport const selectResetPasswordRequestState = createSelector(\r\n\tselectFeatureState,\r\n\t(state: UserState) => state.resetPasswordRequest\r\n);\r\nexport const getNumberOfRequeseted = createSelector(\r\n\tselectResetPasswordRequestState,\r\n\tresetPasswordRequestReducer.getNumberOfRequeseted\r\n);\r\nexport const getResetPasswordRequestStatus = createSelector(\r\n\tselectResetPasswordRequestState,\r\n\tresetPasswordRequestReducer.getStatus\r\n);\r\n\r\n//#region user\r\nexport const selectUserInformaionState = createSelector(selectFeatureState, (state: UserState) => state.user);\r\nexport const getAccountInfo = createSelector(selectUserInformaionState, userReducer.getAccountInfo);\r\n//#endregion\r\n\r\n//#region search\r\nexport const selectSearchState = createSelector(selectFeatureState, (state: UserState) => state.searchView);\r\nexport const getSearchStatus = createSelector(selectSearchState, searchReducer.getStatus);\r\n//#endregion\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { UserModel } from \"../../models\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport * as appReducer from \"../../user.reducers\";\r\n\r\n@Component({\r\n\tselector: \"user-dashboard-container\",\r\n\ttemplate: `<!-- <router-outlet name=\"links\"></router-outlet> -->\r\n<div fxLayoutAlign=\"center\">\r\n    <router-outlet></router-outlet>\r\n</div>`,\r\n\tstyles: [`#box-left{background:#fff}#box-bottom{background:#2b0033}#box-right{background:#000833;padding-top:10px!important;padding-bottom:10px!important}#box-right div{background:#fff;opacity:.5}#banner:not(.active){height:100%;-webkit-filter:grayscale(100%) brightness(1.5) opacity(.2) blur(2px);filter:grayscale(100%) brightness(1.5) opacity(.2) blur(2px)}#s1{background:#aaa}#s2{background:#bbb}#s3{background:#ccc}.personal-info{background-color:rgba(255,255,255,.5);position:relative;right:10%;width:90%;height:469px}.personal-info h2{color:#00bcd4;font-weight:400;font-size:24px;font-family:iran-sans-light!important}.personal-info h6{font-weight:400;font-size:12px;float:right;width:50%;margin:0;color:#555;border-bottom:2px solid #ececec}.personal-info p{float:right;width:30%;margin:0;font-size:13px;padding-right:30px;border-bottom:2px solid #ececec}.personal-info div{width:100%;height:50px;position:relative;line-height:52px;right:17px}.quick-box{width:100%;height:50px;position:relative;line-height:52px;padding-top:79px}.quick-btn{background-color:#00bcd4;margin:12px 10px;height:100px;text-align:center;line-height:100px;font-size:17px;color:#fff}.banner-section{text-align:center}.info-section{padding:60px 25px 10px;background-color:#f7f7f7;background-image:url(https://www.toptal.com/designers/subtlepatterns/patterns/grey.png)!important;height:1040px;padding-bottom:120px!important}`]\r\n})\r\nexport class DashboardContainerComponent implements OnInit {\r\n\tuser$: Observable<UserModel>;\r\n\t// is_agent : Observable<boolean>;\r\n\tconstructor(private store: Store<appReducer.UserState>) {\r\n\t\tthis.user$ = this.store.select(appReducer.getAccountInfo);\r\n\t\t// this.is_agent = signinService.is_agent();\r\n\t}\r\n\r\n\tngOnInit() {}\r\n}\r\n","import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { UserConfigurationService } from \"../../services/user-configuration.service\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n@Component({\r\n\tselector: \"user-dashboard-links\",\r\n\ttemplate: `<div fxLayout='row' fxLayoutWrap id=\"con\">\r\n    <button fxFlex=\"31\" class='link' mat-raised-button [routerLink]='link.route' *ngFor='let link of links'>\r\n        <div fxLayout='column' fxLayoutAlign='center center'>\r\n            <mat-icon color='primary'>{{link.icon}}</mat-icon>\r\n            <h3 class='title'>{{link.title}}</h3>\r\n            <div class='description'>{{link.description}}</div>\r\n        </div>\r\n    </button>\r\n    <button fxFlex=\"31\" class='link' mat-raised-button [routerLink]='link.route' *ngFor='let link of links$ | async'>\r\n        <div fxLayout='column' fxLayoutAlign='center center'>\r\n            <mat-icon color='primary'>{{link.icon}}</mat-icon>\r\n            <h3 class='title'>{{link.title}}</h3>\r\n            <div class='description'>{{link.description}}</div>\r\n        </div>\r\n    </button>\r\n</div>`,\r\n\tstyles: [`#con [fxflex]{margin-right:25px}:host{width:100%}button mat-icon{font-size:48px;width:48px;height:48px}button.link{padding:25px 15px;margin-bottom:25px}.title{margin-top:0;margin-bottom:5px}.description{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:90%}`]\r\n})\r\nexport class DashboardLinksComponent implements OnInit {\r\n\tlinks: any[];\r\n\tlinks$: Observable<any[]>;\r\n\tconstructor(private userConfigurationService: UserConfigurationService) {\r\n\t\tthis.links$ = this.userConfigurationService.config$.map(data => data.dashboardLinks);\r\n\t\tthis.links = [\r\n\t\t\t{\r\n\t\t\t\ttitle: \"ÙØ´Ø§ÙØ¯Ù Ø­Ø³Ø§Ø¨ Ú©Ø§Ø±ÛØ±Û\",\r\n\t\t\t\troute: \"/user/panel/profile\",\r\n\t\t\t\tdescription: \"ÙÙØ±Ù Ø§ÛÙ¾Ø³ÙÙ ÙØªÙ Ø³Ø§Ø®ØªÚ¯Û Ø¨Ø§ ØªÙÙÛØ¯ Ø³Ø§Ø¯Ú¯Û ÙØ§ÙÙÙÙÙ\",\r\n\t\t\t\ticon: \"credit_card\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\troute: \"/user/panel/password/change\",\r\n\t\t\t\ttitle: \"ØªØºÛÛØ± Ú©ÙÙÙ Ø¹Ø¨ÙØ±\",\r\n\t\t\t\tdescription: \"ÙÙØ±Ù Ø§ÛÙ¾Ø³ÙÙ ÙØªÙ Ø³Ø§Ø®ØªÚ¯Û Ø¨Ø§ ØªÙÙÛØ¯ Ø³Ø§Ø¯Ú¯Û ÙØ§ÙÙÙÙÙ\",\r\n\t\t\t\ticon: \"security\"\r\n\t\t\t}\r\n\t\t];\r\n\t}\r\n\r\n\tngOnInit() {}\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { of } from \"rxjs/observable/of\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { map } from \"rxjs/operators\";\r\n\r\nimport { SignInActionTypes } from \"@soushians/authentication\";\r\n\r\nimport { UserService } from \"../services/user.service\";\r\nimport { GetProfile, GetProfileSucceed } from \"../profile-view/profile-view.actions\";\r\nimport { RefreshUserInfoAction } from \"../dashboard\";\r\nimport { UserModel } from \"../models\";\r\n\r\n@Injectable()\r\nexport class UserEffects {\r\n\tconstructor(private actions$: Actions<any>, private router: Router, private service: UserService) {}\r\n\r\n\t// @Effect()\r\n\t// updateProfileInformation$ = this.actions$.ofType(SignInActionTypes.SIGNIN_SUCCEED).pipe(\r\n\t// \tmap(action => action.payload),\r\n\t// \tmap(user => {\r\n\t// \t\treturn new GetProfileSucceed(user);\r\n\t// \t})\r\n\t// );\r\n\t@Effect()\r\n\tgetAccountInfo$ = this.actions$.ofType(SignInActionTypes.SIGNIN_SUCCEED).pipe(\r\n\t\tmap(() => {\r\n\t\t\treturn new GetProfile();\r\n\t\t})\r\n\t);\r\n\t@Effect()\r\n\tsignout$ = this.actions$\r\n\t\t.ofType(SignInActionTypes.SIGNOUT)\r\n\t\t.pipe(map(() => new RefreshUserInfoAction({} as UserModel)));\r\n}\r\n","import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { responseStatusTypes } from \"@soushians/shared\";\r\n\r\nimport { ProfileViewModel } from \"../../models\";\r\nimport * as FeatureReducer from \"../../user.reducers\";\r\nimport { Search } from \"../search.actions\";\r\n\r\n@Component({\r\n\tselector: \"search\",\r\n\ttemplate: `<mat-card fxFlex=\"450px\" *ngIf=\"(userStatus$ | async) == 'succeed'\">\r\n  <mat-card-header>\r\n    <mat-card-title>\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"space-between\">\r\n        <div fxFlex=\"nogrow\">\r\n          <!-- {{(user | async).LastName }}Ø {{(user | async).FirstName }} -->\r\n        </div>\r\n        <div fxFlex=\"nogrow\">\r\n          <!-- {{(user | async).Email}} -->\r\n        </div>\r\n      </div>\r\n    </mat-card-title>\r\n  </mat-card-header>\r\n  <mat-card-content>\r\n    <div>\r\n      <div class='list-item' fxFlexLayout='row' fxLayoutAlign='center center'>\r\n        <mat-icon fxFlex='nogrow'>local_grocery_store</mat-icon>\r\n        <div fxFlex='15px'></div>\r\n        <p fxFlex='40'>Ø´ÙØ§Ø³Ù</p>\r\n        <!-- <p fxFlex='60' fxLayoutAlign=\"end\">{{(user | async)._id }}</p> -->\r\n      </div>\r\n      <div class='list-item' fxFlexLayout='row' fxLayoutAlign='center center'>\r\n        <mat-icon fxFlex='nogrow'>email</mat-icon>\r\n        <div fxFlex='15px'></div>\r\n        <p fxFlex='40'>Ù¾Ø³Øª Ø§ÙÚ©ØªØ±ÙÙÛÚ©Û</p>\r\n        <!-- <p fxFlex='60' fxLayoutAlign=\"end\">{{(user | async).Email }}</p> -->\r\n      </div>\r\n    </div>\r\n\r\n  </mat-card-content>\r\n</mat-card>`,\r\n\tstyles: [``]\r\n})\r\nexport class SearchComponent implements OnInit {\r\n\tuser: Observable<ProfileViewModel.Response>;\r\n\tuserStatus$: Observable<responseStatusTypes>;\r\n\tformGroup = ProfileViewModel.Request.formGroup;\r\n\tuserDataLoaded$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\tuserNotFound$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\tconstructor(private store: Store<FeatureReducer.AppState>) {\r\n\t\tthis.user = this.store.select(FeatureReducer.getAccountInfo);\r\n\t\tthis.userStatus$ = this.store.select(FeatureReducer.getSearchStatus);\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\tthis.userStatus$.subscribe(value => this.userDataLoaded$.next(!\"pristine|dirty|pending\".includes(value)));\r\n\t}\r\n\tsearch() {\r\n\t\tif (!this.formGroup.valid) return;\r\n\t\tthis.store.dispatch(new Search(this.formGroup.value));\r\n\t}\r\n}\r\n","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { ChangePasswordModel } from \"../../models\";\r\n// import { MdSnackBar } from \"@angular/material\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\n\r\n@Component({\r\n        selector: 'user-change-password',\r\n        template: `<div fxFlex=\"450px\">\r\n  <form [formGroup]=\"formGroup\" (ngSubmit)=\"changePassword()\" fxLayout=\"column\">\r\n    <mat-card>\r\n      <mat-card-content>\r\n        <mat-form-field fxFlexFill>\r\n          <input type=\"password\" matInput placeholder=\"Ú©ÙÙÙ Ø¹Ø¨ÙØ±\" formControlName=\"Password\">\r\n        </mat-form-field>\r\n        <mat-form-field fxFlexFill>\r\n          <input type=\"password\" matInput placeholder=\"ØªÚ©Ø±Ø§Ø± Ú©ÙÙÙ Ø¹Ø¨ÙØ±\" formControlName=\"Confirm\">\r\n        </mat-form-field>\r\n      </mat-card-content>\r\n      <mat-card-actions fxLayoutAlign=\"center center\">\r\n        <button fxFlex=\"nogrow\" type=\"submit\" mat-raised-button color=\"primary\">ØªØºÛÛØ± Ø±ÙØ² Ø¹Ø¨ÙØ±</button>\r\n        <button fxFlex=\"nogrow\" type=\"button\" routerLink=\"/user/panel\" mat-raised-button>Ø¨Ø§Ø²Ú¯Ø´Øª</button>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n  </form>\r\n</div>`,\r\n        styles: [``]\r\n})\r\nexport class ChangePasswordComponent implements OnInit {\r\n        @Input() formGroup: FormGroup;\r\n        @Output() submited = new EventEmitter();\r\n\r\n        ngOnInit() {\r\n        }\r\n\r\n        submit() {\r\n        }\r\n\r\n        constructor() { }\r\n\r\n        changePassword() {\r\n            if (!this.formGroup.valid) return;\r\n            this.submited.emit(this.formGroup.value)\r\n        }\r\n}\r\n","import { Component, OnInit, Output, EventEmitter, Input } from \"@angular/core\";\r\n\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { ChangePasswordModel } from \"../../models\";\r\nimport { ConfigModel } from \"@soushians/config\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\n@Component({\r\n\tselector: \"profile-edit\",\r\n\ttemplate: `<div fxFlex=\"450px\">\r\n\r\n  \r\n  <form [formGroup]=\"formGroup\" (ngSubmit)=\"editProfile()\" fxLayout=\"column\">\r\n    <mat-card>\r\n      <mat-card-content>\r\n          <!-- <ngs-form-view [id]=\"formId\"></ngs-form-view> -->\r\n      </mat-card-content>\r\n      <mat-card-actions fxLayoutAlign=\"center center\">\r\n        <button fxFlex=\"nogrow\" type=\"submit\" mat-raised-button color=\"primary\">ÙÛØ±Ø§ÛØ´</button>\r\n        <button fxFlex=\"nogrow\" type=\"button\" routerLink=\"/user/panel/profile\" mat-raised-button>Ø¨Ø§Ø²Ú¯Ø´Øª</button>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n  </form>\r\n</div>`\r\n})\r\nexport class ProfileEditComponent implements OnInit {\r\n\t@Output() submited = new EventEmitter();\r\n\r\n\t@Input() formId: string;\r\n\t@Input() formGroup: FormGroup;\r\n\t@Input(\"roles\") roles$: Observable<string[]>;\r\n\t@Input() groups: string[];\r\n\tconstructor() {}\r\n\r\n\tngOnInit() {}\r\n\teditProfile() {\r\n\t\tif (!this.formGroup.valid) return;\r\n\t\tthis.submited.emit(this.formGroup.value);\r\n\t}\r\n}\r\n","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { ResetPasswordRequestModel } from \"../../models\";\r\nimport { MatSnackBar } from \"@angular/material\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\n\r\n@Component({\r\n        selector: 'user-reset-password-request',\r\n        template: `<form [formGroup]=\"formGroup\" (ngSubmit)=\"submit()\" fxLayout=\"column\">\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <mat-card-title>\r\n        <h3>Ø¯Ø±Ø®ÙØ§Ø³Øª Ø¨Ø§Ø²ÛØ§Ø¨Û Ø±ÙØ² Ø¹Ø¨ÙØ±</h3>\r\n      </mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <p>Ø¨Ø±Ø§Û Ø¨Ø§Ø²ÛØ§Ø¨Û Ø±ÙØ² Ø¹Ø¨ÙØ± Ø´ÙØ§Ø±Ù ØªÙÙÙ Ø®ÙØ¯ Ø±Ø§ ÙØ§Ø±Ø¯ ÙÙØ§ÛÛØ¯</p>\r\n      <mat-radio-group fxFlexFill formControlName=\"Type\">\r\n        <mat-radio-button value=\"sms\">Ù¾ÛØ§ÙÚ©</mat-radio-button>\r\n        <mat-radio-button value=\"email\">Ù¾Ø³Øª Ø§ÙÚ©ØªØ±ÙÙÛÚ©Û</mat-radio-button>\r\n      </mat-radio-group>\r\n      <mat-form-field fxFlexFill>\r\n        <input matInput placeholder=\"Ø´ÙØ§Ø±Ù ØªÙÙÙ ÙÙØ±Ø§Ù\" formControlName=\"Username\">\r\n      </mat-form-field>\r\n    </mat-card-content>\r\n    <mat-card-actions>\r\n      <!--<button type=\"submit\" [disabled]='(canRequestPin | async) || (maximumResendingHappend$ | async)' (click)=\"submit()\" mat-raised-button color=\"primary\">-->\r\n      <button type=\"submit\" [disabled]='(canRequestPin | async)' (click)=\"submit()\" mat-raised-button color=\"primary\">\r\n        <span *ngIf='!(canRequestPin | async)'>\r\n          Ø¨Ø§Ø²ÛØ§Ø¨Û Ø±ÙØ² Ø¹Ø¨ÙØ±\r\n        </span>\r\n        <!--<div *ngIf='(canRequestPin | async) && !(maximumResendingHappend$ | async)'>\r\n          {{timer$ | async}} Ø«Ø§ÙÛÙ ØªØ§ Ø§ÙÚ©Ø§Ù Ø¯Ø± Ø®ÙØ§Ø³Øª Ø¯ÙØ¨Ø§Ø±Ù Ø¯Ø±ÛØ§ÙØª Ù¾ÛØ§ÙÚ©.\r\n        </div>\r\n        <div *ngIf='(maximumResendingHappend$ | async)'>\r\n          Ø¹Ø¯Ù Ø§ÙÚ©Ø§Ù Ø¯Ø±Ø®ÙØ§Ø³Øª\r\n        </div>-->\r\n      </button>\r\n      <a mat-button routerLink='/auth/signin'>Ø§ÙØµØ±Ø§Ù</a>\r\n    </mat-card-actions>\r\n  </mat-card>\r\n</form>\r\n`,\r\n        styles: [``]\r\n})\r\nexport class ResetPasswordRequestComponent implements OnInit {\r\n        @Output() submitted = new EventEmitter<ResetPasswordRequestModel.Request>();\r\n\r\n        @Input() formGroup: FormGroup;\r\n        @Input() numberOfRequested: Observable<number>;\r\n        @Input() canRequestPin: Observable<boolean>;\r\n        @Input() set pending(isPending: boolean) {\r\n                if (isPending) {\r\n                        this.formGroup.disable();\r\n                }\r\n\r\n                this.formGroup.enable();\r\n        }\r\n\r\n        timer$: Observable<number>;\r\n        maximumResendingHappend$ = new BehaviorSubject(false);\r\n\r\n        constructor(\r\n                public snackBar: MatSnackBar\r\n        ) {\r\n                this.timer$ = Observable.timer(0, 100)\r\n                        .map(i => i + 1)\r\n                        .takeWhile(i => i * 100 <= 3000)\r\n                        .map(i => 3000 - i * 100);\r\n        }\r\n\r\n        ngOnInit() {\r\n                this.numberOfRequested.subscribe(data => {\r\n                        if (data > 2) {\r\n                                this.maximumResendingHappend$.next(true);\r\n                        }\r\n                })\r\n        }\r\n\r\n        submit() {\r\n                if (this.formGroup.valid) {\r\n                        this.submitted.emit(this.formGroup.value);\r\n                        let message = (this.maximumResendingHappend$.getValue())\r\n                                ? 'Ø¹Ø¯Ù Ø§ÙÚ©Ø§Ù ...'\r\n                                : 'Ù¾ÛØ§ÙÚ© Ø¬Ø¯ÛØ¯ Ø¨Ø±Ø§Û Ø´ÙØ§ Ø§Ø±Ø³Ø§Ù Ú¯Ø±Ø¯ÛØ¯.';\r\n                        this.snackBar.open(message, '', {\r\n                                duration: 3000,\r\n                        })\r\n                }\r\n        }\r\n}\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\n\r\nimport * as FeatureReducer from \"../../user.reducers\";\r\nimport { ProfileViewModel } from \"../../models\";\r\nimport { Search } from \"../../search-account\";\r\n\r\n@Component({\r\n\ttemplate: \"<router-outlet></router-outlet>\"\r\n})\r\nexport class FeatureContainerComponent {\r\n\tconstructor(private route: ActivatedRoute, private store: Store<FeatureReducer.AppState>) {\r\n\t\tthis.route.params.subscribe(params => {\r\n\t\t\tlet model = new ProfileViewModel.Request({ Email: params.Email } as ProfileViewModel.Request);\r\n\t\t\tthis.store.dispatch(new Search(model));\r\n\t\t});\r\n\t}\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { of } from \"rxjs/observable/of\";\r\nimport { Observable } from \"rxjs/observable\";\r\n\r\nimport { ProfileViewModel } from \"../models\";\r\nimport { UserService } from \"../services/user.service\";\r\nimport { SearchStartAction, SearchFailed, SearchActionTypes, SearchSucceed } from \"./search.actions\";\r\n\r\n@Injectable()\r\nexport class SearchEffects {\r\n\tconstructor(private actions$: Actions<any>, private userService: UserService) {}\r\n\r\n\t@Effect()\r\n\tcanSearch$ = this.actions$\r\n\t\t.ofType(SearchActionTypes.SEARCH)\r\n\t\t.pipe(map(action => action.payload), map(data => new SearchStartAction(data)));\r\n\r\n\t@Effect()\r\n\tsearch$ = this.actions$.ofType(SearchActionTypes.SEARCH_START).pipe(\r\n\t\tmap(action => action.payload),\r\n\t\tswitchMap((data: ProfileViewModel.Request) => {\r\n\t\t\treturn this.userService.getInfo(data).pipe(\r\n\t\t\t\tmap(res => {\r\n\t\t\t\t\treturn res == null ? new SearchFailed() : new SearchSucceed(res);\r\n\t\t\t\t}),\r\n\t\t\t\tcatchError(() => of(new SearchFailed()))\r\n\t\t\t);\r\n\t\t})\r\n\t);\r\n}\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { ChangePasswordModel } from \"../../models\";\r\n\r\nimport * as FeatureReducer from \"../../user.reducers\";\r\nimport { ChangePassword } from \"../change-password.actions\";\r\n\r\n@Component({\r\n\ttemplate: `<user-change-password\r\n                (submited)='changePassword($event)'\r\n                [formGroup]=\"formGroup\"\r\n              ></user-change-password>`\r\n})\r\nexport class ChangePasswordContainerComponent implements OnInit {\r\n\tformGroup = ChangePasswordModel.Request.formGroup;\r\n\tChangePasswordModel = new ChangePasswordModel.Request();\r\n\tconstructor(private route: ActivatedRoute, private store: Store<FeatureReducer.AppState>) {}\r\n\r\n\tngOnInit() {\r\n\t\tthis.store.select(FeatureReducer.getAccountInfo).subscribe(userInfo => {\r\n\t\t\tif (!userInfo) return;\r\n\t\t\t// TODO:\r\n\t\t\t// this.ChangePasswordModel.Username = userInfo.Username;\r\n\t\t});\r\n\t}\r\n\tchangePassword(event) {\r\n\t\tthis.ChangePasswordModel.Password = this.formGroup.get(\"Password\").value;\r\n\r\n\t\tthis.store.dispatch(new ChangePassword(this.ChangePasswordModel));\r\n\t}\r\n}\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { ConfigModel, getAppConfig } from \"@soushians/config\";\r\n\r\nimport { UserModel, EditProfile_ApiModel } from \"../../models\";\r\nimport * as FeatureReducer from \"../../user.reducers\";\r\nimport { EditProfile } from \"../edit-profile.actions\";\r\nimport { UserConfigurationService } from \"../../services/user-configuration.service\";\r\nimport { UserModuleConfig } from \"../../user.config\";\r\n\r\n@Component({\r\n\tselector: \"profile-edit-contianer\",\r\n\ttemplate: `<profile-edit\r\n                (submited)='updateProfile($event)'\r\n                [formGroup]=\"formGroup\"\r\n                [roles]=\"roles$\"\r\n\t\t\t\t[groups]=\"groups | async\"\r\n\t\t\t\t[formId]=\"(config$|async)?.forms.profile_edit\"\r\n              ></profile-edit>`\r\n})\r\nexport class ProfileEditContainerComponent implements OnInit {\r\n\tuserInforamation$: Observable<UserModel>;\r\n\tformGroup = EditProfile_ApiModel.Request.formGroup;\r\n\troles$: Observable<string[]>;\r\n\tgroups: Observable<string[]>;\r\n\tconfig$: Observable<UserModuleConfig>;\r\n\tconstructor(private store: Store<FeatureReducer.AppState>, private configService: UserConfigurationService) {\r\n\t\tthis.userInforamation$ = this.store.select(FeatureReducer.getAccountInfo);\r\n\t\tthis.roles$ = this.store\r\n\t\t\t.select(getAppConfig)\r\n\t\t\t.filter(config => config != undefined)\r\n\t\t\t.map(config => config.Config.Roles);\r\n\t\t// TODO:\r\n\t\t// this.groups = this.diagramService.getGroups();\r\n\t\tthis.groups = Observable.of([ \"test1\", \"test2\" ]);\r\n\r\n\t\tthis.config$ = this.configService.config$;\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\tthis.userInforamation$.subscribe(userInfo => {\r\n\t\t\tif (userInfo == null) return;\r\n\t\t\tthis.formGroup.patchValue({\r\n\t\t\t\tEmail: userInfo.Email,\r\n\t\t\t\tRoles: userInfo.Roles,\r\n\t\t\t\tGroups: userInfo.Groups\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tupdateProfile(data) {\r\n\t\tthis.store.dispatch(new EditProfile(data));\r\n\t}\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { UserModel } from \"../../models\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\n\r\n@Component({\r\n    selector: 'user-profile',\r\n    template: `<div fxFlex=\"450px\">\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <mat-card-title>Ø§Ø·ÙØ§Ø¹Ø§Øª Ù¾Ø±ÙÙØ§ÛÙ</mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content *ngIf='dataStatus$ | async'>\r\n      <div class='list-item' fxFlexLayout='row'>\r\n        <p fxFlex='40'>Ø§ÛÙÛÙ</p>\r\n        <p fxFlex='60'>{{(information | async).Email}}</p>\r\n      </div>\r\n      <div class='list-item' fxFlexLayout='row'>\r\n        <p fxFlex='40'>roles</p>\r\n        <p fxFlex='60'>{{(information | async).Roles | json}}</p>\r\n      </div>\r\n      <!-- <div class='list-item' fxFlexLayout='row'>\r\n        <p fxFlex='40'>ÙØ§Ù</p>\r\n        <p fxFlex='60'>{{(userInformation | async).FirstName}}</p>\r\n      </div>\r\n      <div class='list-item' fxFlexLayout='row'>\r\n        <p fxFlex='40'>ÙØ§Ù Ø®Ø§ÙÙØ§Ø¯Ú¯Û</p>\r\n        <p fxFlex='60'>{{(userInformation | async).LastName}}</p>\r\n      </div>\r\n      <div class='list-item' fxFlexLayout='row'>\r\n        <p fxFlex='40'>ÙØ§Ù Ú©Ø§Ø±Ø¨Ø±Û</p>\r\n        <p fxFlex='60'>{{(userInformation | async).Username}}</p>\r\n      </div>\r\n      <div class='list-item' fxFlexLayout='row'>\r\n        <p fxFlex='40'>ØªÙÙÙ ÙÙØ±Ø§Ù</p>\r\n        <p fxFlex='60'>{{(userInformation | async).MobileNumber | persianNumber}}</p>\r\n      </div>\r\n      <div class='list-item' fxFlexLayout='row'>\r\n        <p fxFlex='40'>Ø¬ÙØ³ÛØª</p>\r\n        <p fxFlex='60'>{{sex$ | async}}</p>\r\n      </div>\r\n      <div class='list-item' fxFlexLayout='row'>\r\n        <p fxFlex='40'>ØªØ§Ø±ÛØ® ØªÙÙØ¯</p>\r\n        <p fxFlex='60'>{{(userInformation | async).Birthdate | persianDate : false}}</p>\r\n      </div>\r\n      <div class='list-item' fxFlexLayout='row'>\r\n        <p fxFlex='40'>Ø§ÛÙÛÙ</p>\r\n        <p fxFlex='60'>{{(userInformation | async).Email}}</p>\r\n      </div>\r\n      <div class='list-item' fxFlexLayout='row'>\r\n        <p fxFlex='40'>{{(identifierType$ | async)}}</p>\r\n        <p fxFlex='60'>{{(userInformation | async).IdentificationNo | persianNumber}}</p>\r\n      </div>\r\n      <div class='list-item' fxFlexLayout='row'>\r\n        <p fxFlex='40'>ØªØ§Ø±ÛØ® Ø¹Ø¶ÙÛØª</p>\r\n        <p fxFlex='60'>{{(userInformation | async).RegisterDate | persianDate}}</p>\r\n      </div> -->\r\n    </mat-card-content>\r\n\r\n    <mat-card-actions>\r\n      <button id=\"profile-edit-button\" fxFlex mat-raised-button color=\"primary\" routerLink='edit'>ÙÛØ±Ø§ÛØ´</button>\r\n    </mat-card-actions>\r\n  </mat-card>\r\n</div>`,\r\n    styles: [``]\r\n})\r\nexport class ProfileComponent implements OnInit {\r\n    @Input() information: Observable<UserModel>;\r\n    @Input() dataStatus$: BehaviorSubject<boolean>;\r\n\r\n    sex$ = new BehaviorSubject('');\r\n    identifierType$ = new BehaviorSubject('');\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.information.subscribe(data => {\r\n            if (data == null) return;\r\n\r\n        })\r\n    }\r\n\r\n}","import { Component, OnInit } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport * as FeatureReducer from \"../../user.reducers\";\r\nimport { UserModel } from \"../../models\";\r\n\r\n@Component({\r\n\ttemplate: `<user-profile\r\n                [information]=\"data$\"\r\n                [dataStatus$]='dataStatus$'\r\n            ></user-profile>`\r\n})\r\nexport class ProfileContainerComponent implements OnInit {\r\n\tdata$: Observable<UserModel>;\r\n\tdataStatus$: Observable<boolean>;\r\n\r\n\tconstructor(private store: Store<FeatureReducer.AppState>) {\r\n\t\tthis.data$ = this.store.select(FeatureReducer.getAccountInfo);\r\n\t\tthis.dataStatus$ = this.store.select(FeatureReducer.getUserInforamtionStatus);\r\n\t}\r\n\r\n\tngOnInit() {}\r\n}\r\n","import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport {\r\n\tMatExpansionModule,\r\n\tMatSnackBarModule,\r\n\tMatIconModule,\r\n\tMatButtonModule,\r\n\tMatCardModule,\r\n\tMatSelectModule,\r\n\tMatInputModule,\r\n\tMatFormFieldModule,\r\n\tMatTabsModule,\r\n\tMatRadioModule\r\n} from \"@angular/material\";\r\nimport { StoreModule } from \"@ngrx/store\";\r\nimport { StoreDevtoolsModule } from \"@ngrx/store-devtools\";\r\nimport { EffectsModule, mergeEffects } from \"@ngrx/effects\";\r\n\r\nimport { NgsFormModule } from \"@soushians/form\";\r\n\r\nimport { UserModuleConfig, MODULE_CONFIG_TOKEN } from \"./user.config\";\r\nimport { EditProfileEffects } from \"./profile-edit/edit-profile.effects\";\r\nimport { ProfileViewEffects } from \"./profile-view/profile-view.effects\";\r\nimport { UserEffects } from \"./feature/feature.effects\";\r\nimport { SearchComponent } from \"./search-account/search/search.component\";\r\nimport { ChangePasswordComponent } from \"./change-password/change-password/change-password.component\";\r\nimport { ProfileEditComponent } from \"./profile-edit/profile-edit/profile-edit.component\";\r\nimport { DashboardLinksComponent } from \"./dashboard/dashboard-links/dashboard-links.component\";\r\nimport { ResetPasswordRequestComponent } from \"./reset-password/reset-password-request/reset-password-request.component\";\r\nimport { FeatureContainerComponent } from \"./feature/feature-container/feature-container.component\";\r\nimport { ChangePasswordContainerComponent } from \"./change-password/change-password-container/change-password-container.component\";\r\nimport { ProfileEditContainerComponent } from \"./profile-edit/profile-edit-container/profile-edit-container.component\";\r\nimport { DashboardContainerComponent } from \"./dashboard/dashboard-container/dashboard.component\";\r\nimport { ProfileComponent } from \"./profile-view/profile/profile.component\";\r\nimport { ProfileContainerComponent } from \"./profile-view/profile-container/profile-container.component\";\r\nimport { UserReducers } from \"./user.reducers\";\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tHttpClientModule,\r\n\t\tFormsModule,\r\n\t\tRouterModule,\r\n\t\tCommonModule,\r\n\t\tMatExpansionModule,\r\n\t\tMatSnackBarModule,\r\n\t\tMatIconModule,\r\n\t\tMatButtonModule,\r\n\t\tMatCardModule,\r\n\t\tMatSelectModule,\r\n\t\tMatInputModule,\r\n\t\tMatFormFieldModule,\r\n\t\tMatTabsModule,\r\n\t\tFlexLayoutModule,\r\n\t\tMatRadioModule,\r\n\t\tReactiveFormsModule,\r\n\t\tBrowserAnimationsModule,\r\n\t\tNgsFormModule\r\n\t],\r\n\tdeclarations: [\r\n\t\tSearchComponent,\r\n\t\tProfileComponent,\r\n\t\tChangePasswordComponent,\r\n\t\tProfileEditComponent,\r\n\t\tProfileContainerComponent,\r\n\t\tDashboardLinksComponent,\r\n\t\tResetPasswordRequestComponent,\r\n\t\tFeatureContainerComponent,\r\n\t\tDashboardContainerComponent,\r\n\t\tChangePasswordContainerComponent,\r\n\t\tProfileEditContainerComponent\r\n\t],\r\n\texports: []\r\n})\r\nexport class NgsUserModule {\r\n\tstatic forRoot(config?: UserModuleConfig): ModuleWithProviders {\r\n\t\treturn {\r\n\t\t\tngModule: RootNgsUserModule,\r\n\t\t\tproviders: [ { provide: MODULE_CONFIG_TOKEN, useValue: config } ]\r\n\t\t};\r\n\t}\r\n}\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tNgsUserModule,\r\n\t\tStoreModule.forFeature(\"user\", UserReducers),\r\n\t\tEffectsModule.forFeature([\r\n\t\t\t// ResetPasswordRequestEffects,\r\n\t\t\tEditProfileEffects,\r\n\t\t\t// ChangePasswordEffects,\r\n\t\t\tProfileViewEffects,\r\n\t\t\t// SearchEffects,\r\n\t\t\tUserEffects\r\n\t\t])\r\n\t]\r\n})\r\nexport class RootNgsUserModule {}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Headers, RequestOptions } from \"@angular/http\";\r\nimport { HttpHeaders, HttpClient } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs/Rx\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport * as FeatureReducer from \"../user.reducers\";\r\n\r\nimport { ResetPasswordModel, ResetPasswordRequestModel, ChangePasswordModel } from \"../models\";\r\nimport { UserConfigurationService } from \"./user-configuration.service\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class PasswordService {\r\n\tnumberOfRequeseted$: Observable<number>;\r\n\r\n\tconstructor(\r\n\t\tprivate http: HttpClient,\r\n\t\tprivate store: Store<any>,\r\n\t\tprivate userConfigurationService: UserConfigurationService\r\n\t) {\r\n\t\tthis.numberOfRequeseted$ = this.store.select(FeatureReducer.getNumberOfRequeseted);\r\n\t}\r\n\r\n\tisValidResetPasswordRequest(): Observable<boolean> {\r\n\t\treturn this.numberOfRequeseted$\r\n\t\t\t.take(1)\r\n\t\t\t.switchMap(count => (count < 3 ? Observable.of(true) : Observable.of(false)));\r\n\t}\r\n\r\n\tisValidResetPasswordReset(data: ResetPasswordModel.Request): Observable<any> {\r\n\t\tvar model = new ResetPasswordModel.Request(data);\r\n\t\tlet { Token } = model;\r\n\t\treturn this.http\r\n\t\t\t.get(`http://wifi.shatel.ir/api/v1/reset/tokens/${Token}`, { withCredentials: true })\r\n\t\t\t.map(response => response);\r\n\t}\r\n\r\n\trequestResetPasswordLink(data: ResetPasswordRequestModel.Request): Observable<any> {\r\n\t\tvar model = new ResetPasswordRequestModel.Request(data);\r\n\r\n\t\t// TODO:\r\n\t\t// return this.http.post(this.userConfigurationService.config.endpoints.resetPasswordRequest(model), model.getRequestBody(), { withCredentials: true })\r\n\t\treturn this.http\r\n\t\t\t.post(this.userConfigurationService.config.endpoints.editProfile, model.getRequestBody(), {\r\n\t\t\t\twithCredentials: true\r\n\t\t\t})\r\n\t\t\t.map(response => response);\r\n\t}\r\n\r\n\tchangePassword(data: ChangePasswordModel.Request): Observable<any> {\r\n\t\tvar model = new ChangePasswordModel.Request(data);\r\n\t\treturn this.http\r\n\t\t\t.patch(\"this.userConfigurationService.config.endpoints.changePassword(model)\", model.getRequestBody(), {\r\n\t\t\t\twithCredentials: true\r\n\t\t\t})\r\n\t\t\t.map(response => response);\r\n\t}\r\n\r\n\tresetPassword(data: ResetPasswordModel.Request): Observable<any> {\r\n\t\tvar model = new ResetPasswordModel.Request(data);\r\n\t\tlet { Token } = model;\r\n\t\treturn this.http\r\n\t\t\t.patch(`http://wifi.shatel.ir/api/v1/reset/tokens/${Token}`, model.getRequestBody(), {\r\n\t\t\t\twithCredentials: true\r\n\t\t\t})\r\n\t\t\t.map(response => response);\r\n\t}\r\n}\r\n\r\nexport var PasswordServiceStub = {};\r\n","import { ModuleWithProviders } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\nimport { DashboardContainerComponent, DashboardLinksComponent } from \"./dashboard\";\r\nimport { ProfileContainerComponent } from \"./profile-view\";\r\nimport { ProfileEditContainerComponent } from \"./profile-edit\";\r\nimport { ChangePasswordContainerComponent } from \"./change-password\";\r\nimport { SearchComponent } from \"./search-account\";\r\nimport { FeatureContainerComponent } from \"./feature\";\r\n\r\nexport const routes: Routes = [\r\n\t{\r\n\t\tpath: \"user/panel\",\r\n\t\tcomponent: DashboardContainerComponent,\r\n\t\tchildren: [\r\n\t\t\t{\r\n\t\t\t\tpath: \"\",\r\n\t\t\t\tcomponent: DashboardLinksComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: \"profile\",\r\n\t\t\t\tcomponent: ProfileContainerComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: \"profile/edit\",\r\n\t\t\t\tcomponent: ProfileEditContainerComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: \"password/change\",\r\n\t\t\t\tcomponent: ChangePasswordContainerComponent\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\tpath: \"admin/user\",\r\n\t\tchildren: [\r\n\t\t\t{ path: \"managment\", component: SearchComponent },\r\n\t\t\t{\r\n\t\t\t\tpath: \":Email\",\r\n\t\t\t\tcomponent: FeatureContainerComponent,\r\n\t\t\t\tchildren: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpath: \"profile-edit\",\r\n\t\t\t\t\t\tcomponent: ProfileEditContainerComponent\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpath: \"change-password\",\r\n\t\t\t\t\t\tcomponent: ChangePasswordContainerComponent\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n];\r\n\r\nexport const NgsUserRoutingModule: ModuleWithProviders = RouterModule.forChild(routes);\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { of } from \"rxjs/observable/of\";\r\nimport { map, switchMap } from \"rxjs/operators\";\r\n\r\nimport { ChangePasswordModel } from \"../models\";\r\n\r\nimport { PasswordService } from \"../services/password.service\";\r\nimport {\r\n\tChangePasswordActionTypes,\r\n\tChangePasswordStart,\r\n\tChangePasswordSucceed,\r\n\tChangePasswordFailed\r\n} from \"./change-password.actions\";\r\n\r\n@Injectable()\r\nexport class ChangePasswordEffects {\r\n\tconstructor(private actions$: Actions<any>, private router: Router, private passwordService: PasswordService) {}\r\n\r\n\t@Effect()\r\n\tChangePasswordRequest$ = this.actions$\r\n\t\t.ofType(ChangePasswordActionTypes.CHANGE_PASSWORD)\r\n\t\t.pipe(map(action => action.payload), map(data => new ChangePasswordStart(data)));\r\n\r\n\t@Effect()\r\n\tRequestChangePasswordLink$ = this.actions$.ofType(ChangePasswordActionTypes.PASSWORD_CHANGED_START).pipe(\r\n\t\tmap(action => action.payload),\r\n\t\tswitchMap((data: ChangePasswordModel.Request) => {\r\n\t\t\treturn this.passwordService\r\n\t\t\t\t.changePassword(data)\r\n\t\t\t\t.map(res => new ChangePasswordSucceed(res))\r\n\t\t\t\t.catch(() => Observable.of(new ChangePasswordFailed()));\r\n\t\t})\r\n\t);\r\n\r\n\t//@Effect()\r\n\t//    ResetPassword$ = this.actions$\r\n\t//        .ofType(ResetPasswordActionTypes.RESET_PASSWORD)\r\n\t//        .map(toPayload)\r\n\t//        .map((data) => new ResetPasswordStart(data));\r\n\t//\r\n\t//    @Effect()\r\n\t//    ResetPasswordLink$ = this.actions$\r\n\t//        .ofType(ResetPasswordActionTypes.RESET_PASSWORD_START)\r\n\t//        .map(toPayload)\r\n\t//        .switchMap((data: ResetPasswordModel.Request) => {\r\n\t//            return this.passwordService.resetPassword(data)\r\n\t//                .map(() => new ResetPasswordSucceed())\r\n\t//                .catch(() => Observable.of(new ResetPasswordFailed()))\r\n\t//        });\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { AppState } from \"../user.reducers\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { getAccountInfo } from \"../user.reducers\";\r\nimport { UserConfigurationService } from \"./user-configuration.service\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class UserFacadeService {\r\n\tconstructor(private store: Store<AppState>, private configService: UserConfigurationService) {}\r\n\tgetDisplayName(): Observable<string> {\r\n\t\treturn this.configService.config$\r\n\t\t\t.map(config => config.mapUserDisplayName)\r\n\t\t\t.switchMap(mapper => this.store.select(getAccountInfo).let(mapper));\r\n\t}\r\n}\r\n"]}