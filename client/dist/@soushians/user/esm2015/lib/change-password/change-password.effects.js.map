{
  "version": 3,
  "file": "change-password.effects.js",
  "sources": [
    "ng://@soushians/user/projects/soushians/user/src/lib/change-password/change-password.effects.ts"
  ],
  "sourcesContent": [
    "import { Injectable } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { of } from \"rxjs/observable/of\";\r\nimport { map, switchMap } from \"rxjs/operators\";\r\n\r\nimport { ChangePasswordModel } from \"../models\";\r\n\r\nimport { PasswordService } from \"../services/password.service\";\r\nimport {\r\n\tChangePasswordActionTypes,\r\n\tChangePasswordStart,\r\n\tChangePasswordSucceed,\r\n\tChangePasswordFailed\r\n} from \"./change-password.actions\";\r\n\r\n@Injectable()\r\nexport class ChangePasswordEffects {\r\n\tconstructor(private actions$: Actions<any>, private router: Router, private passwordService: PasswordService) {}\r\n\r\n\t@Effect()\r\n\tChangePasswordRequest$ = this.actions$\r\n\t\t.ofType(ChangePasswordActionTypes.CHANGE_PASSWORD)\r\n\t\t.pipe(map(action => action.payload), map(data => new ChangePasswordStart(data)));\r\n\r\n\t@Effect()\r\n\tRequestChangePasswordLink$ = this.actions$.ofType(ChangePasswordActionTypes.PASSWORD_CHANGED_START).pipe(\r\n\t\tmap(action => action.payload),\r\n\t\tswitchMap((data: ChangePasswordModel.Request) => {\r\n\t\t\treturn this.passwordService\r\n\t\t\t\t.changePassword(data)\r\n\t\t\t\t.map(res => new ChangePasswordSucceed(res))\r\n\t\t\t\t.catch(() => Observable.of(new ChangePasswordFailed()));\r\n\t\t})\r\n\t);\r\n\r\n\t//@Effect()\r\n\t//    ResetPassword$ = this.actions$\r\n\t//        .ofType(ResetPasswordActionTypes.RESET_PASSWORD)\r\n\t//        .map(toPayload)\r\n\t//        .map((data) => new ResetPasswordStart(data));\r\n\t//\r\n\t//    @Effect()\r\n\t//    ResetPasswordLink$ = this.actions$\r\n\t//        .ofType(ResetPasswordActionTypes.RESET_PASSWORD_START)\r\n\t//        .map(toPayload)\r\n\t//        .switchMap((data: ResetPasswordModel.Request) => {\r\n\t//            return this.passwordService.resetPassword(data)\r\n\t//                .map(() => new ResetPasswordSucceed())\r\n\t//                .catch(() => Observable.of(new ResetPasswordFailed()))\r\n\t//        });\r\n}\r\n"
  ],
  "names": [],
  "mappings": ";;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AACzC,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAE7C,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAGhD,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAIhD,OAAO,EAAE,eAAe,EAAE,MAAM,8BAA8B,CAAC;AAC/D,OAAO,EACN,yBAAyB,EACzB,mBAAmB,EACnB,qBAAqB,EACrB,oBAAoB,EACpB,MAAM,2BAA2B,CAAC;AAGnC,MAAM;;;;;;IACL,YAAoB,QAAsB,EAAU,MAAc,EAAU,eAAgC;QAAxF,aAAQ,GAAR,QAAQ,CAAc;QAAU,WAAM,GAAN,MAAM,CAAQ;QAAU,oBAAe,GAAf,eAAe,CAAiB;sCAGnF,IAAI,CAAC,QAAQ;aACpC,MAAM,CAAC,yBAAyB,CAAC,eAAe,CAAC;aACjD,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC;0CAGpD,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,yBAAyB,CAAC,sBAAsB,CAAC,CAAC,IAAI,CACvG,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,EAC7B,SAAS,CAAC,CAAC,IAAiC,EAAE,EAAE;YAC/C,MAAM,CAAC,IAAI,CAAC,eAAe;iBACzB,cAAc,CAAC,IAAI,CAAC;iBACpB,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,qBAAqB,CAAC,GAAG,CAAC,CAAC;iBAC1C,KAAK,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,oBAAoB,EAAE,CAAC,CAAC,CAAC;SACzD,CAAC,CACF;KAhB+G;;;YAFhH,UAAU;;;;YAfF,OAAO;YAHP,MAAM;YAUN,eAAe;;;IAYtB,MAAM,EAAE;;;;IAKR,MAAM,EAAE"
}
