{"version":3,"file":"soushians-page.js.map","sources":["ng://@soushians/page/lib/page.config.ts","ng://@soushians/page/lib/services/page-configuration.service.ts","ng://@soushians/page/lib/services/api/get-pages/get-pages.model.ts","ng://@soushians/page/lib/services/api/get-pages/get-pages.actions.ts","ng://@soushians/page/lib/services/api/get-page/get-page.model.ts","ng://@soushians/page/lib/services/api/get-page/get-page.actions.ts","ng://@soushians/page/lib/services/api/delete-page/delete-page.model.ts","ng://@soushians/page/lib/services/api/delete-page/delete-page.actions.ts","ng://@soushians/page/lib/models/page.model.ts","ng://@soushians/page/lib/services/api/upsert-page/upsert-page.model.ts","ng://@soushians/page/lib/services/api/upsert-page/upsert-page.actions.ts","ng://@soushians/page/lib/services/page.service.ts","ng://@soushians/page/lib/view/page-view.component.ts","ng://@soushians/page/lib/root/root.component.ts","ng://@soushians/page/lib/upsert/upsert.component.ts","ng://@soushians/page/lib/mangement/page-management.component.ts","ng://@soushians/page/lib/page-routing.module.ts","ng://@soushians/page/lib/root/pages.actions.ts","ng://@soushians/page/lib/root/pages.effects.ts","ng://@soushians/page/lib/root/pages.reducers.ts","ng://@soushians/page/lib/page.reducer.ts","ng://@soushians/page/lib/services/api/get-page/get-page.effects.ts","ng://@soushians/page/lib/services/api/get-pages/get-pages.effects.ts","ng://@soushians/page/lib/services/api/upsert-page/upsert-page.effects.ts","ng://@soushians/page/lib/services/api/delete-page/delete-page.effects.ts","ng://@soushians/page/lib/page.module.ts"],"sourcesContent":["import { InjectionToken } from \"@angular/core\";\r\n\r\nexport interface PageModuleConfig {\r\n\tenv?: {\r\n\t\tproduction: boolean;\r\n\t\tfrontend_server: string;\r\n\t};\r\n\tendpoints?: {\r\n\t\tget: string;\r\n\t\tdelete: string;\r\n\t\tfind: string;\r\n\t\tupsert: string;\r\n\t};\r\n}\r\nexport const MODULE_DEFAULT_CONFIG: PageModuleConfig = {\r\n\tenv: {\r\n\t\tproduction: false,\r\n\t\tfrontend_server: \"frontend_server/did/not/set\"\r\n\t},\r\n\tendpoints: {\r\n\t\tupsert: \"/api/page\",\r\n\t\tdelete: \"/api/page/${model._id}\",\r\n\t\tfind: \"/api/page\",\r\n\t\tget: \"/api/page/${model.name}\"\r\n\t}\r\n};\r\nexport const MODULE_CONFIG_TOKEN = new InjectionToken<PageModuleConfig>(\"PageModuleConfig\");\r\n","import { BehaviorSubject } from \"rxjs\";\r\nimport { Inject, Injectable } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { PageModuleConfig, MODULE_DEFAULT_CONFIG, MODULE_CONFIG_TOKEN } from \"../page.config\";\r\nimport { AppState } from \"../page.reducer\";\r\n\r\n@Injectable()\r\nexport class PageConfigurationService {\r\n\tprivate _config: PageModuleConfig;\r\n\tget config() {\r\n\t\treturn this._config;\r\n\t}\r\n\tconfig$ = new BehaviorSubject(MODULE_DEFAULT_CONFIG);\r\n\tconstructor(@Inject(MODULE_CONFIG_TOKEN) configFile, private store: Store<AppState>) {\r\n\t\tthis._config = Object.assign({}, MODULE_DEFAULT_CONFIG, configFile);\r\n\t\tthis.config$.next(this._config);\r\n\t\t// this.store.select(getPageModuleConfig).subscribe((pageConfig) => {\r\n\t\t// \tif (!pageConfig) {\r\n\t\t// \t\treturn;\r\n\t\t// \t}\r\n\t\t// \tthis._config = Object.assign({}, this._config, pageConfig.Config);\r\n\t\t// \tthis.config$.next(this._config);\r\n\t\t// });\r\n\t}\r\n}\r\n","import { PageModel } from \"../../../models/page.model\";\r\n\r\nexport namespace GetPagesApiModel {\r\n\texport class Request {\r\n\t\tconstructor(initValue = {}) {\r\n\t\t\tObject.keys(initValue).forEach((key) => (this[key] = initValue[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {};\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: PageModel[];\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { GetPagesApiModel } from \"./get-pages.model\";\r\nimport { PageModel } from \"../../../models/page.model\";\r\n\r\nexport const enum GET_PAGES_ACTION_TYPES {\r\n\tSTART = \"[GET_PAGES][API][GetPages] start\",\r\n\tSUCCEED = \"[GET_PAGES][API][GetPages] succeed\",\r\n\tFAILED = \"[GET_PAGES][API][GetPages] failed\"\r\n}\r\n\r\nexport class GetPagesStartAction implements Action {\r\n\treadonly type = GET_PAGES_ACTION_TYPES.START;\r\n}\r\nexport class GetPagesSucceedAction implements Action {\r\n\treadonly type = GET_PAGES_ACTION_TYPES.SUCCEED;\r\n\tconstructor(public payload: PageModel[]) {}\r\n}\r\nexport class GetPagesFailedAction implements Action {\r\n\treadonly type = GET_PAGES_ACTION_TYPES.FAILED;\r\n\tconstructor(public payload: any) {}\r\n}\r\n\r\nexport type GetPagesActions = GetPagesStartAction | GetPagesSucceedAction | GetPagesFailedAction;\r\n","import { PageModel } from \"../../../models/page.model\";\r\n\r\nexport namespace GetPageApiModel {\r\n\texport class Request {\r\n\t\tname: string;\r\n\t\tconstructor(initValue = {}) {\r\n\t\t\tObject.keys(initValue).forEach((key) => (this[key] = initValue[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {};\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: PageModel;\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { GetPageApiModel } from \"./get-page.model\";\r\nimport { PageModel } from \"../../../models/page.model\";\r\n\r\nexport const enum GET_PAGE_ACTION_TYPES {\r\n\tSTART = \"[PAGE][API][GetPage] start\",\r\n\tSUCCEED = \"[PAGE][API][GetPage] succeed\",\r\n\tFAILED = \"[PAGE][API][GetPage] failed\"\r\n}\r\n\r\nexport class GetPageStartAction implements Action {\r\n\treadonly type = GET_PAGE_ACTION_TYPES.START;\r\n\tconstructor(public payload: string) {}\r\n}\r\nexport class GetPageSucceedAction implements Action {\r\n\treadonly type = GET_PAGE_ACTION_TYPES.SUCCEED;\r\n\tconstructor(public payload: PageModel) {}\r\n}\r\nexport class GetPageFailedAction implements Action {\r\n\treadonly type = GET_PAGE_ACTION_TYPES.FAILED;\r\n\tconstructor(public payload: any) {}\r\n}\r\n\r\nexport type GetPageActions = GetPageStartAction | GetPageSucceedAction | GetPageFailedAction;\r\n","import { PageModel } from \"../../../models/page.model\";\r\n\r\nexport namespace DeletePageApiModel {\r\n\texport class Request {\r\n\t\tconstructor(initValue = {}) {\r\n\t\t\tObject.keys(initValue).forEach((key) => (this[key] = initValue[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {};\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: PageModel;\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { PageModel } from \"../../../models/page.model\";\r\n\r\nexport const enum DELETE_PAGE_ACTION_TYPES {\r\n\tSTART = \"[PAGE][API][DELETE] start\",\r\n\tSUCCEED = \"[PAGE][API][DELETE] succeed\",\r\n\tFAILED = \"[PAGE][API][DELETE] failed\"\r\n}\r\n\r\nexport class DeletePageStartAction implements Action {\r\n\treadonly type = DELETE_PAGE_ACTION_TYPES.START;\r\n\tconstructor(public payload: string) {}\r\n}\r\nexport class DeletePageSucceedAction implements Action {\r\n\treadonly type = DELETE_PAGE_ACTION_TYPES.SUCCEED;\r\n\tconstructor(public payload: PageModel) {}\r\n}\r\nexport class DeletePageFailedAction implements Action {\r\n\treadonly type = DELETE_PAGE_ACTION_TYPES.FAILED;\r\n\tconstructor(public payload: any) {}\r\n}\r\n\r\nexport type DeletePageActions = DeletePageStartAction | DeletePageSucceedAction | DeletePageFailedAction;\r\n","export class PageModel {\r\n\t_id: string;\r\n\tname: string;\r\n\tgrid: string;\r\n\tconstructor({ _id, name, grid }: { _id?: string; name?: string; grid?: string } = {}) {\r\n\t\tthis._id = _id;\r\n\t\tthis.name = name || \"\";\r\n\t\tthis.grid = grid || \"\";\r\n\t}\r\n}\r\n","import { PageModel } from \"../../../models/page.model\";\r\n\r\nexport namespace UpsertPageApiModel {\r\n\texport class Request {\r\n\t\tpage: PageModel;\r\n\t\tconstructor(page = {}) {\r\n\t\t\tdebugger;\r\n\t\t\tthis.page = new PageModel(page);\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn this.page;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: PageModel;\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { UpsertPageApiModel } from \"./upsert-page.model\";\r\nimport { PageModel } from \"../../../models/page.model\";\r\n\r\nexport const enum UPSERT_PAGE_ACTION_TYPES {\r\n\tSTART = \"[UPSERT_PAGE][API][UpsertPage] start\",\r\n\tSUCCEED = \"[UPSERT_PAGE][API][UpsertPage] succeed\",\r\n\tFAILED = \"[UPSERT_PAGE][API][UpsertPage] failed\"\r\n}\r\n\r\nexport class UpsertPageStartAction implements Action {\r\n\treadonly type = UPSERT_PAGE_ACTION_TYPES.START;\r\n\tconstructor(public payload: PageModel) {}\r\n}\r\nexport class UpsertPageSucceedAction implements Action {\r\n\treadonly type = UPSERT_PAGE_ACTION_TYPES.SUCCEED;\r\n\tconstructor(public payload: PageModel) {}\r\n}\r\nexport class UpsertPageFailedAction implements Action {\r\n\treadonly type = UPSERT_PAGE_ACTION_TYPES.FAILED;\r\n\tconstructor(public payload: any) {}\r\n}\r\n\r\nexport type UpsertPageActions = UpsertPageStartAction | UpsertPageSucceedAction | UpsertPageFailedAction;\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable, BehaviorSubject } from \"rxjs\";\r\nimport { map, filter, tap, take, switchMap, combineLatest } from \"rxjs/operators\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\n\r\nimport { UserFacadeService } from \"@soushians/user\";\r\n\r\nimport { AppState } from \"../page.reducer\";\r\nimport { PageConfigurationService } from \"./page-configuration.service\";\r\nimport { PageModel } from \"../models/page.model\";\r\nimport { stringTemplate } from \"@soushians/shared\";\r\nimport { GetPagesApiModel, GetPageStartAction, UpsertPageApiModel, DeletePageApiModel } from \"./api\";\r\nimport { Location } from \"@angular/common\";\r\n\r\n@Injectable()\r\nexport class PageService {\r\n\tuserId$: Observable<string>;\r\n\tconstructor(\r\n\t\tprivate http: HttpClient,\r\n\t\tprivate store: Store<AppState>,\r\n\t\tprivate configurationService: PageConfigurationService,\r\n\t\tprivate _location: Location,\r\n\t\tprivate userFacadeService: UserFacadeService\r\n\t) {\r\n\t\tthis.userId$ = this.userFacadeService.getDisplayName().pipe(filter(i => i != undefined));\r\n\t}\r\n\r\n\tget(name: string): Observable<PageModel> {\r\n\t\treturn this.configurationService.config$.pipe(\r\n\t\t\tfilter(config => config.endpoints.get !== \"\"),\r\n\t\t\ttake(1),\r\n\t\t\tcombineLatest(this.userId$),\r\n\t\t\tswitchMap(([ config, userId ]) =>\r\n\t\t\t\tthis.http.get(stringTemplate(config.env.frontend_server + config.endpoints.get, { name }))\r\n\t\t\t),\r\n\t\t\tmap((response: UpsertPageApiModel.Response) => response.Result)\r\n\t\t);\r\n\t}\r\n\r\n\tdelete(_id: string): Observable<PageModel> {\r\n\t\treturn this.configurationService.config$.pipe(\r\n\t\t\tfilter(config => config.endpoints.delete !== \"\"),\r\n\t\t\ttake(1),\r\n\t\t\tswitchMap(config =>\r\n\t\t\t\tthis.http.delete(stringTemplate(config.env.frontend_server + config.endpoints.delete, { _id }))\r\n\t\t\t),\r\n\t\t\tmap((response: DeletePageApiModel.Response) => response.Result)\r\n\t\t);\r\n\t}\r\n\r\n\tgetPages(): Observable<PageModel[]> {\r\n\t\treturn this.configurationService.config$.pipe(\r\n\t\t\tfilter(config => config.endpoints.find != \"\"),\r\n\t\t\tcombineLatest(this.userId$),\r\n\t\t\tswitchMap(([ config, userId ]) => this.http.get(config.env.frontend_server + config.endpoints.find)),\r\n\t\t\tmap((response: GetPagesApiModel.Response) => response.Result)\r\n\t\t);\r\n\t}\r\n\tupsert<T>(page: UpsertPageApiModel.Request): Observable<PageModel> {\r\n\t\tconst model = new UpsertPageApiModel.Request(page);\r\n\t\treturn this.configurationService.config$.pipe(\r\n\t\t\tfilter(config => config.endpoints.upsert != \"\"),\r\n\t\t\ttake(1),\r\n\t\t\tcombineLatest(this.userId$),\r\n\t\t\tswitchMap(([ config, userId ]) =>\r\n\t\t\t\tthis.http.post(config.env.frontend_server + config.endpoints.upsert, model.getRequestBody())\r\n\t\t\t),\r\n\t\t\tmap((response: UpsertPageApiModel.Response) => response.Result),\r\n\t\t\ttap(() => this._location.back())\r\n\t\t);\r\n\t}\r\n\t// delete(name: string) {\r\n\t// \treturn this.configurationService.config$\r\n\t// \t\t.filter((config) => config.endpoints.deleteForm != \"\")\r\n\t// \t\t.switchMap((config) => this.http.get(config.endpoints.deleteForm));\r\n\t// }\r\n\tselectByName(name: string): Observable<PageModel> {\r\n\t\tconst subject = new BehaviorSubject<PageModel>(undefined);\r\n\t\tthis.store\r\n\t\t\t.select(state => state.pages.db.data)\r\n\t\t\t.pipe(\r\n\t\t\t\tfilter(pages => pages != null),\r\n\t\t\t\tmap(pages => pages.find(page => page.name == name)),\r\n\t\t\t\ttap(page => {\r\n\t\t\t\t\tif (page == null) {\r\n\t\t\t\t\t\tdebugger;\r\n\t\t\t\t\t\tthis.store.dispatch(new GetPageStartAction(name));\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t\t.subscribe(page => subject.next(page));\r\n\t\treturn subject.asObservable();\r\n\t}\r\n}\r\n","import {\r\n\tComponent,\r\n\tOnInit,\r\n\tComponentRef,\r\n\tComponentFactoryResolver,\r\n\tViewContainerRef,\r\n\tDirective,\r\n\tInput\r\n} from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { pluck, filter, switchMap, map, startWith } from \"rxjs/operators\";\r\n\r\nimport { PageModel } from \"../models/page.model\";\r\nimport { AppState } from \"../page.reducer\";\r\nimport { PageService } from \"../services/page.service\";\r\nimport { PageConfigurationService } from \"../services/page-configuration.service\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\n\r\n@Component({\r\n\ttemplateUrl: \"./page-view.component.html\"\r\n})\r\nexport class PageViewComponent implements OnInit {\r\n\tpage$: Observable<PageModel>;\r\n\tconstructor(\r\n\t\tpublic store: Store<AppState>,\r\n\t\tprivate service: PageService,\r\n\t\tprivate route: ActivatedRoute,\r\n\t\tprivate resolver: ComponentFactoryResolver,\r\n\t\tprivate container: ViewContainerRef\r\n\t) {}\r\n\tngOnInit() {\r\n\t\tthis._selectPage();\r\n\t}\r\n\t_selectPage() {\r\n\t\tthis.page$ = this.route.params.pipe(\r\n\t\t\tpluck(\"name\"),\r\n\t\t\tswitchMap((name: string) => this.service.selectByName(name)),\r\n\t\t\tfilter((page) => page != undefined)\r\n\t\t);\r\n\t}\r\n}\r\n","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n\tselector: \"page-root\",\r\n\ttemplate: \"<router-outlet></router-outlet>\"\r\n})\r\nexport class RootComponent {}\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { FormGroup, FormControl } from \"@angular/forms\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { Observable } from \"rxjs\";\r\n\r\nimport { UpsertPageStartAction } from \"../services/api\";\r\nimport { AppState } from \"../page.reducer\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { PageModel } from \"../models/page.model\";\r\nimport { pluck, switchMap, filter } from \"rxjs/operators\";\r\nimport { PageService } from \"../services/page.service\";\r\n\r\n@Component({\r\n\ttemplateUrl: \"./upsert.component.html\"\r\n})\r\nexport class UpsertComponent implements OnInit {\r\n\tformGroup: FormGroup;\r\n\tpage$: Observable<PageModel>;\r\n\tconstructor(private store: Store<AppState>, private route: ActivatedRoute, private service: PageService) {\r\n\t\tthis._init_formgroup();\r\n\t}\r\n\r\n\t/**\r\n\t * view methods\r\n\t */\r\n\tupsert() {\r\n\t\tdebugger;\r\n\t\tconst page = {\r\n\t\t\t...this.formGroup.value\r\n\t\t};\r\n\t\tthis.store.dispatch(new UpsertPageStartAction(page));\r\n\t}\r\n\tngOnInit() {\r\n\t\tthis._select_page();\r\n\t\tthis._update_formgroup_base_on_page();\r\n\t}\r\n\r\n\t/**\r\n\t * private methods\r\n\t */\r\n\t_init_formgroup() {\r\n\t\tthis.formGroup = new FormGroup({\r\n\t\t\t_id: new FormControl(\"\"),\r\n\t\t\tname: new FormControl(\"\"),\r\n\t\t\tgrid: new FormControl(\"\")\r\n\t\t});\r\n\t}\r\n\r\n\t_select_page() {\r\n\t\tthis.page$ = this.route.params.pipe(\r\n\t\t\tpluck(\"name\"),\r\n\t\t\tfilter((name) => name != undefined),\r\n\t\t\tswitchMap((name: string) => this.service.selectByName(name)),\r\n\t\t\tfilter((page) => page != undefined)\r\n\t\t);\r\n\t}\r\n\t_update_formgroup_base_on_page() {\r\n\t\tthis.page$.subscribe((page) => {\r\n\t\t\tthis.formGroup.patchValue(page);\r\n\t\t});\r\n\t}\r\n}\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { PageModel } from \"../models/page.model\";\r\nimport { AppState } from \"../page.reducer\";\r\nimport { GetPagesStartAction } from \"../services/api/get-pages/get-pages.actions\";\r\nimport { DeletePageStartAction } from \"../services/api\";\r\n\r\n@Component({\r\n\ttemplateUrl: \"page-management.component.html\",\r\n\tstyleUrls: [\"page-management.component.scss\"]\r\n})\r\nexport class PagesManagementComponent implements OnInit {\r\n\tpages$: Observable<PageModel[]>;\r\n\tconstructor(public store: Store<AppState>) {\r\n\t\tthis.pages$ = this.store.select((state) => state.pages.db.data);\r\n\t}\r\n\tngOnInit() {\r\n\t\tthis.store.dispatch(new GetPagesStartAction());\r\n\t}\r\n\t/**\r\n\t * view methods\r\n\t */\r\n\tdelete(page: PageModel) {\r\n\t\tthis.store.dispatch(new DeletePageStartAction(page._id));\r\n\t}\r\n}\r\n","import { ModuleWithProviders } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\n\r\nimport { PageViewComponent } from \"./view/page-view.component\";\r\nimport { RootComponent } from \"./root/root.component\";\r\nimport { UpsertComponent } from \"./upsert/upsert.component\";\r\nimport { PagesManagementComponent } from \"./mangement/page-management.component\";\r\n\r\nconst routes: Routes = [\r\n\t{\r\n\t\tpath: \"pages\",\r\n\t\tcomponent: RootComponent,\r\n\t\tchildren: [\r\n\t\t\t{\r\n\t\t\t\tpath: \"management\",\r\n\t\t\t\tcomponent: PagesManagementComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: \"upsert\",\r\n\t\t\t\tcomponent: UpsertComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: \"upsert/:name\",\r\n\t\t\t\tcomponent: UpsertComponent\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\tpath: \"page/:name\",\r\n\t\tcomponent: PageViewComponent\r\n\t}\r\n];\r\n\r\nexport const RoutingModule: ModuleWithProviders = RouterModule.forChild(routes);\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { PageModel } from \"../models/page.model\";\r\n\r\nexport enum PagesActionTypes {\r\n\tUPSERT = \"[PAGE][DB] UPSERT\",\r\n\tDELETE = \"[PAGE][DB] DELETE\"\r\n}\r\n\r\nexport class UpsertPageAction implements Action {\r\n\treadonly type = PagesActionTypes.UPSERT;\r\n\tconstructor(public payload: PageModel[]) {}\r\n}\r\nexport class DeletePageAction implements Action {\r\n\treadonly type = PagesActionTypes.DELETE;\r\n\tconstructor(public payload: PageModel) {}\r\n}\r\n\r\nexport type PagesActions = UpsertPageAction | DeletePageAction;\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { map, pluck } from \"rxjs/operators\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { GET_PAGE_ACTION_TYPES, GET_PAGES_ACTION_TYPES, DELETE_PAGE_ACTION_TYPES } from \"../services/api\";\r\nimport { PageModel } from \"../models/page.model\";\r\nimport { UpsertPageAction, DeletePageAction } from \"./pages.actions\";\r\n\r\n@Injectable()\r\nexport class PageDbEffects {\r\n\tconstructor(private actions$: Actions<any>) {}\r\n\r\n\t@Effect()\r\n\tUpsert$ = this.actions$\r\n\t\t.ofType(GET_PAGE_ACTION_TYPES.SUCCEED)\r\n\t\t.pipe(pluck(\"payload\"), map((page: PageModel) => new UpsertPageAction([ page ])));\r\n\r\n\t@Effect()\r\n\tUpsertMany$ = this.actions$\r\n\t\t.ofType(GET_PAGES_ACTION_TYPES.SUCCEED)\r\n\t\t.pipe(pluck(\"payload\"), map((pages: PageModel[]) => new UpsertPageAction(pages)));\r\n\r\n\t@Effect()\r\n\tdelete$ = this.actions$\r\n\t\t.ofType(DELETE_PAGE_ACTION_TYPES.SUCCEED)\r\n\t\t.pipe(pluck(\"payload\"), map((page: PageModel) => new DeletePageAction(page)));\r\n}\r\n","import { PageModel } from \"../models/page.model\";\r\nimport { PagesActions, PagesActionTypes } from \"./pages.actions\";\r\n\r\nexport interface State {\r\n\tdata: PageModel[];\r\n}\r\n\r\nconst initialState: State = {\r\n\tdata: []\r\n};\r\n\r\nexport function Reducer(state = initialState, action: PagesActions): State {\r\n\tlet _data: PageModel[];\r\n\tswitch (action.type) {\r\n\t\tcase PagesActionTypes.UPSERT:\r\n\t\t\tdebugger;\r\n\t\t\t_data = state.data.concat();\r\n\t\t\tlet newPages = action.payload;\r\n\t\t\tif (!(newPages instanceof Array)) {\r\n\t\t\t\tnewPages = [ newPages ];\r\n\t\t\t\tconsole.error(\"'PagesActionTypes.UPSERT' does not get array payload\");\r\n\t\t\t}\r\n\r\n\t\t\tnewPages.forEach((newPage) => {\r\n\t\t\t\tconst existedPageIndex = _data.findIndex((w) => w._id == newPage._id);\r\n\t\t\t\tif (existedPageIndex > -1) {\r\n\t\t\t\t\t_data.splice(existedPageIndex, 1, newPage);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t_data.push(newPage);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: _data\r\n\t\t\t};\r\n\r\n\t\tcase PagesActionTypes.DELETE:\r\n\t\t\tdebugger;\r\n\t\t\t_data = state.data.concat();\r\n\r\n\t\t\tconst pageIndex = state.data.findIndex((w) => w._id == action.payload._id);\r\n\t\t\t_data.splice(pageIndex, 1);\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: _data\r\n\t\t\t};\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport const getPages = (state: State) => state.data;\r\n","import * as fromRoot from \"./root/pages.reducers\";\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface PageState {\r\n\tdb: fromRoot.State;\r\n}\r\n\r\nexport const PageReducer = {\r\n\tdb: fromRoot.Reducer\r\n};\r\n\r\nexport interface AppState {\r\n\tpages: PageState;\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\nimport { of } from \"rxjs\";\r\n\r\nimport { PageService } from \"../../page.service\";\r\nimport { GET_PAGE_ACTION_TYPES, GetPageActions, GetPageSucceedAction, GetPageFailedAction } from \"./get-page.actions\";\r\n\r\n@Injectable()\r\nexport class GetPageApiEffects {\r\n\tconstructor(private actions$: Actions<GetPageActions>, private service: PageService) {}\r\n\r\n\t@Effect()\r\n\tstart$ = this.actions$\r\n\t\t.ofType(GET_PAGE_ACTION_TYPES.START)\r\n\t\t.pipe(\r\n\t\t\tmap((action) => action.payload),\r\n\t\t\tswitchMap((payload) => this.service.get(payload)),\r\n\t\t\tmap((res) => new GetPageSucceedAction(res)),\r\n\t\t\tcatchError((err) => of(new GetPageFailedAction(err)))\r\n\t\t);\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\nimport { of } from \"rxjs\";\r\n\r\nimport { PageService } from \"../../page.service\";\r\nimport {\r\n\tGET_PAGES_ACTION_TYPES,\r\n\tGetPagesActions,\r\n\tGetPagesSucceedAction,\r\n\tGetPagesFailedAction\r\n} from \"./get-pages.actions\";\r\n\r\n@Injectable()\r\nexport class GetPagesApiEffects {\r\n\tconstructor(private actions$: Actions<GetPagesActions>, private service: PageService) {}\r\n\r\n\t@Effect()\r\n\tstart$ = this.actions$\r\n\t\t.ofType(GET_PAGES_ACTION_TYPES.START)\r\n\t\t.pipe(\r\n\t\t\tswitchMap(() =>\r\n\t\t\t\tthis.service\r\n\t\t\t\t\t.getPages()\r\n\t\t\t\t\t.pipe(\r\n\t\t\t\t\t\tmap((res) => new GetPagesSucceedAction(res)),\r\n\t\t\t\t\t\tcatchError((err) => of(new GetPagesFailedAction(err)))\r\n\t\t\t\t\t)\r\n\t\t\t)\r\n\t\t);\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\nimport { of } from \"rxjs\";\r\n\r\nimport { PageService } from \"../../page.service\";\r\nimport {\r\n\tUPSERT_PAGE_ACTION_TYPES,\r\n\tUpsertPageActions,\r\n\tUpsertPageSucceedAction,\r\n\tUpsertPageFailedAction\r\n} from \"./upsert-page.actions\";\r\n\r\n@Injectable()\r\nexport class UpsertPageApiEffects {\r\n\tconstructor(private actions$: Actions<UpsertPageActions>, private service: PageService) {}\r\n\r\n\t@Effect()\r\n\tstart$ = this.actions$\r\n\t\t.ofType(UPSERT_PAGE_ACTION_TYPES.START)\r\n\t\t.pipe(\r\n\t\t\tmap((action) => action.payload),\r\n\t\t\tswitchMap((payload) => this.service.upsert(payload)),\r\n\t\t\tmap((res) => new UpsertPageSucceedAction(res)),\r\n\t\t\tcatchError((err) => of(new UpsertPageFailedAction(err)))\r\n\t\t);\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\nimport { of } from \"rxjs\";\r\n\r\nimport { PageService } from \"../../page.service\";\r\nimport {\r\n\tDELETE_PAGE_ACTION_TYPES,\r\n\tDeletePageActions,\r\n\tDeletePageSucceedAction,\r\n\tDeletePageFailedAction\r\n} from \"./delete-page.actions\";\r\n\r\n@Injectable()\r\nexport class DeletePageApiEffects {\r\n\tconstructor(private actions$: Actions<DeletePageActions>, private service: PageService) {}\r\n\r\n\t@Effect()\r\n\tstart$ = this.actions$\r\n\t\t.ofType(DELETE_PAGE_ACTION_TYPES.START)\r\n\t\t.pipe(\r\n\t\t\tmap((action) => action.payload),\r\n\t\t\tswitchMap((payload) => this.service.delete(payload)),\r\n\t\t\tmap((res) => new DeletePageSucceedAction(res)),\r\n\t\t\tcatchError((err) => of(new DeletePageFailedAction(err)))\r\n\t\t);\r\n}\r\n","import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { MatCardModule, MatIconModule, MatButtonModule, MatFormFieldModule, MatInputModule, MatDividerModule } from \"@angular/material\";\r\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\r\nimport { StoreModule } from \"@ngrx/store\";\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { EffectsModule } from \"@ngrx/effects\";\r\n\r\nimport { NgsGridModule } from \"@soushians/grid\";\r\n\r\nimport { RoutingModule } from \"./page-routing.module\";\r\nimport { PageViewComponent } from \"./view/page-view.component\";\r\nimport { PagesManagementComponent } from \"./mangement/page-management.component\";\r\nimport { RootComponent } from \"./root/root.component\";\r\nimport { UpsertComponent } from \"./upsert/upsert.component\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { PageModuleConfig, MODULE_CONFIG_TOKEN } from \"./page.config\";\r\nimport { PageConfigurationService } from \"./services/page-configuration.service\";\r\nimport { PageService } from \"./services/page.service\";\r\nimport { PageDbEffects } from \"./root/pages.effects\";\r\nimport { PageReducer } from \"./page.reducer\";\r\nimport { GetPageApiEffects } from \"./services/api/get-page/get-page.effects\";\r\nimport { GetPagesApiEffects } from \"./services/api/get-pages/get-pages.effects\";\r\nimport { UpsertPageApiEffects } from \"./services/api/upsert-page/upsert-page.effects\";\r\nimport { DeletePageApiEffects } from \"./services/api/delete-page/delete-page.effects\";\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n\t\tRouterModule,\r\n\t\tMatInputModule,\r\n\t\tMatFormFieldModule,\r\n\t\tMatCardModule,\r\n\t\tMatButtonModule,\r\n\t\tMatIconModule,\r\n\t\tMatDividerModule,\r\n\t\tFlexLayoutModule,\r\n\t\tFormsModule,\r\n\t\tReactiveFormsModule,\r\n\t\tNgsGridModule\r\n\t],\r\n\tdeclarations: [PageViewComponent, PagesManagementComponent, RootComponent, UpsertComponent],\r\n\texports: []\r\n})\r\nexport class NgsPageModule {\r\n\tstatic forRoot(config?: PageModuleConfig): ModuleWithProviders {\r\n\t\treturn {\r\n\t\t\tngModule: NgsPageRootModule,\r\n\t\t\tproviders: [{ provide: MODULE_CONFIG_TOKEN, useValue: config }, PageConfigurationService, PageService]\r\n\t\t};\r\n\t}\r\n}\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tNgsPageModule,\r\n\t\tRoutingModule,\r\n\t\tStoreModule.forFeature(\"pages\", PageReducer),\r\n\t\tEffectsModule.forFeature([\r\n\t\t\tPageDbEffects,\r\n\t\t\tGetPageApiEffects,\r\n\t\t\tGetPagesApiEffects,\r\n\t\t\tUpsertPageApiEffects,\r\n\t\t\tDeletePageApiEffects\r\n\t\t])\r\n\t],\r\n\texports: [NgsPageModule]\r\n})\r\nexport class NgsPageRootModule { }\r\n"],"names":["fromRoot.Reducer"],"mappings":"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"}
