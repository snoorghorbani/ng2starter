{"version":3,"sources":["ng://@soushians/page/lib/root/root.component.ts","ng://@soushians/page/lib/services/api/get-pages/get-pages.model.ts","ng://@soushians/page/lib/services/api/get-page/get-page.model.ts","ng://@soushians/page/lib/upsert/upsert.component.ts","ng://@soushians/page/lib/services/api/get-pages/get-pages.actions.ts","ng://@soushians/page/lib/mangement/page-management.component.ts","ng://@soushians/page/lib/page-routing.module.ts","ng://@soushians/page/lib/page.config.ts","ng://@soushians/page/lib/services/page-configuration.service.ts","ng://@soushians/page/lib/services/api/get-page/get-page.actions.ts","ng://@soushians/page/lib/services/api/upsert-page/upsert-page.model.ts","ng://@soushians/page/lib/models/page.model.ts","ng://@soushians/page/lib/services/page.service.ts","ng://@soushians/page/lib/view/page-view.component.ts","ng://@soushians/page/lib/page.module.ts"],"names":["GetPagesApiModel","GetPageApiModel","RootComponent","Component","args","selector","template","UpsertComponent","GetPagesStartAction","PagesManagementComponent","store","this","pages$","select","state","pages","db","data","prototype","ngOnInit","dispatch","Store","routes","path","component","children","RoutingModule","RouterModule","forChild","MODULE_DEFAULT_CONFIG","env","production","frontend_server","endpoints","upsert","find","get","MODULE_CONFIG_TOKEN","InjectionToken","PageConfigurationService","configFile","BehaviorSubject","_config","Object","assign","config$","next","defineProperty","Injectable","Inject","Request","initValue","_this","keys","forEach","key","getRequestBody","Response","UpsertPageApiModel","GetPageStartAction","payload","PageModel","_a","_b","_id","name","type","Config","page","PageService","http","configurationService","_location","pipe","filter","config","take","switchMap","stringTemplate","map","response","Result","getPages","model","post","tap","back","selectById","subject","undefined","subscribe","asObservable","HttpClient","Location","PageViewComponent","service","resolver","container","id","_selectPage","page$","ComponentFactoryResolver","ViewContainerRef","Input","PageModule","NgModule","imports","CommonModule","MatCardModule","MatButtonModule","MatIconModule","FlexLayoutModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n\tselector: \"page-root\",\r\n\ttemplate: \"<router-outlet></router-outlet>\"\r\n})\r\nexport class RootComponent {}\r\n","import { PageModel } from \"../../../models/page.model\";\r\n\r\nexport namespace GetPagesApiModel {\r\n\texport class Request {\r\n\t\tconstructor(initValue = {}) {\r\n\t\t\tObject.keys(initValue).forEach((key) => (this[key] = initValue[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {};\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: PageModel<any>[];\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","import { PageModel } from \"../../../models/page.model\";\r\n\r\nexport namespace GetPageApiModel {\r\n\texport class Request {\r\n\t\t_id: string;\r\n\t\tconstructor(initValue = {}) {\r\n\t\t\tObject.keys(initValue).forEach((key) => (this[key] = initValue[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {};\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: PageModel<any>;\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n\ttemplate: `<div fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n    <div fxFlex=\"50\">\r\n        []upsertt\r\n    </div>\r\n</div>`\r\n})\r\nexport class UpsertComponent {}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { GetPagesApiModel } from \"./get-pages.model\";\r\nimport { PageModel } from \"../../../models/page.model\";\r\n\r\nexport const enum GET_PAGES_ACTION_TYPES {\r\n\tSTART = \"[GET_PAGES][API][GetPages] start\",\r\n\tSUCCEED = \"[GET_PAGES][API][GetPages] succeed\",\r\n\tFAILED = \"[GET_PAGES][API][GetPages] failed\"\r\n}\r\n\r\nexport class GetPagesStartAction implements Action {\r\n\treadonly type = GET_PAGES_ACTION_TYPES.START;\r\n}\r\nexport class GetPagesSucceedAction implements Action {\r\n\treadonly type = GET_PAGES_ACTION_TYPES.SUCCEED;\r\n\tconstructor(public payload: PageModel<any>[]) {}\r\n}\r\nexport class GetPagesFailedAction implements Action {\r\n\treadonly type = GET_PAGES_ACTION_TYPES.FAILED;\r\n\tconstructor(public payload: any) {}\r\n}\r\n\r\nexport type GetPagesActions = GetPagesStartAction | GetPagesSucceedAction | GetPagesFailedAction;\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { PageModel } from \"../models/page.model\";\r\nimport { AppState } from \"../page.reducer\";\r\nimport { GetPagesStartAction } from \"../services/api/get-pages/get-pages.actions\";\r\n\r\n@Component({\r\n\ttemplate: `<div fxLayout=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"25px\">\r\n  <div fXFlex=\"30\" fxLayout=\"row wrap\">\r\n    <button fxFlex=\"100\" color=\"primary\" mat-raised-button routerLink=\"../upsert/article\">\r\n      Add Article\r\n    </button>\r\n    <button fxFlex=\"100\" color=\"primary\" mat-raised-button routerLink=\"../upsert/links\">\r\n      Add Links\r\n    </button>\r\n  </div>\r\n  <div fxFlex=\"70\" fxLayout=\"row wrap\" fxLayoutGap=\"25px\">\r\n    <mat-card class=\"cards-item\" *ngFor=\"let item of (pages$ | async)\" fxFlex=\"33\" fxLayout=\"row\">\r\n      <div fxFlex>\r\n        <a [routerLink]=\"['../upsert' ,  item.type,  item._id]\">\r\n          <mat-icon aria-label=\"edit page\">edit</mat-icon>\r\n        </a>\r\n      </div>\r\n      <div fxFlex>\r\n        {{item.name}}\r\n      </div>\r\n      <div fxFlex>\r\n        {{item.type}}\r\n      </div>\r\n    </mat-card>\r\n  </div>\r\n</div>`\r\n})\r\nexport class PagesManagementComponent implements OnInit {\r\n\tpages$: Observable<PageModel<any>[]>;\r\n\tconstructor(public store: Store<AppState>) {\r\n\t\tthis.pages$ = this.store.select((state) => state.pages.db.data);\r\n\t}\r\n\tngOnInit() {\r\n\t\tthis.store.dispatch(new GetPagesStartAction());\r\n\t}\r\n}\r\n","import { ModuleWithProviders } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\n\r\nimport { PageViewComponent } from \"./view/page-view.component\";\r\nimport { RootComponent } from \"./root/root.component\";\r\nimport { UpsertComponent } from \"./upsert/upsert.component\";\r\nimport { PagesManagementComponent } from \"./mangement/page-management.component\";\r\n\r\nconst routes: Routes = [\r\n\t{\r\n\t\tpath: \"pages\",\r\n\t\tcomponent: RootComponent,\r\n\t\tchildren: [\r\n\t\t\t{\r\n\t\t\t\tpath: \"management\",\r\n\t\t\t\tcomponent: PagesManagementComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: \"upsert/:type\",\r\n\t\t\t\tcomponent: UpsertComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: \"upsert/:type/:_id\",\r\n\t\t\t\tcomponent: UpsertComponent\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n];\r\n\r\nexport const RoutingModule: ModuleWithProviders = RouterModule.forChild(routes);\r\n","import { InjectionToken } from \"@angular/core\";\r\n\r\nexport interface PageModuleConfig {\r\n\tenv?: {\r\n\t\tproduction: boolean;\r\n\t\tfrontend_server: string;\r\n\t};\r\n\tendpoints?: {\r\n\t\tget: string;\r\n\t\tfind: string;\r\n\t\tupsert: string;\r\n\t};\r\n}\r\nexport const MODULE_DEFAULT_CONFIG: PageModuleConfig = {\r\n\tenv: {\r\n\t\tproduction: false,\r\n\t\tfrontend_server: \"frontend_server/did/not/set\"\r\n\t},\r\n\tendpoints: {\r\n\t\tupsert: \"/api/page\",\r\n\t\tfind: \"/api/page\",\r\n\t\tget: \"/api/page/${model._id}\"\r\n\t}\r\n};\r\nexport const MODULE_CONFIG_TOKEN = new InjectionToken<PageModuleConfig>(\"PageModuleConfig\");\r\n","import { BehaviorSubject } from \"rxjs\";\r\nimport { Inject, Injectable } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { PageModuleConfig, MODULE_DEFAULT_CONFIG, MODULE_CONFIG_TOKEN } from \"../page.config\";\r\nimport { AppState } from \"../page.reducer\";\r\n\r\n@Injectable()\r\nexport class PageConfigurationService {\r\n\tprivate _config: PageModuleConfig;\r\n\tget config() {\r\n\t\treturn this._config;\r\n\t}\r\n\tconfig$ = new BehaviorSubject(MODULE_DEFAULT_CONFIG);\r\n\tconstructor(@Inject(MODULE_CONFIG_TOKEN) configFile, private store: Store<AppState>) {\r\n\t\tthis._config = Object.assign({}, MODULE_DEFAULT_CONFIG, configFile);\r\n\t\tthis.config$.next(this._config);\r\n\t\t// this.store.select(getPageModuleConfig).subscribe((pageConfig) => {\r\n\t\t// \tif (!pageConfig) {\r\n\t\t// \t\treturn;\r\n\t\t// \t}\r\n\t\t// \tthis._config = Object.assign({}, this._config, pageConfig.Config);\r\n\t\t// \tthis.config$.next(this._config);\r\n\t\t// });\r\n\t}\r\n}\r\n","import { Action } from \"@ngrx/store\";\r\n\r\nimport { GetPageApiModel } from \"./get-page.model\";\r\nimport { PageModel } from \"../../../models/page.model\";\r\n\r\nexport const enum GET_PAGE_ACTION_TYPES {\r\n\tSTART = \"[PAGE][API][GetPage] start\",\r\n\tSUCCEED = \"[PAGE][API][GetPage] succeed\",\r\n\tFAILED = \"[PAGE][API][GetPage] failed\"\r\n}\r\n\r\nexport class GetPageStartAction implements Action {\r\n\treadonly type = GET_PAGE_ACTION_TYPES.START;\r\n\tconstructor(public payload: string) {}\r\n}\r\nexport class GetPageSucceedAction implements Action {\r\n\treadonly type = GET_PAGE_ACTION_TYPES.SUCCEED;\r\n\tconstructor(public payload: PageModel<any>) {}\r\n}\r\nexport class GetPageFailedAction implements Action {\r\n\treadonly type = GET_PAGE_ACTION_TYPES.FAILED;\r\n\tconstructor(public payload: any) {}\r\n}\r\n\r\nexport type GetPageActions = GetPageStartAction | GetPageSucceedAction | GetPageFailedAction;\r\n","import { PageModel } from \"../../../models/page.model\";\r\n\r\nexport namespace UpsertPageApiModel {\r\n\texport class Request {\r\n\t\tpage: PageModel<any>;\r\n\t\tconstructor(page = {}) {\r\n\t\t\tdebugger;\r\n\t\t\tthis.page = new PageModel(page);\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn this.page;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: PageModel<any>;\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","export class PageModel<T> {\r\n\t_id: string;\r\n\tname: string;\r\n\ttype: string;\r\n\tConfig: T;\r\n\tconstructor({ _id, name, type, Config }: { _id?: string; name?: string; type?: string; Config?: T } = {}) {\r\n\t\tthis._id = _id;\r\n\t\tthis.name = name || \"\";\r\n\t\tthis.type = type;\r\n\t\tthis.Config = Config || ({} as T);\r\n\t}\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable, BehaviorSubject } from \"rxjs\";\r\nimport { map, filter, tap, take, switchMap } from \"rxjs/operators\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\n\r\nimport { AppState } from \"../page.reducer\";\r\nimport { PageConfigurationService } from \"./page-configuration.service\";\r\nimport { PageModel } from \"../models/page.model\";\r\nimport { stringTemplate } from \"@soushians/shared\";\r\nimport { GetPagesApiModel, GetPageStartAction, UpsertPageApiModel } from \"./api\";\r\nimport { Location } from \"@angular/common\";\r\n\r\n@Injectable()\r\nexport class PageService {\r\n\tconstructor(\r\n\t\tprivate http: HttpClient,\r\n\t\tprivate store: Store<AppState>,\r\n\t\tprivate configurationService: PageConfigurationService,\r\n\t\tprivate _location: Location\r\n\t) {}\r\n\r\n\tget<T>(_id: string): Observable<PageModel<T>> {\r\n\t\treturn this.configurationService.config$.pipe(\r\n\t\t\tfilter((config) => config.endpoints.get !== \"\"),\r\n\t\t\ttake(1),\r\n\t\t\tswitchMap((config) =>\r\n\t\t\t\tthis.http.get(stringTemplate(config.env.frontend_server + config.endpoints.get, { _id }))\r\n\t\t\t),\r\n\t\t\tmap((response: UpsertPageApiModel.Response) => response.Result)\r\n\t\t);\r\n\t}\r\n\r\n\tgetPages(): Observable<PageModel<any>[]> {\r\n\t\treturn this.configurationService.config$.pipe(\r\n\t\t\tfilter((config) => config.endpoints.find != \"\"),\r\n\t\t\tswitchMap((config) => this.http.get(config.env.frontend_server + config.endpoints.find)),\r\n\t\t\tmap((response: GetPagesApiModel.Response) => response.Result)\r\n\t\t);\r\n\t}\r\n\tupsert<T>(page: UpsertPageApiModel.Request): Observable<PageModel<T>> {\r\n\t\tconst model = new UpsertPageApiModel.Request(page);\r\n\t\treturn this.configurationService.config$.pipe(\r\n\t\t\tfilter((config) => config.endpoints.upsert != \"\"),\r\n\t\t\ttake(1),\r\n\t\t\tswitchMap((config) =>\r\n\t\t\t\tthis.http.post(config.env.frontend_server + config.endpoints.upsert, model.getRequestBody())\r\n\t\t\t),\r\n\t\t\tmap((response: UpsertPageApiModel.Response) => response.Result),\r\n\t\t\ttap(() => this._location.back())\r\n\t\t);\r\n\t}\r\n\t// delete(_id: string) {\r\n\t// \treturn this.configurationService.config$\r\n\t// \t\t.filter((config) => config.endpoints.deleteForm != \"\")\r\n\t// \t\t.switchMap((config) => this.http.get(config.endpoints.deleteForm));\r\n\t// }\r\n\tselectById<T>(_id: string): Observable<PageModel<T>> {\r\n\t\tconst subject = new BehaviorSubject<PageModel<T>>(undefined);\r\n\t\tthis.store\r\n\t\t\t.select((state) => state.pages.db.data)\r\n\t\t\t.pipe(\r\n\t\t\t\tfilter((pages) => pages != null),\r\n\t\t\t\tmap((pages) => pages.find((page) => page._id == _id)),\r\n\t\t\t\ttap((page) => {\r\n\t\t\t\t\tif (page == null) {\r\n\t\t\t\t\t\tthis.store.dispatch(new GetPageStartAction(_id));\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t\t.subscribe((page) => subject.next(page));\r\n\t\treturn subject.asObservable();\r\n\t}\r\n}\r\n","import {\r\n\tComponent,\r\n\tOnInit,\r\n\tComponentRef,\r\n\tComponentFactoryResolver,\r\n\tViewContainerRef,\r\n\tDirective,\r\n\tInput\r\n} from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { pluck, filter, switchMap, map, startWith } from \"rxjs/operators\";\r\n\r\nimport { PageModel } from \"../models/page.model\";\r\nimport { AppState } from \"../page.reducer\";\r\nimport { PageService } from \"../services/page.service\";\r\nimport { PageConfigurationService } from \"../services/page-configuration.service\";\r\n\r\n@Component({\r\n\ttemplate: \"\"\r\n})\r\nexport class PageViewComponent implements OnInit {\r\n\t@Input()\r\n\tset oid(id: string) {\r\n\t\tthis._selectPage(id);\r\n\t}\r\n\tpage$: Observable<PageModel<any>>;\r\n\tcomponent: ComponentRef<any>;\r\n\tconstructor(\r\n\t\tpublic store: Store<AppState>,\r\n\t\tprivate service: PageService,\r\n\t\tprivate configurationService: PageConfigurationService,\r\n\t\tprivate resolver: ComponentFactoryResolver,\r\n\t\tprivate container: ViewContainerRef\r\n\t) {}\r\n\tngOnInit() {}\r\n\t_selectPage(id: string) {\r\n\t\tthis.page$ = this.service.selectById<any>(id);\r\n\t}\r\n}\r\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { MatCardModule, MatIconModule, MatButtonModule } from \"@angular/material\";\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\n\nimport { RoutingModule } from \"./page-routing.module\";\nimport { PageViewComponent } from \"./view/page-view.component\";\nimport { PagesManagementComponent } from \"./mangement/page-management.component\";\nimport { RootComponent } from \"./root/root.component\";\nimport { UpsertComponent } from \"./upsert/upsert.component\";\n\n@NgModule({\n\timports: [ CommonModule, RoutingModule, MatCardModule, MatButtonModule, MatIconModule, FlexLayoutModule ],\n\tdeclarations: [ PageViewComponent, PagesManagementComponent, RootComponent, UpsertComponent ],\n\texports: []\n})\nexport class PageModule {}\n"]}