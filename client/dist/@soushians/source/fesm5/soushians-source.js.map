{
  "version": 3,
  "file": "soushians-source.js",
  "sources": [
    "ng://@soushians/source/projects/soushians/source/src/lib/source.module.ts",
    "ng://@soushians/source/projects/soushians/source/src/lib/effects/source.effects.ts",
    "ng://@soushians/source/projects/soushians/source/src/lib/source.routing-module.ts",
    "ng://@soushians/source/projects/soushians/source/src/lib/smart-components/source-upsert/source-upsert.component.ts",
    "ng://@soushians/source/projects/soushians/source/src/lib/smart-components/source-module-container/source-module-container.component.ts",
    "ng://@soushians/source/projects/soushians/source/src/lib/smart-components/source-list/source-list.component.ts",
    "ng://@soushians/source/projects/soushians/source/src/lib/services/source.service.ts",
    "ng://@soushians/source/projects/soushians/source/src/lib/models/upsert-source-api.model.ts",
    "ng://@soushians/source/projects/soushians/source/src/lib/models/get-sources-api.model.ts",
    "ng://@soushians/source/projects/soushians/source/src/lib/reducers/index.ts",
    "ng://@soushians/source/projects/soushians/source/src/lib/reducers/source-list.reducer.ts",
    "ng://@soushians/source/projects/soushians/source/src/lib/actions/source.action.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from \"@angular/core\";\r\nimport { StoreModule, Store } from \"@ngrx/store\";\r\nimport { EffectsModule } from \"@ngrx/effects\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport {\r\n\tMatIconModule,\r\n\tMatButtonModule,\r\n\tMatCardModule,\r\n\tMatSnackBarModule,\r\n\tMatSidenavModule,\r\n\tMatExpansionModule,\r\n\tMatSelectModule,\r\n\tMatFormFieldModule,\r\n\tMatListModule,\r\n\tMatMenuModule,\r\n\tMatRadioModule,\r\n\tMatInputModule,\r\n\tMatCheckboxModule,\r\n\tMatToolbarModule,\r\n\tMatDatepickerModule,\r\n\tMatProgressBarModule\r\n} from \"@angular/material\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\nimport { SharedModule } from \"@soushians/shared\";\r\n\r\nimport { SourceReducers } from \"./reducers\";\r\nimport { RoutingModule } from \"./source.routing-module\";\r\nimport { SourceEffects } from \"./effects/source.effects\";\r\nimport { SourceListComponent } from \"./smart-components/source-list/source-list.component\";\r\nimport { SourceUpsertComponent } from \"./smart-components/source-upsert/source-upsert.component\";\r\nimport { SourceModuleContainerComponent } from \"./smart-components/source-module-container/source-module-container.component\";\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n\t\tRouterModule,\r\n\t\tFormsModule,\r\n\t\tReactiveFormsModule,\r\n\t\tHttpClientModule,\r\n\t\tFlexLayoutModule,\r\n\t\tMatIconModule,\r\n\t\tMatButtonModule,\r\n\t\tMatCardModule,\r\n\t\tMatSnackBarModule,\r\n\t\tMatSidenavModule,\r\n\t\tMatExpansionModule,\r\n\t\tMatSelectModule,\r\n\t\tMatFormFieldModule,\r\n\t\tMatListModule,\r\n\t\tMatMenuModule,\r\n\t\tMatCheckboxModule,\r\n\t\tMatRadioModule,\r\n\t\tMatInputModule,\r\n\t\tMatToolbarModule,\r\n\t\tMatDatepickerModule,\r\n\t\tMatProgressBarModule,\r\n\t\tBrowserModule,\r\n\t\tStoreModule.forFeature(\"source\", SourceReducers),\r\n\t\tBrowserAnimationsModule,\r\n\t\tRoutingModule,\r\n\t\tEffectsModule.forFeature([ SourceEffects ]),\r\n\t\tSharedModule\r\n\t],\r\n\tdeclarations: [ SourceListComponent, SourceUpsertComponent, SourceModuleContainerComponent ],\r\n\texports: []\r\n})\r\nexport class SourceModule {}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { of } from \"rxjs/observable/of\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\nimport { Router } from \"@angular/router\";\r\n\r\nimport { SourceActionTypes, SourceSubmit, SourceSubmitSucceed, SourceSubmitFailed } from \"../actions\";\r\nimport { SourceModel, UpsertSourceApiModel } from \"../models\";\r\nimport { SourceService } from \"../services/source.service\";\r\n\r\n@Injectable()\r\nexport class SourceEffects {\r\n\tconstructor(private actions$: Actions<any>, private router: Router, private sourceService: SourceService) {}\r\n\r\n\t@Effect()\r\n\tafterSubmitSource$ = this.actions$.ofType(SourceActionTypes.SOURCE_SUBMIT).pipe(\r\n\t\tmap(action => action.payload),\r\n\t\tswitchMap((data: UpsertSourceApiModel.Request) => {\r\n\t\t\treturn this.sourceService\r\n\t\t\t\t.upsertSource(data)\r\n\t\t\t\t.pipe(map(res => new SourceSubmitSucceed()), catchError(() => Observable.of(new SourceSubmitFailed())));\r\n\t\t})\r\n\t);\r\n\r\n\t@Effect()\r\n\tSigninSucceed$ = this.actions$.ofType(SourceActionTypes.SOURCE_SUBMIT_SUCCEED).pipe(\r\n\t\tswitchMap(() => {\r\n\t\t\tthis.router.navigate([ \"source\" ]);\r\n\t\t\treturn Observable.empty();\r\n\t\t})\r\n\t);\r\n}\r\n",
    "import { ModuleWithProviders } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\n\r\nimport { SourceListComponent, SourceUpsertComponent, SourceModuleContainerComponent } from \"./smart-components\";\r\n\r\nconst routes: Routes = [\r\n\t{\r\n\t\tpath: \"source\",\r\n\t\tcomponent: SourceModuleContainerComponent,\r\n\t\tchildren: [\r\n\t\t\t{\r\n\t\t\t\tpath: \"\",\r\n\t\t\t\tcomponent: SourceListComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: \"edit/:id\",\r\n\t\t\t\tcomponent: SourceUpsertComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: \"add\",\r\n\t\t\t\tcomponent: SourceUpsertComponent\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n];\r\n\r\nexport const RoutingModule: ModuleWithProviders = RouterModule.forChild(routes);\r\n",
    "import { NgModule, Component, OnInit, Output, EventEmitter, Input, ViewChild, ViewContainerRef } from \"@angular/core\";\r\n\r\nimport { FormGroup, FormBuilder, FormControl, AbstractControl, FormArray, Validators } from \"@angular/forms\";\r\nimport { UpsertSourceApiModel, SourceModel } from \"../../models\";\r\nimport { SourceService } from \"../../services/source.service\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { SourceSubmit } from \"../../actions\";\r\nimport * as FeatureReducer from \"../../reducers\";\r\nimport { Subscription } from \"rxjs/Rx\";\r\n\r\n@Component({\r\n\tselector: \"source-source-upsert\",\r\n\ttemplate: `<div fxLayout=\"column\">\r\n  <div fxFlex=\"100\">\r\n    <mat-card fxLayout=\"column\" fxFlex=\"50\">\r\n      <form [formGroup]=\"formGroup\" fxLayout='column'>\r\n\r\n        <mat-card-header>\r\n          <mat-card-title>افزودن نمودار جدید</mat-card-title>\r\n        </mat-card-header>\r\n        <mat-card-content>\r\n          <mat-form-field fxFlexFill>\r\n            <input matInput placeholder=\"آدرس\" formControlName=\"Endpoint\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlexFill>\r\n            <input matInput placeholder=\"مدت زمان به روز رسانی داده\" formControlName=\"Interval\">\r\n          </mat-form-field>\r\n          <div>\r\n            <mat-checkbox formControlName=\"IsActive\" fxFlexFill>وضعیت</mat-checkbox>\r\n          </div>\r\n        </mat-card-content>\r\n      </form>\r\n    </mat-card>\r\n\r\n    <mat-card fxLayout=\"column\" fxFlex=\"20\">\r\n      <mat-card-content fxLayout=\"column\">\r\n        <div>\r\n          <button fxFlex mat-raised-button color=\"primary\" (click)=\"getData()\">ساختار دیتا</button>\r\n        </div>\r\n        <div class=\"item-margin\">\r\n          <!-- TODO: -->\r\n          <!-- <data-mapper destination=\"value\" [data]=\"data\"></data-mapper> -->\r\n        </div>\r\n      </mat-card-content>\r\n    </mat-card>\r\n\r\n    <mat-card fxLayout=\"column\" fxFlex=\"30\">\r\n      <mat-card-content fxLayout=\"column\">\r\n        <div fxLayout=\"column\" fxLayoutGap=\"5px\">\r\n          <div *ngFor=\"let threshold of thresholds; let i=index\" fxFlex=\"100\" class=\"add-item\">\r\n            <div fxLayout=\"column\">\r\n              <div [formGroup]=\"thresholds[i]\" fxLayout=\"column\">\r\n                <mat-form-field fxFlexFill>\r\n                  <input matInput placeholder=\"نام\" formControlName=\"Name\">\r\n                </mat-form-field>\r\n                <mat-form-field fxFlexFill>\r\n                  <input class=\"ltr\" matInput placeholder=\"فرمول\" formControlName=\"Formula\">\r\n                </mat-form-field>\r\n                <mat-form-field fxFlexFill>\r\n                  <input matInput placeholder=\"توضیح\" formControlName=\"Message\">\r\n                </mat-form-field>\r\n                <mat-radio-group formControlName=\"Type\" fxFlexFill>\r\n                  <label>نوع :</label>\r\n                  <mat-radio-button *ngFor=\"let item of types\" [value]=\"item\" class=\"form-element-margin\">\r\n                    {{item}}\r\n                  </mat-radio-button>\r\n                </mat-radio-group>\r\n\r\n                <button (click)=\"removeItem(i)\" fxFlex mat-button color=\"primary\" type=\"button\">پاک کردن</button>\r\n              </div>\r\n              <br />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"item-margin\">\r\n          <button (click)=\"addItem()\" fxFlex mat-raised-button color=\"primary\" type=\"button\">افزودن آستانه</button>\r\n        </div>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n  <div fxFlex=\"100\">\r\n    <mat-card fxLayoutAlign=\"end center\" fxLayout=\"row\" fxFlex=\"100\">\r\n      <mat-card-content>\r\n        <button mat-raised-button fxFlex color=\"primary\" (click)=\"add($event)\">ثبت</button>\r\n        <button fxFlex mat-raised-button routerLink='/source'  fxLayoutGap=\"5px\">انصراف</button>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n</div>\r\n`,\r\n\tstyles: [`mat-card{margin:5px}.add-item{border:1px solid #eaeaea;padding:10px;margin:5px 0}.item-margin{margin-top:10px}button[type=submit]{margin-left:5px}.ltr{direction:ltr}.form-element-margin{margin:5px 10px}`]\r\n})\r\nexport class SourceUpsertComponent implements OnInit {\r\n\t//configInforamation;\r\n\tformGroup: FormGroup = UpsertSourceApiModel.Request.formGroup;\r\n\tsources: Observable<SourceModel[]>;\r\n\tthresholds: AbstractControl[];\r\n\tdata: any;\r\n\ttypes = [ \"critical\", \"goal\" ];\r\n\tconstructor(\r\n\t\tprivate sourceService: SourceService,\r\n\t\tprivate formBuilder: FormBuilder,\r\n\t\tprivate route: ActivatedRoute,\r\n\t\tprivate store: Store<FeatureReducer.FeatureState>\r\n\t) {\r\n\t\t// this.sources = this.sourceService.getSources();\r\n\t\tthis.thresholds = (this.formGroup.controls.Thresholds as FormArray).controls;\r\n\t\tthis.route.params.subscribe(params => {\r\n\t\t\tconst sourceId: string = params[\"id\"];\r\n\t\t\tsourceId &&\r\n\t\t\t\tthis.sourceService.getSourceById(sourceId).subscribe(data => {\r\n\t\t\t\t\tthis.formGroup.patchValue({\r\n\t\t\t\t\t\t_id: data._id,\r\n\t\t\t\t\t\tEndpoint: data.Endpoint,\r\n\t\t\t\t\t\tInterval: data.Interval,\r\n\t\t\t\t\t\tIsActive: data.IsActive || false,\r\n\t\t\t\t\t\tThresholds: data.Thresholds\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tdata.Thresholds.forEach(mapping =>\r\n\t\t\t\t\t\tthis.addItem(mapping.Name, mapping.Formula, mapping.Message, mapping.Type)\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tngOnInit() {}\r\n\r\n\taddItem(Name: string = \"\", Formula: string = \"\", Message: string = \"\", Type: string = \"critical\") {\r\n\t\tconst control = <FormArray>this.formGroup.controls[\"Thresholds\"];\r\n\t\tcontrol.push(\r\n\t\t\tnew FormGroup({\r\n\t\t\t\tName: new FormControl(Name, [ Validators.required ]),\r\n\t\t\t\tFormula: new FormControl(Formula, [ Validators.required ]),\r\n\t\t\t\tMessage: new FormControl(Message, [ Validators.required ]),\r\n\t\t\t\tType: new FormControl(Type, [ Validators.required ])\r\n\t\t\t})\r\n\t\t);\r\n\t\t//    control.push(this.formBuilder.group({\r\n\t\t//      Name: [Name],\r\n\t\t//      Formula: [Formula],\r\n\t\t//      Message: [Message]\r\n\t\t//    }));\r\n\t}\r\n\r\n\tremoveItem(i: number) {\r\n\t\tconst control = <FormArray>this.formGroup.controls[\"Thresholds\"];\r\n\t\tcontrol.removeAt(i);\r\n\t}\r\n\r\n\tgetData() {\r\n\t\tconst o$ = this.sourceService.getData(this.formGroup.value);\r\n\t\to$.subscribe(data => {\r\n\t\t\tdebugger;\r\n\t\t\tthis.data = data.Data;\r\n\t\t});\r\n\t\treturn o$;\r\n\t}\r\n\r\n\tadd(data) {\r\n\t\t//if (!this.formGroup.valid) return;\r\n\t\tthis.store.dispatch(new SourceSubmit(this.formGroup.value));\r\n\t}\r\n}\r\n",
    "import { Component, OnInit } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { SourceService } from \"../../services/source.service\";\r\n\r\n@Component({\r\n\tselector: \"source-module-container\",\r\n\ttemplate: `<div fxLayoutAlign=\"\" fxflex=\"100\" fxLayout=\"column\">\r\n    <router-outlet></router-outlet>\r\n</div>\r\n`\r\n})\r\nexport class SourceModuleContainerComponent implements OnInit {\r\n\tconstructor(private service: SourceService) {}\r\n\r\n\tngOnInit() {}\r\n}\r\n",
    "import { Component, OnInit } from \"@angular/core\";\r\nimport { SourceService } from \"../../services/source.service\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { GetSourcesApiModel } from \"../../models\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport * as FeatureReducer from \"../../reducers\";\r\n//import { SourceUpsertAction } from 'app/actions';\r\n\r\n@Component({\r\n\tselector: \"source-list\",\r\n\ttemplate: `<div fxFlexLayout=\"row\" fxLayoutWrap fxLayoutAlign=\"start center\">\r\n  <mat-card class=\"source-box\" *ngFor=\"let source of (sources | async)?.Result\" [fxFlex]=\"32\">\r\n      <mat-card-title fxFlexLayout=\"row\" flexLayoutAlign=\"space-between center\">\r\n        \r\n        <a [routerLink]=\"['edit' ,  source._id]\" fxFlex=\"40px\">\r\n          <mat-icon fxLayoutAlign=\"start center\" aria-label=\"edit source\">edit</mat-icon>\r\n        </a>\r\n        <span fxFlex fxLayoutAlign=\"end center\" fxFlexAlign=\"center\">{{source.Endpoint}}</span>\r\n      </mat-card-title>\r\n    \r\n  </mat-card>\r\n\r\n  <div fxLayoutAlign='end center'>\r\n    <button mat-fab routerLink=\"../source/add\" class=\"add-btn\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n\r\n`,\r\n\tstyles: [`:host{width:100%}.source-box{margin:5px}.source-box a{text-decoration:none}.add-btn{position:fixed;bottom:50px;left:25px;z-index:1}`]\r\n})\r\nexport class SourceListComponent implements OnInit {\r\n\tsources: Observable<GetSourcesApiModel.Response>;\r\n\r\n\tconstructor(\r\n\t\tprivate sourceService: SourceService // private store: Store<FeatureReducer.FeatureState>\r\n\t) {\r\n\t\tdebugger;\r\n\t\tthis.sources = this.sourceService.getSources();\r\n\t\t// this.sources.subscribe(data => { debugger})\r\n\t\t//this.configs.subscribe(data => {\r\n\t\t//        debugger;\r\n\t\t//        this.store.dispatch(new ConfigLoaded(data.Result));\r\n\t\t//});\r\n\t}\r\n\r\n\tngOnInit() {}\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs/Rx\";\r\n\r\nimport { UpsertSourceApiModel, GetSourcesApiModel, SourceModel } from \"../models\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class SourceService {\r\n\tresponseCache: any;\r\n\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\tgetSources(): Observable<GetSourcesApiModel.Response> {\r\n\t\treturn this.http\r\n\t\t\t.get<GetSourcesApiModel.Response>(\"http://localhost:3000/api/source\")\r\n\t\t\t.map(response => {\r\n\t\t\t\treturn response;\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\treturn Observable.throw(err);\r\n\t\t\t});\r\n\t}\r\n\tgetSourceById(id: string): Observable<SourceModel> {\r\n\t\treturn this.http\r\n\t\t\t.get(`http://localhost:3000/api/source/${id}`)\r\n\t\t\t.map((response: UpsertSourceApiModel.Response) => response.Result)\r\n\t\t\t.catch(err => {\r\n\t\t\t\treturn Observable.throw(err);\r\n\t\t\t});\r\n\t}\r\n\tupsertSource(body: UpsertSourceApiModel.Request): Observable<any> {\r\n\t\tvar model = new UpsertSourceApiModel.Request(body);\r\n\t\treturn this.http\r\n\t\t\t.put(\"http://localhost:3000/api/source\", model.getRequestBody(), { withCredentials: false })\r\n\t\t\t.map(response => response)\r\n\t\t\t.catch(err => {\r\n\t\t\t\treturn Observable.throw(err);\r\n\t\t\t});\r\n\t}\r\n\r\n\tgetData(source: SourceModel, time: number = 0): Observable<any> {\r\n\t\treturn this.http\r\n\t\t\t.get(`http://localhost:3000/api/data`, {\r\n\t\t\t\tparams: {\r\n\t\t\t\t\tsourceId: source._id,\r\n\t\t\t\t\ttime: null\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.map((res: any) => res.Result);\r\n\t}\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\n// import { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators, FormArray } from \"@angular/forms\";\r\nimport { SourceModel } from \"../models\";\r\n\r\nexport namespace UpsertSourceApiModel {\r\n\t// export class Request implements HttpRequestBaseModel<Request> {\r\n\texport class Request {\r\n\t\t_id: string;\r\n\t\tEndpoint: string;\r\n\t\tInterval: number;\r\n\t\tIsActive: boolean;\r\n\t\tThresholds: {\r\n\t\t\tName: string;\r\n\t\t\tFormula: string;\r\n\t\t\tMessage: string;\r\n\t\t\tType: boolean;\r\n\t\t}[];\r\n\t\tconstructor(initValue = {} as UpsertSourceApiModel.Request) {\r\n\t\t\tObject.keys(initValue).forEach(key => (this[key] = initValue[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {\r\n\t\t\t\t_id: this._id,\r\n\t\t\t\tEndpoint: this.Endpoint,\r\n\t\t\t\tInterval: this.Interval,\r\n\t\t\t\tIsActive: this.IsActive,\r\n\t\t\t\tThresholds: this.Thresholds\r\n\t\t\t};\r\n\t\t}\r\n\t\tstatic get formGroup() {\r\n\t\t\treturn new FormGroup({\r\n\t\t\t\t_id: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tEndpoint: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tInterval: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tIsActive: new FormControl(\"false\", [ Validators.required ]),\r\n\t\t\t\tThresholds: new FormArray([])\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: SourceModel;\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\n// import { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { SourceModel } from \"./source.model\";\r\n\r\nexport namespace GetSourcesApiModel {\r\n\t// export class Request implements HttpRequestBaseModel<Request> {\r\n\texport class Request {\r\n\t\tconstructor(initValue: GetSourcesApiModel.Request = {} as GetSourcesApiModel.Request) {\r\n\t\t\tObject.keys(initValue).forEach(key => (this[key] = initValue[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {};\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: SourceModel[];\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n",
    "import { createSelector, createFeatureSelector, MemoizedSelector } from '@ngrx/store';\r\n\r\nimport * as sourceList from './source-list.reducer';\r\n\r\nexport interface SourceState {\r\n        list: sourceList.State\r\n}\r\n\r\nexport const SourceReducers = {\r\n      sources: sourceList.Reducer\r\n};\r\n\r\nexport interface FeatureState {\r\n        'sources': SourceState;\r\n}\r\n\r\n\r\n\r\n//#region selectors\r\n\r\nexport const selectSourceState = createFeatureSelector<SourceState>(\"source\");\r\n\r\n//#endregion\r\n\r\nexport const getSourceList = createSelector(\r\n        selectSourceState,\r\n        (state: SourceState) => state.list\r\n);\r\n//export const getSourceListData = createSelector(\r\n//        getSourceList,\r\n//        sourceList.getSourceListData\r\n//);\r\n",
    "import * as source from \"../actions/source.action\";\r\nimport { SourceModel, UpsertSourceApiModel } from \"../models\";\r\n\r\nexport interface State {\r\n\tdata: SourceModel[];\r\n}\r\n\r\nconst initialState: State = {\r\n\tdata: []\r\n};\r\n\r\nexport function Reducer(state = initialState, action: source.Actions): State {\r\n\tswitch (action.type) {\r\n\t\tcase source.SourceActionTypes.SOURCE_SUBMIT:\r\n\t\t\treturn {\r\n\t\t\t\t...state\r\n\t\t\t};\r\n\t\tcase source.SourceActionTypes.SOURCE_SUBMIT_SUCCEED:\r\n\t\t\treturn {\r\n\t\t\t\t...state\r\n\t\t\t};\r\n\t\tcase source.SourceActionTypes.SOURCE_SUBMIT_FAILED:\r\n\t\t\treturn {\r\n\t\t\t\t...state\r\n\t\t\t};\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport const getSourceListData = (state: State) => state.data;\r\n",
    "import { Action } from \"@ngrx/store\";\r\nimport { SourceModel, UpsertSourceApiModel } from \"../models\";\r\n\r\nexport enum SourceActionTypes {\r\n\tSOURCE_SUBMIT = \"[SOURCE] source submit\",\r\n\tSOURCE_SUBMIT_SUCCEED = \"[SOURCE] source submit succeed\",\r\n\tSOURCE_SUBMIT_FAILED = \"[SOURCE] source submit failed\"\r\n}\r\n\r\nexport class SourceSubmit implements Action {\r\n\treadonly type = SourceActionTypes.SOURCE_SUBMIT;\r\n\tconstructor(public payload: UpsertSourceApiModel.Request) {}\r\n}\r\nexport class SourceSubmitSucceed implements Action {\r\n\treadonly type = SourceActionTypes.SOURCE_SUBMIT_SUCCEED;\r\n}\r\nexport class SourceSubmitFailed implements Action {\r\n\treadonly type = SourceActionTypes.SOURCE_SUBMIT_FAILED;\r\n}\r\nexport type Actions = SourceSubmit | SourceSubmitSucceed | SourceSubmitFailed;\r\n"
  ],
  "names": [
    "tslib_1.__metadata",
    "Observable",
    "sourceList.Reducer",
    "source.SourceActionTypes"
  ],
  "mappings": "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"
}
