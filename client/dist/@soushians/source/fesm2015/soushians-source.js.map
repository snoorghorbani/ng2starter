{"version":3,"file":"soushians-source.js","sources":["ng://@soushians/source/lib/actions/source.action.ts","ng://@soushians/source/lib/reducers/source-list.reducer.ts","ng://@soushians/source/lib/reducers/index.ts","ng://@soushians/source/lib/models/source.model.ts","ng://@soushians/source/lib/models/get-sources-api.model.ts","ng://@soushians/source/lib/models/upsert-source-api.model.ts","ng://@soushians/source/lib/services/source.service.ts","ng://@soushians/source/lib/smart-components/source-module-container/source-module-container.component.ts","ng://@soushians/source/lib/smart-components/source-list/source-list.component.ts","ng://@soushians/source/lib/smart-components/source-upsert/source-upsert.component.ts","ng://@soushians/source/lib/source.routing-module.ts","ng://@soushians/source/lib/effects/source.effects.ts","ng://@soushians/source/lib/source.module.ts"],"sourcesContent":["import { Action } from \"@ngrx/store\";\r\nimport { SourceModel, UpsertSourceApiModel } from \"../models\";\r\n\r\nexport enum SourceActionTypes {\r\n\tSOURCE_SUBMIT = \"[SOURCE] source submit\",\r\n\tSOURCE_SUBMIT_SUCCEED = \"[SOURCE] source submit succeed\",\r\n\tSOURCE_SUBMIT_FAILED = \"[SOURCE] source submit failed\"\r\n}\r\n\r\nexport class SourceSubmit implements Action {\r\n\treadonly type = SourceActionTypes.SOURCE_SUBMIT;\r\n\tconstructor(public payload: UpsertSourceApiModel.Request) {}\r\n}\r\nexport class SourceSubmitSucceed implements Action {\r\n\treadonly type = SourceActionTypes.SOURCE_SUBMIT_SUCCEED;\r\n}\r\nexport class SourceSubmitFailed implements Action {\r\n\treadonly type = SourceActionTypes.SOURCE_SUBMIT_FAILED;\r\n}\r\nexport type Actions = SourceSubmit | SourceSubmitSucceed | SourceSubmitFailed;\r\n","import * as source from \"../actions/source.action\";\r\nimport { SourceModel, UpsertSourceApiModel } from \"../models\";\r\n\r\nexport interface State {\r\n\tdata: SourceModel[];\r\n}\r\n\r\nconst initialState: State = {\r\n\tdata: []\r\n};\r\n\r\nexport function Reducer(state = initialState, action: source.Actions): State {\r\n\tswitch (action.type) {\r\n\t\tcase source.SourceActionTypes.SOURCE_SUBMIT:\r\n\t\t\treturn {\r\n\t\t\t\t...state\r\n\t\t\t};\r\n\t\tcase source.SourceActionTypes.SOURCE_SUBMIT_SUCCEED:\r\n\t\t\treturn {\r\n\t\t\t\t...state\r\n\t\t\t};\r\n\t\tcase source.SourceActionTypes.SOURCE_SUBMIT_FAILED:\r\n\t\t\treturn {\r\n\t\t\t\t...state\r\n\t\t\t};\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport const getSourceListData = (state: State) => state.data;\r\n","import { createSelector, createFeatureSelector, MemoizedSelector } from '@ngrx/store';\r\n\r\nimport * as sourceList from './source-list.reducer';\r\n\r\nexport interface SourceState {\r\n        list: sourceList.State\r\n}\r\n\r\nexport const SourceReducers = {\r\n      sources: sourceList.Reducer\r\n};\r\n\r\nexport interface FeatureState {\r\n        'sources': SourceState;\r\n}\r\n\r\n\r\n\r\n//#region selectors\r\n\r\nexport const selectSourceState = createFeatureSelector<SourceState>(\"source\");\r\n\r\n//#endregion\r\n\r\nexport const getSourceList = createSelector(\r\n        selectSourceState,\r\n        (state: SourceState) => state.list\r\n);\r\n//export const getSourceListData = createSelector(\r\n//        getSourceList,\r\n//        sourceList.getSourceListData\r\n//);\r\n","export class SourceModel {\r\n  _id: string;\r\n  Endpoint: string;\r\n  Interval: number;\r\n  IsActive: boolean;\r\n  Thresholds: {\r\n    Name: string,\r\n    Formula: string,\r\n    Message: string,\r\n    Type: string\r\n  }[]\r\n  constructor(initValue = {} as SourceModel) {\r\n    Object.keys(initValue).forEach(key => this[key] = initValue[key]);\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\n// import { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { SourceModel } from \"./source.model\";\r\n\r\nexport namespace GetSourcesApiModel {\r\n\t// export class Request implements HttpRequestBaseModel<Request> {\r\n\texport class Request {\r\n\t\tconstructor(initValue: GetSourcesApiModel.Request = {} as GetSourcesApiModel.Request) {\r\n\t\t\tObject.keys(initValue).forEach(key => (this[key] = initValue[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {};\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: SourceModel[];\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\n// import { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators, FormArray } from \"@angular/forms\";\r\nimport { SourceModel } from \"../models\";\r\n\r\nexport namespace UpsertSourceApiModel {\r\n\t// export class Request implements HttpRequestBaseModel<Request> {\r\n\texport class Request {\r\n\t\t_id: string;\r\n\t\tEndpoint: string;\r\n\t\tInterval: number;\r\n\t\tIsActive: boolean;\r\n\t\tThresholds: {\r\n\t\t\tName: string;\r\n\t\t\tFormula: string;\r\n\t\t\tMessage: string;\r\n\t\t\tType: boolean;\r\n\t\t}[];\r\n\t\tconstructor(initValue = {} as UpsertSourceApiModel.Request) {\r\n\t\t\tObject.keys(initValue).forEach(key => (this[key] = initValue[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {\r\n\t\t\t\t_id: this._id,\r\n\t\t\t\tEndpoint: this.Endpoint,\r\n\t\t\t\tInterval: this.Interval,\r\n\t\t\t\tIsActive: this.IsActive,\r\n\t\t\t\tThresholds: this.Thresholds\r\n\t\t\t};\r\n\t\t}\r\n\t\tstatic get formGroup() {\r\n\t\t\treturn new FormGroup({\r\n\t\t\t\t_id: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tEndpoint: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tInterval: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tIsActive: new FormControl(\"false\", [ Validators.required ]),\r\n\t\t\t\tThresholds: new FormArray([])\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: SourceModel;\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs/Rx\";\r\n\r\nimport { UpsertSourceApiModel, GetSourcesApiModel, SourceModel } from \"../models\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class SourceService {\r\n\tresponseCache: any;\r\n\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\tgetSources(): Observable<GetSourcesApiModel.Response> {\r\n\t\treturn this.http\r\n\t\t\t.get<GetSourcesApiModel.Response>(\"http://localhost:3000/api/source\")\r\n\t\t\t.map(response => {\r\n\t\t\t\treturn response;\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\treturn Observable.throw(err);\r\n\t\t\t});\r\n\t}\r\n\tgetSourceById(id: string): Observable<SourceModel> {\r\n\t\treturn this.http\r\n\t\t\t.get(`http://localhost:3000/api/source/${id}`)\r\n\t\t\t.map((response: UpsertSourceApiModel.Response) => response.Result)\r\n\t\t\t.catch(err => {\r\n\t\t\t\treturn Observable.throw(err);\r\n\t\t\t});\r\n\t}\r\n\tupsertSource(body: UpsertSourceApiModel.Request): Observable<any> {\r\n\t\tvar model = new UpsertSourceApiModel.Request(body);\r\n\t\treturn this.http\r\n\t\t\t.put(\"http://localhost:3000/api/source\", model.getRequestBody(), { withCredentials: false })\r\n\t\t\t.map(response => response)\r\n\t\t\t.catch(err => {\r\n\t\t\t\treturn Observable.throw(err);\r\n\t\t\t});\r\n\t}\r\n\r\n\tgetData(source: SourceModel, time: number = 0): Observable<any> {\r\n\t\treturn this.http\r\n\t\t\t.get(`http://localhost:3000/api/data`, {\r\n\t\t\t\tparams: {\r\n\t\t\t\t\tsourceId: source._id,\r\n\t\t\t\t\ttime: null\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.map((res: any) => res.Result);\r\n\t}\r\n}\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { SourceService } from \"../../services/source.service\";\r\n\r\n@Component({\r\n\tselector: \"source-module-container\",\r\n\ttemplateUrl: \"./source-module-container.component.html\"\r\n})\r\nexport class SourceModuleContainerComponent implements OnInit {\r\n\tconstructor(private service: SourceService) {}\r\n\r\n\tngOnInit() {}\r\n}\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { SourceService } from \"../../services/source.service\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { GetSourcesApiModel } from \"../../models\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport * as FeatureReducer from \"../../reducers\";\r\n//import { SourceUpsertAction } from 'app/actions';\r\n\r\n@Component({\r\n\tselector: \"source-list\",\r\n\ttemplateUrl: \"./source-list.component.html\",\r\n\tstyleUrls: [ \"./source-list.component.scss\" ]\r\n})\r\nexport class SourceListComponent implements OnInit {\r\n\tsources: Observable<GetSourcesApiModel.Response>;\r\n\r\n\tconstructor(\r\n\t\tprivate sourceService: SourceService // private store: Store<FeatureReducer.FeatureState>\r\n\t) {\r\n\t\tthis.sources = this.sourceService.getSources();\r\n\t\t// this.sources.subscribe(data => { debugger})\r\n\t\t//this.configs.subscribe(data => {\r\n\t\t//        debugger;\r\n\t\t//        this.store.dispatch(new ConfigLoaded(data.Result));\r\n\t\t//});\r\n\t}\r\n\r\n\tngOnInit() {}\r\n}\r\n","import { NgModule, Component, OnInit, Output, EventEmitter, Input, ViewChild, ViewContainerRef } from \"@angular/core\";\r\n\r\nimport { FormGroup, FormBuilder, FormControl, AbstractControl, FormArray, Validators } from \"@angular/forms\";\r\nimport { UpsertSourceApiModel, SourceModel } from \"../../models\";\r\nimport { SourceService } from \"../../services/source.service\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { SourceSubmit } from \"../../actions\";\r\nimport * as FeatureReducer from \"../../reducers\";\r\nimport { Subscription } from \"rxjs/Rx\";\r\n\r\n@Component({\r\n\tselector: \"source-source-upsert\",\r\n\ttemplateUrl: \"./source-upsert.component.html\",\r\n\tstyleUrls: [ \"./source-upsert.component.scss\" ]\r\n})\r\nexport class SourceUpsertComponent implements OnInit {\r\n\t//configInforamation;\r\n\tformGroup: FormGroup = UpsertSourceApiModel.Request.formGroup;\r\n\tsources: Observable<SourceModel[]>;\r\n\tthresholds: AbstractControl[];\r\n\tdata: any;\r\n\ttypes = [ \"critical\", \"goal\" ];\r\n\tconstructor(\r\n\t\tprivate sourceService: SourceService,\r\n\t\tprivate formBuilder: FormBuilder,\r\n\t\tprivate route: ActivatedRoute,\r\n\t\tprivate store: Store<FeatureReducer.FeatureState>\r\n\t) {\r\n\t\t// this.sources = this.sourceService.getSources();\r\n\t\tthis.thresholds = (this.formGroup.controls.Thresholds as FormArray).controls;\r\n\t\tthis.route.params.subscribe(params => {\r\n\t\t\tconst sourceId: string = params[\"id\"];\r\n\t\t\tsourceId &&\r\n\t\t\t\tthis.sourceService.getSourceById(sourceId).subscribe(data => {\r\n\t\t\t\t\tthis.formGroup.patchValue({\r\n\t\t\t\t\t\t_id: data._id,\r\n\t\t\t\t\t\tEndpoint: data.Endpoint,\r\n\t\t\t\t\t\tInterval: data.Interval,\r\n\t\t\t\t\t\tIsActive: data.IsActive || false,\r\n\t\t\t\t\t\tThresholds: data.Thresholds\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tdata.Thresholds.forEach(mapping =>\r\n\t\t\t\t\t\tthis.addItem(mapping.Name, mapping.Formula, mapping.Message, mapping.Type)\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tngOnInit() {}\r\n\r\n\taddItem(Name: string = \"\", Formula: string = \"\", Message: string = \"\", Type: string = \"critical\") {\r\n\t\tconst control = <FormArray>this.formGroup.controls[\"Thresholds\"];\r\n\t\tcontrol.push(\r\n\t\t\tnew FormGroup({\r\n\t\t\t\tName: new FormControl(Name, [ Validators.required ]),\r\n\t\t\t\tFormula: new FormControl(Formula, [ Validators.required ]),\r\n\t\t\t\tMessage: new FormControl(Message, [ Validators.required ]),\r\n\t\t\t\tType: new FormControl(Type, [ Validators.required ])\r\n\t\t\t})\r\n\t\t);\r\n\t\t//    control.push(this.formBuilder.group({\r\n\t\t//      Name: [Name],\r\n\t\t//      Formula: [Formula],\r\n\t\t//      Message: [Message]\r\n\t\t//    }));\r\n\t}\r\n\r\n\tremoveItem(i: number) {\r\n\t\tconst control = <FormArray>this.formGroup.controls[\"Thresholds\"];\r\n\t\tcontrol.removeAt(i);\r\n\t}\r\n\r\n\tgetData() {\r\n\t\tconst o$ = this.sourceService.getData(this.formGroup.value);\r\n\t\to$.subscribe(data => {\r\n\t\t\tthis.data = data.Data;\r\n\t\t});\r\n\t\treturn o$;\r\n\t}\r\n\r\n\tadd(data) {\r\n\t\t//if (!this.formGroup.valid) return;\r\n\t\tthis.store.dispatch(new SourceSubmit(this.formGroup.value));\r\n\t}\r\n}\r\n","import { ModuleWithProviders } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\nimport { SourceModuleContainerComponent } from \"./smart-components/source-module-container/source-module-container.component\";\r\nimport { SourceListComponent } from \"./smart-components/source-list/source-list.component\";\r\nimport { SourceUpsertComponent } from \"./smart-components/source-upsert/source-upsert.component\";\r\n\r\nconst routes: Routes = [\r\n\t{\r\n\t\tpath: \"source\",\r\n\t\tcomponent: SourceModuleContainerComponent,\r\n\t\tchildren: [\r\n\t\t\t{\r\n\t\t\t\tpath: \"\",\r\n\t\t\t\tcomponent: SourceListComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: \"edit/:id\",\r\n\t\t\t\tcomponent: SourceUpsertComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: \"add\",\r\n\t\t\t\tcomponent: SourceUpsertComponent\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n];\r\n\r\nexport const RoutingModule: ModuleWithProviders = RouterModule.forChild(routes);\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport { Actions, Effect, ofType } from \"@ngrx/effects\";\r\nimport { of } from \"rxjs/observable/of\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { map, switchMap, catchError, pluck } from \"rxjs/operators\";\r\nimport { Router } from \"@angular/router\";\r\n\r\nimport { SourceActionTypes, SourceSubmit, SourceSubmitSucceed, SourceSubmitFailed } from \"../actions\";\r\nimport { SourceModel, UpsertSourceApiModel } from \"../models\";\r\nimport { SourceService } from \"../services/source.service\";\r\n\r\n@Injectable()\r\nexport class SourceEffects {\r\n\tconstructor(private actions$: Actions<any>, private router: Router, private sourceService: SourceService) {}\r\n\r\n\t@Effect()\r\n\tafterSubmitSource$ = this.actions$.pipe(\r\n\t\tofType(SourceActionTypes.SOURCE_SUBMIT),\r\n\t\tpluck(\"payload\"),\r\n\t\tswitchMap((data: UpsertSourceApiModel.Request) => {\r\n\t\t\treturn this.sourceService\r\n\t\t\t\t.upsertSource(data)\r\n\t\t\t\t.pipe(map(res => new SourceSubmitSucceed()), catchError(() => of(new SourceSubmitFailed())));\r\n\t\t})\r\n\t);\r\n\r\n\t@Effect()\r\n\tSigninSucceed$ = this.actions$.pipe(\r\n\t\tofType(SourceActionTypes.SOURCE_SUBMIT_SUCCEED),\r\n\t\tswitchMap(() => {\r\n\t\t\tthis.router.navigate([ \"source\" ]);\r\n\t\t\treturn Observable.empty();\r\n\t\t})\r\n\t);\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { StoreModule, Store } from \"@ngrx/store\";\r\nimport { EffectsModule } from \"@ngrx/effects\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport {\r\n\tMatIconModule,\r\n\tMatButtonModule,\r\n\tMatCardModule,\r\n\tMatSnackBarModule,\r\n\tMatSidenavModule,\r\n\tMatExpansionModule,\r\n\tMatSelectModule,\r\n\tMatFormFieldModule,\r\n\tMatListModule,\r\n\tMatMenuModule,\r\n\tMatRadioModule,\r\n\tMatInputModule,\r\n\tMatCheckboxModule,\r\n\tMatToolbarModule,\r\n\tMatDatepickerModule,\r\n\tMatProgressBarModule\r\n} from \"@angular/material\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\nimport { SharedModule } from \"@soushians/shared\";\r\n\r\nimport { SourceReducers } from \"./reducers/index\";\r\nimport { RoutingModule } from \"./source.routing-module\";\r\nimport { SourceEffects } from \"./effects/source.effects\";\r\nimport { SourceListComponent } from \"./smart-components/source-list/source-list.component\";\r\nimport { SourceUpsertComponent } from \"./smart-components/source-upsert/source-upsert.component\";\r\nimport { SourceModuleContainerComponent } from \"./smart-components/source-module-container/source-module-container.component\";\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n\t\tRouterModule,\r\n\t\tFormsModule,\r\n\t\tReactiveFormsModule,\r\n\t\tHttpClientModule,\r\n\t\tFlexLayoutModule,\r\n\t\tMatIconModule,\r\n\t\tMatButtonModule,\r\n\t\tMatCardModule,\r\n\t\tMatSnackBarModule,\r\n\t\tMatSidenavModule,\r\n\t\tMatExpansionModule,\r\n\t\tMatSelectModule,\r\n\t\tMatFormFieldModule,\r\n\t\tMatListModule,\r\n\t\tMatMenuModule,\r\n\t\tMatCheckboxModule,\r\n\t\tMatRadioModule,\r\n\t\tMatInputModule,\r\n\t\tMatToolbarModule,\r\n\t\tMatDatepickerModule,\r\n\t\tMatProgressBarModule,\r\n\t\tBrowserModule,\r\n\t\tStoreModule.forFeature(\"source\", SourceReducers),\r\n\t\tBrowserAnimationsModule,\r\n\t\tRoutingModule,\r\n\t\tEffectsModule.forFeature([SourceEffects]),\r\n\t\tSharedModule\r\n\t],\r\n\tdeclarations: [SourceListComponent, SourceUpsertComponent, SourceModuleContainerComponent],\r\n\texports: []\r\n})\r\nexport class SourceModule {\r\n\tconstructor() {\r\n\t\t(<any>window).___starter = (<any>window).___starter || {};\r\n\t\t(<any>window).___starter.source = \"8.0.10\";\r\n\t}\r\n}\r\n"],"names":["source.SourceActionTypes","sourceList.Reducer","Observable","tslib_1.__decorate"],"mappings":"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"}