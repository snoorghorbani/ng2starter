{
  "version": 3,
  "file": "soushians-source.umd.min.js",
  "sources": [
    "ng://@soushians/source/projects/soushians/source/src/lib/actions/source.action.ts",
    "ng://@soushians/source/projects/soushians/source/src/lib/reducers/source-list.reducer.ts",
    "ng://@soushians/source/projects/soushians/source/src/lib/reducers/index.ts",
    "ng://@soushians/source/projects/soushians/source/src/lib/models/get-sources-api.model.ts",
    "ng://@soushians/source/projects/soushians/source/src/lib/models/upsert-source-api.model.ts",
    "ng://@soushians/source/projects/soushians/source/src/lib/services/source.service.ts",
    "ng://@soushians/source/projects/soushians/source/src/lib/smart-components/source-list/source-list.component.ts",
    "ng://@soushians/source/projects/soushians/source/src/lib/smart-components/source-module-container/source-module-container.component.ts",
    "ng://@soushians/source/projects/soushians/source/src/lib/smart-components/source-upsert/source-upsert.component.ts",
    "ng://@soushians/source/projects/soushians/source/src/lib/source.routing-module.ts",
    "ng://@soushians/source/projects/soushians/source/src/lib/effects/source.effects.ts",
    "ng://@soushians/source/projects/soushians/source/src/lib/source.module.ts"
  ],
  "sourcesContent": [
    "import { Action } from \"@ngrx/store\";\r\nimport { SourceModel, UpsertSourceApiModel } from \"../models\";\r\n\r\nexport enum SourceActionTypes {\r\n\tSOURCE_SUBMIT = \"[SOURCE] source submit\",\r\n\tSOURCE_SUBMIT_SUCCEED = \"[SOURCE] source submit succeed\",\r\n\tSOURCE_SUBMIT_FAILED = \"[SOURCE] source submit failed\"\r\n}\r\n\r\nexport class SourceSubmit implements Action {\r\n\treadonly type = SourceActionTypes.SOURCE_SUBMIT;\r\n\tconstructor(public payload: UpsertSourceApiModel.Request) {}\r\n}\r\nexport class SourceSubmitSucceed implements Action {\r\n\treadonly type = SourceActionTypes.SOURCE_SUBMIT_SUCCEED;\r\n}\r\nexport class SourceSubmitFailed implements Action {\r\n\treadonly type = SourceActionTypes.SOURCE_SUBMIT_FAILED;\r\n}\r\nexport type Actions = SourceSubmit | SourceSubmitSucceed | SourceSubmitFailed;\r\n",
    "import * as source from \"../actions/source.action\";\r\nimport { SourceModel, UpsertSourceApiModel } from \"../models\";\r\n\r\nexport interface State {\r\n\tdata: SourceModel[];\r\n}\r\n\r\nconst initialState: State = {\r\n\tdata: []\r\n};\r\n\r\nexport function Reducer(state = initialState, action: source.Actions): State {\r\n\tswitch (action.type) {\r\n\t\tcase source.SourceActionTypes.SOURCE_SUBMIT:\r\n\t\t\treturn {\r\n\t\t\t\t...state\r\n\t\t\t};\r\n\t\tcase source.SourceActionTypes.SOURCE_SUBMIT_SUCCEED:\r\n\t\t\treturn {\r\n\t\t\t\t...state\r\n\t\t\t};\r\n\t\tcase source.SourceActionTypes.SOURCE_SUBMIT_FAILED:\r\n\t\t\treturn {\r\n\t\t\t\t...state\r\n\t\t\t};\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport const getSourceListData = (state: State) => state.data;\r\n",
    "import { createSelector, createFeatureSelector, MemoizedSelector } from '@ngrx/store';\r\n\r\nimport * as sourceList from './source-list.reducer';\r\n\r\nexport interface SourceState {\r\n        list: sourceList.State\r\n}\r\n\r\nexport const SourceReducers = {\r\n      sources: sourceList.Reducer\r\n};\r\n\r\nexport interface FeatureState {\r\n        'sources': SourceState;\r\n}\r\n\r\n\r\n\r\n//#region selectors\r\n\r\nexport const selectSourceState = createFeatureSelector<SourceState>(\"source\");\r\n\r\n//#endregion\r\n\r\nexport const getSourceList = createSelector(\r\n        selectSourceState,\r\n        (state: SourceState) => state.list\r\n);\r\n//export const getSourceListData = createSelector(\r\n//        getSourceList,\r\n//        sourceList.getSourceListData\r\n//);\r\n",
    "import { Injectable } from \"@angular/core\";\r\n// import { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { SourceModel } from \"./source.model\";\r\n\r\nexport namespace GetSourcesApiModel {\r\n\t// export class Request implements HttpRequestBaseModel<Request> {\r\n\texport class Request {\r\n\t\tconstructor(initValue: GetSourcesApiModel.Request = {} as GetSourcesApiModel.Request) {\r\n\t\t\tObject.keys(initValue).forEach(key => (this[key] = initValue[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {};\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: SourceModel[];\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\n// import { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators, FormArray } from \"@angular/forms\";\r\nimport { SourceModel } from \"../models\";\r\n\r\nexport namespace UpsertSourceApiModel {\r\n\t// export class Request implements HttpRequestBaseModel<Request> {\r\n\texport class Request {\r\n\t\t_id: string;\r\n\t\tEndpoint: string;\r\n\t\tInterval: number;\r\n\t\tIsActive: boolean;\r\n\t\tThresholds: {\r\n\t\t\tName: string;\r\n\t\t\tFormula: string;\r\n\t\t\tMessage: string;\r\n\t\t\tType: boolean;\r\n\t\t}[];\r\n\t\tconstructor(initValue = {} as UpsertSourceApiModel.Request) {\r\n\t\t\tObject.keys(initValue).forEach(key => (this[key] = initValue[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {\r\n\t\t\t\t_id: this._id,\r\n\t\t\t\tEndpoint: this.Endpoint,\r\n\t\t\t\tInterval: this.Interval,\r\n\t\t\t\tIsActive: this.IsActive,\r\n\t\t\t\tThresholds: this.Thresholds\r\n\t\t\t};\r\n\t\t}\r\n\t\tstatic get formGroup() {\r\n\t\t\treturn new FormGroup({\r\n\t\t\t\t_id: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tEndpoint: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tInterval: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tIsActive: new FormControl(\"false\", [ Validators.required ]),\r\n\t\t\t\tThresholds: new FormArray([])\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: SourceModel;\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs/Rx\";\r\n\r\nimport { UpsertSourceApiModel, GetSourcesApiModel, SourceModel } from \"../models\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class SourceService {\r\n\tresponseCache: any;\r\n\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\tgetSources(): Observable<GetSourcesApiModel.Response> {\r\n\t\treturn this.http\r\n\t\t\t.get<GetSourcesApiModel.Response>(\"http://localhost:3000/api/source\")\r\n\t\t\t.map(response => {\r\n\t\t\t\treturn response;\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\treturn Observable.throw(err);\r\n\t\t\t});\r\n\t}\r\n\tgetSourceById(id: string): Observable<SourceModel> {\r\n\t\treturn this.http\r\n\t\t\t.get(`http://localhost:3000/api/source/${id}`)\r\n\t\t\t.map((response: UpsertSourceApiModel.Response) => response.Result)\r\n\t\t\t.catch(err => {\r\n\t\t\t\treturn Observable.throw(err);\r\n\t\t\t});\r\n\t}\r\n\tupsertSource(body: UpsertSourceApiModel.Request): Observable<any> {\r\n\t\tvar model = new UpsertSourceApiModel.Request(body);\r\n\t\treturn this.http\r\n\t\t\t.put(\"http://localhost:3000/api/source\", model.getRequestBody(), { withCredentials: false })\r\n\t\t\t.map(response => response)\r\n\t\t\t.catch(err => {\r\n\t\t\t\treturn Observable.throw(err);\r\n\t\t\t});\r\n\t}\r\n\r\n\tgetData(source: SourceModel, time: number = 0): Observable<any> {\r\n\t\treturn this.http\r\n\t\t\t.get(`http://localhost:3000/api/data`, {\r\n\t\t\t\tparams: {\r\n\t\t\t\t\tsourceId: source._id,\r\n\t\t\t\t\ttime: null\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.map((res: any) => res.Result);\r\n\t}\r\n}\r\n",
    "import { Component, OnInit } from \"@angular/core\";\r\nimport { SourceService } from \"../../services/source.service\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { GetSourcesApiModel } from \"../../models\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport * as FeatureReducer from \"../../reducers\";\r\n//import { SourceUpsertAction } from 'app/actions';\r\n\r\n@Component({\r\n\tselector: \"source-list\",\r\n\ttemplate: `<div fxFlexLayout=\"row\" fxLayoutWrap fxLayoutAlign=\"start center\">\r\n  <mat-card class=\"source-box\" *ngFor=\"let source of (sources | async)?.Result\" [fxFlex]=\"32\">\r\n      <mat-card-title fxFlexLayout=\"row\" flexLayoutAlign=\"space-between center\">\r\n        \r\n        <a [routerLink]=\"['edit' ,  source._id]\" fxFlex=\"40px\">\r\n          <mat-icon fxLayoutAlign=\"start center\" aria-label=\"edit source\">edit</mat-icon>\r\n        </a>\r\n        <span fxFlex fxLayoutAlign=\"end center\" fxFlexAlign=\"center\">{{source.Endpoint}}</span>\r\n      </mat-card-title>\r\n    \r\n  </mat-card>\r\n\r\n  <div fxLayoutAlign='end center'>\r\n    <button mat-fab routerLink=\"../source/add\" class=\"add-btn\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n\r\n`,\r\n\tstyles: [`:host{width:100%}.source-box{margin:5px}.source-box a{text-decoration:none}.add-btn{position:fixed;bottom:50px;left:25px;z-index:1}`]\r\n})\r\nexport class SourceListComponent implements OnInit {\r\n\tsources: Observable<GetSourcesApiModel.Response>;\r\n\r\n\tconstructor(\r\n\t\tprivate sourceService: SourceService // private store: Store<FeatureReducer.FeatureState>\r\n\t) {\r\n\t\tdebugger;\r\n\t\tthis.sources = this.sourceService.getSources();\r\n\t\t// this.sources.subscribe(data => { debugger})\r\n\t\t//this.configs.subscribe(data => {\r\n\t\t//        debugger;\r\n\t\t//        this.store.dispatch(new ConfigLoaded(data.Result));\r\n\t\t//});\r\n\t}\r\n\r\n\tngOnInit() {}\r\n}\r\n",
    "import { Component, OnInit } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { SourceService } from \"../../services/source.service\";\r\n\r\n@Component({\r\n\tselector: \"source-module-container\",\r\n\ttemplate: `<div fxLayoutAlign=\"\" fxflex=\"100\" fxLayout=\"column\">\r\n    <router-outlet></router-outlet>\r\n</div>\r\n`\r\n})\r\nexport class SourceModuleContainerComponent implements OnInit {\r\n\tconstructor(private service: SourceService) {}\r\n\r\n\tngOnInit() {}\r\n}\r\n",
    "import { NgModule, Component, OnInit, Output, EventEmitter, Input, ViewChild, ViewContainerRef } from \"@angular/core\";\r\n\r\nimport { FormGroup, FormBuilder, FormControl, AbstractControl, FormArray, Validators } from \"@angular/forms\";\r\nimport { UpsertSourceApiModel, SourceModel } from \"../../models\";\r\nimport { SourceService } from \"../../services/source.service\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { SourceSubmit } from \"../../actions\";\r\nimport * as FeatureReducer from \"../../reducers\";\r\nimport { Subscription } from \"rxjs/Rx\";\r\n\r\n@Component({\r\n\tselector: \"source-source-upsert\",\r\n\ttemplate: `<div fxLayout=\"column\">\r\n  <div fxFlex=\"100\">\r\n    <mat-card fxLayout=\"column\" fxFlex=\"50\">\r\n      <form [formGroup]=\"formGroup\" fxLayout='column'>\r\n\r\n        <mat-card-header>\r\n          <mat-card-title>افزودن نمودار جدید</mat-card-title>\r\n        </mat-card-header>\r\n        <mat-card-content>\r\n          <mat-form-field fxFlexFill>\r\n            <input matInput placeholder=\"آدرس\" formControlName=\"Endpoint\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlexFill>\r\n            <input matInput placeholder=\"مدت زمان به روز رسانی داده\" formControlName=\"Interval\">\r\n          </mat-form-field>\r\n          <div>\r\n            <mat-checkbox formControlName=\"IsActive\" fxFlexFill>وضعیت</mat-checkbox>\r\n          </div>\r\n        </mat-card-content>\r\n      </form>\r\n    </mat-card>\r\n\r\n    <mat-card fxLayout=\"column\" fxFlex=\"20\">\r\n      <mat-card-content fxLayout=\"column\">\r\n        <div>\r\n          <button fxFlex mat-raised-button color=\"primary\" (click)=\"getData()\">ساختار دیتا</button>\r\n        </div>\r\n        <div class=\"item-margin\">\r\n          <!-- TODO: -->\r\n          <!-- <data-mapper destination=\"value\" [data]=\"data\"></data-mapper> -->\r\n        </div>\r\n      </mat-card-content>\r\n    </mat-card>\r\n\r\n    <mat-card fxLayout=\"column\" fxFlex=\"30\">\r\n      <mat-card-content fxLayout=\"column\">\r\n        <div fxLayout=\"column\" fxLayoutGap=\"5px\">\r\n          <div *ngFor=\"let threshold of thresholds; let i=index\" fxFlex=\"100\" class=\"add-item\">\r\n            <div fxLayout=\"column\">\r\n              <div [formGroup]=\"thresholds[i]\" fxLayout=\"column\">\r\n                <mat-form-field fxFlexFill>\r\n                  <input matInput placeholder=\"نام\" formControlName=\"Name\">\r\n                </mat-form-field>\r\n                <mat-form-field fxFlexFill>\r\n                  <input class=\"ltr\" matInput placeholder=\"فرمول\" formControlName=\"Formula\">\r\n                </mat-form-field>\r\n                <mat-form-field fxFlexFill>\r\n                  <input matInput placeholder=\"توضیح\" formControlName=\"Message\">\r\n                </mat-form-field>\r\n                <mat-radio-group formControlName=\"Type\" fxFlexFill>\r\n                  <label>نوع :</label>\r\n                  <mat-radio-button *ngFor=\"let item of types\" [value]=\"item\" class=\"form-element-margin\">\r\n                    {{item}}\r\n                  </mat-radio-button>\r\n                </mat-radio-group>\r\n\r\n                <button (click)=\"removeItem(i)\" fxFlex mat-button color=\"primary\" type=\"button\">پاک کردن</button>\r\n              </div>\r\n              <br />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"item-margin\">\r\n          <button (click)=\"addItem()\" fxFlex mat-raised-button color=\"primary\" type=\"button\">افزودن آستانه</button>\r\n        </div>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n  <div fxFlex=\"100\">\r\n    <mat-card fxLayoutAlign=\"end center\" fxLayout=\"row\" fxFlex=\"100\">\r\n      <mat-card-content>\r\n        <button mat-raised-button fxFlex color=\"primary\" (click)=\"add($event)\">ثبت</button>\r\n        <button fxFlex mat-raised-button routerLink='/source'  fxLayoutGap=\"5px\">انصراف</button>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n</div>\r\n`,\r\n\tstyles: [`mat-card{margin:5px}.add-item{border:1px solid #eaeaea;padding:10px;margin:5px 0}.item-margin{margin-top:10px}button[type=submit]{margin-left:5px}.ltr{direction:ltr}.form-element-margin{margin:5px 10px}`]\r\n})\r\nexport class SourceUpsertComponent implements OnInit {\r\n\t//configInforamation;\r\n\tformGroup: FormGroup = UpsertSourceApiModel.Request.formGroup;\r\n\tsources: Observable<SourceModel[]>;\r\n\tthresholds: AbstractControl[];\r\n\tdata: any;\r\n\ttypes = [ \"critical\", \"goal\" ];\r\n\tconstructor(\r\n\t\tprivate sourceService: SourceService,\r\n\t\tprivate formBuilder: FormBuilder,\r\n\t\tprivate route: ActivatedRoute,\r\n\t\tprivate store: Store<FeatureReducer.FeatureState>\r\n\t) {\r\n\t\t// this.sources = this.sourceService.getSources();\r\n\t\tthis.thresholds = (this.formGroup.controls.Thresholds as FormArray).controls;\r\n\t\tthis.route.params.subscribe(params => {\r\n\t\t\tconst sourceId: string = params[\"id\"];\r\n\t\t\tsourceId &&\r\n\t\t\t\tthis.sourceService.getSourceById(sourceId).subscribe(data => {\r\n\t\t\t\t\tthis.formGroup.patchValue({\r\n\t\t\t\t\t\t_id: data._id,\r\n\t\t\t\t\t\tEndpoint: data.Endpoint,\r\n\t\t\t\t\t\tInterval: data.Interval,\r\n\t\t\t\t\t\tIsActive: data.IsActive || false,\r\n\t\t\t\t\t\tThresholds: data.Thresholds\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tdata.Thresholds.forEach(mapping =>\r\n\t\t\t\t\t\tthis.addItem(mapping.Name, mapping.Formula, mapping.Message, mapping.Type)\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tngOnInit() {}\r\n\r\n\taddItem(Name: string = \"\", Formula: string = \"\", Message: string = \"\", Type: string = \"critical\") {\r\n\t\tconst control = <FormArray>this.formGroup.controls[\"Thresholds\"];\r\n\t\tcontrol.push(\r\n\t\t\tnew FormGroup({\r\n\t\t\t\tName: new FormControl(Name, [ Validators.required ]),\r\n\t\t\t\tFormula: new FormControl(Formula, [ Validators.required ]),\r\n\t\t\t\tMessage: new FormControl(Message, [ Validators.required ]),\r\n\t\t\t\tType: new FormControl(Type, [ Validators.required ])\r\n\t\t\t})\r\n\t\t);\r\n\t\t//    control.push(this.formBuilder.group({\r\n\t\t//      Name: [Name],\r\n\t\t//      Formula: [Formula],\r\n\t\t//      Message: [Message]\r\n\t\t//    }));\r\n\t}\r\n\r\n\tremoveItem(i: number) {\r\n\t\tconst control = <FormArray>this.formGroup.controls[\"Thresholds\"];\r\n\t\tcontrol.removeAt(i);\r\n\t}\r\n\r\n\tgetData() {\r\n\t\tconst o$ = this.sourceService.getData(this.formGroup.value);\r\n\t\to$.subscribe(data => {\r\n\t\t\tdebugger;\r\n\t\t\tthis.data = data.Data;\r\n\t\t});\r\n\t\treturn o$;\r\n\t}\r\n\r\n\tadd(data) {\r\n\t\t//if (!this.formGroup.valid) return;\r\n\t\tthis.store.dispatch(new SourceSubmit(this.formGroup.value));\r\n\t}\r\n}\r\n",
    "import { ModuleWithProviders } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\n\r\nimport { SourceListComponent, SourceUpsertComponent, SourceModuleContainerComponent } from \"./smart-components\";\r\n\r\nconst routes: Routes = [\r\n\t{\r\n\t\tpath: \"source\",\r\n\t\tcomponent: SourceModuleContainerComponent,\r\n\t\tchildren: [\r\n\t\t\t{\r\n\t\t\t\tpath: \"\",\r\n\t\t\t\tcomponent: SourceListComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: \"edit/:id\",\r\n\t\t\t\tcomponent: SourceUpsertComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: \"add\",\r\n\t\t\t\tcomponent: SourceUpsertComponent\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n];\r\n\r\nexport const RoutingModule: ModuleWithProviders = RouterModule.forChild(routes);\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { of } from \"rxjs/observable/of\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\nimport { Router } from \"@angular/router\";\r\n\r\nimport { SourceActionTypes, SourceSubmit, SourceSubmitSucceed, SourceSubmitFailed } from \"../actions\";\r\nimport { SourceModel, UpsertSourceApiModel } from \"../models\";\r\nimport { SourceService } from \"../services/source.service\";\r\n\r\n@Injectable()\r\nexport class SourceEffects {\r\n\tconstructor(private actions$: Actions<any>, private router: Router, private sourceService: SourceService) {}\r\n\r\n\t@Effect()\r\n\tafterSubmitSource$ = this.actions$.ofType(SourceActionTypes.SOURCE_SUBMIT).pipe(\r\n\t\tmap(action => action.payload),\r\n\t\tswitchMap((data: UpsertSourceApiModel.Request) => {\r\n\t\t\treturn this.sourceService\r\n\t\t\t\t.upsertSource(data)\r\n\t\t\t\t.pipe(map(res => new SourceSubmitSucceed()), catchError(() => Observable.of(new SourceSubmitFailed())));\r\n\t\t})\r\n\t);\r\n\r\n\t@Effect()\r\n\tSigninSucceed$ = this.actions$.ofType(SourceActionTypes.SOURCE_SUBMIT_SUCCEED).pipe(\r\n\t\tswitchMap(() => {\r\n\t\t\tthis.router.navigate([ \"source\" ]);\r\n\t\t\treturn Observable.empty();\r\n\t\t})\r\n\t);\r\n}\r\n",
    "import { NgModule } from \"@angular/core\";\r\nimport { StoreModule, Store } from \"@ngrx/store\";\r\nimport { EffectsModule } from \"@ngrx/effects\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport {\r\n\tMatIconModule,\r\n\tMatButtonModule,\r\n\tMatCardModule,\r\n\tMatSnackBarModule,\r\n\tMatSidenavModule,\r\n\tMatExpansionModule,\r\n\tMatSelectModule,\r\n\tMatFormFieldModule,\r\n\tMatListModule,\r\n\tMatMenuModule,\r\n\tMatRadioModule,\r\n\tMatInputModule,\r\n\tMatCheckboxModule,\r\n\tMatToolbarModule,\r\n\tMatDatepickerModule,\r\n\tMatProgressBarModule\r\n} from \"@angular/material\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\nimport { SharedModule } from \"@soushians/shared\";\r\n\r\nimport { SourceReducers } from \"./reducers\";\r\nimport { RoutingModule } from \"./source.routing-module\";\r\nimport { SourceEffects } from \"./effects/source.effects\";\r\nimport { SourceListComponent } from \"./smart-components/source-list/source-list.component\";\r\nimport { SourceUpsertComponent } from \"./smart-components/source-upsert/source-upsert.component\";\r\nimport { SourceModuleContainerComponent } from \"./smart-components/source-module-container/source-module-container.component\";\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n\t\tRouterModule,\r\n\t\tFormsModule,\r\n\t\tReactiveFormsModule,\r\n\t\tHttpClientModule,\r\n\t\tFlexLayoutModule,\r\n\t\tMatIconModule,\r\n\t\tMatButtonModule,\r\n\t\tMatCardModule,\r\n\t\tMatSnackBarModule,\r\n\t\tMatSidenavModule,\r\n\t\tMatExpansionModule,\r\n\t\tMatSelectModule,\r\n\t\tMatFormFieldModule,\r\n\t\tMatListModule,\r\n\t\tMatMenuModule,\r\n\t\tMatCheckboxModule,\r\n\t\tMatRadioModule,\r\n\t\tMatInputModule,\r\n\t\tMatToolbarModule,\r\n\t\tMatDatepickerModule,\r\n\t\tMatProgressBarModule,\r\n\t\tBrowserModule,\r\n\t\tStoreModule.forFeature(\"source\", SourceReducers),\r\n\t\tBrowserAnimationsModule,\r\n\t\tRoutingModule,\r\n\t\tEffectsModule.forFeature([ SourceEffects ]),\r\n\t\tSharedModule\r\n\t],\r\n\tdeclarations: [ SourceListComponent, SourceUpsertComponent, SourceModuleContainerComponent ],\r\n\texports: []\r\n})\r\nexport class SourceModule {}\r\n"
  ],
  "names": [
    "SourceSubmit",
    "payload",
    "this",
    "type",
    "SourceActionTypes",
    "SourceSubmitSucceed",
    "SourceSubmitFailed",
    "initialState",
    "data",
    "GetSourcesApiModel",
    "UpsertSourceApiModel",
    "SourceReducers",
    "sources",
    "state",
    "action",
    "source.SourceActionTypes",
    "Object",
    "assign",
    "selectSourceState",
    "createFeatureSelector",
    "createSelector",
    "list",
    "Request",
    "initValue",
    "_this",
    "prototype",
    "getRequestBody",
    "Response",
    "_id",
    "Endpoint",
    "Interval",
    "IsActive",
    "Thresholds",
    "get",
    "FormGroup",
    "FormControl",
    "Validators",
    "required",
    "FormArray",
    "SourceService",
    "http",
    "getSources",
    "map",
    "response",
    "catch",
    "err",
    "Observable",
    "throw",
    "getSourceById",
    "id",
    "Result",
    "upsertSource",
    "body",
    "model",
    "put",
    "withCredentials",
    "getData",
    "source",
    "time",
    "params",
    "sourceId",
    "res",
    "decorators",
    "SourceListComponent",
    "sourceService",
    "ngOnInit",
    "Component",
    "args",
    "SourceModuleContainerComponent",
    "service",
    "SourceUpsertComponent",
    "formBuilder",
    "route",
    "store",
    "formGroup",
    "thresholds",
    "controls",
    "subscribe",
    "patchValue",
    "forEach",
    "mapping",
    "addItem",
    "Name",
    "Formula",
    "Message",
    "Type",
    "push",
    "removeAt",
    "i",
    "o$",
    "value",
    "add",
    "dispatch",
    "routes",
    "path",
    "component",
    "children",
    "RoutingModule",
    "RouterModule",
    "forChild",
    "SourceEffects",
    "actions$",
    "router",
    "afterSubmitSource$",
    "ofType",
    "pipe",
    "switchMap",
    "catchError",
    "of",
    "SigninSucceed$",
    "navigate",
    "empty",
    "ctorParameters",
    "tslib_1.__metadata",
    "SourceModule",
    "NgModule",
    "imports",
    "CommonModule",
    "FormsModule",
    "ReactiveFormsModule",
    "HttpClientModule",
    "FlexLayoutModule",
    "MatIconModule",
    "MatButtonModule",
    "MatCardModule",
    "MatSnackBarModule",
    "MatSidenavModule",
    "MatExpansionModule",
    "MatSelectModule",
    "MatFormFieldModule",
    "MatListModule",
    "MatMenuModule",
    "MatCheckboxModule",
    "MatRadioModule",
    "MatInputModule",
    "MatToolbarModule",
    "MatDatepickerModule",
    "MatProgressBarModule",
    "BrowserModule",
    "StoreModule",
    "forFeature",
    "BrowserAnimationsModule",
    "EffectsModule",
    "SharedModule"
  ],
  "mappings": "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"
}
