{
  "version": 3,
  "file": "authentication-module-config.component.js",
  "sources": [
    "ng://@soushians/config/projects/soushians/config/src/lib/dumb-components/authentication-module-config/authentication-module-config.component.ts"
  ],
  "sourcesContent": [
    "import { NgModule, Component, OnInit, Output, EventEmitter, Input, Injector } from \"@angular/core\";\r\nimport { FormGroup, Validators, FormControl } from \"@angular/forms\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\n@Component({\r\n\tselector: \"config-authentication-module-config\",\r\n\ttemplate: `<h2>Endpoints</h2>\r\n<div [formGroup]=\"formGroup.controls.endpoints\" fxLayout=\"column\">\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"sign in\" formControlName=\"signIn\">\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"sign out\" formControlName=\"signOut\">\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"user information\" formControlName=\"userInformation\">\r\n    </mat-form-field>\r\n</div>\r\n<h2>Forms</h2>\r\n<div [formGroup]=\"formGroup.controls.forms\" fxLayout=\"column\">\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"SignIn Forms\" formControlName=\"signIn\">\r\n    </mat-form-field>\r\n            <!-- <ngs-form-selector (select)=\"setFormId($event,'signIn')\"></ngs-form-selector> -->\r\n</div>`\r\n})\r\nexport class AuthenticationModuleConfigComponent {\r\n\tformGroup: FormGroup = new FormGroup({\r\n\t\tendpoints: new FormGroup({\r\n\t\t\tsignIn: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\tsignOut: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\tuserInformation: new FormControl(\"\", [ Validators.required ])\r\n\t\t}),\r\n\t\tforms: new FormGroup({\r\n\t\t\tsignIn: new FormControl(\"\", [ Validators.required ])\r\n\t\t})\r\n\t});\r\n\t@Input()\r\n\tset configFormGroup(configFormGroup: FormGroup) {\r\n\t\tthis.formGroup.patchValue(configFormGroup.value);\r\n\t\tconfigFormGroup.valueChanges.subscribe(data => {\r\n\t\t\tthis.formGroup.patchValue(data);\r\n\t\t});\r\n\t}\r\n\t@Output() configChanged = new EventEmitter();\r\n\tconstructor(private injector: Injector) {\r\n\t\tthis.configFormGroup = this.injector.get(\"configFormGroup\");\r\n\t}\r\n\tsetFormId(formId: string, formName: string) {\r\n\t\tdebugger;\r\n\t\tthis.formGroup.patchValue({ [formName]: formId });\r\n\t}\r\n}\r\n"
  ],
  "names": [],
  "mappings": ";;;;AAAA,OAAO,EAAY,SAAS,EAAU,MAAM,EAAE,YAAY,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AACnG,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAyBpE,MAAM;;;;IAmBL,YAAoB,QAAkB;QAAlB,aAAQ,GAAR,QAAQ,CAAU;yBAlBf,IAAI,SAAS,CAAC;YACpC,SAAS,EAAE,IAAI,SAAS,CAAC;gBACxB,MAAM,EAAE,IAAI,WAAW,CAAC,EAAE,EAAE,CAAE,UAAU,CAAC,QAAQ,CAAE,CAAC;gBACpD,OAAO,EAAE,IAAI,WAAW,CAAC,EAAE,EAAE,CAAE,UAAU,CAAC,QAAQ,CAAE,CAAC;gBACrD,eAAe,EAAE,IAAI,WAAW,CAAC,EAAE,EAAE,CAAE,UAAU,CAAC,QAAQ,CAAE,CAAC;aAC7D,CAAC;YACF,KAAK,EAAE,IAAI,SAAS,CAAC;gBACpB,MAAM,EAAE,IAAI,WAAW,CAAC,EAAE,EAAE,CAAE,UAAU,CAAC,QAAQ,CAAE,CAAC;aACpD,CAAC;SACF,CAAC;6BAQwB,IAAI,YAAY,EAAE;QAE3C,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;KAC5D;;;;;IAVD,IACI,eAAe,CAAC,eAA0B;QAC7C,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QACjD,eAAe,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YAC7C,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;SAChC,CAAC,CAAC;KACH;;;;;;IAKD,SAAS,CAAC,MAAc,EAAE,QAAgB;QACzC,QAAQ,CAAC;QACT,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;KAClD;;;YA/CD,SAAS,SAAC;gBACV,QAAQ,EAAE,qCAAqC;gBAC/C,QAAQ,EAAE;;;;;;;;;;;;;;;;;;OAkBJ;aACN;;;;YAzBkE,QAAQ;;;8BAqCzE,KAAK;4BAOL,MAAM"
}
