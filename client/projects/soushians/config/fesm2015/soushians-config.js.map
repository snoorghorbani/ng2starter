{
  "version": 3,
  "file": "soushians-config.js",
  "sources": [
    "ng://@soushians/config/projects/soushians/config/src/lib/config.module.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/config.routing-module.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/effects/load-config.effects.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/smart-components/dynamic-config-component-selector/dynamic-config-component-selector.component.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/dumb-components/authentication-module-config/authentication-module-config.component.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/smart-components/config-module-container/config-module-container.component.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/dumb-components/layout-config/layout-module-config.component.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/dumb-components/user-module-config/user-module-config.component.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/dumb-components/app-config/app-config.component.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/smart-components/config-edit/config-edit.component.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/smart-components/configs/configs.component.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/services/config.service.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/services/configuration.service.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/reducers/index.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/reducers/config-list.reducer.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/actions/config.action.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/config.config.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/models/edit-config-api.model.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/models/get-configs-api.model.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/models/config.model.ts"
  ],
  "sourcesContent": [
    "import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { StoreModule } from \"@ngrx/store\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport {\r\n\tMatIconModule,\r\n\tMatButtonModule,\r\n\tMatCardModule,\r\n\tMatSnackBarModule,\r\n\tMatSidenavModule,\r\n\tMatExpansionModule,\r\n\tMatSelectModule,\r\n\tMatFormFieldModule,\r\n\tMatListModule,\r\n\tMatMenuModule,\r\n\tMatRadioModule,\r\n\tMatInputModule,\r\n\tMatToolbarModule,\r\n\tMatDatepickerModule,\r\n\tMatProgressBarModule,\r\n\tMatSlideToggleModule\r\n} from \"@angular/material\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { EffectsModule } from \"@ngrx/effects\";\r\n\r\nimport { GetConfigsApiModel } from \"./models\";\r\nimport { ConfigModuleConfig, MODULE_CONFIG_TOKEN, MODULE_DEFAULT_CONFIG } from \"./config.config\";\r\nimport { ConfigsComponent } from \"./smart-components/configs/configs.component\";\r\nimport { ConfigEditComponent } from \"./smart-components/config-edit/config-edit.component\";\r\nimport { ConfigAppConfigComponent } from \"./dumb-components/app-config/app-config.component\";\r\nimport { UserModuleConfigComponent } from \"./dumb-components/user-module-config/user-module-config.component\";\r\nimport { LayoutModuleConfigComponent } from \"./dumb-components/layout-config/layout-module-config.component\";\r\nimport { ConfigModuleContainerComponent } from \"./smart-components/config-module-container/config-module-container.component\";\r\nimport { AuthenticationModuleConfigComponent } from \"./dumb-components/authentication-module-config/authentication-module-config.component\";\r\nimport { DynamicConfigComponentSelectorComponent } from \"./smart-components/dynamic-config-component-selector/dynamic-config-component-selector.component\";\r\nimport { LoadConfigEffects } from \"./effects/load-config.effects\";\r\nimport { ConfigReducers } from \"./reducers\";\r\nimport { RoutingModule } from \"./config.routing-module\";\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n\t\tRouterModule,\r\n\t\tFormsModule,\r\n\t\tReactiveFormsModule,\r\n\t\tHttpClientModule,\r\n\t\tFlexLayoutModule,\r\n\t\tMatIconModule,\r\n\t\tMatButtonModule,\r\n\t\tMatCardModule,\r\n\t\tMatSnackBarModule,\r\n\t\tMatSidenavModule,\r\n\t\tMatExpansionModule,\r\n\t\tMatSelectModule,\r\n\t\tMatFormFieldModule,\r\n\t\tMatListModule,\r\n\t\tMatMenuModule,\r\n\t\tMatRadioModule,\r\n\t\tMatInputModule,\r\n\t\tMatSlideToggleModule,\r\n\t\tMatToolbarModule,\r\n\t\tMatDatepickerModule,\r\n\t\tMatProgressBarModule,\r\n\t\tBrowserAnimationsModule,\r\n\t\tRoutingModule\r\n\t],\r\n\tdeclarations: [\r\n\t\tConfigsComponent,\r\n\t\tConfigEditComponent,\r\n\t\tConfigAppConfigComponent,\r\n\t\tUserModuleConfigComponent,\r\n\t\tLayoutModuleConfigComponent,\r\n\t\tConfigModuleContainerComponent,\r\n\t\tAuthenticationModuleConfigComponent,\r\n\t\tDynamicConfigComponentSelectorComponent\r\n\t],\r\n\tproviders: []\r\n})\r\nexport class NgsConfigModule {\r\n\tstatic forRoot(config: ConfigModuleConfig): ModuleWithProviders {\r\n\t\treturn {\r\n\t\t\tngModule: RootNgsConfigModule,\r\n\t\t\tproviders: [ { provide: MODULE_CONFIG_TOKEN, useValue: config } ]\r\n\t\t};\r\n\t}\r\n}\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tNgsConfigModule,\r\n\t\tStoreModule.forFeature(\"config\", ConfigReducers),\r\n\t\tEffectsModule.forFeature([ LoadConfigEffects ])\r\n\t\t// RoutingModule\r\n\t],\r\n\texports: [ NgsConfigModule ]\r\n})\r\nexport class RootNgsConfigModule {}\r\n",
    "import { ModuleWithProviders } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { ConfigsComponent, ConfigEditComponent, ConfigModuleContainerComponent } from './smart-components';\r\n\r\nconst routes: Routes = [\r\n        {\r\n                path: 'configs',\r\n                component: ConfigModuleContainerComponent,\r\n                children: [\r\n                        {\r\n                                path: '',\r\n                                component: ConfigsComponent\r\n                        },\r\n                        {\r\n                                path: 'edit/:name',\r\n                                component: ConfigEditComponent\r\n                        }\r\n                ]\r\n        }\r\n];\r\n\r\nexport const RoutingModule: ModuleWithProviders = RouterModule.forChild(routes);\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { of } from \"rxjs/observable/of\";\r\n\r\nimport { ConfigActionTypes, ConfigLoadedSucceedAction, ConfigLoadedFailedAction } from \"../actions\";\r\nimport { ConfigService } from \"../services/config.service\";\r\nimport { GetConfigsApiModel } from \"../models\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\n\r\n@Injectable()\r\nexport class LoadConfigEffects {\r\n\tconstructor(private actions$: Actions<any>, private configService: ConfigService) {}\r\n\r\n\t@Effect()\r\n\tgetConfigs$ = this.actions$\r\n\t\t.ofType(ConfigActionTypes.GET_CONFIGS)\r\n\t\t.pipe(\r\n\t\t\tmap(action => action.payload),\r\n\t\t\tswitchMap((data: GetConfigsApiModel.Request) => this.configService.getConfigs()),\r\n\t\t\tmap(configs => new ConfigLoadedSucceedAction(configs)),\r\n\t\t\tcatchError(() => Observable.of(new ConfigLoadedFailedAction()))\r\n\t\t);\r\n}\r\n",
    "import {\r\n\tComponent,\r\n\tOnInit,\r\n\tInput,\r\n\tAfterViewInit,\r\n\tComponentFactoryResolver,\r\n\tViewChild,\r\n\tViewContainerRef,\r\n\tReflectiveInjector,\r\n\tOnDestroy,\r\n\tOutput,\r\n\tEventEmitter\r\n} from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { PartialConfig } from \"../../models\";\r\nimport { AuthenticationModuleConfigComponent } from \"../../dumb-components/authentication-module-config/authentication-module-config.component\";\r\nimport { ConfigAppConfigComponent } from \"../../dumb-components/app-config/app-config.component\";\r\nimport { UserModuleConfigComponent } from \"../../dumb-components/user-module-config/user-module-config.component\";\r\nimport { LayoutModuleConfigComponent } from \"../../dumb-components/layout-config/layout-module-config.component\";\r\n\r\n@Component({\r\n\tselector: \"dynamic-config-component-selector\",\r\n\ttemplate: `<div #dynamicComponentContainer></div>`,\r\n\tstyles: [`:host{width:100%}.diagram-box{margin:15px}.diagram-box .c3{direction:ltr}`],\r\n\tentryComponents: [\r\n\t\tAuthenticationModuleConfigComponent,\r\n\t\tConfigAppConfigComponent,\r\n\t\tUserModuleConfigComponent,\r\n\t\tLayoutModuleConfigComponent\r\n\t]\r\n})\r\nexport class DynamicConfigComponentSelectorComponent implements AfterViewInit {\r\n\ttypeMapToDiagram: any = {\r\n\t\tauthentication_module_config: AuthenticationModuleConfigComponent,\r\n\t\tapp_config: ConfigAppConfigComponent,\r\n\t\tuser_module_config: UserModuleConfigComponent,\r\n\t\tlayout_config: LayoutModuleConfigComponent\r\n\t};\r\n\t@ViewChild(\"dynamicComponentContainer\", { read: ViewContainerRef })\r\n\tdynamicComponentContainer: ViewContainerRef;\r\n\t@Output() configChanged = new EventEmitter();\r\n\tcurrentComponent: any = null;\r\n\t@Input()\r\n\tset data(data: PartialConfig) {\r\n\t\tif (!data || Object.keys(data).length == 0) return;\r\n\t\tif (!(data.type in this.typeMapToDiagram)) {\r\n\t\t\tif (this.currentComponent) this.currentComponent.destroy();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet _component: any = this.typeMapToDiagram[data.type];\r\n\t\tlet inputProviders = Object.keys(data.inputs).map(inputName => {\r\n\t\t\treturn { provide: inputName, useValue: (data.inputs as any)[inputName] };\r\n\t\t});\r\n\t\tlet resolvedInputs = ReflectiveInjector.resolve(inputProviders);\r\n\r\n\t\tlet injector = ReflectiveInjector.fromResolvedProviders(\r\n\t\t\tresolvedInputs,\r\n\t\t\tthis.dynamicComponentContainer.parentInjector\r\n\t\t);\r\n\t\tlet factory = this.resolver.resolveComponentFactory(_component);\r\n\r\n\t\tlet component = factory.create(injector);\r\n\t\t(<any>component.instance).configChanged.subscribe((data: any) => {\r\n\t\t\tthis.configChanged.emit(data);\r\n\t\t});\r\n\t\tthis.dynamicComponentContainer.insert(component.hostView);\r\n\r\n\t\tif (this.currentComponent) {\r\n\t\t\tthis.currentComponent.destroy();\r\n\t\t}\r\n\r\n\t\tthis.currentComponent = component;\r\n\t}\r\n\tconstructor(private resolver: ComponentFactoryResolver) {}\r\n\tngAfterViewInit() {}\r\n}\r\n",
    "import { NgModule, Component, OnInit, Output, EventEmitter, Input, Injector } from \"@angular/core\";\r\nimport { FormGroup, Validators, FormControl } from \"@angular/forms\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\n@Component({\r\n\tselector: \"config-authentication-module-config\",\r\n\ttemplate: `<h2>Endpoints</h2>\r\n<div [formGroup]=\"formGroup.controls.endpoints\" fxLayout=\"column\">\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"sign in\" formControlName=\"signIn\">\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"sign out\" formControlName=\"signOut\">\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"user information\" formControlName=\"userInformation\">\r\n    </mat-form-field>\r\n</div>\r\n<h2>Forms</h2>\r\n<div [formGroup]=\"formGroup.controls.forms\" fxLayout=\"column\">\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"SignIn Forms\" formControlName=\"signIn\">\r\n    </mat-form-field>\r\n            <!-- <ngs-form-selector (select)=\"setFormId($event,'signIn')\"></ngs-form-selector> -->\r\n</div>`\r\n})\r\nexport class AuthenticationModuleConfigComponent {\r\n\tformGroup: FormGroup = new FormGroup({\r\n\t\tendpoints: new FormGroup({\r\n\t\t\tsignIn: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\tsignOut: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\tuserInformation: new FormControl(\"\", [ Validators.required ])\r\n\t\t}),\r\n\t\tforms: new FormGroup({\r\n\t\t\tsignIn: new FormControl(\"\", [ Validators.required ])\r\n\t\t})\r\n\t});\r\n\t@Input()\r\n\tset configFormGroup(configFormGroup: FormGroup) {\r\n\t\tthis.formGroup.patchValue(configFormGroup.value);\r\n\t\tconfigFormGroup.valueChanges.subscribe(data => {\r\n\t\t\tthis.formGroup.patchValue(data);\r\n\t\t});\r\n\t}\r\n\t@Output() configChanged = new EventEmitter();\r\n\tconstructor(private injector: Injector) {\r\n\t\tthis.configFormGroup = this.injector.get(\"configFormGroup\");\r\n\t}\r\n\tsetFormId(formId: string, formName: string) {\r\n\t\tdebugger;\r\n\t\tthis.formGroup.patchValue({ [formName]: formId });\r\n\t}\r\n}\r\n",
    "import { Component, OnInit } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\n@Component({\r\n\tselector: \"config-module-container\",\r\n\ttemplate: `<div fxLayoutAlign=\"\" fxflex=\"100\" fxLayout=\"column\">\r\n    <router-outlet></router-outlet>\r\n</div>\r\n`\r\n})\r\nexport class ConfigModuleContainerComponent implements OnInit {\r\n\tconstructor() {}\r\n\r\n\tngOnInit() {}\r\n}\r\n",
    "import { Component, Output, EventEmitter, Input, Injector } from \"@angular/core\";\r\nimport { FormGroup, Validators, FormControl, FormArray } from \"@angular/forms\";\r\n\r\n@Component({\r\n\ttemplate: `<div fxFlexLayout=\"row\" fxLayoutWrap fxLayoutAlign=\"center center\">\r\n    <div fxFlex=\"100\" fxFlexLayout=\"row\">\r\n        <div [formGroup]=\"formGroup\">\r\n            <mat-form-field>\r\n                <mat-select (change)=\"configChanged.emit(formGroup.value)\" placeholder=\"layout mode\" formControlName=\"layoutMode\" >\r\n                    <mat-option *ngFor=\"let item of layoutModes\" [value]=\"item\">{{item}}</mat-option>\r\n                </mat-select> \r\n            </mat-form-field>\r\n            <mat-slide-toggle  (change)=\"configChanged.emit(formGroup.value)\"  formControlName=\"showLeftNavBar\">show left navbar</mat-slide-toggle>\r\n            <mat-form-field>\r\n                <mat-select (change)=\"configChanged.emit(formGroup.value)\" placeholder=\"main side nav mode\" formControlName=\"mainSideNavMode\" >\r\n                    <mat-option *ngFor=\"let item of sideNavModes\" [value]=\"item\">{{item}}</mat-option>\r\n                </mat-select> \r\n            </mat-form-field>\r\n            <mat-slide-toggle  (change)=\"configChanged.emit(formGroup.value)\"  formControlName=\"showMainSidenav\">show main side nav</mat-slide-toggle>\r\n            <mat-slide-toggle  (change)=\"configChanged.emit(formGroup.value)\"  formControlName=\"stickyLeftNavBar\">sticky left navbar</mat-slide-toggle>\r\n            <mat-slide-toggle  (change)=\"configChanged.emit(formGroup.value)\"  formControlName=\"showSecondSideNav\">show second side nav</mat-slide-toggle>\r\n            <mat-form-field>\r\n                <mat-select (change)=\"configChanged.emit(formGroup.value)\" placeholder=\"second side nav mode\" formControlName=\"secondSideNavMode\" >\r\n                    <mat-option *ngFor=\"let item of sideNavModes\" [value]=\"item\">{{item}}</mat-option>\r\n                </mat-select> \r\n            </mat-form-field>\r\n        </div>\r\n    </div>\r\n\r\n    <h2 fxFlex=\"100\">\r\n        Menu Items\r\n        <button mat-icon-button color=\"primary\" (click)=\"addMenu()\">\r\n            <mat-icon aria-label=\"icon-button icon\">add</mat-icon>\r\n        </button>\r\n    </h2>\r\n    <div fxFlex=\"100\" *ngFor=\"let item of formGroup.controls.menuItems.controls\">\r\n        <div [formGroup]=\"item\">\r\n            <mat-form-field>\r\n                <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"route\" formControlName=\"route\">\r\n            </mat-form-field>\r\n            <mat-form-field>\r\n                <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"icon\" formControlName=\"icon\">\r\n            </mat-form-field>\r\n            <mat-form-field>\r\n                <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"title\" formControlName=\"title\">\r\n            </mat-form-field>\r\n            <mat-form-field> \r\n                <mat-select (change)=\"configChanged.emit(formGroup.value)\" placeholder=\"roles\" formControlName=\"roles\" multiple>\r\n                    <mat-option *ngFor=\"let role of roleItems\" [value]=\"role\">{{role}}</mat-option>\r\n                </mat-select> \r\n            </mat-form-field>\r\n        </div>\r\n    </div>\r\n</div>`\r\n})\r\nexport class LayoutModuleConfigComponent {\r\n\tsideNavModes: string[];\r\n\tlayoutModes: string[];\r\n\tformGroup: any = new FormGroup({\r\n\t\tlayoutMode: new FormControl(\"\", [ Validators.required ]),\r\n\t\tshowLeftNavBar: new FormControl(\"\", [ Validators.required ]),\r\n\t\tmainSideNavMode: new FormControl(\"\", [ Validators.required ]),\r\n\t\tshowMainSidenav: new FormControl(\"\", [ Validators.required ]),\r\n\t\tstickyLeftNavBar: new FormControl(\"\", [ Validators.required ]),\r\n\t\tshowSecondSideNav: new FormControl(\"\", [ Validators.required ]),\r\n\t\tsecondSideNavMode: new FormControl(\"\", [ Validators.required ]),\r\n\t\tmenuItems: new FormArray([])\r\n\t});\r\n\t_configFormGroup: FormGroup;\r\n\t@Input()\r\n\tset configFormGroup(configFormGroup: FormGroup) {\r\n\t\tthis._configFormGroup = configFormGroup;\r\n\t\t(configFormGroup.controls.menuItems as FormArray).controls.forEach((control) => {\r\n\t\t\t(this.formGroup.controls.menuItems as FormArray).push(\r\n\t\t\t\tnew FormGroup({\r\n\t\t\t\t\troute: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\t\ticon: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\t\t// roles: new FormArray(control.value.roles.map((i) => new FormControl(\"Admin\"))),\r\n\t\t\t\t\troles: new FormControl(),\r\n\t\t\t\t\ttitle: new FormControl(\"\", [ Validators.required ])\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\tthis.formGroup.patchValue(configFormGroup.value);\r\n\t\tconfigFormGroup.valueChanges.subscribe((data) => this.formGroup.patchValue(data));\r\n\t}\r\n\tget configFormGroup() {\r\n\t\treturn this._configFormGroup;\r\n\t}\r\n\t@Output() configChanged = new EventEmitter();\r\n\r\n\troleItems: string[] = [ \"Admin\", \"User\" ];\r\n\r\n\tconstructor(private injector: Injector) {\r\n\t\tthis.sideNavModes = [ \"over\", \"push\", \"side\" ];\r\n\t\tthis.layoutModes = [ \"with-margin\", \"without-margin\", \"default\" ];\r\n\t\tthis.configFormGroup = this.injector.get(\"configFormGroup\");\r\n\t}\r\n\taddMenu() {\r\n\t\tvar menuItem = new FormGroup({\r\n\t\t\troute: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\ticon: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\troles: new FormControl(),\r\n\t\t\ttitle: new FormControl(\"\", [ Validators.required ])\r\n\t\t});\r\n\r\n\t\t(this.formGroup.get(\"menuItems\") as FormArray).push(menuItem);\r\n\t\t(this.configFormGroup.get(\"menuItems\") as FormArray).push(menuItem);\r\n\t}\r\n}\r\n",
    "import { NgModule, Component, OnInit, Output, EventEmitter, Input, Injector } from \"@angular/core\";\r\nimport { FormGroup, Validators, FormControl, FormArray } from \"@angular/forms\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\n\r\n@Component({\r\n\tselector: \"config-user-module-config\",\r\n\ttemplate: `<h2>Endpoints</h2>\r\n<div [formGroup]=\"formGroup.get('endpoints')\" fxLayout=\"column\">\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"change password\" formControlName=\"changePassword\">\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"edit profile\" formControlName=\"editProfile\">\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"get user info\" formControlName=\"getUserInfo\">\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"Profile Information Endpoint\" formControlName=\"profileInformation\">\r\n        </mat-form-field>\r\n</div>\r\n<h2>Forms</h2>\r\n<div [formGroup]=\"formGroup.get('forms')\" fxLayout=\"column\">\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"profile edit\" formControlName=\"profile_edit\">\r\n    </mat-form-field>\r\n            <!-- <ngs-form-selector (select)=\"setFormId($event,'signIn')\"></ngs-form-selector> -->\r\n</div>\r\n\r\n\r\n<h2 fxFlex=\"100\">\r\n    Dashobard Links\r\n    <button mat-icon-button color=\"primary\" (click)=\"addMenu()\">\r\n        <mat-icon aria-label=\"icon-button icon\">add</mat-icon>\r\n    </button>\r\n</h2>\r\n<div fxFlex=\"100\" *ngFor=\"let item of $any(formGroup.get('dashboardLinks')).controls\">\r\n    <div [formGroup]=\"item\">\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"route\" formControlName=\"route\">\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"icon\" formControlName=\"icon\">\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"title\" formControlName=\"title\">\r\n        </mat-form-field>\r\n    </div>\r\n</div>`\r\n})\r\nexport class UserModuleConfigComponent {\r\n\tformGroup: FormGroup = new FormGroup({\r\n\t\tendpoints: new FormGroup({\r\n\t\t\tchangePassword: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\teditProfile: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\tgetUserInfo: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\tprofileInformation: new FormControl(\"\", [ Validators.required ])\r\n\t\t}),\r\n\t\tforms: new FormGroup({\r\n\t\t\tprofile_edit: new FormControl(\"\", [ Validators.required ])\r\n\t\t}),\r\n\t\tdashboardLinks: new FormArray([])\r\n\t});\r\n\t_configFormGroup: FormGroup;\r\n\t@Input()\r\n\tset configFormGroup(configFormGroup: FormGroup) {\r\n\t\tthis._configFormGroup = configFormGroup;\r\n\t\t(configFormGroup.controls.dashboardLinks as FormArray).controls.forEach(control => {\r\n\t\t\t(this.formGroup.controls.dashboardLinks as FormArray).push(\r\n\t\t\t\tnew FormGroup({\r\n\t\t\t\t\troute: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\t\ticon: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\t\ttitle: new FormControl(\"\", [ Validators.required ])\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\tthis.formGroup.patchValue(configFormGroup.value);\r\n\t\tconfigFormGroup.valueChanges.subscribe(data => {\r\n\t\t\tthis.formGroup.patchValue(data);\r\n\t\t});\r\n\t}\r\n\tget configFormGroup() {\r\n\t\treturn this._configFormGroup;\r\n\t}\r\n\t@Output() configChanged = new EventEmitter();\r\n\tconstructor(private injector: Injector) {\r\n\t\tthis.configFormGroup = this.injector.get(\"configFormGroup\");\r\n\t}\r\n\taddMenu() {\r\n\t\tvar menuItem = new FormGroup({\r\n\t\t\troute: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\ticon: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\ttitle: new FormControl(\"\", [ Validators.required ])\r\n\t\t});\r\n\r\n\t\t(this.formGroup.get(\"dashboardLinks\") as FormArray).push(menuItem);\r\n\t\t(this.configFormGroup.get(\"dashboardLinks\") as FormArray).push(menuItem);\r\n\t}\r\n}\r\n",
    "import { NgModule, Component, OnInit, Output, EventEmitter, Input, Injector } from \"@angular/core\";\r\nimport { FormGroup, Validators, FormControl } from \"@angular/forms\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\n@Component({\r\n\tselector: \"config-app-config\",\r\n\ttemplate: `<div [formGroup]=\"formGroup\">\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"نام پروژه\" formControlName=\"AppTitle\">\r\n    </mat-form-field>\r\n</div>`\r\n})\r\nexport class ConfigAppConfigComponent {\r\n\tformGroup: FormGroup = new FormGroup({ AppTitle: new FormControl(\"\", [ Validators.required ]) });\r\n\t@Input()\r\n\tset configFormGroup(configFormGroup: FormGroup) {\r\n\t\tthis.formGroup.patchValue(configFormGroup.value);\r\n\t\tconfigFormGroup.valueChanges.subscribe(data => {\r\n\t\t\tthis.formGroup.patchValue(data);\r\n\t\t});\r\n\t}\r\n\t@Output() configChanged = new EventEmitter();\r\n\tconstructor(private injector: Injector) {\r\n\t\tthis.configFormGroup = this.injector.get(\"configFormGroup\");\r\n\t}\r\n}\r\n",
    "import { NgModule, Component, OnInit, Output, EventEmitter, Input, ViewChild, ViewContainerRef } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { FormGroup, FormBuilder, FormControl } from \"@angular/forms\";\r\n\r\nimport { EditConfigApiModel, PartialConfig } from \"../../models\";\r\nimport { ConfigService } from \"../../services/config.service\";\r\n\r\n@Component({\r\n\tselector: \"config-config-edit\",\r\n\ttemplate: `<div >\r\n  <form [formGroup]=\"formGroup\" (ngSubmit)=\"edit()\" fxLayout=\"column\">\r\n    <mat-card>\r\n      <mat-card-content>\r\n          <dynamic-config-component-selector (configChanged)=\"configChanged($event)\" [data]=\"partialConfigModel\"></dynamic-config-component-selector>\r\n      </mat-card-content>\r\n      <mat-card-actions fxLayoutAlign=\"center center\">\r\n        <button fxFlex=\"nogrow\" type=\"submit\" mat-raised-button color=\"primary\" (click)=\"edit\">ویرایش</button>\r\n        <button fxFlex=\"nogrow\" type=\"button\" routerLink=\"/configs\" mat-raised-button>بازگشت</button>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n  </form>\r\n</div>`\r\n})\r\nexport class ConfigEditComponent implements OnInit {\r\n\tconfigInforamation: any;\r\n\tformGroup: FormGroup = EditConfigApiModel.Request.formGroup;\r\n\tpartialConfigModel: PartialConfig;\r\n\r\n\tconstructor(private configService: ConfigService, private formBuilder: FormBuilder, private route: ActivatedRoute) {\r\n\t\tthis.route.params.subscribe(params => {\r\n\t\t\tconst configName: string = params[\"name\"];\r\n\t\t\tthis.configService.getConfigByName(configName).subscribe(data => {\r\n\t\t\t\tthis.partialConfigModel = {\r\n\t\t\t\t\ttype: data.Result.Name,\r\n\t\t\t\t\tinputs: {\r\n\t\t\t\t\t\tconfigFormGroup: this.formGroup.controls.Config as FormGroup\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tthis.formGroup.patchValue({\r\n\t\t\t\t\t_id: data.Result._id,\r\n\t\t\t\t\tName: data.Result.Name\r\n\t\t\t\t});\r\n\t\t\t\tObject.keys(data.Result.Config).forEach(key => {\r\n\t\t\t\t\tthis.addControl(this.formGroup.controls.Config as FormGroup, key, data.Result.Config[key]);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\taddControl(formGroup: FormGroup, key: string, value: any) {\r\n\t\tif (value instanceof Array) {\r\n\t\t\tformGroup.addControl(key, this.formBuilder.array(value));\r\n\t\t} else if (value instanceof Object) {\r\n\t\t\tformGroup.addControl(key, this.formBuilder.group(value));\r\n\t\t} else {\r\n\t\t\tformGroup.addControl(key, new FormControl(value));\r\n\t\t}\r\n\t}\r\n\r\n\tngOnInit() {}\r\n\tconfigChanged(event: any) {\r\n\t\tdebugger;\r\n\t\tthis.formGroup.controls.Config.patchValue(event);\r\n\t}\r\n\tedit() {\r\n\t\tdebugger;\r\n\t\tif (!this.formGroup.valid) return;\r\n\t\tthis.configService.editConfig(this.formGroup.value).subscribe(config => {\r\n\t\t\tdebugger;\r\n\t\t});\r\n\t}\r\n}\r\n",
    "import { Component, OnInit } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { ConfigModel } from \"../../models\";\r\nimport { getConfigs, FeatureState } from \"../../reducers\";\r\n\r\n@Component({\r\n\tselector: \"configs\",\r\n\ttemplate: `<div fxFlexLayout=\"row\" fxLayoutWrap fxLayoutAlign=\"center center\">\r\n  <mat-card class=\"config-box\" *ngFor=\"let config of (configs | async)\" [fxFlex]=\"50\">\r\n      <h3>\r\n        <a [routerLink]=\"['edit' ,  config.Name]\">\r\n          <mat-icon aria-label=\"edit config\">edit</mat-icon>\r\n        </a>\r\n        {{config.Name}}\r\n      </h3>\r\n  </mat-card>\r\n</div>`,\r\n\tstyles: [`:host{width:100%}.config-box{margin:15px}`]\r\n})\r\nexport class ConfigsComponent {\r\n\tconfigs: Observable<ConfigModel<any>[]>;\r\n\tconstructor(private store: Store<FeatureState>) {\r\n\t\tthis.configs = this.store.select(getConfigs);\r\n\t}\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs/Rx\";\r\nimport { ConfigState } from \"../reducers\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { EditConfigApiModel, GetConfigsApiModel, ConfigModel, LayoutConfigModel } from \"../models\";\r\n\r\nimport { GetConfigAction } from \"../actions\";\r\nimport { ConfigurationService } from \"./configuration.service\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class ConfigService {\r\n\tresponseCache: any;\r\n\tconfigsEndpoint: string;\r\n\r\n\tconstructor(\r\n\t\tprivate http: HttpClient,\r\n\t\tprivate store: Store<ConfigState>,\r\n\t\tprivate configurationService: ConfigurationService\r\n\t) {\r\n\t\tthis.configsEndpoint = this.configurationService.config.env.production\r\n\t\t\t? this.configurationService.config.prod_api_host\r\n\t\t\t: this.configurationService.config.dev_api_host;\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.store.dispatch(new GetConfigAction());\r\n\t\t}, 999);\r\n\t}\r\n\r\n\tgetConfigs(): Observable<ConfigModel<any>[]> {\r\n\t\treturn (\r\n\t\t\tthis.http\r\n\t\t\t\t.get(`${this.configsEndpoint}/api/config`)\r\n\t\t\t\t// .filter(() => this.configurationService.config.dev_api_host != undefined)\r\n\t\t\t\t.take(1)\r\n\t\t\t\t.map((response: GetConfigsApiModel.Response) => {\r\n\t\t\t\t\tif (this.configurationService.config.env.production) {\r\n\t\t\t\t\t\tconst dev_api_host = this.configurationService.config.dev_api_host;\r\n\t\t\t\t\t\tconst prod_api_host = this.configurationService.config.prod_api_host;\r\n\t\t\t\t\t\treturn JSON.parse(\r\n\t\t\t\t\t\t\tJSON.stringify(response).replace(new RegExp(dev_api_host, \"g\"), prod_api_host)\r\n\t\t\t\t\t\t).Result;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn response.Result;\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.catch(err => {\r\n\t\t\t\t\treturn Observable.throw(err);\r\n\t\t\t\t})\r\n\t\t);\r\n\t}\r\n\tgetConfigByName(name: string): Observable<any> {\r\n\t\treturn this.http.get(`${this.configsEndpoint}/api/config/${name}`).map(response => response).catch(err => {\r\n\t\t\treturn Observable.throw(err);\r\n\t\t});\r\n\t}\r\n\teditConfig(body: EditConfigApiModel.Request): Observable<any> {\r\n\t\tvar model = new EditConfigApiModel.Request(body);\r\n\r\n\t\treturn this.http\r\n\t\t\t.put(`${this.configsEndpoint}/api/config/${model.Name}`, model.getRequestBody())\r\n\t\t\t.map(response => response)\r\n\t\t\t.catch(err => {\r\n\t\t\t\treturn Observable.throw(err);\r\n\t\t\t});\r\n\t}\r\n\r\n\tgetLayoutConfigs(): Observable<LayoutConfigModel> {\r\n\t\treturn this.http\r\n\t\t\t.get(`${this.configsEndpoint}/api/layout-config`)\r\n\t\t\t.map((response: LayoutConfigModel) => response)\r\n\t\t\t.catch(err => {\r\n\t\t\t\treturn Observable.throw(err);\r\n\t\t\t});\r\n\t}\r\n}\r\n",
    "import { Injectable, Inject } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { ConfigModuleConfig, MODULE_CONFIG_TOKEN, MODULE_DEFAULT_CONFIG } from \"../config.config\";\r\nimport { getConfigModuleConfig } from \"../reducers\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class ConfigurationService {\r\n\tprivate _config: ConfigModuleConfig;\r\n\tget config() {\r\n\t\treturn this._config;\r\n\t}\r\n\tconfig$ = new BehaviorSubject(this._config);\r\n\r\n\tconstructor(@Inject(MODULE_CONFIG_TOKEN) configFile: ConfigModuleConfig, private store: Store<any>) {\r\n\t\tthis._config = Object.assign({}, MODULE_DEFAULT_CONFIG, configFile);\r\n\t\tthis.config$.next(this._config);\r\n\t\tthis.store.select(getConfigModuleConfig).subscribe(configConfig => {\r\n\t\t\tif (!configConfig) return;\r\n\t\t\tthis._config = Object.assign({}, this._config, configConfig.Config);\r\n\t\t\tthis.config$.next(this._config);\r\n\t\t});\r\n\t}\r\n}\r\n",
    "import { createSelector, createFeatureSelector, MemoizedSelector } from \"@ngrx/store\";\r\n\r\nimport * as configList from \"./config-list.reducer\";\r\nimport { ConfigLoadedFailedAction, ConfigLoadedSucceedAction } from \"../actions\";\r\nexport interface ConfigState {\r\n\tlist: configList.State;\r\n}\r\nConfigLoadedFailedAction;\r\nexport const ConfigReducers = {\r\n\tlist: configList.Reducer\r\n};\r\n\r\nexport interface FeatureState {\r\n\t\"configs\": ConfigState;\r\n}\r\n\r\n//#region selectors\r\n\r\nexport const selectConfigState = createFeatureSelector<ConfigState>(\"config\");\r\n\r\n//#endregion\r\n\r\nexport const getConfigListState = createSelector(selectConfigState, (state: ConfigState) => state.list);\r\nexport const getConfigs = createSelector(getConfigListState, configList.getConfigs);\r\nexport const getAppConfig = createSelector(getConfigListState, configList.getAppConfig);\r\nexport const getAuthenticationModuleConfig = createSelector(\r\n\tgetConfigListState,\r\n\tconfigList.getAuthenticationModuleConfig\r\n);\r\nexport const getUserModuleConfig = createSelector(getConfigListState, configList.getUserModuleConfig);\r\nexport const getlayoutModuleConfig = createSelector(getConfigListState, configList.getlayoutModuleConfig);\r\nexport const getConfigModuleConfig = createSelector(getConfigListState, configList.getConfigModuleConfig);\r\nexport const getFormModuleConfig = createSelector(getConfigListState, configList.getFormModuleConfig);\r\nexport const getSocketModuleConfig = createSelector(getConfigListState, configList.getSocketModuleConfig);\r\n",
    "import * as config from \"../actions/config.action\";\r\nimport { ConfigModel, LayoutConfigModel } from \"../models\";\r\n\r\nexport interface State {\r\n\tdata: any[];\r\n}\r\n\r\nconst initialState: State = {\r\n\tdata: []\r\n};\r\n\r\nexport function Reducer(state = initialState, action: config.Actions): State {\r\n\tswitch (action.type) {\r\n\t\tcase config.ConfigActionTypes.CONFIG_LOADED_SUCCEED:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: action.payload\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport const getConfigs = (state: State) => state.data;\r\nexport const getAppConfig = (state: State) => state.data.find((config) => config.Name == \"app_config\");\r\nexport const getAuthenticationModuleConfig = (state: State) =>\r\n\tstate.data.find((config) => config.Name == \"authentication_module_config\");\r\nexport const getUserModuleConfig = (state: State) => state.data.find((config) => config.Name == \"user_module_config\");\r\nexport const getlayoutModuleConfig = (state: State) =>\r\n\tstate.data.find((config) => config.Name == \"layout_config\") as any;\r\nexport const getConfigModuleConfig = (state: State) =>\r\n\tstate.data.find((config) => config.Name == \"config_module_config\") as any;\r\nexport const getFormModuleConfig = (state: State) =>\r\n\tstate.data.find((config) => config.Name == \"form_module_config\") as any;\r\nexport const getSocketModuleConfig = (state: State) =>\r\n\tstate.data.find((config) => config.Name == \"socket_module_config\") as any;\r\n",
    "import { Action } from '@ngrx/store';\r\nimport { ConfigModel, GetConfigsApiModel } from '../models';\r\n\r\nexport enum ConfigActionTypes {\r\n\tGET_CONFIGS = '[CONFIG] get config',\r\n\tCONFIG_LOADED_SUCCEED = '[CONFIG] load config succeed',\r\n\tCONFIG_LOADED_FAILED = '[CONFIG] load config failed'\r\n}\r\n\r\nexport class GetConfigAction implements Action {\r\n\treadonly type = ConfigActionTypes.GET_CONFIGS;\r\n}\r\n\r\nexport class ConfigLoadedSucceedAction implements Action {\r\n\treadonly type = ConfigActionTypes.CONFIG_LOADED_SUCCEED;\r\n\r\n\tconstructor(public payload: ConfigModel<any>[]) {}\r\n}\r\n\r\nexport class ConfigLoadedFailedAction implements Action {\r\n\treadonly type = ConfigActionTypes.CONFIG_LOADED_FAILED;\r\n}\r\nexport type Actions = GetConfigAction | ConfigLoadedSucceedAction | ConfigLoadedFailedAction;\r\n",
    "import { InjectionToken } from '@angular/core';\r\n\r\nexport interface ConfigModuleConfig {\r\n\tdev_api_host?: string;\r\n\tprod_api_host?: string;\r\n\tenv?: {\r\n\t\tproduction: boolean;\r\n\t};\r\n}\r\n\r\nexport const MODULE_DEFAULT_CONFIG: ConfigModuleConfig = {\r\n\tdev_api_host: 'http://localhost:3000',\r\n\tprod_api_host: 'http://5.196.149.107:3000',\r\n\tenv: {\r\n\t\tproduction: false\r\n\t}\r\n};\r\n\r\nexport const MODULE_CONFIG_TOKEN = new InjectionToken<ConfigModuleConfig>('UserModuleConfig');\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { ConfigModel } from \"../models\";\r\n\r\nexport module EditConfigApiModel {\r\n\r\n    export class Request implements HttpRequestBaseModel<Request>{\r\n        Name: string;\r\n        Config: {};\r\n        constructor(initValue = {} as EditConfigApiModel.Request) {\r\n            Object.keys(initValue).forEach(key => (this as any)[key] = (initValue as any)[key]);\r\n        }\r\n\r\n        getRequestBody() {\r\n            debugger;\r\n            return {\r\n                Name: this.Name,\r\n                Config: this.Config\r\n            }\r\n        }\r\n        static get formGroup() {\r\n            return new FormGroup({\r\n                Name: new FormControl('', [Validators.required]),\r\n                Config: new FormGroup({}),\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    export class Response {\r\n        Result: ConfigModel<any>;\r\n        constructor() {\r\n        }\r\n    }\r\n\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { ConfigModel } from \"./config.model\";\r\n\r\nexport module GetConfigsApiModel {\r\n\r\n    export class Request implements HttpRequestBaseModel<Request>{\r\n\r\n        constructor(initValue: GetConfigsApiModel.Request = {} as GetConfigsApiModel.Request) {\r\n            Object.keys(initValue).forEach(key => (this as any)[key] = (initValue as any)[key]);\r\n        }\r\n\r\n        getRequestBody() {\r\n            return {\r\n            }\r\n        }\r\n    }\r\n\r\n    export class Response {\r\n        Result: ConfigModel<any>[];\r\n        constructor() {\r\n\r\n        }\r\n    }\r\n}",
    "export class ConfigModel<T> {\r\n\t_id: string;\r\n\tName: string;\r\n\tConfig: T;\r\n}"
  ],
  "names": [
    "Observable",
    "getConfigs",
    "getConfigModuleConfig",
    "getSocketModuleConfig",
    "configList.getSocketModuleConfig",
    "getFormModuleConfig",
    "configList.getFormModuleConfig",
    "configList.getConfigModuleConfig",
    "getlayoutModuleConfig",
    "configList.getlayoutModuleConfig",
    "getUserModuleConfig",
    "configList.getUserModuleConfig",
    "getAuthenticationModuleConfig",
    "configList.getAuthenticationModuleConfig",
    "getAppConfig",
    "configList.getAppConfig",
    "configList.getConfigs",
    "configList.Reducer",
    "config.ConfigActionTypes"
  ],
  "mappings": "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"
}
