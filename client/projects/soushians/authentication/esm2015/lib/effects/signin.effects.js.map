{
  "version": 3,
  "file": "signin.effects.js",
  "sources": [
    "ng://@soushians/authentication/projects/soushians/authentication/src/lib/effects/signin.effects.ts"
  ],
  "sourcesContent": [
    "import { Injectable } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport \"rxjs/add/operator/map\";\r\nimport \"rxjs/add/operator/mergeMap\";\r\nimport \"rxjs/add/operator/do\";\r\nimport \"rxjs/add/operator/catch\";\r\nimport \"rxjs/add/observable/empty\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { RouterAction } from \"@ngrx/router-store\";\r\nimport { switchMap, map, catchError, tap } from \"rxjs/operators\";\r\n\r\nimport { SignInActionTypes, SigninSecceed, SigninFailed, SigninRedirect, Signin } from \"../actions/signin.actions\";\r\n// import * as AuthActions from '../actions';\r\n\r\n//import {  } from '../reducers';\r\nimport { SigninService } from \"../services/signin.service\";\r\nimport { NewCaptcha } from \"../actions\";\r\nimport { Signin_ApiModel } from \"../models\";\r\n\r\n@Injectable()\r\nexport class SigninEffects {\r\n\tconstructor(private actions$: Actions, private router: Router, public signinService: SigninService) {}\r\n\r\n\t@Effect()\r\n\tpreSignUpStart$ = this.actions$\r\n\t\t.ofType(SignInActionTypes.SIGNIN)\r\n\t\t.pipe(\r\n\t\t\tswitchMap((action: Signin) => this.signinService.signin(action.payload)),\r\n\t\t\tmap(user => new SigninSecceed(user)),\r\n\t\t\tcatchError(error => Observable.of(new SigninFailed(error)))\r\n\t\t);\r\n\r\n\t@Effect({ dispatch: false })\r\n\tSigninSucceed$ = this.actions$\r\n\t\t.ofType(SignInActionTypes.SIGNIN_SUCCEED)\r\n\t\t.pipe(tap((data: any) => this.router.navigate([ \"/\" ])));\r\n\r\n\t@Effect() AfterSigninFiled$ = this.actions$.ofType(SignInActionTypes.SIGNIN_FAILURE).map(() => new NewCaptcha());\r\n\r\n\t@Effect({ dispatch: false })\r\n\tredirectToLoginPage$ = this.actions$\r\n\t\t.ofType(SignInActionTypes.SIGNIN_REDIRECT, SignInActionTypes.SIGNOUT)\r\n\t\t.pipe(tap(authed => this.router.navigate([ \"auth/signin\" ])));\r\n\r\n\t// TODO:\r\n\t// @Effect({ dispatch: false })\r\n\t// signout$ = this.actions$\r\n\t// \t.ofType(SignInActionTypes.SIGNOUT)\r\n\t// \t.map((data) => this.signinService.signout().subscribe((response) => null));\r\n}\r\n"
  ],
  "names": [],
  "mappings": ";;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AACzC,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAC7C,OAAO,uBAAuB,CAAC;AAC/B,OAAO,4BAA4B,CAAC;AACpC,OAAO,sBAAsB,CAAC;AAC9B,OAAO,yBAAyB,CAAC;AACjC,OAAO,2BAA2B,CAAC;AAEnC,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEhD,OAAO,EAAE,SAAS,EAAE,GAAG,EAAE,UAAU,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAEjE,OAAO,EAAE,iBAAiB,EAAE,aAAa,EAAE,YAAY,EAA0B,MAAM,2BAA2B,CAAC;AAInH,OAAO,EAAE,aAAa,EAAE,MAAM,4BAA4B,CAAC;AAC3D,OAAO,EAAE,UAAU,EAAE,MAAM,YAAY,CAAC;AAIxC,MAAM;;;;;;IACL,YAAoB,QAAiB,EAAU,MAAc,EAAS,aAA4B;QAA9E,aAAQ,GAAR,QAAQ,CAAS;QAAU,WAAM,GAAN,MAAM,CAAQ;QAAS,kBAAa,GAAb,aAAa,CAAe;+BAGhF,IAAI,CAAC,QAAQ;aAC7B,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC;aAChC,IAAI,CACJ,SAAS,CAAC,CAAC,MAAc,EAAE,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,EACxE,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC,EACpC,UAAU,CAAC,KAAK,CAAC,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAC3D;8BAGe,IAAI,CAAC,QAAQ;aAC5B,MAAM,CAAC,iBAAiB,CAAC,cAAc,CAAC;aACxC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAS,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAE,GAAG,CAAE,CAAC,CAAC,CAAC;iCAE3B,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC;oCAGzF,IAAI,CAAC,QAAQ;aAClC,MAAM,CAAC,iBAAiB,CAAC,eAAe,EAAE,iBAAiB,CAAC,OAAO,CAAC;aACpE,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAE,aAAa,CAAE,CAAC,CAAC,CAAC;KArBwC;;;YAFtG,UAAU;;;;YAZF,OAAO;YARP,MAAM;YAgBN,aAAa;;;IAQpB,MAAM,EAAE;;;;IASR,MAAM,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC;;;;IAK3B,MAAM,EAAE;;;;IAER,MAAM,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC"
}
