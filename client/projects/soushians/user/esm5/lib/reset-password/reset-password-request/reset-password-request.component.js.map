{
  "version": 3,
  "file": "reset-password-request.component.js",
  "sources": [
    "ng://@soushians/user/projects/soushians/user/src/lib/reset-password/reset-password-request/reset-password-request.component.ts"
  ],
  "sourcesContent": [
    "import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { ResetPasswordRequestModel } from \"../../models\";\r\nimport { MatSnackBar } from \"@angular/material\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\n\r\n@Component({\r\n        selector: 'user-reset-password-request',\r\n        template: `<form [formGroup]=\"formGroup\" (ngSubmit)=\"submit()\" fxLayout=\"column\">\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <mat-card-title>\r\n        <h3>درخواست بازیابی رمز عبور</h3>\r\n      </mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <p>برای بازیابی رمز عبور شماره تلفن خود را وارد نمایید</p>\r\n      <mat-radio-group fxFlexFill formControlName=\"Type\">\r\n        <mat-radio-button value=\"sms\">پیامک</mat-radio-button>\r\n        <mat-radio-button value=\"email\">پست الکترونیکی</mat-radio-button>\r\n      </mat-radio-group>\r\n      <mat-form-field fxFlexFill>\r\n        <input matInput placeholder=\"شماره تلفن همراه\" formControlName=\"Username\">\r\n      </mat-form-field>\r\n    </mat-card-content>\r\n    <mat-card-actions>\r\n      <!--<button type=\"submit\" [disabled]='(canRequestPin | async) || (maximumResendingHappend$ | async)' (click)=\"submit()\" mat-raised-button color=\"primary\">-->\r\n      <button type=\"submit\" [disabled]='(canRequestPin | async)' (click)=\"submit()\" mat-raised-button color=\"primary\">\r\n        <span *ngIf='!(canRequestPin | async)'>\r\n          بازیابی رمز عبور\r\n        </span>\r\n        <!--<div *ngIf='(canRequestPin | async) && !(maximumResendingHappend$ | async)'>\r\n          {{timer$ | async}} ثانیه تا امکان در خواست دوباره دریافت پیامک.\r\n        </div>\r\n        <div *ngIf='(maximumResendingHappend$ | async)'>\r\n          عدم امکان درخواست\r\n        </div>-->\r\n      </button>\r\n      <a mat-button routerLink='/auth/signin'>انصراف</a>\r\n    </mat-card-actions>\r\n  </mat-card>\r\n</form>\r\n`,\r\n        styles: [``]\r\n})\r\nexport class ResetPasswordRequestComponent implements OnInit {\r\n        @Output() submitted = new EventEmitter<ResetPasswordRequestModel.Request>();\r\n\r\n        @Input() formGroup: FormGroup;\r\n        @Input() numberOfRequested: Observable<number>;\r\n        @Input() canRequestPin: Observable<boolean>;\r\n        @Input() set pending(isPending: boolean) {\r\n                if (isPending) {\r\n                        this.formGroup.disable();\r\n                }\r\n\r\n                this.formGroup.enable();\r\n        }\r\n\r\n        timer$: Observable<number>;\r\n        maximumResendingHappend$ = new BehaviorSubject(false);\r\n\r\n        constructor(\r\n                public snackBar: MatSnackBar\r\n        ) {\r\n                this.timer$ = Observable.timer(0, 100)\r\n                        .map(i => i + 1)\r\n                        .takeWhile(i => i * 100 <= 3000)\r\n                        .map(i => 3000 - i * 100);\r\n        }\r\n\r\n        ngOnInit() {\r\n                this.numberOfRequested.subscribe(data => {\r\n                        if (data > 2) {\r\n                                this.maximumResendingHappend$.next(true);\r\n                        }\r\n                })\r\n        }\r\n\r\n        submit() {\r\n                if (this.formGroup.valid) {\r\n                        this.submitted.emit(this.formGroup.value);\r\n                        let message = (this.maximumResendingHappend$.getValue())\r\n                                ? 'عدم امکان ...'\r\n                                : 'پیامک جدید برای شما ارسال گردید.';\r\n                        this.snackBar.open(message, '', {\r\n                                duration: 3000,\r\n                        })\r\n                }\r\n        }\r\n}\r\n"
  ],
  "names": [],
  "mappings": ";;;;AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAU,MAAM,eAAe,CAAC;AAC/E,OAAO,EAAE,SAAS,EAA2B,MAAM,gBAAgB,CAAC;AACpE,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAG7C,OAAO,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAC;AAChD,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;AAyCvD,MAAM;;;;IAiBE,YACe;QAAA,aAAQ,GAAR,QAAQ;yBAjBD,IAAI,YAAY,EAAqC;wCAchD,IAAI,eAAe,CAAC,KAAK,CAAC;QAK7C,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC;aAC7B,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;aACf,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,IAAI,IAAI,CAAC;aAC/B,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;KACzC;;;;;IAlBD,IAAa,OAAO,CAAC,SAAkB;QAC/B,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACR,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;SAChC;QAED,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;KAC/B;;;;IAcD,QAAQ;QACA,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YAChC,EAAE,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;gBACP,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAChD;SACR,CAAC,CAAA;KACT;;;;IAED,MAAM;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAC1C,qBAAI,OAAO,GAAG,CAAC,IAAI,CAAC,wBAAwB,CAAC,QAAQ,EAAE,CAAC;gBAChD,CAAC,CAAC,eAAe;gBACjB,CAAC,CAAC,kCAAkC,CAAC;YAC7C,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,EAAE;gBACxB,QAAQ,EAAE,IAAI;aACrB,CAAC,CAAA;SACT;KACR;;;YAnFR,SAAS,SAAC;gBACH,QAAQ,EAAE,6BAA6B;gBACvC,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkCjB;gBACO,MAAM,EAAE,CAAC,EAAE,CAAC;aACnB;;;;YAzCQ,WAAW;;;wBA2CX,MAAM;wBAEN,KAAK;gCACL,KAAK;4BACL,KAAK;sBACL,KAAK"
}
