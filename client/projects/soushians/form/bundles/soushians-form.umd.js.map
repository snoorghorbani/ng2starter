{
  "version": 3,
  "file": "soushians-form.umd.js",
  "sources": [
    "ng://@soushians/form/projects/soushians/form/src/lib/form.module.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/form-routing.module.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/edit/index.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/edit/edit-form.effects.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/list/list.effects.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/add/add-form.effects.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/main-container/main-container.component/main-container.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/list/form-list/form-list.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/list/form-list-container/form-list.container.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/edit/edit-form/edit-form.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/add/add-form/add-form.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/edit/edit-form-container/edit-form-container.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/add/add-form-container/add-form-container.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/add/add-form.actions.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/edit/edit-form.actions.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/add/form-control/form-control.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/add/form-array/form-array.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/add/form-group/form-group.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/main-container/main-container.reducers.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/list/list.reducers.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/view/form-view/form-view.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/list/list.actions.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/view/form-controls/text/text.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/view/form-controls/number/number.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/view/form-controls/table/table.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/view/form-controls/color/color.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/view/form-controls/email/email.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/view/form-controls/checkbox/checkbox.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/view/form-controls/select/select.component.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/services/form.service.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/services/form-configuration.service.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/models/form-schema.model.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/models/field-config.model.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/models/form-field-validator.model.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/models/form-list.api-model.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/models/edit-form.api-model.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/models/add-form.api-model.ts",
    "ng://@soushians/form/projects/soushians/form/src/lib/form.config.ts"
  ],
  "sourcesContent": [
    "import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\r\nimport {\r\n\tMatExpansionModule,\r\n\tMatSnackBarModule,\r\n\tMatIconModule,\r\n\tMatButtonModule,\r\n\tMatCardModule,\r\n\tMatSelectModule,\r\n\tMatInputModule,\r\n\tMatFormFieldModule,\r\n\tMatTabsModule,\r\n\tMatRadioModule,\r\n\tMatSlideToggleModule,\r\n\tMatDividerModule,\r\n\tMatCheckbox,\r\n\tMatCheckboxModule,\r\n\tMatTableModule\r\n} from \"@angular/material\";\r\nimport { StoreModule } from \"@ngrx/store\";\r\nimport { StoreDevtoolsModule } from \"@ngrx/store-devtools\";\r\nimport { EffectsModule, mergeEffects } from \"@ngrx/effects\";\r\n\r\nimport { FormModuleConfig, MODULE_CONFIG_TOKEN, MODULE_DEFAULT_CONFIG } from \"./form.config\";\r\nimport { FormReducers } from \"./main-container/main-container.reducers\";\r\nimport { SelectComponent } from \"./view/form-controls/select/select.component\";\r\nimport { FormGroupComponent } from \"./add/form-group/form-group.component\";\r\nimport { FormArrayComponent } from \"./add/form-array/form-array.component\";\r\nimport { FormControlComponent } from \"./add/form-control/form-control.component\";\r\nimport { FormViewComponent, DynamicFieldDirective } from \"./view/form-view/form-view.component\";\r\nimport { TextComponent } from \"./view/form-controls/text/text.component\";\r\nimport { CheckboxComponent } from \"./view/form-controls/checkbox/checkbox.component\";\r\nimport { EmailComponent } from \"./view/form-controls/email/email.component\";\r\nimport { ColorComponent } from \"./view/form-controls/color/color.component\";\r\nimport { NumberComponent } from \"./view/form-controls/number/number.component\";\r\nimport { TableComponent } from \"./view/form-controls/table/table.component\";\r\nimport { EditFormContainerComponent } from \"./edit/edit-form-container/edit-form-container.component\";\r\nimport { EditFormComponent } from \"./edit/edit-form/edit-form.component\";\r\nimport { FormListContainerComponent } from \"./list/form-list-container/form-list.container.component\";\r\nimport { FormListComponent } from \"./list/form-list/form-list.component\";\r\nimport { AddFormContainerComponent } from \"./add/add-form-container/add-form-container.component\";\r\nimport { MainContainerComponent } from \"./main-container/main-container.component/main-container.component\";\r\nimport { AddFormComponent } from \"./add/add-form/add-form.component\";\r\nimport { AddFormEffects } from \"./add/add-form.effects\";\r\nimport { EditFormEffects } from \"./edit/edit-form.effects\";\r\nimport { FormsListEffects } from \"./list/list.effects\";\r\nimport { RoutingModule } from \"./form-routing.module\";\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tHttpClientModule,\r\n\t\tFormsModule,\r\n\t\tRouterModule,\r\n\t\tCommonModule,\r\n\t\tMatExpansionModule,\r\n\t\tMatSnackBarModule,\r\n\t\tMatIconModule,\r\n\t\tMatButtonModule,\r\n\t\tMatCardModule,\r\n\t\tMatCheckboxModule,\r\n\t\tMatTableModule,\r\n\t\tMatSelectModule,\r\n\t\tMatInputModule,\r\n\t\tMatFormFieldModule,\r\n\t\tMatTabsModule,\r\n\t\tMatDividerModule,\r\n\t\tFlexLayoutModule,\r\n\t\tMatRadioModule,\r\n\t\tMatSlideToggleModule,\r\n\t\tReactiveFormsModule\r\n\t],\r\n\tdeclarations: [\r\n\t\tEditFormContainerComponent,\r\n\t\tEditFormComponent,\r\n\t\tFormListContainerComponent,\r\n\t\tFormListComponent,\r\n\t\tAddFormContainerComponent,\r\n\t\tMainContainerComponent,\r\n\t\tAddFormComponent,\r\n\t\tFormGroupComponent,\r\n\t\tFormArrayComponent,\r\n\t\tFormControlComponent,\r\n\t\tFormViewComponent,\r\n\t\tDynamicFieldDirective,\r\n\t\tSelectComponent,\r\n\t\tCheckboxComponent,\r\n\t\tEmailComponent,\r\n\t\tColorComponent,\r\n\t\tTextComponent,\r\n\t\tNumberComponent,\r\n\t\tTableComponent\r\n\t\t// NgsFormSelectorComponent\r\n\t],\r\n\tentryComponents: [\r\n\t\tSelectComponent,\r\n\t\tCheckboxComponent,\r\n\t\tEmailComponent,\r\n\t\tColorComponent,\r\n\t\tTextComponent,\r\n\t\tNumberComponent,\r\n\t\tTableComponent\r\n\t],\r\n\texports: [ FormViewComponent ]\r\n\t// exports: [ FormViewComponent, NgsFormSelectorComponent ]\r\n})\r\nexport class NgsFormModule {\r\n\tstatic forRoot(config?: FormModuleConfig): ModuleWithProviders {\r\n\t\treturn {\r\n\t\t\tngModule: RootNgsFormModule,\r\n\t\t\tproviders: [ { provide: MODULE_CONFIG_TOKEN, useValue: config } ]\r\n\t\t};\r\n\t}\r\n}\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tNgsFormModule,\r\n\t\tStoreModule.forFeature(\"form\", FormReducers),\r\n\t\tEffectsModule.forFeature([ AddFormEffects, EditFormEffects, FormsListEffects ]),\r\n\t\tRoutingModule\r\n\t],\r\n\texports: [ NgsFormModule ]\r\n})\r\nexport class RootNgsFormModule {}\r\n",
    "import { ModuleWithProviders } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\n\r\nimport { MainContainerComponent } from \"./main-container/main-container.component/main-container.component\";\r\nimport { AddFormContainerComponent } from \"./add/add-form-container/add-form-container.component\";\r\nimport { EditFormContainerComponent } from \"./edit\";\r\nimport { FormListContainerComponent } from \"./list\";\r\n\r\nconst routes: Routes = [\r\n\t{\r\n\t\tpath: \"form\",\r\n\t\tcomponent: MainContainerComponent,\r\n\t\tchildren: [\r\n\t\t\t{\r\n\t\t\t\tpath: \"add\",\r\n\t\t\t\tcomponent: AddFormContainerComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: \"edit/:_id\",\r\n\t\t\t\tcomponent: EditFormContainerComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: \"\",\r\n\t\t\t\tcomponent: FormListContainerComponent\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n];\r\n\r\nexport const RoutingModule: ModuleWithProviders = RouterModule.forChild(routes);\r\n",
    "export * from \"./edit-form\";\r\nexport * from \"./edit-form-container\";\r\nexport * from \"./edit-form.actions\";\r\nexport * from \"./edit-form.effects\";\r\n// export * from \"./edit-form.reducer\";\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { of } from \"rxjs/observable/of\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { FormService } from \"../services/form.service\";\r\nimport { EditFormApiModel } from \"../models\";\r\nimport {\r\n\tEditFormActionTypes,\r\n\tEditFormStartAction,\r\n\tEditFormSucceedAction,\r\n\tEditFormFailedAction\r\n} from \"./edit-form.actions\";\r\nimport { UpdateFormSchemaAction } from \"../list\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\n\r\n@Injectable()\r\nexport class EditFormEffects {\r\n\tconstructor(private actions$: Actions<any>, private router: Router, private service: FormService) {}\r\n\r\n\t@Effect()\r\n\tEditForm$ = this.actions$\r\n\t\t.ofType(EditFormActionTypes.EDIT_FORM)\r\n\t\t.pipe(map(action => action.payload), map(data => new EditFormStartAction(data)));\r\n\r\n\t@Effect()\r\n\tEditFormStart$ = this.actions$\r\n\t\t.ofType(EditFormActionTypes.EDIT_FORM_START)\r\n\t\t.pipe(\r\n\t\t\tmap(action => action.payload),\r\n\t\t\tswitchMap((data: EditFormApiModel.Request) => this.service.update(data)),\r\n\t\t\tmap(formSchema => new EditFormSucceedAction(formSchema)),\r\n\t\t\tcatchError(() => Observable.of(new EditFormFailedAction()))\r\n\t\t);\r\n\r\n\t@Effect()\r\n\tUpdateFormsListStart$ = this.actions$\r\n\t\t.ofType(EditFormActionTypes.EDIT_FORM_SUCCEED)\r\n\t\t.pipe(map(action => action.payload), map(formSchema => new UpdateFormSchemaAction(formSchema)));\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { of } from \"rxjs/observable/of\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { switchMap, map, catchError } from \"rxjs/operators\";\r\n\r\nimport { FormService } from \"../services/form.service\";\r\nimport { FormSchemaModel } from \"../models\";\r\nimport {\r\n\tFormsListAction,\r\n\tFormsListActionTypes,\r\n\tFormsListActions,\r\n\tFormsListFailedAction,\r\n\tFormsListStartAction,\r\n\tFormsListSucceedAction,\r\n\tFormSchemaFechedAction\r\n} from \"./list.actions\";\r\n\r\n@Injectable()\r\nexport class FormsListEffects {\r\n\tconstructor(private actions$: Actions<any>, private router: Router, private service: FormService) {}\r\n\r\n\t@Effect()\r\n\tEditProfileRequest$ = this.actions$.ofType(FormsListActionTypes.FORMS_LIST).map(data => new FormsListStartAction());\r\n\r\n\t@Effect()\r\n\tGetForm$ = this.actions$\r\n\t\t.ofType(FormsListActionTypes.GET_FORM_SCHEMA)\r\n\t\t.pipe(\r\n\t\t\tmap(action => action.payload),\r\n\t\t\tswitchMap(id => this.service.get(id)),\r\n\t\t\tmap(formSchema => new FormSchemaFechedAction(formSchema))\r\n\t\t);\r\n\r\n\t@Effect()\r\n\tget_forms_list$ = this.actions$\r\n\t\t.ofType(FormsListActionTypes.FORMS_LIST_START)\r\n\t\t.pipe(\r\n\t\t\tswitchMap((data: any) => this.service.getList()),\r\n\t\t\tmap(res => new FormsListSucceedAction(res)),\r\n\t\t\tcatchError(() => Observable.of(new FormsListFailedAction()))\r\n\t\t);\r\n}\r\n",
    "import \"rxjs/add/operator/map\";\r\nimport \"rxjs/add/operator/mergeMap\";\r\nimport \"rxjs/add/operator/switchMap\";\r\n\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { of } from \"rxjs/observable/of\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { FormService } from \"../services/form.service\";\r\nimport { AddFormApiModel } from \"../models\";\r\nimport { AddFormActionTypes, AddFormStartAction, AddFormSucceedAction, AddFormFailedAction } from \"./add-form.actions\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\n\r\n@Injectable()\r\nexport class AddFormEffects {\r\n\tconstructor(private actions$: Actions<any>, private router: Router, private service: FormService) {}\r\n\r\n\t@Effect()\r\n\tAddForm$ = this.actions$\r\n\t\t.ofType(AddFormActionTypes.ADD_FORM)\r\n\t\t.pipe(map(action => action.payload), map(data => new AddFormStartAction(data)));\r\n\r\n\t@Effect()\r\n\tAddFormStart$ = this.actions$\r\n\t\t.ofType(AddFormActionTypes.ADD_FORM_START)\r\n\t\t.pipe(\r\n\t\t\tmap(action => action.payload),\r\n\t\t\tswitchMap((data: AddFormApiModel.Request) => this.service.add(data)),\r\n\t\t\tmap(res => new AddFormSucceedAction()),\r\n\t\t\tcatchError(() => Observable.of(new AddFormFailedAction()))\r\n\t\t);\r\n}\r\n",
    "import { Component, OnInit } from \"@angular/core\";\r\n\r\nimport * as MainContainerReducer from \"../../main-container/main-container.reducers\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { FormSchemaModel } from \"../../models\";\r\n\r\n@Component({\r\n\ttemplate: \"<router-outlet></router-outlet>\"\r\n})\r\nexport class MainContainerComponent {\r\n\tconstructor(private route: ActivatedRoute, private store: Store<MainContainerReducer.MainContainerState>) {}\r\n}\r\n",
    "import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\nimport { FormGroup, FormControl } from \"@angular/forms\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { FormSchemaModel, EditFormApiModel } from \"../../models\";\r\n\r\nimport { MainContainerState, FormReducers } from \"../../main-container\";\r\n\r\n@Component({\r\n\tselector: \"form-list\",\r\n\ttemplate: `<div fxLayout=\"row\" fxLayoutWrap fxLayoutAlign=\"center center\" >\r\n    <mat-card class=\"cards-item\" *ngFor=\"let item of (data$ | async)\" fxFlex=\"51\">\r\n      <h3>\r\n        <a [routerLink]=\"['edit' ,  item._id]\">\r\n          <mat-icon aria-label=\"edit form\">edit</mat-icon>\r\n        </a>\r\n        {{item.name}}\r\n      </h3>\r\n  </mat-card>\r\n</div>`\r\n})\r\nexport class FormListComponent {\r\n\t@Input(\"data\") data$: Observable<FormSchemaModel[]>;\r\n}\r\n",
    "import { Component, OnInit } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { MainContainerState, FormReducers } from \"../../main-container\";\r\nimport { FormService } from \"../../services/form.service\";\r\nimport { FormSchemaModel } from \"../../models\";\r\nimport { FormsListAction } from \"../../list/list.actions\";\r\n\r\n@Component({\r\n\ttemplate: `<form-list\r\n\t\t\t\t\t[data]=\"data$\">\r\n\t\t\t\t</form-list>`\r\n})\r\nexport class FormListContainerComponent implements OnInit {\r\n\tdata$: Observable<FormSchemaModel[]>;\r\n\tconstructor(public store: Store<MainContainerState>) {\r\n\t\tthis.data$ = this.store.select(state => state.form.list.data);\r\n\t}\r\n\tngOnInit() {\r\n\t\tthis.store.dispatch(new FormsListAction());\r\n\t}\r\n}\r\n",
    "import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\n\r\nimport { FormSchemaModel, EditFormApiModel } from \"../../models\";\r\nimport { FormService } from \"../../services/form.service\";\r\nimport { AddFormComponent } from \"../../add/add-form\";\r\n\r\n@Component({\r\n\tselector: \"edit-form\",\r\n\ttemplate: `<div fxLayout=\"row\" *ngIf=\"schema\">\r\n  <div [fxFlex]=\"50\" *ngIf=\"formGroup\">\r\n    <form [formGroup]=\"formGroup\">\r\n      <mat-card>\r\n        <mat-card-title>ایجاد فرم جدید</mat-card-title>\r\n        <mat-card-content>\r\n          <mat-form-field>\r\n            <input type=\"text\" matInput (change)=\"changed()\" placeholder=\"نام فرم\" formControlName=\"name\">\r\n          </mat-form-field>\r\n          <!-- <div class=\"button-row\">\r\n                <button mat-button color=\"primary\" (click)=\"addFormGroup(schema.form)\">Add form group</button>\r\n                <button mat-button color=\"primary\" (click)=\"addFormArray(schema.form)\">Add form array</button>\r\n                <button mat-button color=\"primary\" (click)=\"addFormControl(schema.form)\">Add form control</button>\r\n              </div> -->\r\n        </mat-card-content>\r\n      </mat-card>\r\n      <mat-card>\r\n        <mat-card-content>\r\n          <div [ngSwitch]=\"schema.form?.type\">\r\n            <app-form-group *ngSwitchCase=\"'group'\" [schema]=\"schema.form\" noHeader=\"true\" (changes)=\"changed()\"></app-form-group>\r\n            <app-form-array *ngSwitchCase=\"'array'\" [schema]=\"schema.form\" (changes)=\"changed()\"></app-form-array>\r\n          </div>\r\n        </mat-card-content>\r\n        <mat-card-actions>\r\n          <!-- <button mat-raised-button color=\"primary\" (click)=\"$any(form).generate(schema)\">ایجاد فرم</button> -->\r\n          <button mat-raised-button color=\"primary\" (click)=\"emit()\" type=\"submit\">ثبت</button>\r\n        </mat-card-actions>\r\n\r\n        <div [formGroup]=\"$any(formGroup.controls.events).controls.accept\">\r\n          <mat-slide-toggle (change)=\"changed()\" formControlName=\"show\">نمایش تایید</mat-slide-toggle>\r\n          <mat-form-field>\r\n            <input type=\"text\" (change)=\"changed()\" matInput placeholder=\"متن تایید\" formControlName=\"text\">\r\n          </mat-form-field>\r\n        </div>\r\n        <div [formGroup]=\"$any(formGroup.controls.events).controls.cancel\">\r\n          <mat-slide-toggle (change)=\"changed()\" formControlName=\"show\">نمایش انصراف</mat-slide-toggle>\r\n          <mat-form-field>\r\n            <input type=\"text\" (change)=\"changed()\" matInput placeholder=\"متن انصراف\" formControlName=\"text\">\r\n          </mat-form-field>\r\n        </div>\r\n\r\n      </mat-card>\r\n    </form>\r\n  </div>\r\n  <div [fxFlex]=\"50\">\r\n    <ngs-form-view [local]='true' [id]=\"schema._id\"></ngs-form-view>\r\n  </div>\r\n</div>`\r\n})\r\nexport class EditFormComponent extends AddFormComponent {\r\n\t@Input() schema: any;\r\n\temit() {\r\n\t\tif (!this.formGroup.valid) return;\r\n\t\treturn this.submited.emit(this.formGroup.value);\r\n\t}\r\n}\r\n",
    "import { Component, OnInit, EventEmitter, Output, Input } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\n\r\nimport { FormSchemaModel, AddFormApiModel, FieldConfig } from \"../../models\";\r\n\r\n@Component({\r\n\tselector: \"ngs-form-add\",\r\n\ttemplate: `<div fxLayout=\"row\" *ngIf=\"schema\">\r\n  <div [fxFlex]=\"50\" *ngIf=\"formGroup\">\r\n    <form [formGroup]=\"formGroup\">\r\n      <mat-card>\r\n        <mat-card-title>ایجاد فرم جدید</mat-card-title>\r\n        <mat-card-content>\r\n          <mat-form-field>\r\n            <input type=\"text\" matInput (change)=\"changed()\" placeholder=\"نام فرم\" formControlName=\"name\">\r\n          </mat-form-field>\r\n          <!-- <div class=\"button-row\">\r\n                <button mat-button color=\"primary\" (click)=\"addFormGroup(schema.form)\">Add form group</button>\r\n                <button mat-button color=\"primary\" (click)=\"addFormArray(schema.form)\">Add form array</button>\r\n                <button mat-button color=\"primary\" (click)=\"addFormControl(schema.form)\">Add form control</button>\r\n              </div> -->\r\n        </mat-card-content>\r\n      </mat-card>\r\n      <mat-card>\r\n        <mat-card-content>\r\n          <div [ngSwitch]=\"schema.form?.type\">\r\n            <app-form-group *ngSwitchCase=\"'group'\" [schema]=\"schema.form\" noHeader=\"true\" (changes)=\"changed()\"></app-form-group>\r\n            <app-form-array *ngSwitchCase=\"'array'\" [schema]=\"schema.form\" (changes)=\"changed()\"></app-form-array>\r\n          </div>\r\n        </mat-card-content>\r\n        <mat-card-actions>\r\n          <!-- <button mat-raised-button color=\"primary\" (click)=\"form.generate(schema)\">ایجاد فرم</button> -->\r\n          <button mat-raised-button color=\"primary\" (click)=\"emit()\" type=\"submit\">ثبت</button>\r\n        </mat-card-actions>\r\n\r\n        <div [formGroup]=\"$any(formGroup.controls.events).controls.accept\">\r\n          <mat-slide-toggle (change)=\"changed()\" formControlName=\"show\">نمایش تایید</mat-slide-toggle>\r\n          <mat-form-field>\r\n            <input type=\"text\" (change)=\"changed()\" matInput placeholder=\"متن تایید\" formControlName=\"text\">\r\n          </mat-form-field>\r\n        </div>\r\n        <div [formGroup]=\"$any(formGroup.controls.events).controls.cancel\">\r\n          <mat-slide-toggle (change)=\"changed()\" formControlName=\"show\">نمایش انصراف</mat-slide-toggle>\r\n          <mat-form-field>\r\n            <input type=\"text\" (change)=\"changed()\" matInput placeholder=\"متن انصراف\" formControlName=\"text\">\r\n          </mat-form-field>\r\n        </div>\r\n\r\n      </mat-card>\r\n    </form>\r\n  </div>\r\n  <div [fxFlex]=\"50\">\r\n    <ngs-form-view [local]='true' [id]=\"schema._id\"></ngs-form-view>\r\n  </div>\r\n</div>`\r\n})\r\nexport class AddFormComponent {\r\n\t@Input() schema: FormSchemaModel;\r\n\t@Input() formGroup = AddFormApiModel.Request.formGroup;\r\n\t@Output() submited = new EventEmitter();\r\n\t@Output() changes = new EventEmitter();\r\n\r\n\temit() {\r\n\t\tthis.formGroup.patchValue({ form: this.schema.form });\r\n\t\tthis.submited.emit(this.formGroup.value);\r\n\t}\r\n\tchanged() {\r\n\t\tthis.formGroup.patchValue({ form: this.schema.form });\r\n\t\tthis.changes.emit(this.formGroup.value);\r\n\t}\r\n\tchangeOrder($event) {\r\n\t\tdebugger;\r\n\t}\r\n\r\n\taddFormGroup(root: FieldConfig) {\r\n\t\tconst group = new FieldConfig(\"group\");\r\n\t\tgroup.fields = [];\r\n\t\troot.fields.push(group);\r\n\t\treturn group;\r\n\t}\r\n\taddFormArray(root: FieldConfig) {\r\n\t\tconst array = new FieldConfig(\"array\");\r\n\t\tarray.fields = [];\r\n\t\troot.fields.push(array);\r\n\t\treturn array;\r\n\t}\r\n\taddFormControl(root: FieldConfig) {\r\n\t\tconst control = new FieldConfig(\"control\");\r\n\t\troot.fields.push(control);\r\n\t\treturn control;\r\n\t}\r\n}\r\n",
    "import { Component, OnInit } from \"@angular/core\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { MainContainerState } from \"../../main-container/main-container.reducers\";\r\nimport { EditFormApiModel } from \"../../models\";\r\nimport { FormService } from \"../../services/form.service\";\r\nimport { EditFormAction } from \"../../edit/edit-form.actions\";\r\nimport { AddFormContainerComponent } from \"../../add/add-form-container\";\r\nimport { GetFormSchemaAction } from \"../../list/list.actions\";\r\n\r\n@Component({\r\n\ttemplate: `<edit-form\r\n\t\t\t\t\t[formGroup]=\"formGroup\"\r\n\t\t\t\t\t[schema]=\"schema\"\r\n\t\t\t\t\t(changes)=\"update_schema($event)\"\r\n\t\t\t\t\t(submited)=\"update($event)\">\r\n\t\t\t\t</edit-form>`\r\n})\r\nexport class EditFormContainerComponent extends AddFormContainerComponent {\r\n\tformGroup = EditFormApiModel.Request.formGroup;\r\n\tconstructor(public service: FormService, private route: ActivatedRoute, public store: Store<MainContainerState>) {\r\n\t\tsuper(store, service);\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\tthis.route.params\r\n\t\t\t.map(params => params[\"_id\"])\r\n\t\t\t.subscribe(id => this.store.dispatch(new GetFormSchemaAction(id)));\r\n\r\n\t\tthis.route.params\r\n\t\t\t.map(params => params[\"_id\"])\r\n\t\t\t.switchMap(id => this.service.selectFormById(id))\r\n\t\t\t.filter(data => data != null)\r\n\t\t\t.take(1)\r\n\t\t\t.subscribe(formSchema => {\r\n\t\t\t\tdebugger;\r\n\t\t\t\tthis.schema = formSchema;\r\n\t\t\t\tthis.formGroup.patchValue(formSchema);\r\n\t\t\t});\r\n\t}\r\n\r\n\tupdate(data) {\r\n\t\tthis.store.dispatch(new EditFormAction(data));\r\n\t}\r\n}\r\n",
    "import { Component, OnInit } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { MainContainerState } from \"../../main-container/main-container.reducers\";\r\nimport { FormSchemaModel } from \"../../models\";\r\nimport { AddFormAction } from \"../add-form.actions\";\r\nimport { AddFormSchemaAction, UpdateFormSchemaAction } from \"../../list/list.actions\";\r\nimport { FormService } from \"../../services/form.service\";\r\n\r\n@Component({\r\n\ttemplate: `<ngs-form-add \r\n\t\t\t\t\t[schema]=\"schema\" \r\n\t\t\t\t\t(changes)=\"update_schema($event)\" \r\n\t\t\t\t\t(submited)=add($event)\r\n\t\t\t\t></ngs-form-add>`\r\n})\r\nexport class AddFormContainerComponent implements OnInit {\r\n\tschema: FormSchemaModel;\r\n\tconstructor(public store: Store<MainContainerState>, public service: FormService) {}\r\n\tngOnInit() {\r\n\t\tdebugger;\r\n\t\tthis.schema = new FormSchemaModel();\r\n\t\tthis.schema.init();\r\n\t\tthis.store.dispatch(new AddFormSchemaAction(this.schema));\r\n\t}\r\n\tadd(form: FormSchemaModel) {\r\n\t\tthis.store.dispatch(new AddFormAction(form));\r\n\t}\r\n\tupdate_schema(form: FormSchemaModel) {\r\n\t\tthis.store.dispatch(new UpdateFormSchemaAction(form));\r\n\t}\r\n}\r\n",
    "import { Action } from \"@ngrx/store\";\r\n\r\nimport { FormSchemaModel } from \"../models\";\r\n\r\nexport enum AddFormActionTypes {\r\n\tADD_FORM = \"[FORM][ADD] ADD_FORM_PROFILE\",\r\n\tADD_FORM_START = \"[FORM][ADD] ADD_FORM_START\",\r\n\tADD_FORM_SUCCEED = \"[FORM][ADD] ADD_FORM_SUCCEED\",\r\n\tADD_FORM_FAILED = \"[FORM][ADD] ADD_FORM_FAILED\"\r\n}\r\n\r\nexport class AddFormAction implements Action {\r\n\treadonly type = AddFormActionTypes.ADD_FORM;\r\n\tconstructor(public payload: FormSchemaModel) {}\r\n}\r\nexport class AddFormStartAction implements Action {\r\n\treadonly type = AddFormActionTypes.ADD_FORM_START;\r\n\tconstructor(public payload: FormSchemaModel) {}\r\n}\r\nexport class AddFormSucceedAction implements Action {\r\n\treadonly type = AddFormActionTypes.ADD_FORM_SUCCEED;\r\n}\r\nexport class AddFormFailedAction implements Action {\r\n\treadonly type = AddFormActionTypes.ADD_FORM_FAILED;\r\n}\r\n\r\nexport type AddFormActions = AddFormAction | AddFormStartAction | AddFormSucceedAction | AddFormFailedAction;\r\n",
    "import { Action } from \"@ngrx/store\";\r\n\r\nimport { FormSchemaModel } from \"../models\";\r\n\r\nexport enum EditFormActionTypes {\r\n\tEDIT_FORM = \"[FORM][EDIT] EDIT_FORM\",\r\n\tEDIT_FORM_START = \"[FORM][EDIT] EDIT_FORM_START\",\r\n\tEDIT_FORM_SUCCEED = \"[FORM][EDIT] EDIT_FORM_SUCCEED\",\r\n\tEDIT_FORM_FAILED = \"[FORM][EDIT] EDIT_FORM_FAILED\"\r\n}\r\n\r\nexport class EditFormAction implements Action {\r\n\treadonly type = EditFormActionTypes.EDIT_FORM;\r\n\tconstructor(public payload: FormSchemaModel) {}\r\n}\r\nexport class EditFormStartAction implements Action {\r\n\treadonly type = EditFormActionTypes.EDIT_FORM_START;\r\n\tconstructor(public payload: FormSchemaModel) {}\r\n}\r\nexport class EditFormSucceedAction implements Action {\r\n\treadonly type = EditFormActionTypes.EDIT_FORM_SUCCEED;\r\n\tconstructor(public payload: FormSchemaModel) {}\r\n}\r\nexport class EditFormFailedAction implements Action {\r\n\treadonly type = EditFormActionTypes.EDIT_FORM_FAILED;\r\n}\r\n\r\nexport type EditFormActions = EditFormAction | EditFormStartAction | EditFormSucceedAction | EditFormFailedAction;\r\n",
    "import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\r\nimport { FormGroup, FormControl, FormArray } from \"@angular/forms\";\r\nimport { FieldConfig } from \"../../models\";\r\n\r\n@Component({\r\n\tselector: \"app-form-control\",\r\n\ttemplate: `  <mat-expansion-panel>\r\n    <mat-expansion-panel-header>\r\n      <mat-panel-title>\r\n        <button mat-icon-button (click)=\"delete.emit()\">\r\n            <mat-icon aria-label=\" icon-button\">delete_forever</mat-icon>\r\n          </button>\r\n        {{schema.name}}\r\n      </mat-panel-title>\r\n    </mat-expansion-panel-header>\r\n      <mat-form-field>\r\n        <input matInput [(ngModel)]=\"schema.name\" (change)=\"changed()\" placeholder=\"Name\">\r\n      </mat-form-field>\r\n      \r\n      <mat-form-field>\r\n        <input matInput [(ngModel)]=\"schema.title\" (change)=\"changed()\" placeholder=\"Placeholder\"/>\r\n      </mat-form-field>\r\n      \r\n      <mat-form-field>\r\n        <mat-select [(ngModel)]=\"schema.inputType\" (change)=\"changed()\" placeholder=\"Input Type\">\r\n          <mat-option value=\"table\">table</mat-option>\r\n          <mat-option value=\"select\">select</mat-option>\r\n          <mat-option value=\"text\">text</mat-option>\r\n          <mat-option value=\"number\">number</mat-option>\r\n          <mat-option value=\"email\">email</mat-option>\r\n          <mat-option value=\"color\">color</mat-option>\r\n          <mat-option value=\"radio\">radio</mat-option>\r\n          <mat-option value=\"checkbox\">checkbox</mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field>\r\n          <input matInput [(ngModel)]=\"schema.value\" (change)=\"changed()\" placeholder=\"Value\"/>\r\n      </mat-form-field>\r\n      \r\n        <mat-form-field>\r\n          <mat-select [(ngModel)]=\"schema.width\" (change)=\"changed()\" placeholder=\"width\">\r\n            <mat-option *ngFor=\"let item of width\" [value]=\"item\">{{item}}</mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n\r\n      <div *ngIf=\"schema.inputType=='table'\" [formGroup]=\"tableOptions\">\r\n        <mat-form-field>\r\n          <input matInput (change)=\"changed()\" formControlName=\"dataEndpoint\" placeholder=\"dataEndpoint\"/>\r\n        </mat-form-field>\r\n      </div>\r\n\r\n      <div *ngIf=\"schema.inputType=='select'\">\r\n        [options]\r\n        <button (click)=\"addOption()\">+</button>\r\n        <button (click)=\"insertOptions()\">insert</button>\r\n        <div *ngFor=\"let option of options.controls;index as i\">\r\n          {{i}}\r\n          <div [formGroup]=\"options.controls[i]\">\r\n            <mat-form-field>\r\n              <input matInput (change)=\"changed()\" formControlName=\"key\" placeholder=\"key\"/>\r\n            </mat-form-field>\r\n            <mat-form-field>\r\n              <input matInput (change)=\"changed()\" formControlName=\"value\" placeholder=\"value\"/>\r\n            </mat-form-field>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <br/>\r\n      <div>\r\n        <mat-slide-toggle (change)=\"changed()\"  [(ngModel)]=\"schema.validator.required.active\">اجباری</mat-slide-toggle>\r\n        <mat-form-field>\r\n          <input matInput (change)=\"changed()\" [(ngModel)]=\"schema.validator.required.message\"  placeholder=\"پیغام\"/>\r\n        </mat-form-field>\r\n        </div>\r\n      <div>\r\n        <mat-slide-toggle (change)=\"changed()\"  [(ngModel)]=\"schema.validator.email.active\">ایمیل</mat-slide-toggle>\r\n        <mat-form-field>\r\n          <input matInput (change)=\"changed()\" [(ngModel)]=\"schema.validator.email.message\"  placeholder=\"پیغام\"/>\r\n        </mat-form-field>\r\n      </div>\r\n      <div>\r\n        <mat-slide-toggle (change)=\"changed()\"  [(ngModel)]=\"schema.validator.minlength.active\">حداقل تعداد کاراکتر</mat-slide-toggle>\r\n        <mat-form-field>\r\n          <input matInput (change)=\"changed()\" [(ngModel)]=\"schema.validator.minlength.message\"  placeholder=\"پیغام\"/>\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n          <input matInput (change)=\"changed()\" [(ngModel)]=\"schema.validator.minlength.value\"  placeholder=\"تعداد حداقل کاراکتر\"/>\r\n        </mat-form-field>\r\n    </div>\r\n      \r\n  </mat-expansion-panel>`\r\n})\r\nexport class FormControlComponent {\r\n\t@Input() schema: FieldConfig;\r\n\t@Output() changes = new EventEmitter();\r\n\t@Output() delete = new EventEmitter();\r\n\r\n\twidth = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ];\r\n\toptions = new FormArray([\r\n\t\tnew FormGroup({\r\n\t\t\tkey: new FormControl(),\r\n\t\t\tvalue: new FormControl()\r\n\t\t})\r\n\t]);\r\n\ttableOptions = new FormGroup({\r\n\t\tdataEndpoint: new FormControl(\"http://localhost:3000/api/fake/packgeCompareSimpleList\")\r\n\t});\r\n\tconstructor() {\r\n\t\tdebugger;\r\n\t}\r\n\r\n\tchanged() {\r\n\t\tif ([ this.schema.name, this.schema.title, this.schema.inputType ].some(item => !item)) return true;\r\n\t\tif (this.schema.inputType == \"table\") {\r\n\t\t\tthis.schema.options = this.tableOptions.value;\r\n\t\t} else if (this.schema.inputType == \"select\") {\r\n\t\t\tthis.schema.options = this.options.value;\r\n\t\t}\r\n\t\tthis.changes.emit();\r\n\t}\r\n\r\n\taddOption() {\r\n\t\tthis.options.push(\r\n\t\t\tnew FormGroup({\r\n\t\t\t\tkey: new FormControl(),\r\n\t\t\t\tvalue: new FormControl()\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\tremoveOption(i) {\r\n\t\tthis.options.controls.splice(i, 1);\r\n\t}\r\n\tinsertOptions() {\r\n\t\tthis.schema.options = this.options.value;\r\n\t}\r\n}\r\n",
    "import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\r\nimport { FieldConfig } from \"../../models\";\r\n\r\n@Component({\r\n\tselector: \"app-form-array\",\r\n\ttemplate: `<mat-card>\r\n  <mat-card-content>\r\n    <mat-form-field>\r\n        <input matInput [(ngModel)]=\"schema.name\" placeholder=\"Name\">\r\n    </mat-form-field>\r\n      \r\n    <div class=\"button-row\">\r\n      <button mat-button color=\"primary\" (click)=\"addFormGroup(schema)\">addFormGroup</button>\r\n      <button mat-button color=\"primary\" (click)=\"addFormArray(schema)\">addFormArray</button>\r\n      <!-- <button mat-button color=\"primary\" (click)=\"addFormControl(schema)\">addFormControl</button> -->\r\n    </div>\r\n    \r\n    <div *ngFor=\"let field of schema.fields\">\r\n      <div [ngSwitch]=\"field.type\">\r\n        <app-form-group *ngSwitchCase=\"'group'\" [schema]=\"field\" (changes)=\"changed()\"></app-form-group>\r\n        <app-form-array *ngSwitchCase=\"'array'\" [schema]=\"field\" (changes)=\"changed()\"></app-form-array>\r\n        <!-- <app-form-control *ngSwitchCase=\"'control'\" [schema]=\"field\" (change)=\"changed($event)\"></app-form-control> -->\r\n      </div>\r\n    </div>\r\n    \r\n  </mat-card-content>\r\n</mat-card>`\r\n})\r\nexport class FormArrayComponent {\r\n\t@Input() schema: FieldConfig;\r\n\t@Output() changes = new EventEmitter();\r\n\tconstructor() {}\r\n\r\n\tchanged() {\r\n\t\tthis.changes.emit();\r\n\t}\r\n\r\n\taddFormGroup(root: FieldConfig) {\r\n\t\tconst group = new FieldConfig(\"group\");\r\n\t\tgroup.fields = [];\r\n\t\troot.fields.push(group);\r\n\t\treturn group;\r\n\t}\r\n\taddFormArray(root: FieldConfig) {\r\n\t\tconst array = new FieldConfig(\"array\");\r\n\t\tarray.fields = [];\r\n\t\troot.fields.push(array);\r\n\t\treturn array;\r\n\t}\r\n\taddFormControl(root: FieldConfig) {\r\n\t\tconst control = new FieldConfig(\"control\");\r\n\t\troot.fields.push(control);\r\n\t\treturn control;\r\n\t}\r\n}\r\n",
    "import { Component, Input, Output, EventEmitter } from \"@angular/core\";\r\nimport { FieldConfig } from \"../../models\";\r\nimport { Form } from \"@angular/forms\";\r\n\r\n@Component({\r\n\tselector: \"app-form-group\",\r\n\ttemplate: `<mat-card>\r\n  <mat-card-content>\r\n\r\n    <mat-form-field *ngIf=\"!noHeader\">\r\n      <input matInput [(ngModel)]=\"schema.name\" placeholder=\"Name\">\r\n    </mat-form-field>\r\n\r\n    <mat-form-field *ngIf=\"!noHeader\">\r\n      <input matInput [(ngModel)]=\"schema.title\" placeholder=\"عنوان\">\r\n    </mat-form-field>\r\n\r\n    <div class=\"button-row\">\r\n      <button mat-button color=\"primary\" (click)=\"addFormGroup(schema)\"> addFormGroup </button>\r\n      <button mat-button color=\"primary\" (click)=\"addFormArray(schema)\"> addFormArray </button>\r\n      <button mat-button color=\"primary\" (click)=\"addFormControl(schema)\">addFormControl</button>\r\n    </div>\r\n\r\n    <div *ngFor=\"let field of schema.fields;let i = index\">\r\n      <div [ngSwitch]=\"field.type\">\r\n        <app-form-group *ngSwitchCase=\"'group'\" [schema]=\"field\" (change)=\"changed()\"></app-form-group>\r\n        <app-form-array *ngSwitchCase=\"'array'\" [schema]=\"field\" (change)=\"changed()\"></app-form-array>\r\n        <app-form-control *ngSwitchCase=\"'control'\" [schema]=\"field\" (changes)=\"changed()\" (delete)=\"deleteFormGroup(i)\"></app-form-control>\r\n      </div>\r\n    </div>\r\n\r\n  </mat-card-content>\r\n</mat-card>`\r\n})\r\nexport class FormGroupComponent {\r\n\t@Input() schema: FieldConfig;\r\n\t@Input() noHeader: boolean = false;\r\n\t@Output() changes = new EventEmitter();\r\n\t@Output() delete = new EventEmitter();\r\n\tconstructor() {\r\n\t\tdebugger;\r\n\t}\r\n\r\n\tchanged() {\r\n\t\tthis.changes.emit();\r\n\t}\r\n\r\n\taddFormGroup(root: FieldConfig) {\r\n\t\tconst group = new FieldConfig(\"group\");\r\n\t\tgroup.fields = [];\r\n\t\troot.fields.push(group);\r\n\t\tthis.schema.id = this.schema.id + 1;\r\n\t\treturn group;\r\n\t}\r\n\taddFormArray(root: FieldConfig) {\r\n\t\tconst array = new FieldConfig(\"array\");\r\n\t\tarray.fields = [];\r\n\t\troot.fields.push(array);\r\n\t\treturn array;\r\n\t}\r\n\taddFormControl(root: FieldConfig) {\r\n\t\tconst control = new FieldConfig(\"control\");\r\n\t\troot.fields.push(control);\r\n\t\treturn control;\r\n\t}\r\n\tdeleteFormGroup(idx: number) {\r\n\t\tthis.schema.fields.splice(idx, 1);\r\n\t}\r\n}\r\n",
    "import * as list from \"../list/list.reducers\";\r\n\r\nexport interface FormState {\r\n\tlist: list.State;\r\n}\r\n\r\nexport const FormReducers = {\r\n\tlist: list.reducer\r\n};\r\n\r\nexport interface MainContainerState {\r\n\t\"form\": FormState;\r\n}\r\n",
    "import { responseStatusTypes } from \"@soushians/shared\";\r\nimport { FormSchemaModel } from \"../models\";\r\nimport { FormsListActionTypes, FormsListActions } from \"./list.actions\";\r\n\r\nexport interface State {\r\n\tstatus: responseStatusTypes;\r\n\tdata: FormSchemaModel[];\r\n}\r\nexport const initialState: State = {\r\n\tstatus: \"pristine\",\r\n\tdata: []\r\n};\r\nexport function reducer(state = initialState, action: FormsListActions): State {\r\n\tswitch (action.type) {\r\n\t\tcase FormsListActionTypes.FORMS_LIST: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tstatus: \"dirty\"\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase FormsListActionTypes.FORMS_LIST_START: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tstatus: \"pending\"\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase FormsListActionTypes.FORMS_LIST_SUCCEED: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: action.payload,\r\n\t\t\t\tstatus: \"succeed\"\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase FormsListActionTypes.FORMS_LIST_FAILED: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tstatus: \"failed\"\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase FormsListActionTypes.FORM_SCHEMA_UPDATE: {\r\n\t\t\tconst data = state.data.concat();\r\n\t\t\tvar entityIdx = state.data.findIndex(form => form._id == action.payload._id);\r\n\t\t\tif (entityIdx > -1) {\r\n\t\t\t\tdata[entityIdx] = Object.assign({}, data[entityIdx], action.payload);\r\n\t\t\t} else {\r\n\t\t\t\tdata.push(action.payload);\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: data\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase FormsListActionTypes.ADD_FORM_SCHEMA: {\r\n\t\t\tconst data = state.data.concat();\r\n\t\t\tvar entityIdx = state.data.findIndex(form => form._id == action.payload._id);\r\n\t\t\tif (entityIdx > -1) {\r\n\t\t\t\tdata[entityIdx] = Object.assign({}, data[entityIdx], action.payload);\r\n\t\t\t} else {\r\n\t\t\t\tdata.push(action.payload);\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: data\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase FormsListActionTypes.FORM_SCHEMA_FETCHED: {\r\n\t\t\tconst data = state.data.concat();\r\n\t\t\tvar entityIdx = state.data.findIndex(form => form._id == action.payload._id);\r\n\t\t\tif (entityIdx > -1) {\r\n\t\t\t\tdata[entityIdx] = Object.assign({}, data[entityIdx], action.payload);\r\n\t\t\t} else {\r\n\t\t\t\tdata.push(action.payload);\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: data\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tdefault: {\r\n\t\t\treturn state;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport var getStatus = (state: State) => state.status;\r\n",
    "import {\r\n\tComponent,\r\n\tOnInit,\r\n\tViewChild,\r\n\tViewContainerRef,\r\n\tComponentFactoryResolver,\r\n\tCompiler,\r\n\tReflectiveInjector,\r\n\tNgModule,\r\n\tInput,\r\n\tOutput,\r\n\tEventEmitter,\r\n\tOnChanges,\r\n\tDirective,\r\n\tType,\r\n\tOnDestroy\r\n} from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { FormControl, FormGroup, FormArray, AbstractControl, Validators } from \"@angular/forms\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\nimport { Subject } from \"rxjs\";\r\nimport { takeUntil } from \"rxjs/operators\";\r\nimport { ComponentRef } from \"@angular/core/src/linker/component_factory\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport {\r\n\tSelectComponent,\r\n\tEmailComponent,\r\n\tColorComponent,\r\n\tCheckboxComponent,\r\n\tTextComponent,\r\n\tTableComponent\r\n} from \"../form-controls\";\r\nimport { FormService } from \"../../services/form.service\";\r\nimport { MainContainerState } from \"../../main-container/main-container.reducers\";\r\nimport { GetFormSchemaAction } from \"../../list/list.actions\";\r\nimport { Field, FieldConfig, FormSchemaModel } from \"../../models\";\r\n\r\n@Component({\r\n\tselector: \"ngs-form-view\",\r\n\ttemplate: `<form *ngIf=\"formGroupCreated\" class=\"dynamic-form\" [formGroup]=\"formGroup\" (ngSubmit)=\"accepted()\">\r\n  <mat-card>\r\n    <mat-card-content fxLayout=\"row wrap\" fxLayoutGap=\"25px\">\r\n      <div  *ngFor=\"let field of (schema$ | async)?.form.fields;\" [fxFlex]=\"field.width * 10\">\r\n        <ng-container dynamicField  [config]=\"field\" [group]=\"formGroup\"></ng-container>\r\n      </div>\r\n    </mat-card-content>\r\n    <mat-card-actions>\r\n      <button fxFlex type=\"submit\" *ngIf=\"(schema$ | async)?.events.accept.show\" mat-raised-button color=\"primary\">{{(schema$ | async)?.events.accept.text}}</button>\r\n      <button fxFlex type=\"button\" *ngIf=\"(schema$ | async)?.events.cancel.show\" (click)=\"cancel.emit()\" mat-raised-button color=\"primary\">{{(schema$ | async)?.events.cancel.text}</button>\r\n    </mat-card-actions>\r\n  </mat-card>\r\n</form>`\r\n})\r\nexport class FormViewComponent implements OnDestroy {\r\n\tunsubscribe = new Subject<void>();\r\n\t@Output() accept = new EventEmitter<FormGroup>();\r\n\t@Output() cancel = new EventEmitter<FormGroup>();\r\n\t@Input() local;\r\n\t@Input()\r\n\tset id(id: string) {\r\n\t\tif (!this.local) this.store.dispatch(new GetFormSchemaAction(id));\r\n\t\tthis.service\r\n\t\t\t.selectFormById(id)\r\n\t\t\t.pipe(takeUntil(this.unsubscribe))\r\n\t\t\t.subscribe(schema => this.schema$.next(schema));\r\n\t}\r\n\t@Input()\r\n\tset schema(schema: FormSchemaModel) {\r\n\t\tthis.schema$.next(schema);\r\n\t}\r\n\t_id: string;\r\n\tformGroup: FormGroup;\r\n\tformGroupCreated = false;\r\n\tschema$: BehaviorSubject<FormSchemaModel>;\r\n\r\n\tconstructor(\r\n\t\tprivate service: FormService,\r\n\t\tprivate compiler: Compiler,\r\n\t\tprivate resolver: ComponentFactoryResolver,\r\n\t\tprivate store: Store<MainContainerState>\r\n\t) {\r\n\t\tthis.schema$ = new BehaviorSubject(undefined);\r\n\t\tthis.schema$.pipe(takeUntil(this.unsubscribe)).subscribe(schema => {\r\n\t\t\tif (!schema) return;\r\n\t\t\tthis.formGroup = this.createFrom(schema.form) as FormGroup;\r\n\t\t\tif (!schema.form.name) return;\r\n\t\t\tthis.formGroupCreated = true;\r\n\t\t});\r\n\t}\r\n\tngOnDestroy() {\r\n\t\tthis.unsubscribe.next();\r\n\t\tthis.unsubscribe.complete();\r\n\t}\r\n\tgenerate(schema: FormSchemaModel) {\r\n\t\tthis.schema$.next(schema);\r\n\t}\r\n\r\n\tcreateFrom(data: FieldConfig, parentPath = \"\"): AbstractControl {\r\n\t\tif (data.type == \"control\") {\r\n\t\t\tif (data.parentType == \"array\") {\r\n\t\t\t\t// parentPath = `${parentPath}.controls[${(data as FieldConfig).name}]`;\r\n\t\t\t} else if (data.parentType == \"group\") {\r\n\t\t\t\tvar formGroupPath = parentPath;\r\n\t\t\t\tparentPath = `${parentPath}.controls.${(data as FieldConfig).name}`;\r\n\t\t\t}\r\n\t\t\tvar validators = [];\r\n\t\t\tif (data.validator.required.active) {\r\n\t\t\t\tvalidators.push(Validators.required);\r\n\t\t\t}\r\n\t\t\tif (data.validator.minlength.active) {\r\n\t\t\t\tvalidators.push(Validators.minLength(data.validator.minlength.value));\r\n\t\t\t}\r\n\t\t\tif (data.validator.email.active) {\r\n\t\t\t\tvalidators.push(Validators.email);\r\n\t\t\t}\r\n\t\t\tvar ctr = new FormControl(data.value, validators);\r\n\t\t\t(ctr as any).schema = data;\r\n\t\t\t(ctr as any).schema.path = parentPath;\r\n\t\t\t(ctr as any).schema.formGroupPath = formGroupPath;\r\n\t\t\treturn ctr;\r\n\t\t} else if (data.type == \"group\") {\r\n\t\t\tvar formGroup = new FormGroup({});\r\n\t\t\tif (data.parentType == undefined) {\r\n\t\t\t\tparentPath = (data as FieldConfig).name;\r\n\t\t\t} else if (data.parentType == \"array\") {\r\n\t\t\t\tparentPath = `${parentPath}.controls[${(data as FieldConfig).name}]`;\r\n\t\t\t} else if (data.parentType == \"group\") {\r\n\t\t\t\tparentPath = `${parentPath}.controls.${(data as FieldConfig).name}`;\r\n\t\t\t}\r\n\r\n\t\t\t(formGroup as any).schema = data;\r\n\t\t\t(formGroup as any).schema.path = parentPath;\r\n\t\t\tdata.fields.forEach(item => {\r\n\t\t\t\titem.parentType = \"group\";\r\n\t\t\t\tformGroup.addControl(item.name, this.createFrom(item, parentPath));\r\n\t\t\t});\r\n\t\t\treturn formGroup;\r\n\t\t} else {\r\n\t\t\tvar formArray: FormArray = new FormArray([]);\r\n\t\t\tparentPath =\r\n\t\t\t\tparentPath == \"\" ? (data as FieldConfig).name : `${parentPath}.controls.${(data as FieldConfig).name}`;\r\n\t\t\t(formArray as any).schema = data;\r\n\t\t\t(formArray as any).schema.path = parentPath;\r\n\t\t\tdata.fields.forEach((item, idx) => {\r\n\t\t\t\titem.parentType = \"array\";\r\n\t\t\t\titem.name = idx.toString();\r\n\t\t\t\tformArray.controls.push(this.createFrom(item, parentPath));\r\n\t\t\t});\r\n\t\t\treturn formArray;\r\n\t\t}\r\n\t}\r\n\r\n\taccepted() {\r\n\t\tthis.accept.emit(this.formGroup);\r\n\t}\r\n\tcanceled() {\r\n\t\tthis.cancel.emit(this.formGroup);\r\n\t}\r\n}\r\n\r\nconst components: { [type: string]: Type<Field> } = {\r\n\tcheckbox: CheckboxComponent,\r\n\ttext: TextComponent,\r\n\ttable: TableComponent,\r\n\tcolor: ColorComponent,\r\n\temail: EmailComponent,\r\n\tselect: SelectComponent\r\n};\r\n\r\n@Directive({\r\n\tselector: \"[dynamicField]\"\r\n})\r\nexport class DynamicFieldDirective implements Field, OnChanges, OnInit {\r\n\t@Input() config: FieldConfig;\r\n\r\n\t@Input() group: FormGroup;\r\n\r\n\tcomponent: ComponentRef<Field>;\r\n\r\n\tconstructor(private resolver: ComponentFactoryResolver, private container: ViewContainerRef) {}\r\n\r\n\tngOnChanges() {\r\n\t\tif (this.component) {\r\n\t\t\tthis.component.instance.config = this.config;\r\n\t\t\tthis.component.instance.group = this.group;\r\n\t\t}\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\tif (!components[this.config.subtype]) {\r\n\t\t\tconst supportedTypes = Object.keys(components).join(\", \");\r\n\t\t\tthrow new Error(\r\n\t\t\t\t`Trying to use an unsupported type (${this.config.subtype}).\r\n\t\t  Supported types: ${supportedTypes}`\r\n\t\t\t);\r\n\t\t}\r\n\t\tconst component = this.resolver.resolveComponentFactory<Field>(components[this.config.subtype]);\r\n\t\tthis.component = this.container.createComponent(component);\r\n\t\tthis.component.instance.config = this.config;\r\n\t\tthis.component.instance.group = this.group;\r\n\t}\r\n}\r\n",
    "import { Action } from \"@ngrx/store\";\r\n\r\nimport { FormSchemaModel } from \"../models\";\r\n\r\nexport enum FormsListActionTypes {\r\n\tFORMS_LIST = \"[FORM][LIST] FORMS_LIST\",\r\n\tFORMS_LIST_START = \"[FORM][LIST] FORMS_LIST_START\",\r\n\tFORMS_LIST_SUCCEED = \"[FORM][LIST] FORMS_LIST_SUCCEED\",\r\n\tFORMS_LIST_FAILED = \"[FORM][LIST] FORMS_LIST_FAILED\",\r\n\tADD_FORM_SCHEMA = \"[FORM][LIST] ADD_FORM_SCHEMA\",\r\n\tFORM_SCHEMA_UPDATE = \"[FORM][LIST] FORM_SCHEMA_UPDATE\",\r\n\tGET_FORM_SCHEMA = \"[FORM][LIST] GET_FORM_SCHEMA\",\r\n\tFORM_SCHEMA_FETCHED = \"[FORM][LIST] FORM_SCHEMA_FETCHED\"\r\n}\r\n\r\nexport class FormsListAction implements Action {\r\n\treadonly type = FormsListActionTypes.FORMS_LIST;\r\n}\r\nexport class FormsListStartAction implements Action {\r\n\treadonly type = FormsListActionTypes.FORMS_LIST_START;\r\n}\r\nexport class FormsListSucceedAction implements Action {\r\n\treadonly type = FormsListActionTypes.FORMS_LIST_SUCCEED;\r\n\tconstructor(public payload: FormSchemaModel[]) {}\r\n}\r\nexport class FormsListFailedAction implements Action {\r\n\treadonly type = FormsListActionTypes.FORMS_LIST_FAILED;\r\n}\r\nexport class UpdateFormSchemaAction implements Action {\r\n\treadonly type = FormsListActionTypes.FORM_SCHEMA_UPDATE;\r\n\tconstructor(public payload: FormSchemaModel) {}\r\n}\r\nexport class AddFormSchemaAction implements Action {\r\n\treadonly type = FormsListActionTypes.ADD_FORM_SCHEMA;\r\n\tconstructor(public payload: FormSchemaModel) {}\r\n}\r\nexport class GetFormSchemaAction implements Action {\r\n\treadonly type = FormsListActionTypes.GET_FORM_SCHEMA;\r\n\tconstructor(public payload: string) {}\r\n}\r\nexport class FormSchemaFechedAction implements Action {\r\n\treadonly type = FormsListActionTypes.FORM_SCHEMA_FETCHED;\r\n\tconstructor(public payload: FormSchemaModel) {}\r\n}\r\n\r\nexport type FormsListActions =\r\n\t| FormsListAction\r\n\t| FormsListStartAction\r\n\t| FormsListSucceedAction\r\n\t| FormsListFailedAction\r\n\t| UpdateFormSchemaAction\r\n\t| AddFormSchemaAction\r\n\t| GetFormSchemaAction\r\n\t| FormSchemaFechedAction;\r\n",
    "import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\n\r\nimport { FieldConfig, Field } from \"../../../models\";\r\n\r\n@Component({\r\n\tselector: \"ngs-form-control-text\",\r\n\ttemplate: `<mat-form-field fxFlexFill [formGroup]=\"group\">\r\n\r\n  <input matInput [id]=\"config.name\" [type]=\"config.inputType\" [placeholder]=\"config.title\" [formControlName]=\"config.name\">\r\n\r\n  <mat-error *ngIf=\"group.get(config.name).errors?.required\">\r\n    {{config.validator.required.message}}\r\n  </mat-error>\r\n  <mat-error *ngIf=\"group.get(config.name).errors?.minlength\">\r\n    {{config.validator.minlength.message}}\r\n  </mat-error>\r\n  <!-- <mat-error *ngIf=\"group.get(config.name).email?.minlength\">\r\n    {{config.validator.email.message}}\r\n  </mat-error> -->\r\n\r\n  <!-- <div *ngIf=\"form.get(config.name).invalid && (form.get(config.name).dirty || form.get(config.name).touched)\" class=\"alert alert-danger\">\r\n  </div> -->\r\n\r\n</mat-form-field>`,\r\n\tstyles: [`:host{display:block}.mat-form-field{width:100%}`]\r\n})\r\nexport class TextComponent implements Field {\r\n\tconfig: FieldConfig;\r\n\tgroup: FormGroup;\r\n\r\n\tconstructor() {}\r\n}\r\n",
    "import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\n\r\nimport { FieldConfig } from \"../../../models\";\r\n\r\n@Component({\r\n\tselector: \"ngs-form-control-number\",\r\n\ttemplate: `<div  [formGroup]=\"form\">\r\n    <mat-form-field fxFlexFill>\r\n        <input matInput [type]=\"schema.inputType\" [placeholder]=\"schema.title\" [formControlName]=\"schema.name\">\r\n    </mat-form-field>\r\n</div>`,\r\n\tstyles: [`:host{display:block}.mat-form-field{width:100%}`]\r\n})\r\nexport class NumberComponent implements OnInit {\r\n\t@Input() form: FormGroup;\r\n\t@Input() schema: FieldConfig;\r\n\tconstructor() {}\r\n\r\n\tngOnInit() {}\r\n}\r\n",
    "import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\n\r\nimport { FieldConfig, Field } from \"../../../models\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { MatTableDataSource } from \"@angular/material\";\r\nimport { SelectionModel } from \"@angular/cdk/collections\";\r\n\r\n@Component({\r\n\tselector: \"ngs-form-control-table\",\r\n\ttemplate: `<div class=\"example-container mat-elevation-z8\" *ngIf=\"ready\">\r\n    <mat-table #table [dataSource]=\"dataSource\">\r\n  \r\n      <ng-container matColumnDef=\"select\">\r\n        <mat-header-cell *matHeaderCellDef>\r\n          <mat-checkbox (change)=\"$event ? masterToggle() : null\"\r\n            [checked]=\"selection.hasValue() && isAllSelected()\"\r\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\">\r\n          </mat-checkbox>\r\n        </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let row\">\r\n          <mat-checkbox (click)=\"$event.stopPropagation()\"\r\n            (change)=\"$event ? selection.toggle(row) : null\"\r\n            [checked]=\"selection.isSelected(row)\">\r\n          </mat-checkbox>\r\n        </mat-cell>\r\n      </ng-container>\r\n\r\n      <div *ngFor=\"let col of filedDisplayedColumns\">\r\n        <ng-container  [matColumnDef]=\"col\">\r\n          <mat-header-cell *matHeaderCellDef> {{col}} </mat-header-cell>\r\n          <mat-cell *matCellDef=\"let element\"> {{element[col]}} </mat-cell>\r\n        </ng-container>\r\n      </div>\r\n        \r\n      <ng-container matColumnDef=\"actions\">\r\n        <mat-header-cell *matHeaderCellDef></mat-header-cell>\r\n        <mat-cell class='left-align' *matCellDef=\"let row\">\r\n          <button mat-icon-button>\r\n            <mat-icon aria-label=\"انتخاب\">arrow_back</mat-icon>\r\n          </button>\r\n        </mat-cell>\r\n      </ng-container>\r\n    \r\n      <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n      <mat-row *matRowDef=\"let row; columns: displayedColumns;\" (click)=\"selection.toggle(row)\"></mat-row>\r\n\r\n    </mat-table>\r\n  </div>\r\n\r\n\r\n<!-- <mat-form-field fxFlexFill [formGroup]=\"form\">\r\n  \r\n  <input matInput [id]=\"schema.name\" [type]=\"schema.inputType\" [placeholder]=\"schema.title\" [formControlName]=\"schema.name\">\r\n  \r\n  <mat-error *ngIf=\"form.get(schema.name).errors?.required\">\r\n    {{schema.validator.required.message}}\r\n  </mat-error>\r\n  <mat-error *ngIf=\"form.get(schema.name).errors?.minlength\">\r\n    {{schema.validator.minlength.message}}\r\n  </mat-error>\r\n  <mat-error *ngIf=\"form.get(schema.name).email?.minlength\">\r\n    {{schema.validator.email.message}}\r\n  </mat-error>\r\n</mat-form-field> -->\r\n  \r\n  <!-- <div *ngIf=\"form.get(schema.name).invalid && (form.get(schema.name).dirty || form.get(schema.name).touched)\" class=\"alert alert-danger\">\r\n  </div> -->`,\r\n\tstyles: [`:host{display:block}.mat-form-field{width:100%}`]\r\n})\r\nexport class TableComponent implements OnInit, Field {\r\n\tconfig: FieldConfig;\r\n\tgroup: FormGroup;\r\n\t@Input() form: FormGroup;\r\n\t@Input() schema: FieldConfig;\r\n\tready: boolean;\r\n\tdisplayedColumns: string[];\r\n\tfiledDisplayedColumns: string[];\r\n\tdataSource: MatTableDataSource<any>;\r\n\r\n\tselection = new SelectionModel<any>(true, []);\r\n\tconstructor(private http: HttpClient) {\r\n\t\tthis.ready = false;\r\n\t}\r\n\tngOnInit() {\r\n\t\tthis.http.get(this.schema.dataEndpoint).subscribe((data: any) => {\r\n\t\t\tdebugger;\r\n\t\t\tthis.ready = true;\r\n\t\t\tthis.displayedColumns = data.displayedColumns;\r\n\t\t\tthis.filedDisplayedColumns = data.filedDisplayedColumns;\r\n\t\t\tthis.dataSource = new MatTableDataSource<any>(data.dataSource);\r\n\t\t});\r\n\t}\r\n\r\n\t/** Whether the number of selected elements matches the total number of rows. */\r\n\tisAllSelected() {\r\n\t\tconst numSelected = this.selection.selected.length;\r\n\t\tthis.form.patchValue({\r\n\t\t\t[this.schema.name]: this.selection.selected\r\n\t\t});\r\n\t\tconst numRows = this.dataSource.data.length;\r\n\t\treturn numSelected === numRows;\r\n\t}\r\n\r\n\t/** Selects all rows if they are not all selected; otherwise clear selection. */\r\n\tmasterToggle() {\r\n\t\tthis.isAllSelected() ? this.selection.clear() : this.dataSource.data.forEach(row => this.selection.select(row));\r\n\t}\r\n}\r\n",
    "import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\n\r\nimport { FieldConfig, Field } from \"../../../models\";\r\n\r\n@Component({\r\n\tselector: \"ngs-form-control-color\",\r\n\ttemplate: `<div  [formGroup]=\"form\">\r\n<mat-form-field fxFlexFill>\r\n    <input matInput [type]=\"schema.inputType\" [placeholder]=\"schema.title\" [formControlName]=\"schema.name\">\r\n</mat-form-field>\r\n</div>`,\r\n\tstyles: [`:host{display:block}.mat-form-field{width:100%}`]\r\n})\r\nexport class ColorComponent implements Field {\r\n\tconfig: FieldConfig;\r\n\tgroup: FormGroup;\r\n\r\n\t@Input() form: FormGroup;\r\n\t@Input() schema: FieldConfig;\r\n\tconstructor() {}\r\n\r\n\tngOnInit() {}\r\n}\r\n",
    "import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\n\r\nimport { FieldConfig, Field } from \"../../../models\";\r\n\r\n@Component({\r\n\tselector: \"ngs-form-control-email\",\r\n\ttemplate: `<div  [formGroup]=\"group\">\r\n<mat-form-field fxFlexFill>\r\n    <input matInput [type]=\"config.inputType\" [placeholder]=\"config.title\" [formControlName]=\"config.name\">\r\n</mat-form-field>\r\n</div>`,\r\n\tstyles: [`:host{display:block}.mat-form-field{width:100%}`]\r\n})\r\nexport class EmailComponent implements Field {\r\n\tconfig: FieldConfig;\r\n\tgroup: FormGroup;\r\n\r\n\tconstructor() {}\r\n\r\n\tngOnInit() {}\r\n}\r\n",
    "import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\n\r\nimport { Field, FieldConfig } from \"../../../models\";\r\n\r\n@Component({\r\n\tselector: \"ngs-form-control-checkbox\",\r\n\ttemplate: `<div [formGroup]=\"group\">\r\n    <mat-checkbox [formControlName]=\"config.name\">\r\n        {{config.title}}\r\n    </mat-checkbox>\r\n</div>`,\r\n\tstyles: [`:host{display:block}.mat-form-field{width:100%}`]\r\n})\r\nexport class CheckboxComponent implements Field {\r\n\tconfig: FieldConfig;\r\n\tgroup: FormGroup;\r\n\r\n\tconstructor() {}\r\n}\r\n",
    "import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { FieldConfig, Field } from \"../../../models\";\r\nimport { FormGroup } from \"@angular/forms\";\r\n\r\n@Component({\r\n\tselector: \"ngs-form-control-select\",\r\n\ttemplate: `<div  [formGroup]=\"group\">\r\n<mat-form-field>\r\n    <mat-select [formControlName]=\"config.name\" [placeholder]=\"config.title\">\r\n      <mat-option *ngFor=\"let option of config.options\" [value]=\"option.value\">{{option.key}}</mat-option>\r\n    </mat-select>\r\n</mat-form-field>\r\n</div>`,\r\n\tstyles: [`:host{display:block}.mat-form-field{width:100%}`]\r\n})\r\nexport class SelectComponent implements Field {\r\n\tconfig: FieldConfig;\r\n\tgroup: FormGroup;\r\n\tconstructor() {}\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs/Rx\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\nimport { filter, map, withLatestFrom } from \"rxjs/operators\";\r\n\r\nimport { stringTemplate } from \"@soushians/shared\";\r\n\r\nimport { FormSchemaModel, AddFormApiModel, EditFormApiModel, FormListApiModel } from \"../models\";\r\nimport { FormConfigurationService } from \"./form-configuration.service\";\r\n\r\nimport { MainContainerState } from \"../main-container/main-container.reducers\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class FormService {\r\n\tresponseCache: AddFormApiModel.Response;\r\n\r\n\tconstructor(\r\n\t\tprivate http: HttpClient,\r\n\t\tprivate store: Store<MainContainerState>,\r\n\t\tprivate configurationService: FormConfigurationService\r\n\t) {}\r\n\r\n\tadd(data: AddFormApiModel.Request): Observable<FormSchemaModel> {\r\n\t\tconst model = new AddFormApiModel.Request(data);\r\n\t\treturn this.configurationService.config$\r\n\t\t\t.filter(config => config.endpoints.addForm != \"\")\r\n\t\t\t.take(1)\r\n\t\t\t.switchMap(config => this.http.post(config.endpoints.addForm, model.getRequestBody()))\r\n\t\t\t.map((response: AddFormApiModel.Response) => response.Result);\r\n\t}\r\n\tget(_id: string): Observable<FormSchemaModel> {\r\n\t\treturn this.configurationService.config$\r\n\t\t\t.filter(config => config.endpoints.getForm != \"\")\r\n\t\t\t.take(1)\r\n\t\t\t.switchMap(config => this.http.get(stringTemplate(config.endpoints.getForm, { _id })))\r\n\t\t\t.map((response: EditFormApiModel.Response) => response.Result);\r\n\t}\r\n\tgetList(): Observable<FormSchemaModel[]> {\r\n\t\treturn this.configurationService.config$\r\n\t\t\t.filter(config => config.endpoints.getList != \"\")\r\n\t\t\t.switchMap(config => this.http.get(config.endpoints.getList))\r\n\t\t\t.map((response: FormListApiModel.Response) => response.Result);\r\n\t}\r\n\tupdate(data: EditFormApiModel.Request): Observable<FormSchemaModel> {\r\n\t\tconst model = new EditFormApiModel.Request(data);\r\n\t\treturn this.configurationService.config$\r\n\t\t\t.filter(config => config.endpoints.editForm != \"\")\r\n\t\t\t.take(1)\r\n\t\t\t.switchMap(config => this.http.put(config.endpoints.editForm, model.getRequestBody()))\r\n\t\t\t.map((response: EditFormApiModel.Response) => response.Result);\r\n\t}\r\n\tdelete(_id: string) {\r\n\t\treturn this.configurationService.config$\r\n\t\t\t.filter(config => config.endpoints.deleteForm != \"\")\r\n\t\t\t.switchMap(config => this.http.get(config.endpoints.deleteForm));\r\n\t}\r\n\tselectFormById(_id: string): Observable<FormSchemaModel> {\r\n\t\tconst subject = new BehaviorSubject<FormSchemaModel>(undefined);\r\n\t\tthis.store\r\n\t\t\t.select(state => state.form.list.data)\r\n\t\t\t.pipe(filter(forms => forms != null), map(forms => forms.find(form => form._id == _id)))\r\n\t\t\t.subscribe(FormSchemaModel => subject.next(FormSchemaModel));\r\n\t\treturn subject.asObservable();\r\n\t}\r\n}\r\n",
    "import { BehaviorSubject } from \"rxjs\";\r\nimport { Inject, Injectable } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { getFormModuleConfig } from \"@soushians/config\";\r\n\r\nimport { FormModuleConfig } from \"../form.config\";\r\nimport { MODULE_CONFIG_TOKEN, MODULE_DEFAULT_CONFIG } from \"../form.config\";\r\nimport { MainContainerState } from \"../main-container\";\r\n\r\n@Injectable({\r\n\tprovidedIn: \"root\"\r\n})\r\nexport class FormConfigurationService {\r\n\tprivate _config: FormModuleConfig;\r\n\tget config() {\r\n\t\treturn this._config;\r\n\t}\r\n\tconfig$ = new BehaviorSubject(MODULE_DEFAULT_CONFIG);\r\n\r\n\tconstructor(@Inject(MODULE_CONFIG_TOKEN) configFile, private store: Store<MainContainerState>) {\r\n\t\tthis._config = Object.assign({}, MODULE_DEFAULT_CONFIG, configFile);\r\n\t\tthis.config$.next(this._config);\r\n\t\tthis.store.select(getFormModuleConfig).subscribe(userConfig => {\r\n\t\t\tif (!userConfig) return;\r\n\t\t\tthis._config = Object.assign({}, this._config, userConfig.Config);\r\n\t\t\tthis.config$.next(this._config);\r\n\t\t});\r\n\t}\r\n}\r\n",
    "import { FieldConfig } from \"./field-config.model\";\r\n\r\nexport class FormSchemaModel {\r\n\t_id: string;\r\n\tname: string;\r\n\tdescription: string;\r\n\tform: FieldConfig;\r\n\tevents = {\r\n\t\taccept: {\r\n\t\t\tshow: false,\r\n\t\t\ttext: \"ثبت\"\r\n\t\t},\r\n\t\tcancel: {\r\n\t\t\tshow: false,\r\n\t\t\ttext: \"انصراف\"\r\n\t\t}\r\n\t};\r\n\r\n\tconstructor() {\r\n\t\tthis.form = new FieldConfig(\"group\");\r\n\t}\r\n\tinit() {\r\n\t\tthis._id = (Math.random() * 10).toString();\r\n\t}\r\n}\r\n",
    "import { Validator } from \"./form-field-validator.model\";\r\n\r\nexport class FieldConfig {\r\n\tid: number;\r\n\ttype: \"group\" | \"array\" | \"control\";\r\n\tname: string;\r\n\tsubtype: string;\r\n\tdisabled?: boolean;\r\n\ttitle: string;\r\n\tparentType?: \"array\" | \"group\";\r\n\tformGroupPath?: string;\r\n\tpath?: string;\r\n\tinputType: \"select\" | \"text\" | \"number\" | \"email\" | \"color\" | \"checkbox\" | \"table\";\r\n\tvalue?: any;\r\n\torder?: number;\r\n\twidth?: number;\r\n\toptions: {\r\n\t\t[key: string]: string | number | boolean;\r\n\t}[];\r\n\tdataEndpoint?: string;\r\n\toptionsEndpoint: string;\r\n\tfields?: FieldConfig[];\r\n\tvalidator: Validator;\r\n\tconstructor(type: \"group\" | \"array\" | \"control\") {\r\n\t\tthis.type = type;\r\n\t\tif (type != \"control\") this.fields = [];\r\n\t\tthis.width = 3;\r\n\t\tthis.validator = new Validator();\r\n\t}\r\n}\r\n",
    "export interface validation {\r\n\tactive: boolean;\r\n\tmessage: string;\r\n\tvalue?: any;\r\n}\r\nexport class Validator {\r\n\trequired: validation;\r\n\tminlength: validation;\r\n\temail: validation;\r\n\r\n\tconstructor() {\r\n\t\tthis.required = {\r\n\t\t\tactive: false,\r\n\t\t\tmessage: \"این فیلد الزامی است\"\r\n\t\t};\r\n\t\tthis.minlength = {\r\n\t\t\tactive: false,\r\n\t\t\tmessage: \"حداقل تعداد کارکترها\",\r\n\t\t\tvalue: 5\r\n\t\t};\r\n\t\tthis.email = {\r\n\t\t\tactive: false,\r\n\t\t\tmessage: \"لطفا ایمیل صحیح وارد نمایید\"\r\n\t\t};\r\n\t}\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { FormSchemaModel } from \"../models\";\r\n\r\nexport namespace FormListApiModel {\r\n\texport class Request implements HttpRequestBaseModel<Request> {\r\n\t\tName: string;\r\n\t\tControls: object[];\r\n\t\tconstructor(initValue = {} as FormListApiModel.Request) {\r\n\t\t\tObject.keys(initValue).forEach((key) => (this[key] = initValue[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {\r\n\t\t\t\tName: this.Name,\r\n\t\t\t\tControls: this.Controls\r\n\t\t\t};\r\n\t\t}\r\n\t\tstatic get formGroup() {\r\n\t\t\treturn new FormGroup({\r\n\t\t\t\tName: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tControls: new FormGroup({})\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: FormSchemaModel[];\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { FormSchemaModel } from \"../models\";\r\n\r\nexport namespace EditFormApiModel {\r\n\texport class Request implements HttpRequestBaseModel<Request> {\r\n\t\t_id: string;\r\n\t\tname: string;\r\n\t\tform: any[];\r\n\t\tevents: any[];\r\n\t\tconstructor(initValue = {} as EditFormApiModel.Request) {\r\n\t\t\tObject.keys(initValue).forEach(key => (this[key] = initValue[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {\r\n\t\t\t\t_id: this._id,\r\n\t\t\t\tname: this.name,\r\n\t\t\t\tform: this.form,\r\n\t\t\t\tevents: this.events\r\n\t\t\t};\r\n\t\t}\r\n\t\tstatic get formGroup() {\r\n\t\t\treturn new FormGroup({\r\n\t\t\t\t_id: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tname: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tform: new FormControl({}),\r\n\t\t\t\tevents: new FormGroup({\r\n\t\t\t\t\taccept: new FormGroup({\r\n\t\t\t\t\t\tshow: new FormControl(false),\r\n\t\t\t\t\t\ttext: new FormControl(\"ثبت\")\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tcancel: new FormGroup({\r\n\t\t\t\t\t\tshow: new FormControl(false),\r\n\t\t\t\t\t\ttext: new FormControl(\"انصراف\")\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: FormSchemaModel;\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { FormSchemaModel } from \"../models\";\r\n\r\nexport namespace AddFormApiModel {\r\n\texport class Request implements HttpRequestBaseModel<Request> {\r\n\t\t_id: string;\r\n\t\tname: string;\r\n\t\tform: any[];\r\n\t\tevents: any[];\r\n\t\tconstructor(initValue = {} as AddFormApiModel.Request) {\r\n\t\t\tObject.keys(initValue).forEach(key => (this[key] = initValue[key]));\r\n\t\t}\r\n\r\n\t\tgetRequestBody() {\r\n\t\t\treturn {\r\n\t\t\t\tname: this.name,\r\n\t\t\t\tform: this.form,\r\n\t\t\t\tevents: this.events\r\n\t\t\t};\r\n\t\t}\r\n\t\tstatic get formGroup() {\r\n\t\t\treturn new FormGroup({\r\n\t\t\t\t_id: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tname: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\ttitle: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\tform: new FormControl({}),\r\n\t\t\t\tevents: new FormGroup({\r\n\t\t\t\t\taccept: new FormGroup({\r\n\t\t\t\t\t\tshow: new FormControl(false),\r\n\t\t\t\t\t\ttext: new FormControl(\"ثبت\")\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tcancel: new FormGroup({\r\n\t\t\t\t\t\tshow: new FormControl(false),\r\n\t\t\t\t\t\ttext: new FormControl(\"انصراف\")\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tResult: FormSchemaModel;\r\n\t\tconstructor() {}\r\n\t}\r\n}\r\n",
    "import { InjectionToken } from \"@angular/core\";\r\n\r\nexport interface FormModuleConfig {\r\n\tendpoints: {\r\n\t\taddForm: string;\r\n\t\teditForm: string;\r\n\t\tgetForm: string;\r\n\t\tgetList: string;\r\n\t\tdeleteForm: string;\r\n\t};\r\n}\r\nexport const MODULE_DEFAULT_CONFIG: FormModuleConfig = {\r\n\tendpoints: {\r\n\t\taddForm: \"\",\r\n\t\teditForm: \"\",\r\n\t\tgetForm: \"\",\r\n\t\tgetList: \"\",\r\n\t\tdeleteForm: \"\"\r\n\t}\r\n};\r\nexport const MODULE_CONFIG_TOKEN = new InjectionToken<FormModuleConfig>(\"FormModuleConfig\");\r\n"
  ],
  "names": [
    "NgModule",
    "ReactiveFormsModule",
    "MatSlideToggleModule",
    "MatRadioModule",
    "FlexLayoutModule",
    "MatDividerModule",
    "MatTabsModule",
    "MatFormFieldModule",
    "MatInputModule",
    "MatSelectModule",
    "MatTableModule",
    "MatCheckboxModule",
    "MatCardModule",
    "MatButtonModule",
    "MatIconModule",
    "MatSnackBarModule",
    "MatExpansionModule",
    "CommonModule",
    "RouterModule",
    "FormsModule",
    "HttpClientModule",
    "config",
    "tslib_1.__metadata",
    "map",
    "switchMap",
    "catchError",
    "Observable",
    "router",
    "Component",
    "store",
    "Store",
    "EventEmitter",
    "AddFormApiModel",
    "ActivatedRoute",
    "FormControl",
    "FormGroup",
    "FormArray",
    "list.reducer",
    "Directive",
    "Input",
    "Output",
    "ComponentFactoryResolver",
    "Compiler",
    "Validators",
    "takeUntil",
    "BehaviorSubject",
    "Subject",
    "MatTableDataSource",
    "SelectionModel",
    "Injectable",
    "FormSchemaModel",
    "EditFormApiModel",
    "stringTemplate",
    "http",
    "getFormModuleConfig",
    "InjectionToken"
  ],
  "mappings": "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"
}
